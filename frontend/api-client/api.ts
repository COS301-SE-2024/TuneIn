/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * TuneIn API
 * The API for the TuneIn application, handling all the backend logic and making it available to the frontend.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name = "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface CreateRoomDto
 */
export interface CreateRoomDto {
    /**
     * 
     * @type {string}
     * @memberof CreateRoomDto
     */
    roomName: string;
    /**
     * 
     * @type {string}
     * @memberof CreateRoomDto
     */
    description: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateRoomDto
     */
    isTemporary: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateRoomDto
     */
    isPrivate: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateRoomDto
     */
    isScheduled: boolean;
    /**
     * 
     * @type {Date}
     * @memberof CreateRoomDto
     */
    startDate: Date;
    /**
     * 
     * @type {Date}
     * @memberof CreateRoomDto
     */
    endDate: Date;
    /**
     * 
     * @type {string}
     * @memberof CreateRoomDto
     */
    language: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateRoomDto
     */
    hasExplicitContent: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateRoomDto
     */
    hasNsfwContent: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateRoomDto
     */
    roomImage: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateRoomDto
     */
    tags: Array<string>;
}
/**
 * 
 * @export
 * @interface LiveChatMessageDto
 */
export interface LiveChatMessageDto {
    /**
     * 
     * @type {string}
     * @memberof LiveChatMessageDto
     */
    messageBody: string;
    /**
     * 
     * @type {UserDto}
     * @memberof LiveChatMessageDto
     */
    sender: UserDto;
    /**
     * 
     * @type {string}
     * @memberof LiveChatMessageDto
     */
    roomID: string;
    /**
     * 
     * @type {Date}
     * @memberof LiveChatMessageDto
     */
    dateCreated: Date;
}
/**
 * 
 * @export
 * @interface LoginBody
 */
export interface LoginBody {
    /**
     * 
     * @type {string}
     * @memberof LoginBody
     */
    token: string;
}
/**
 * 
 * @export
 * @interface RegisterBody
 */
export interface RegisterBody {
    /**
     * 
     * @type {string}
     * @memberof RegisterBody
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterBody
     */
    userCognitoSub: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterBody
     */
    email: string;
}
/**
 * 
 * @export
 * @interface RoomDto
 */
export interface RoomDto {
    /**
     * 
     * @type {UserDto}
     * @memberof RoomDto
     */
    creator: UserDto;
    /**
     * 
     * @type {string}
     * @memberof RoomDto
     */
    roomID: string;
    /**
     * 
     * @type {number}
     * @memberof RoomDto
     */
    participantCount: number;
    /**
     * 
     * @type {string}
     * @memberof RoomDto
     */
    roomName: string;
    /**
     * 
     * @type {string}
     * @memberof RoomDto
     */
    description: string;
    /**
     * 
     * @type {boolean}
     * @memberof RoomDto
     */
    isTemporary: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RoomDto
     */
    isPrivate: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RoomDto
     */
    isScheduled: boolean;
    /**
     * 
     * @type {Date}
     * @memberof RoomDto
     */
    startDate: Date;
    /**
     * 
     * @type {Date}
     * @memberof RoomDto
     */
    endDate: Date;
    /**
     * 
     * @type {string}
     * @memberof RoomDto
     */
    language: string;
    /**
     * 
     * @type {boolean}
     * @memberof RoomDto
     */
    hasExplicitContent: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RoomDto
     */
    hasNsfwContent: boolean;
    /**
     * 
     * @type {string}
     * @memberof RoomDto
     */
    roomImage: string;
    /**
     * 
     * @type {SongInfoDto}
     * @memberof RoomDto
     */
    currentSong: SongInfoDto;
    /**
     * 
     * @type {Array<string>}
     * @memberof RoomDto
     */
    tags: Array<string>;
}
/**
 * 
 * @export
 * @interface SongInfoDto
 */
export interface SongInfoDto {
    /**
     * 
     * @type {string}
     * @memberof SongInfoDto
     */
    title: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SongInfoDto
     */
    artists: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SongInfoDto
     */
    cover: string;
    /**
     * 
     * @type {Date}
     * @memberof SongInfoDto
     */
    startTime: Date;
}
/**
 * 
 * @export
 * @interface UpdateRoomDto
 */
export interface UpdateRoomDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateRoomDto
     */
    roomName?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateRoomDto
     */
    description?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateRoomDto
     */
    isTemporary?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateRoomDto
     */
    isPrivate?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateRoomDto
     */
    isScheduled?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof UpdateRoomDto
     */
    startDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UpdateRoomDto
     */
    endDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof UpdateRoomDto
     */
    language?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateRoomDto
     */
    hasExplicitContent?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateRoomDto
     */
    hasNsfwContent?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UpdateRoomDto
     */
    roomImage?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateRoomDto
     */
    tags?: Array<string>;
}
/**
 * 
 * @export
 * @interface UpdateUserDto
 */
export interface UpdateUserDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    profileName?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    userID?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    profilePictureUrl?: string;
    /**
     * 
     * @type {any}
     * @memberof UpdateUserDto
     */
    followers?: any;
    /**
     * 
     * @type {any}
     * @memberof UpdateUserDto
     */
    following?: any;
    /**
     * 
     * @type {any}
     * @memberof UpdateUserDto
     */
    links?: any;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    bio?: string;
    /**
     * 
     * @type {SongInfoDto}
     * @memberof UpdateUserDto
     */
    currentSong?: SongInfoDto;
    /**
     * 
     * @type {any}
     * @memberof UpdateUserDto
     */
    favGenres?: any;
    /**
     * 
     * @type {any}
     * @memberof UpdateUserDto
     */
    favSongs?: any;
    /**
     * 
     * @type {any}
     * @memberof UpdateUserDto
     */
    favRooms?: any;
    /**
     * 
     * @type {any}
     * @memberof UpdateUserDto
     */
    recentRooms?: any;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    profileName: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    userID: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    profilePictureUrl: string;
    /**
     * 
     * @type {any}
     * @memberof UserDto
     */
    followers: any;
    /**
     * 
     * @type {any}
     * @memberof UserDto
     */
    following: any;
    /**
     * 
     * @type {any}
     * @memberof UserDto
     */
    links: any;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    bio: string;
    /**
     * 
     * @type {SongInfoDto}
     * @memberof UserDto
     */
    currentSong: SongInfoDto;
    /**
     * 
     * @type {any}
     * @memberof UserDto
     */
    favGenres: any;
    /**
     * 
     * @type {any}
     * @memberof UserDto
     */
    favSongs: any;
    /**
     * 
     * @type {any}
     * @memberof UserDto
     */
    favRooms: any;
    /**
     * 
     * @type {any}
     * @memberof UserDto
     */
    recentRooms: any;
}
/**
 * AuthApi - fetch parameter creator
 * @export
 */
export const AuthApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Login in the API using Cognito
         * @param {LoginBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(body: LoginBody, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling authControllerLogin.');
            }
            const localVarPath = `/auth/login`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"LoginBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register a new user in the API using Cognito
         * @param {RegisterBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRegister(body: RegisterBody, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling authControllerRegister.');
            }
            const localVarPath = `/auth/register`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RegisterBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Callback for Spotify Auth
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotifyAuthControllerHandleSpotifyAuthCallback(code: string, options: any = {}): FetchArgs {
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new RequiredError('code','Required parameter code was null or undefined when calling spotifyAuthControllerHandleSpotifyAuthCallback.');
            }
            const localVarPath = `/auth/spotify/callback`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Manually Refresh Spotify Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotifyAuthControllerHandleSpotifyRefresh(options: any = {}): FetchArgs {
            const localVarPath = `/auth/spotify/refresh`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Login in the API using Cognito
         * @param {LoginBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(body: LoginBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).authControllerLogin(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Register a new user in the API using Cognito
         * @param {RegisterBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRegister(body: RegisterBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RegisterBody> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).authControllerRegister(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Callback for Spotify Auth
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotifyAuthControllerHandleSpotifyAuthCallback(code: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).spotifyAuthControllerHandleSpotifyAuthCallback(code, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Manually Refresh Spotify Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotifyAuthControllerHandleSpotifyRefresh(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).spotifyAuthControllerHandleSpotifyRefresh(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Login in the API using Cognito
         * @param {LoginBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(body: LoginBody, options?: any) {
            return AuthApiFp(configuration).authControllerLogin(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Register a new user in the API using Cognito
         * @param {RegisterBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRegister(body: RegisterBody, options?: any) {
            return AuthApiFp(configuration).authControllerRegister(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Callback for Spotify Auth
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotifyAuthControllerHandleSpotifyAuthCallback(code: string, options?: any) {
            return AuthApiFp(configuration).spotifyAuthControllerHandleSpotifyAuthCallback(code, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Manually Refresh Spotify Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotifyAuthControllerHandleSpotifyRefresh(options?: any) {
            return AuthApiFp(configuration).spotifyAuthControllerHandleSpotifyRefresh(options)(fetch, basePath);
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Login in the API using Cognito
     * @param {LoginBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLogin(body: LoginBody, options?: any) {
        return AuthApiFp(this.configuration).authControllerLogin(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Register a new user in the API using Cognito
     * @param {RegisterBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerRegister(body: RegisterBody, options?: any) {
        return AuthApiFp(this.configuration).authControllerRegister(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Callback for Spotify Auth
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public spotifyAuthControllerHandleSpotifyAuthCallback(code: string, options?: any) {
        return AuthApiFp(this.configuration).spotifyAuthControllerHandleSpotifyAuthCallback(code, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Manually Refresh Spotify Auth Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public spotifyAuthControllerHandleSpotifyRefresh(options?: any) {
        return AuthApiFp(this.configuration).spotifyAuthControllerHandleSpotifyRefresh(options)(this.fetch, this.basePath);
    }

}
/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Hello World!
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello(options: any = {}): FetchArgs {
            const localVarPath = `/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload a file to our AWS S3 storage bucket
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerUploadFile(options: any = {}): FetchArgs {
            const localVarPath = `/upload`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Hello World!
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).appControllerGetHello(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Upload a file to our AWS S3 storage bucket
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerUploadFile(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).appControllerUploadFile(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Hello World!
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello(options?: any) {
            return DefaultApiFp(configuration).appControllerGetHello(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Upload a file to our AWS S3 storage bucket
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerUploadFile(options?: any) {
            return DefaultApiFp(configuration).appControllerUploadFile(options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Hello World!
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appControllerGetHello(options?: any) {
        return DefaultApiFp(this.configuration).appControllerGetHello(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Upload a file to our AWS S3 storage bucket
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appControllerUploadFile(options?: any) {
        return DefaultApiFp(this.configuration).appControllerUploadFile(options)(this.fetch, this.basePath);
    }

}
/**
 * RoomsApi - fetch parameter creator
 * @export
 */
export const RoomsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a song to the queue of a room
         * @param {string} body 
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerAddSongToQueue(body: string, roomID: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling roomsControllerAddSongToQueue.');
            }
            // verify required parameter 'roomID' is not null or undefined
            if (roomID === null || roomID === undefined) {
                throw new RequiredError('roomID','Required parameter roomID was null or undefined when calling roomsControllerAddSongToQueue.');
            }
            const localVarPath = `/rooms/{roomID}/songs`
                .replace(`{${"roomID"}}`, encodeURIComponent(String(roomID)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bookmark a room
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerBookmarkRoom(roomID: string, options: any = {}): FetchArgs {
            // verify required parameter 'roomID' is not null or undefined
            if (roomID === null || roomID === undefined) {
                throw new RequiredError('roomID','Required parameter roomID was null or undefined when calling roomsControllerBookmarkRoom.');
            }
            const localVarPath = `/rooms/{roomID}/bookmark`
                .replace(`{${"roomID"}}`, encodeURIComponent(String(roomID)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerClearRoomQueue(roomID: string, options: any = {}): FetchArgs {
            // verify required parameter 'roomID' is not null or undefined
            if (roomID === null || roomID === undefined) {
                throw new RequiredError('roomID','Required parameter roomID was null or undefined when calling roomsControllerClearRoomQueue.');
            }
            const localVarPath = `/rooms/{roomID}/songs`
                .replace(`{${"roomID"}}`, encodeURIComponent(String(roomID)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a room
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerDeleteRoom(roomID: string, options: any = {}): FetchArgs {
            // verify required parameter 'roomID' is not null or undefined
            if (roomID === null || roomID === undefined) {
                throw new RequiredError('roomID','Required parameter roomID was null or undefined when calling roomsControllerDeleteRoom.');
            }
            const localVarPath = `/rooms/{roomID}`
                .replace(`{${"roomID"}}`, encodeURIComponent(String(roomID)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerGetCurrentSong(roomID: string, options: any = {}): FetchArgs {
            // verify required parameter 'roomID' is not null or undefined
            if (roomID === null || roomID === undefined) {
                throw new RequiredError('roomID','Required parameter roomID was null or undefined when calling roomsControllerGetCurrentSong.');
            }
            const localVarPath = `/rooms/{roomID}/songs/current`
                .replace(`{${"roomID"}}`, encodeURIComponent(String(roomID)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get room's chat history
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerGetLiveChatHistory(roomID: string, options: any = {}): FetchArgs {
            // verify required parameter 'roomID' is not null or undefined
            if (roomID === null || roomID === undefined) {
                throw new RequiredError('roomID','Required parameter roomID was null or undefined when calling roomsControllerGetLiveChatHistory.');
            }
            const localVarPath = `/rooms/{roomID}/chat/history`
                .replace(`{${"roomID"}}`, encodeURIComponent(String(roomID)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get newly created public rooms
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerGetNewRooms(none: any, options: any = {}): FetchArgs {
            // verify required parameter 'none' is not null or undefined
            if (none === null || none === undefined) {
                throw new RequiredError('none','Required parameter none was null or undefined when calling roomsControllerGetNewRooms.');
            }
            const localVarPath = `/rooms/new`
                .replace(`{${"none"}}`, encodeURIComponent(String(none)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get room info
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerGetRoomInfo(roomID: string, options: any = {}): FetchArgs {
            // verify required parameter 'roomID' is not null or undefined
            if (roomID === null || roomID === undefined) {
                throw new RequiredError('roomID','Required parameter roomID was null or undefined when calling roomsControllerGetRoomInfo.');
            }
            const localVarPath = `/rooms/{roomID}`
                .replace(`{${"roomID"}}`, encodeURIComponent(String(roomID)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the queue of a room
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerGetRoomQueue(roomID: string, options: any = {}): FetchArgs {
            // verify required parameter 'roomID' is not null or undefined
            if (roomID === null || roomID === undefined) {
                throw new RequiredError('roomID','Required parameter roomID was null or undefined when calling roomsControllerGetRoomQueue.');
            }
            const localVarPath = `/rooms/{roomID}/songs`
                .replace(`{${"roomID"}}`, encodeURIComponent(String(roomID)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get users in a room
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerGetRoomUsers(roomID: string, options: any = {}): FetchArgs {
            // verify required parameter 'roomID' is not null or undefined
            if (roomID === null || roomID === undefined) {
                throw new RequiredError('roomID','Required parameter roomID was null or undefined when calling roomsControllerGetRoomUsers.');
            }
            const localVarPath = `/rooms/{roomID}/users`
                .replace(`{${"roomID"}}`, encodeURIComponent(String(roomID)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Join a room
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerJoinRoom(roomID: string, options: any = {}): FetchArgs {
            // verify required parameter 'roomID' is not null or undefined
            if (roomID === null || roomID === undefined) {
                throw new RequiredError('roomID','Required parameter roomID was null or undefined when calling roomsControllerJoinRoom.');
            }
            const localVarPath = `/rooms/{roomID}/join`
                .replace(`{${"roomID"}}`, encodeURIComponent(String(roomID)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Leave a room
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerLeaveRoom(roomID: string, options: any = {}): FetchArgs {
            // verify required parameter 'roomID' is not null or undefined
            if (roomID === null || roomID === undefined) {
                throw new RequiredError('roomID','Required parameter roomID was null or undefined when calling roomsControllerLeaveRoom.');
            }
            const localVarPath = `/rooms/{roomID}/leave`
                .replace(`{${"roomID"}}`, encodeURIComponent(String(roomID)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unbookmark a room
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerUnbookmarkRoom(roomID: string, options: any = {}): FetchArgs {
            // verify required parameter 'roomID' is not null or undefined
            if (roomID === null || roomID === undefined) {
                throw new RequiredError('roomID','Required parameter roomID was null or undefined when calling roomsControllerUnbookmarkRoom.');
            }
            const localVarPath = `/rooms/{roomID}/unbookmark`
                .replace(`{${"roomID"}}`, encodeURIComponent(String(roomID)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateRoomDto} body 
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerUpdateRoom(body: UpdateRoomDto, roomID: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling roomsControllerUpdateRoom.');
            }
            // verify required parameter 'roomID' is not null or undefined
            if (roomID === null || roomID === undefined) {
                throw new RequiredError('roomID','Required parameter roomID was null or undefined when calling roomsControllerUpdateRoom.');
            }
            const localVarPath = `/rooms/{roomID}`
                .replace(`{${"roomID"}}`, encodeURIComponent(String(roomID)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateRoomDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update room info
         * @param {UpdateRoomDto} body 
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerUpdateRoomInfo(body: UpdateRoomDto, roomID: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling roomsControllerUpdateRoomInfo.');
            }
            // verify required parameter 'roomID' is not null or undefined
            if (roomID === null || roomID === undefined) {
                throw new RequiredError('roomID','Required parameter roomID was null or undefined when calling roomsControllerUpdateRoomInfo.');
            }
            const localVarPath = `/rooms/{roomID}`
                .replace(`{${"roomID"}}`, encodeURIComponent(String(roomID)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateRoomDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoomsApi - functional programming interface
 * @export
 */
export const RoomsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a song to the queue of a room
         * @param {string} body 
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerAddSongToQueue(body: string, roomID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = RoomsApiFetchParamCreator(configuration).roomsControllerAddSongToQueue(body, roomID, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Bookmark a room
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerBookmarkRoom(roomID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = RoomsApiFetchParamCreator(configuration).roomsControllerBookmarkRoom(roomID, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerClearRoomQueue(roomID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = RoomsApiFetchParamCreator(configuration).roomsControllerClearRoomQueue(roomID, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a room
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerDeleteRoom(roomID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {
            const localVarFetchArgs = RoomsApiFetchParamCreator(configuration).roomsControllerDeleteRoom(roomID, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerGetCurrentSong(roomID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = RoomsApiFetchParamCreator(configuration).roomsControllerGetCurrentSong(roomID, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get room's chat history
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerGetLiveChatHistory(roomID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<LiveChatMessageDto>> {
            const localVarFetchArgs = RoomsApiFetchParamCreator(configuration).roomsControllerGetLiveChatHistory(roomID, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get newly created public rooms
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerGetNewRooms(none: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<RoomDto>> {
            const localVarFetchArgs = RoomsApiFetchParamCreator(configuration).roomsControllerGetNewRooms(none, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get room info
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerGetRoomInfo(roomID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RoomDto> {
            const localVarFetchArgs = RoomsApiFetchParamCreator(configuration).roomsControllerGetRoomInfo(roomID, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get the queue of a room
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerGetRoomQueue(roomID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = RoomsApiFetchParamCreator(configuration).roomsControllerGetRoomQueue(roomID, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get users in a room
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerGetRoomUsers(roomID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<UserDto>> {
            const localVarFetchArgs = RoomsApiFetchParamCreator(configuration).roomsControllerGetRoomUsers(roomID, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Join a room
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerJoinRoom(roomID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {
            const localVarFetchArgs = RoomsApiFetchParamCreator(configuration).roomsControllerJoinRoom(roomID, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Leave a room
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerLeaveRoom(roomID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {
            const localVarFetchArgs = RoomsApiFetchParamCreator(configuration).roomsControllerLeaveRoom(roomID, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Unbookmark a room
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerUnbookmarkRoom(roomID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = RoomsApiFetchParamCreator(configuration).roomsControllerUnbookmarkRoom(roomID, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UpdateRoomDto} body 
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerUpdateRoom(body: UpdateRoomDto, roomID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = RoomsApiFetchParamCreator(configuration).roomsControllerUpdateRoom(body, roomID, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update room info
         * @param {UpdateRoomDto} body 
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerUpdateRoomInfo(body: UpdateRoomDto, roomID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RoomDto> {
            const localVarFetchArgs = RoomsApiFetchParamCreator(configuration).roomsControllerUpdateRoomInfo(body, roomID, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * RoomsApi - factory interface
 * @export
 */
export const RoomsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Add a song to the queue of a room
         * @param {string} body 
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerAddSongToQueue(body: string, roomID: string, options?: any) {
            return RoomsApiFp(configuration).roomsControllerAddSongToQueue(body, roomID, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Bookmark a room
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerBookmarkRoom(roomID: string, options?: any) {
            return RoomsApiFp(configuration).roomsControllerBookmarkRoom(roomID, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerClearRoomQueue(roomID: string, options?: any) {
            return RoomsApiFp(configuration).roomsControllerClearRoomQueue(roomID, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a room
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerDeleteRoom(roomID: string, options?: any) {
            return RoomsApiFp(configuration).roomsControllerDeleteRoom(roomID, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerGetCurrentSong(roomID: string, options?: any) {
            return RoomsApiFp(configuration).roomsControllerGetCurrentSong(roomID, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get room's chat history
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerGetLiveChatHistory(roomID: string, options?: any) {
            return RoomsApiFp(configuration).roomsControllerGetLiveChatHistory(roomID, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get newly created public rooms
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerGetNewRooms(none: any, options?: any) {
            return RoomsApiFp(configuration).roomsControllerGetNewRooms(none, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get room info
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerGetRoomInfo(roomID: string, options?: any) {
            return RoomsApiFp(configuration).roomsControllerGetRoomInfo(roomID, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get the queue of a room
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerGetRoomQueue(roomID: string, options?: any) {
            return RoomsApiFp(configuration).roomsControllerGetRoomQueue(roomID, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get users in a room
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerGetRoomUsers(roomID: string, options?: any) {
            return RoomsApiFp(configuration).roomsControllerGetRoomUsers(roomID, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Join a room
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerJoinRoom(roomID: string, options?: any) {
            return RoomsApiFp(configuration).roomsControllerJoinRoom(roomID, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Leave a room
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerLeaveRoom(roomID: string, options?: any) {
            return RoomsApiFp(configuration).roomsControllerLeaveRoom(roomID, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Unbookmark a room
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerUnbookmarkRoom(roomID: string, options?: any) {
            return RoomsApiFp(configuration).roomsControllerUnbookmarkRoom(roomID, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UpdateRoomDto} body 
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerUpdateRoom(body: UpdateRoomDto, roomID: string, options?: any) {
            return RoomsApiFp(configuration).roomsControllerUpdateRoom(body, roomID, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update room info
         * @param {UpdateRoomDto} body 
         * @param {string} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsControllerUpdateRoomInfo(body: UpdateRoomDto, roomID: string, options?: any) {
            return RoomsApiFp(configuration).roomsControllerUpdateRoomInfo(body, roomID, options)(fetch, basePath);
        },
    };
};

/**
 * RoomsApi - object-oriented interface
 * @export
 * @class RoomsApi
 * @extends {BaseAPI}
 */
export class RoomsApi extends BaseAPI {
    /**
     * 
     * @summary Add a song to the queue of a room
     * @param {string} body 
     * @param {string} roomID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomsControllerAddSongToQueue(body: string, roomID: string, options?: any) {
        return RoomsApiFp(this.configuration).roomsControllerAddSongToQueue(body, roomID, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Bookmark a room
     * @param {string} roomID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomsControllerBookmarkRoom(roomID: string, options?: any) {
        return RoomsApiFp(this.configuration).roomsControllerBookmarkRoom(roomID, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} roomID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomsControllerClearRoomQueue(roomID: string, options?: any) {
        return RoomsApiFp(this.configuration).roomsControllerClearRoomQueue(roomID, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a room
     * @param {string} roomID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomsControllerDeleteRoom(roomID: string, options?: any) {
        return RoomsApiFp(this.configuration).roomsControllerDeleteRoom(roomID, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} roomID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomsControllerGetCurrentSong(roomID: string, options?: any) {
        return RoomsApiFp(this.configuration).roomsControllerGetCurrentSong(roomID, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get room's chat history
     * @param {string} roomID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomsControllerGetLiveChatHistory(roomID: string, options?: any) {
        return RoomsApiFp(this.configuration).roomsControllerGetLiveChatHistory(roomID, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get newly created public rooms
     * @param {any} none 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomsControllerGetNewRooms(none: any, options?: any) {
        return RoomsApiFp(this.configuration).roomsControllerGetNewRooms(none, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get room info
     * @param {string} roomID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomsControllerGetRoomInfo(roomID: string, options?: any) {
        return RoomsApiFp(this.configuration).roomsControllerGetRoomInfo(roomID, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get the queue of a room
     * @param {string} roomID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomsControllerGetRoomQueue(roomID: string, options?: any) {
        return RoomsApiFp(this.configuration).roomsControllerGetRoomQueue(roomID, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get users in a room
     * @param {string} roomID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomsControllerGetRoomUsers(roomID: string, options?: any) {
        return RoomsApiFp(this.configuration).roomsControllerGetRoomUsers(roomID, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Join a room
     * @param {string} roomID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomsControllerJoinRoom(roomID: string, options?: any) {
        return RoomsApiFp(this.configuration).roomsControllerJoinRoom(roomID, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Leave a room
     * @param {string} roomID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomsControllerLeaveRoom(roomID: string, options?: any) {
        return RoomsApiFp(this.configuration).roomsControllerLeaveRoom(roomID, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Unbookmark a room
     * @param {string} roomID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomsControllerUnbookmarkRoom(roomID: string, options?: any) {
        return RoomsApiFp(this.configuration).roomsControllerUnbookmarkRoom(roomID, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UpdateRoomDto} body 
     * @param {string} roomID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomsControllerUpdateRoom(body: UpdateRoomDto, roomID: string, options?: any) {
        return RoomsApiFp(this.configuration).roomsControllerUpdateRoom(body, roomID, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update room info
     * @param {UpdateRoomDto} body 
     * @param {string} roomID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomsControllerUpdateRoomInfo(body: UpdateRoomDto, roomID: string, options?: any) {
        return RoomsApiFp(this.configuration).roomsControllerUpdateRoomInfo(body, roomID, options)(this.fetch, this.basePath);
    }

}
/**
 * UsersApi - fetch parameter creator
 * @export
 */
export const UsersApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new room
         * @param {CreateRoomDto} body 
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreateRoom(body: CreateRoomDto, none: any, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling usersControllerCreateRoom.');
            }
            // verify required parameter 'none' is not null or undefined
            if (none === null || none === undefined) {
                throw new RequiredError('none','Required parameter none was null or undefined when calling usersControllerCreateRoom.');
            }
            const localVarPath = `/users/rooms`
                .replace(`{${"none"}}`, encodeURIComponent(String(none)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateRoomDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new room
         * @param {CreateRoomDto} body 
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreateRoom_1(body: CreateRoomDto, none: any, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling usersControllerCreateRoom_1.');
            }
            // verify required parameter 'none' is not null or undefined
            if (none === null || none === undefined) {
                throw new RequiredError('none','Required parameter none was null or undefined when calling usersControllerCreateRoom_1.');
            }
            const localVarPath = `/users/rooms`
                .replace(`{${"none"}}`, encodeURIComponent(String(none)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateRoomDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Follow the given user
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFollowUser(username: string, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling usersControllerFollowUser.');
            }
            const localVarPath = `/users/{username}/follow`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Follow the given user
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFollowUser_2(username: string, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling usersControllerFollowUser_2.');
            }
            const localVarPath = `/users/{username}/follow`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the authorized user's bookmarks
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetBookmarks(none: any, options: any = {}): FetchArgs {
            // verify required parameter 'none' is not null or undefined
            if (none === null || none === undefined) {
                throw new RequiredError('none','Required parameter none was null or undefined when calling usersControllerGetBookmarks.');
            }
            const localVarPath = `/users/bookmarks`
                .replace(`{${"none"}}`, encodeURIComponent(String(none)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the authorized user's bookmarks
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetBookmarks_3(none: any, options: any = {}): FetchArgs {
            // verify required parameter 'none' is not null or undefined
            if (none === null || none === undefined) {
                throw new RequiredError('none','Required parameter none was null or undefined when calling usersControllerGetBookmarks_3.');
            }
            const localVarPath = `/users/bookmarks`
                .replace(`{${"none"}}`, encodeURIComponent(String(none)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a user's followers
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetFollowers(none: any, options: any = {}): FetchArgs {
            // verify required parameter 'none' is not null or undefined
            if (none === null || none === undefined) {
                throw new RequiredError('none','Required parameter none was null or undefined when calling usersControllerGetFollowers.');
            }
            const localVarPath = `/users/followers`
                .replace(`{${"none"}}`, encodeURIComponent(String(none)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a user's followers
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetFollowers_4(none: any, options: any = {}): FetchArgs {
            // verify required parameter 'none' is not null or undefined
            if (none === null || none === undefined) {
                throw new RequiredError('none','Required parameter none was null or undefined when calling usersControllerGetFollowers_4.');
            }
            const localVarPath = `/users/followers`
                .replace(`{${"none"}}`, encodeURIComponent(String(none)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a user's following
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetFollowing(none: any, options: any = {}): FetchArgs {
            // verify required parameter 'none' is not null or undefined
            if (none === null || none === undefined) {
                throw new RequiredError('none','Required parameter none was null or undefined when calling usersControllerGetFollowing.');
            }
            const localVarPath = `/users/following`
                .replace(`{${"none"}}`, encodeURIComponent(String(none)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a user's following
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetFollowing_5(none: any, options: any = {}): FetchArgs {
            // verify required parameter 'none' is not null or undefined
            if (none === null || none === undefined) {
                throw new RequiredError('none','Required parameter none was null or undefined when calling usersControllerGetFollowing_5.');
            }
            const localVarPath = `/users/following`
                .replace(`{${"none"}}`, encodeURIComponent(String(none)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user profile info by username
         * @param {string} username The username of the user to fetch profile info for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetProfileByUsername(username: string, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling usersControllerGetProfileByUsername.');
            }
            const localVarPath = `/users/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user profile info by username
         * @param {string} username The username of the user to fetch profile info for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetProfileByUsername_6(username: string, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling usersControllerGetProfileByUsername_6.');
            }
            const localVarPath = `/users/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a user's recent rooms
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetRecentRooms(none: any, options: any = {}): FetchArgs {
            // verify required parameter 'none' is not null or undefined
            if (none === null || none === undefined) {
                throw new RequiredError('none','Required parameter none was null or undefined when calling usersControllerGetRecentRooms.');
            }
            const localVarPath = `/users/rooms/recent`
                .replace(`{${"none"}}`, encodeURIComponent(String(none)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a user's recent rooms
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetRecentRooms_7(none: any, options: any = {}): FetchArgs {
            // verify required parameter 'none' is not null or undefined
            if (none === null || none === undefined) {
                throw new RequiredError('none','Required parameter none was null or undefined when calling usersControllerGetRecentRooms_7.');
            }
            const localVarPath = `/users/rooms/recent`
                .replace(`{${"none"}}`, encodeURIComponent(String(none)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a user's recommended rooms
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetRecommendedRooms(none: any, options: any = {}): FetchArgs {
            // verify required parameter 'none' is not null or undefined
            if (none === null || none === undefined) {
                throw new RequiredError('none','Required parameter none was null or undefined when calling usersControllerGetRecommendedRooms.');
            }
            const localVarPath = `/users/rooms/foryou`
                .replace(`{${"none"}}`, encodeURIComponent(String(none)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a user's recommended rooms
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetRecommendedRooms_8(none: any, options: any = {}): FetchArgs {
            // verify required parameter 'none' is not null or undefined
            if (none === null || none === undefined) {
                throw new RequiredError('none','Required parameter none was null or undefined when calling usersControllerGetRecommendedRooms_8.');
            }
            const localVarPath = `/users/rooms/foryou`
                .replace(`{${"none"}}`, encodeURIComponent(String(none)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a user's friends
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUserFriends(none: any, options: any = {}): FetchArgs {
            // verify required parameter 'none' is not null or undefined
            if (none === null || none === undefined) {
                throw new RequiredError('none','Required parameter none was null or undefined when calling usersControllerGetUserFriends.');
            }
            const localVarPath = `/users/friends`
                .replace(`{${"none"}}`, encodeURIComponent(String(none)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a user's friends
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUserFriends_9(none: any, options: any = {}): FetchArgs {
            // verify required parameter 'none' is not null or undefined
            if (none === null || none === undefined) {
                throw new RequiredError('none','Required parameter none was null or undefined when calling usersControllerGetUserFriends_9.');
            }
            const localVarPath = `/users/friends`
                .replace(`{${"none"}}`, encodeURIComponent(String(none)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUserInfo(options: any = {}): FetchArgs {
            const localVarPath = `/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUserInfo_10(options: any = {}): FetchArgs {
            const localVarPath = `/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a user's rooms
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUserRooms(none: any, options: any = {}): FetchArgs {
            // verify required parameter 'none' is not null or undefined
            if (none === null || none === undefined) {
                throw new RequiredError('none','Required parameter none was null or undefined when calling usersControllerGetUserRooms.');
            }
            const localVarPath = `/users/rooms`
                .replace(`{${"none"}}`, encodeURIComponent(String(none)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a user's rooms
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUserRooms_11(none: any, options: any = {}): FetchArgs {
            // verify required parameter 'none' is not null or undefined
            if (none === null || none === undefined) {
                throw new RequiredError('none','Required parameter none was null or undefined when calling usersControllerGetUserRooms_11.');
            }
            const localVarPath = `/users/rooms`
                .replace(`{${"none"}}`, encodeURIComponent(String(none)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update user's profile info
         * @param {UpdateUserDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerPatchProfile(body: UpdateUserDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling usersControllerPatchProfile.');
            }
            const localVarPath = `/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateUserDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update user's profile info
         * @param {UpdateUserDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerPatchProfile_12(body: UpdateUserDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling usersControllerPatchProfile_12.');
            }
            const localVarPath = `/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateUserDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update user's profile info
         * @param {UpdateUserDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerPutProfile(body: UpdateUserDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling usersControllerPutProfile.');
            }
            const localVarPath = `/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateUserDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update user's profile info
         * @param {UpdateUserDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerPutProfile_13(body: UpdateUserDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling usersControllerPutProfile_13.');
            }
            const localVarPath = `/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateUserDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unfollow the given user
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUnfollowUser(username: string, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling usersControllerUnfollowUser.');
            }
            const localVarPath = `/users/{username}/unfollow`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unfollow the given user
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUnfollowUser_14(username: string, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling usersControllerUnfollowUser_14.');
            }
            const localVarPath = `/users/{username}/unfollow`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new room
         * @param {CreateRoomDto} body 
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreateRoom(body: CreateRoomDto, none: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RoomDto> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerCreateRoom(body, none, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Create a new room
         * @param {CreateRoomDto} body 
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreateRoom_1(body: CreateRoomDto, none: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RoomDto> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerCreateRoom_1(body, none, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Follow the given user
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFollowUser(username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerFollowUser(username, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Follow the given user
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFollowUser_2(username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerFollowUser_2(username, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get the authorized user's bookmarks
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetBookmarks(none: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<RoomDto>> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerGetBookmarks(none, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get the authorized user's bookmarks
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetBookmarks_3(none: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<RoomDto>> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerGetBookmarks_3(none, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a user's followers
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetFollowers(none: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<UserDto>> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerGetFollowers(none, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a user's followers
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetFollowers_4(none: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<UserDto>> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerGetFollowers_4(none, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a user's following
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetFollowing(none: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<UserDto>> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerGetFollowing(none, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a user's following
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetFollowing_5(none: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<UserDto>> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerGetFollowing_5(none, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get user profile info by username
         * @param {string} username The username of the user to fetch profile info for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetProfileByUsername(username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserDto> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerGetProfileByUsername(username, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get user profile info by username
         * @param {string} username The username of the user to fetch profile info for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetProfileByUsername_6(username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserDto> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerGetProfileByUsername_6(username, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a user's recent rooms
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetRecentRooms(none: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<RoomDto>> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerGetRecentRooms(none, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a user's recent rooms
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetRecentRooms_7(none: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<RoomDto>> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerGetRecentRooms_7(none, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a user's recommended rooms
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetRecommendedRooms(none: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<RoomDto>> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerGetRecommendedRooms(none, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a user's recommended rooms
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetRecommendedRooms_8(none: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<RoomDto>> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerGetRecommendedRooms_8(none, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a user's friends
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUserFriends(none: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<UserDto>> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerGetUserFriends(none, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a user's friends
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUserFriends_9(none: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<UserDto>> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerGetUserFriends_9(none, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUserInfo(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerGetUserInfo(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUserInfo_10(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerGetUserInfo_10(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a user's rooms
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUserRooms(none: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<RoomDto>> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerGetUserRooms(none, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a user's rooms
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUserRooms_11(none: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<RoomDto>> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerGetUserRooms_11(none, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update user's profile info
         * @param {UpdateUserDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerPatchProfile(body: UpdateUserDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserDto> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerPatchProfile(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update user's profile info
         * @param {UpdateUserDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerPatchProfile_12(body: UpdateUserDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserDto> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerPatchProfile_12(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update user's profile info
         * @param {UpdateUserDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerPutProfile(body: UpdateUserDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserDto> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerPutProfile(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update user's profile info
         * @param {UpdateUserDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerPutProfile_13(body: UpdateUserDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserDto> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerPutProfile_13(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Unfollow the given user
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUnfollowUser(username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerUnfollowUser(username, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Unfollow the given user
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUnfollowUser_14(username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersControllerUnfollowUser_14(username, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a new room
         * @param {CreateRoomDto} body 
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreateRoom(body: CreateRoomDto, none: any, options?: any) {
            return UsersApiFp(configuration).usersControllerCreateRoom(body, none, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Create a new room
         * @param {CreateRoomDto} body 
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreateRoom_1(body: CreateRoomDto, none: any, options?: any) {
            return UsersApiFp(configuration).usersControllerCreateRoom_1(body, none, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Follow the given user
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFollowUser(username: string, options?: any) {
            return UsersApiFp(configuration).usersControllerFollowUser(username, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Follow the given user
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFollowUser_2(username: string, options?: any) {
            return UsersApiFp(configuration).usersControllerFollowUser_2(username, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get the authorized user's bookmarks
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetBookmarks(none: any, options?: any) {
            return UsersApiFp(configuration).usersControllerGetBookmarks(none, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get the authorized user's bookmarks
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetBookmarks_3(none: any, options?: any) {
            return UsersApiFp(configuration).usersControllerGetBookmarks_3(none, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a user's followers
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetFollowers(none: any, options?: any) {
            return UsersApiFp(configuration).usersControllerGetFollowers(none, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a user's followers
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetFollowers_4(none: any, options?: any) {
            return UsersApiFp(configuration).usersControllerGetFollowers_4(none, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a user's following
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetFollowing(none: any, options?: any) {
            return UsersApiFp(configuration).usersControllerGetFollowing(none, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a user's following
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetFollowing_5(none: any, options?: any) {
            return UsersApiFp(configuration).usersControllerGetFollowing_5(none, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get user profile info by username
         * @param {string} username The username of the user to fetch profile info for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetProfileByUsername(username: string, options?: any) {
            return UsersApiFp(configuration).usersControllerGetProfileByUsername(username, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get user profile info by username
         * @param {string} username The username of the user to fetch profile info for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetProfileByUsername_6(username: string, options?: any) {
            return UsersApiFp(configuration).usersControllerGetProfileByUsername_6(username, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a user's recent rooms
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetRecentRooms(none: any, options?: any) {
            return UsersApiFp(configuration).usersControllerGetRecentRooms(none, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a user's recent rooms
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetRecentRooms_7(none: any, options?: any) {
            return UsersApiFp(configuration).usersControllerGetRecentRooms_7(none, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a user's recommended rooms
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetRecommendedRooms(none: any, options?: any) {
            return UsersApiFp(configuration).usersControllerGetRecommendedRooms(none, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a user's recommended rooms
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetRecommendedRooms_8(none: any, options?: any) {
            return UsersApiFp(configuration).usersControllerGetRecommendedRooms_8(none, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a user's friends
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUserFriends(none: any, options?: any) {
            return UsersApiFp(configuration).usersControllerGetUserFriends(none, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a user's friends
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUserFriends_9(none: any, options?: any) {
            return UsersApiFp(configuration).usersControllerGetUserFriends_9(none, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUserInfo(options?: any) {
            return UsersApiFp(configuration).usersControllerGetUserInfo(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUserInfo_10(options?: any) {
            return UsersApiFp(configuration).usersControllerGetUserInfo_10(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a user's rooms
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUserRooms(none: any, options?: any) {
            return UsersApiFp(configuration).usersControllerGetUserRooms(none, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a user's rooms
         * @param {any} none 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUserRooms_11(none: any, options?: any) {
            return UsersApiFp(configuration).usersControllerGetUserRooms_11(none, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update user's profile info
         * @param {UpdateUserDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerPatchProfile(body: UpdateUserDto, options?: any) {
            return UsersApiFp(configuration).usersControllerPatchProfile(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update user's profile info
         * @param {UpdateUserDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerPatchProfile_12(body: UpdateUserDto, options?: any) {
            return UsersApiFp(configuration).usersControllerPatchProfile_12(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update user's profile info
         * @param {UpdateUserDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerPutProfile(body: UpdateUserDto, options?: any) {
            return UsersApiFp(configuration).usersControllerPutProfile(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update user's profile info
         * @param {UpdateUserDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerPutProfile_13(body: UpdateUserDto, options?: any) {
            return UsersApiFp(configuration).usersControllerPutProfile_13(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Unfollow the given user
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUnfollowUser(username: string, options?: any) {
            return UsersApiFp(configuration).usersControllerUnfollowUser(username, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Unfollow the given user
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUnfollowUser_14(username: string, options?: any) {
            return UsersApiFp(configuration).usersControllerUnfollowUser_14(username, options)(fetch, basePath);
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary Create a new room
     * @param {CreateRoomDto} body 
     * @param {any} none 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerCreateRoom(body: CreateRoomDto, none: any, options?: any) {
        return UsersApiFp(this.configuration).usersControllerCreateRoom(body, none, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Create a new room
     * @param {CreateRoomDto} body 
     * @param {any} none 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerCreateRoom_1(body: CreateRoomDto, none: any, options?: any) {
        return UsersApiFp(this.configuration).usersControllerCreateRoom_1(body, none, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Follow the given user
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerFollowUser(username: string, options?: any) {
        return UsersApiFp(this.configuration).usersControllerFollowUser(username, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Follow the given user
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerFollowUser_2(username: string, options?: any) {
        return UsersApiFp(this.configuration).usersControllerFollowUser_2(username, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get the authorized user's bookmarks
     * @param {any} none 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerGetBookmarks(none: any, options?: any) {
        return UsersApiFp(this.configuration).usersControllerGetBookmarks(none, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get the authorized user's bookmarks
     * @param {any} none 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerGetBookmarks_3(none: any, options?: any) {
        return UsersApiFp(this.configuration).usersControllerGetBookmarks_3(none, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a user's followers
     * @param {any} none 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerGetFollowers(none: any, options?: any) {
        return UsersApiFp(this.configuration).usersControllerGetFollowers(none, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a user's followers
     * @param {any} none 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerGetFollowers_4(none: any, options?: any) {
        return UsersApiFp(this.configuration).usersControllerGetFollowers_4(none, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a user's following
     * @param {any} none 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerGetFollowing(none: any, options?: any) {
        return UsersApiFp(this.configuration).usersControllerGetFollowing(none, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a user's following
     * @param {any} none 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerGetFollowing_5(none: any, options?: any) {
        return UsersApiFp(this.configuration).usersControllerGetFollowing_5(none, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get user profile info by username
     * @param {string} username The username of the user to fetch profile info for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerGetProfileByUsername(username: string, options?: any) {
        return UsersApiFp(this.configuration).usersControllerGetProfileByUsername(username, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get user profile info by username
     * @param {string} username The username of the user to fetch profile info for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerGetProfileByUsername_6(username: string, options?: any) {
        return UsersApiFp(this.configuration).usersControllerGetProfileByUsername_6(username, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a user's recent rooms
     * @param {any} none 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerGetRecentRooms(none: any, options?: any) {
        return UsersApiFp(this.configuration).usersControllerGetRecentRooms(none, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a user's recent rooms
     * @param {any} none 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerGetRecentRooms_7(none: any, options?: any) {
        return UsersApiFp(this.configuration).usersControllerGetRecentRooms_7(none, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a user's recommended rooms
     * @param {any} none 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerGetRecommendedRooms(none: any, options?: any) {
        return UsersApiFp(this.configuration).usersControllerGetRecommendedRooms(none, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a user's recommended rooms
     * @param {any} none 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerGetRecommendedRooms_8(none: any, options?: any) {
        return UsersApiFp(this.configuration).usersControllerGetRecommendedRooms_8(none, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a user's friends
     * @param {any} none 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerGetUserFriends(none: any, options?: any) {
        return UsersApiFp(this.configuration).usersControllerGetUserFriends(none, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a user's friends
     * @param {any} none 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerGetUserFriends_9(none: any, options?: any) {
        return UsersApiFp(this.configuration).usersControllerGetUserFriends_9(none, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerGetUserInfo(options?: any) {
        return UsersApiFp(this.configuration).usersControllerGetUserInfo(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerGetUserInfo_10(options?: any) {
        return UsersApiFp(this.configuration).usersControllerGetUserInfo_10(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a user's rooms
     * @param {any} none 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerGetUserRooms(none: any, options?: any) {
        return UsersApiFp(this.configuration).usersControllerGetUserRooms(none, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a user's rooms
     * @param {any} none 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerGetUserRooms_11(none: any, options?: any) {
        return UsersApiFp(this.configuration).usersControllerGetUserRooms_11(none, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update user's profile info
     * @param {UpdateUserDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerPatchProfile(body: UpdateUserDto, options?: any) {
        return UsersApiFp(this.configuration).usersControllerPatchProfile(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update user's profile info
     * @param {UpdateUserDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerPatchProfile_12(body: UpdateUserDto, options?: any) {
        return UsersApiFp(this.configuration).usersControllerPatchProfile_12(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update user's profile info
     * @param {UpdateUserDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerPutProfile(body: UpdateUserDto, options?: any) {
        return UsersApiFp(this.configuration).usersControllerPutProfile(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update user's profile info
     * @param {UpdateUserDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerPutProfile_13(body: UpdateUserDto, options?: any) {
        return UsersApiFp(this.configuration).usersControllerPutProfile_13(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Unfollow the given user
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerUnfollowUser(username: string, options?: any) {
        return UsersApiFp(this.configuration).usersControllerUnfollowUser(username, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Unfollow the given user
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerUnfollowUser_14(username: string, options?: any) {
        return UsersApiFp(this.configuration).usersControllerUnfollowUser_14(username, options)(this.fetch, this.basePath);
    }

}
