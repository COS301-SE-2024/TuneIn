var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.332,1,2.376]],["body/controllers/AppController.html",[0,2.303,1,4.109,2,2.048,3,0.263,4,0.225,5,0.225,6,4.302,7,0.815,8,1.923,9,5.709,10,1.705,11,0.023,12,0.93,13,5.056,14,1.607,15,1.187,16,0.315,17,0.815,18,3.701,19,4.302,20,0.263,21,0.214,22,2.494,23,2.048,24,1.607,25,5.056,26,0.019,27,0.019]],["title/modules/AppModule.html",[28,0.988,29,2.376]],["body/modules/AppModule.html",[1,3.805,2,2.012,3,0.193,4,0.165,5,0.165,11,0.023,16,0.363,17,0.597,18,3.673,19,3.153,20,0.193,21,0.157,26,0.016,27,0.016,28,1.582,29,4.903,30,1.501,31,1.501,32,1.707,33,1.707,34,1.501,35,2.418,36,1.707,37,3.153,38,3.153,39,3.153,40,3.987,41,3.987,42,3.987,43,2.602,44,3.987,45,3.987,46,3.987,47,2.042,48,2.301,49,2.289,50,1.707,51,1.707,52,3.705,53,2.632,54,3.705,55,3.153,56,2.516,57,1.963,58,3.705,59,3.705,60,3.705,61,3.705,62,4.967,63,2.012,64,1.707,65,3.705,66,4.967,67,1.779,68,1.501,69,3.705,70,3.153,71,3.705,72,1.828]],["title/injectables/AppService.html",[18,2,73,0.686]],["body/injectables/AppService.html",[3,0.27,4,0.231,5,0.231,7,0.837,8,1.954,9,5.76,11,0.023,12,0.956,14,1.651,15,1.207,16,0.27,17,0.837,18,3.515,20,0.27,21,0.22,24,1.651,26,0.02,27,0.02,73,1.207,74,1.978,75,4.421,76,5.196,77,5.196,78,5.196]],["title/classes/AuthBody.html",[21,0.148,79,2.376]],["body/classes/AuthBody.html",[0,1.214,3,0.166,4,0.142,5,0.142,7,0.514,10,1.512,11,0.024,12,0.825,15,1.205,16,0.269,17,0.514,20,0.166,21,0.19,22,1.574,23,1.292,24,1.424,26,0.014,27,0.014,79,4.02,80,1.014,81,2.401,82,1.706,83,4.781,84,1.895,85,1.174,86,2.398,87,3.191,88,3.191,89,3.215,90,1.98,91,4.455,92,2.715,93,2.388,94,1.98,95,3.044,96,2.781,97,3.519,98,0.8,99,2.715,100,1.98,101,2.715,102,1.98,103,2.715,104,2.167,105,3.373,106,2.167,107,3.044,108,2.167,109,1.934,110,2.167,111,2.167,112,1.824,113,2.167,114,2.167,115,1.076,116,2.715,117,2.715,118,2.253,119,2.745,120,1.856,121,2.715,122,2.715,123,2.715,124,2.276,125,1.895,126,4.229,127,4.229,128,2.772,129,2.398,130,2.715,131,4.781,132,2.715,133,2.715,134,2.562,135,2.715,136,2.167,137,3.673,138,2.715,139,2.401,140,3.813,141,4.229,142,2.562,143,4.229,144,3.813,145,4.408,146,2.715,147,1.824,148,2.715,149,2.715,150,2.715,151,2.715,152,4.408,153,3.813,154,2.715,155,2.715,156,2.715,157,2.556,158,1.824,159,3.373,160,1.47,161,2.401,162,3.373,163,2.715,164,3.044,165,2.167,166,1.691,167,2.745,168,3.673,169,2.401,170,3.044,171,3.813,172,2.715,173,2.715,174,2.715]],["title/controllers/AuthController.html",[0,1.332,100,2.171]],["body/controllers/AuthController.html",[0,1.182,2,1.257,3,0.161,4,0.138,5,0.138,7,0.5,8,1.397,10,1.047,11,0.024,12,0.571,14,0.987,15,1.089,16,0.265,17,0.5,20,0.161,21,0.186,22,1.531,23,1.257,24,1.397,26,0.014,27,0.014,79,4.132,81,2.336,83,3.74,84,1.483,85,1.16,86,2.067,89,3.167,90,1.926,91,4.409,92,2.641,93,2.352,94,1.926,95,2.986,96,2.728,97,3.466,98,0.778,99,2.641,100,2.728,101,2.641,102,1.926,103,4.723,104,2.986,105,3.841,106,2.108,107,2.986,108,2.986,109,2.396,110,2.986,111,2.986,112,2.513,113,2.986,114,2.986,115,1.722,116,2.641,117,3.74,118,2.23,119,2.705,120,1.828,121,2.641,122,2.641,123,2.641,124,2.248,125,1.872,126,4.178,127,4.178,128,2.739,129,2.373,130,2.641,131,4.723,132,2.641,133,2.641,134,2.513,135,2.641,136,2.108,137,3.636,138,2.641,139,2.336,140,3.74,141,4.178,142,2.513,143,4.178,144,3.74,145,4.343,146,2.641,147,1.775,148,2.641,149,2.641,150,2.641,151,2.641,152,4.343,153,3.74,154,2.641,155,2.641,156,2.641,157,2.518,158,1.775,159,3.308,160,1.43,161,2.336,162,3.308,163,2.641,164,2.986,165,2.108,166,1.645,167,2.705,168,3.636,169,2.336,170,2.986,171,3.74,172,2.641,173,2.641,174,2.641,175,2.108,176,3.104,177,3.104,178,3.104,179,3.104,180,4.396,181,3.104,182,1.182,183,1.182,184,1.182,185,2.336]],["title/modules/AuthModule.html",[28,0.988,40,2.171]],["body/modules/AuthModule.html",[2,2.132,3,0.21,4,0.18,5,0.18,11,0.023,16,0.361,17,0.652,20,0.21,21,0.171,26,0.017,27,0.017,28,1.652,30,1.639,31,1.639,32,1.865,33,1.865,34,1.639,35,2.525,36,1.865,40,4.402,43,2.667,49,2.426,50,1.865,51,1.865,53,2.789,55,4.479,56,2.748,57,2.144,70,3.443,93,3.035,94,2.511,100,3.63,186,3.443,187,4.046,188,3.443,189,4.086,190,4.086,191,1.859,192,4.046,193,4.046,194,5.264,195,2.511,196,4.046,197,3.443,198,4.046,199,4.046,200,1.54,201,4.046,202,3.443,203,4.046,204,4.046,205,4.046,206,3.443,207,4.046,208,4.046,209,4.046,210,4.046,211,4.046,212,4.046]],["title/injectables/AuthService.html",[73,0.686,93,1.612]],["body/injectables/AuthService.html",[3,0.099,4,0.085,5,0.085,7,0.307,8,0.966,11,0.024,12,1.092,14,1.504,15,1.349,16,0.275,17,0.307,20,0.099,21,0.081,24,1.801,26,0.01,27,0.01,56,1.293,72,1.499,73,0.596,74,0.725,82,1.157,84,2.069,85,1.262,93,1.4,105,1.432,106,1.293,115,2.122,118,2.563,119,1.61,120,1.969,124,2.485,125,2.097,126,2.287,127,3.259,128,0.939,129,2.144,136,1.293,137,3.412,141,1.432,143,2.854,147,2.475,157,0.939,158,1.088,159,2.287,160,0.877,161,1.432,162,2.287,164,3.214,165,2.576,166,1.009,167,2.914,168,3.13,169,1.432,182,1.801,183,1.801,184,1.801,191,1.223,200,0.725,202,2.585,206,4.823,213,1.619,214,3.667,215,5.295,216,5.295,217,3.793,218,5.295,219,5.669,220,3.793,221,3.039,222,2.287,223,4.33,224,3.039,225,1.4,226,1.904,227,5.045,228,2.294,229,3.039,230,1.904,231,2.158,232,1.904,233,2.648,234,3.039,235,2.287,236,1.904,237,3.039,238,1.904,239,1.904,240,1.904,241,3.039,242,4.026,243,1.904,244,1.904,245,3.793,246,1.904,247,1.904,248,1.904,249,1.619,250,3.227,251,1.619,252,0.877,253,1.904,254,0.771,255,1.432,256,1.293,257,1.904,258,1.904,259,4.823,260,1.904,261,3.039,262,3.039,263,3.039,264,3.039,265,3.039,266,4.733,267,1.904,268,1.904,269,3.793,270,4.33,271,1.904,272,1.904,273,1.904,274,1.293,275,1.904,276,3.039,277,1.904,278,1.904,279,1.904,280,1.904,281,2.854,282,1.904,283,1.904,284,3.039,285,1.904,286,1.432,287,1.904,288,1.904,289,1.904,290,3.227,291,1.886,292,1.904,293,1.904,294,1.904,295,1.432,296,1.904,297,1.904,298,3.039,299,1.904,300,2.576,301,1.904,302,1.904,303,1.904,304,1.904,305,2.585,306,3.793,307,1.619,308,2.576,309,3.039,310,2.064,311,1.619,312,1.088,313,1.904,314,1.904,315,1.904,316,1.088,317,1.293,318,5.813,319,3.039,320,3.039,321,2.585,322,3.039,323,3.039,324,1.904,325,1.904,326,1.904,327,1.904,328,2.287,329,1.432]],["title/classes/CreateRoomDto.html",[21,0.148,330,2]],["body/classes/CreateRoomDto.html",[3,0.278,4,0.238,5,0.238,11,0.023,16,0.325,20,0.278,21,0.226,26,0.02,27,0.02,80,1.698,98,1.34,330,3.574,331,4.546,332,3.084,333,5.319,334,3.629,335,2.034,336,4.546]],["title/classes/CreateUserDto.html",[21,0.148,254,1.417]],["body/classes/CreateUserDto.html",[3,0.185,4,0.158,5,0.158,7,0.573,10,2.364,11,0.023,12,1.29,15,1.297,16,0.251,20,0.185,21,0.205,26,0.015,27,0.015,80,1.131,82,1.84,84,1.851,85,1.464,86,2.929,98,0.892,231,2.089,254,1.957,255,5.297,305,4.67,337,2.678,338,4.13,339,3.138,340,5.489,341,5.489,342,5.489,343,5.489,344,5.489,345,5.489,346,4.13,347,5.489,348,4.13,349,2.908,350,3.559,351,3.998,352,3.559,353,3.559,354,3.559,355,3.559,356,3.559,357,3.559,358,3.559,359,3.559,360,3.559,361,3.559,362,3.559,363,3.559,364,3.559,365,3.559,366,3.82,367,2.034]],["title/classes/CreateUserDto-1.html",[21,0.124,254,1.183,274,1.983]],["body/classes/CreateUserDto-1.html",[3,0.231,4,0.198,5,0.198,7,0.716,10,2.277,11,0.023,12,1.242,15,1.36,16,0.291,20,0.231,21,0.188,26,0.018,27,0.018,80,1.413,82,2.128,84,2.063,85,1.41,86,2.895,98,1.115,228,2.356,231,2.328,252,2.049,254,2.265,338,4.603,339,3.497,346,4.603,348,4.603,368,3.783,369,6.418,370,4.447,371,4.447,372,4.447,373,4.447,374,4.447,375,4.447]],["title/modules/DbUtilsModule.html",[28,0.988,41,2.171]],["body/modules/DbUtilsModule.html",[3,0.237,4,0.203,5,0.203,11,0.023,16,0.337,17,0.735,20,0.237,21,0.193,26,0.018,27,0.018,28,1.748,30,1.849,31,1.849,32,2.103,33,2.103,34,1.849,35,2.671,36,2.852,41,4.412,43,2.752,47,2.27,49,2.619,50,2.103,51,2.103,53,3.012,57,2.419,67,1.635,68,1.849,191,1.918,200,1.737,376,3.884,377,4.565,378,3.884,379,4.565,380,3.435,381,4.565,382,1.97]],["title/injectables/DbUtilsService.html",[47,1.112,73,0.686]],["body/injectables/DbUtilsService.html",[3,0.12,4,0.103,5,0.103,7,0.373,8,1.124,11,0.024,12,1.108,14,1.867,15,1.351,16,0.223,17,0.373,20,0.12,21,0.098,22,1.141,23,0.936,24,2.061,26,0.011,27,0.011,47,1.124,67,2.201,72,2.56,73,0.694,74,0.88,85,1.258,115,2.293,118,2.469,120,2.201,124,1.741,125,1.45,129,1.95,134,2.457,142,3.905,182,2.292,183,2.292,184,2.292,191,1.359,200,0.88,225,1.066,228,2.277,231,2.292,233,2.769,252,1.066,274,1.57,308,1.57,310,1.57,316,3.128,349,3.19,380,4.624,383,1.967,384,3.538,385,3.538,386,3.538,387,4.298,388,3.538,389,3.538,390,3.538,391,3.538,392,1.435,393,2.312,394,2.312,395,1.875,396,2.312,397,1.57,398,2.312,399,2.312,400,3.538,401,2.312,402,2.312,403,4.096,404,2.312,405,3.538,406,2.312,407,3.112,408,2.312,409,2.312,410,3.538,411,2.312,412,3.538,413,2.312,414,2.551,415,4.298,416,4.298,417,3.01,418,2.195,419,3.657,420,2.663,421,2.457,422,3.01,423,2.457,424,4.096,425,1.57,426,2.312,427,3.657,428,3.905,429,3.538,430,2.919,431,3.538,432,3.538,433,2.663,434,4.298,435,2.312,436,2.312,437,4.298,438,2.312,439,2.312,440,3.623,441,3.538,442,2.312,443,2.312]],["title/modules/DtoGenModule.html",[28,0.988,42,2.171]],["body/modules/DtoGenModule.html",[3,0.23,4,0.197,5,0.197,11,0.023,16,0.343,17,0.712,20,0.23,21,0.187,26,0.018,27,0.018,28,1.722,30,1.789,31,1.789,32,2.036,33,2.036,34,1.789,35,2.632,36,2.81,42,4.432,43,2.729,47,2.142,48,2.548,49,2.566,50,2.036,51,2.036,53,2.951,57,2.341,63,1.789,64,2.036,67,1.582,68,1.789,191,1.903,200,1.682,382,1.907,444,3.759,445,4.418,446,4.418,447,3.759,448,3.325,449,4.418,450,2.18]],["title/injectables/DtoGenService.html",[48,1.253,73,0.686]],["body/injectables/DtoGenService.html",[3,0.21,4,0.063,5,0.063,7,0.227,8,0.755,11,0.024,12,0.898,14,1.477,15,1.291,16,0.242,17,0.227,20,0.073,21,0.06,23,0.962,24,1.716,26,0.008,27,0.008,47,1.148,48,0.851,63,2.057,67,0.505,68,0.571,72,1.782,73,0.466,74,0.537,84,0.801,85,0.971,109,1.559,115,2.023,118,2.411,119,2.315,120,2.092,124,0.571,125,1.998,129,2.057,134,3.227,142,3.668,157,1.172,158,1.358,160,2.25,166,0.747,182,1.769,183,1.769,184,1.769,191,1.02,200,0.537,214,1.358,225,1.095,228,1.631,231,1.663,233,2.33,252,0.65,286,1.061,291,1.474,308,2.09,310,0.958,312,3.286,316,3.339,335,1.769,339,1.358,349,2.692,382,1.328,392,0.875,395,0.747,397,4.023,407,2.463,414,2.136,418,3.258,419,3.955,420,1.787,421,1.358,423,3.161,424,3.718,425,0.958,427,1.2,428,2.718,430,0.958,448,3.823,451,1.2,452,2.375,453,2.375,454,3.078,455,2.375,456,2.375,457,3.612,458,3.078,459,2.09,460,1.41,461,2.375,462,1.41,463,1.821,464,2.375,465,1.41,466,2.375,467,1.41,468,1.41,469,3.078,470,1.41,471,1.41,472,2.375,473,1.41,474,1.41,475,1.41,476,4.031,477,1.41,478,1.2,479,1.2,480,0.747,481,0.958,482,1.358,483,1.41,484,1.787,485,3.078,486,3.078,487,3.078,488,3.078,489,1.787,490,1.787,491,4.648,492,2.316,493,1.787,494,2.711,495,1.559,496,1.787,497,1.787,498,1.787,499,1.787,500,3.431,501,1.41,502,2.718,503,2.718,504,2.453,505,2.718,506,2.718,507,3.078,508,2.718,509,2.718,510,2.718,511,2.718,512,2.718,513,2.718,514,2.718,515,3.033,516,3.033,517,3.033,518,3.033,519,1.41,520,1.41,521,1.41,522,1.41,523,1.41,524,1.2,525,1.41,526,1.41,527,3.078,528,2.375,529,1.41,530,3.078,531,1.2,532,1.41,533,1.41,534,1.41,535,1.41,536,1.41,537,1.41,538,1.2,539,1.2,540,3.258,541,2.021,542,4.37,543,2.375,544,2.316,545,2.316,546,2.375,547,2.375,548,2.375,549,1.41,550,2.375,551,2.375,552,2.375,553,2.375,554,2.375,555,2.375,556,2.375,557,2.375,558,2.375,559,2.375,560,2.375,561,2.375,562,2.021,563,4.882,564,4.882,565,2.718,566,2.375,567,2.375,568,1.41,569,1.41,570,1.41,571,3.078,572,1.061,573,1.41,574,2.375,575,1.41,576,1.41,577,1.41,578,3.078,579,1.41,580,1.41,581,1.41,582,1.41,583,1.41,584,1.41,585,2.375,586,1.41,587,1.41,588,1.41,589,1.41,590,1.41,591,1.41]],["title/injectables/JwtAuthGuard.html",[73,0.686,592,2]],["body/injectables/JwtAuthGuard.html",[3,0.276,4,0.237,5,0.237,11,0.023,16,0.324,17,0.856,20,0.276,21,0.225,26,0.02,27,0.02,73,1.223,74,2.023,195,3.298,332,3.074,592,3.563,593,4.523,594,4.523,595,6.233,596,5.316]],["title/injectables/JwtStrategy.html",[73,0.686,189,2.171]],["body/injectables/JwtStrategy.html",[3,0.228,4,0.195,5,0.195,7,0.707,8,1.763,11,0.023,12,1.021,14,1.395,16,0.332,17,0.707,20,0.228,21,0.186,22,2.166,24,1.395,26,0.018,27,0.018,73,1.088,74,1.671,84,1.481,85,1.159,93,3.1,94,2.724,115,2.051,118,1.671,124,1.778,125,1.481,164,2.981,167,2.326,182,2.111,183,2.111,184,2.111,185,3.304,189,3.442,195,2.724,225,2.023,231,1.671,259,3.735,316,2.51,332,2.736,597,3.735,598,4.719,599,4.719,600,3.735,601,4.39,602,5.547,603,4.39,604,3.735,605,4.39,606,3.304,607,3.735,608,6.388,609,4.39,610,4.39,611,3.735,612,4.39,613,4.39,614,4.39,615,4.39,616,4.39,617,4.39]],["title/injectables/LocalStrategy.html",[73,0.686,190,2.171]],["body/injectables/LocalStrategy.html",[3,0.231,4,0.197,5,0.197,7,0.715,8,1.775,11,0.023,12,1.028,14,1.41,15,1.324,16,0.333,17,0.715,20,0.231,21,0.188,22,2.189,24,1.41,26,0.018,27,0.018,73,1.096,74,1.689,84,1.497,85,1.167,93,3.109,94,2.753,115,2.061,118,1.689,120,1.589,124,1.797,125,1.497,129,2.475,182,2.125,183,2.125,184,2.125,190,3.465,195,2.753,225,2.045,233,2.41,242,5.456,249,4.751,332,2.755,598,4.751,599,4.751,600,3.775,604,3.775,606,3.339,607,3.775,611,3.775,618,3.775,619,4.437,620,5.584,621,4.437,622,3.775,623,4.437]],["title/modules/PrismaModule.html",[28,0.988,43,1.417]],["body/modules/PrismaModule.html",[3,0.255,4,0.219,5,0.219,11,0.023,16,0.309,17,0.791,20,0.255,21,0.208,26,0.019,27,0.019,28,1.805,30,1.989,31,1.989,32,2.263,33,2.263,34,1.989,35,2.76,36,2.946,43,2.834,49,2.74,50,2.263,51,2.263,191,2.036,624,4.179,625,4.179,626,4.912,627,4.912,628,4.912]],["title/injectables/PrismaService.html",[73,0.686,191,0.988]],["body/injectables/PrismaService.html",[3,0.252,4,0.216,5,0.216,7,0.78,8,1.873,11,0.023,12,1.085,14,1.873,16,0.306,17,0.78,20,0.252,21,0.205,26,0.019,27,0.019,73,1.157,74,1.843,115,2.325,120,2.111,191,1.664,252,2.232,332,2.908,629,4.12,630,6.355,631,6.893,632,6.893,633,4.843,634,4.843,635,4.843,636,4.843,637,4.843]],["title/controllers/ProfileController.html",[0,1.332,638,2.376]],["body/controllers/ProfileController.html",[0,0.865,2,0.92,3,0.268,4,0.101,5,0.101,7,0.366,8,1.109,10,1.909,11,0.023,12,1,14,1.727,15,1.239,16,0.283,17,0.366,20,0.118,21,0.096,22,1.121,23,0.92,24,1.798,26,0.011,27,0.011,72,1.121,84,2.179,85,1.385,89,2.166,90,2.637,95,1.543,96,3.194,97,2.887,98,0.57,102,2.96,104,1.543,107,2.887,108,1.543,109,2.442,110,2.37,111,3.496,112,1.299,113,1.543,114,1.543,115,2.2,118,1.329,120,1.844,124,1.414,125,1.177,128,1.121,129,2.664,139,3.874,157,1.121,160,2.504,167,1.849,168,2.166,175,1.543,182,2.068,183,2.28,184,2.068,231,2.223,233,2.639,254,1.721,291,2.96,295,1.709,300,2.37,317,3.239,328,2.627,329,2.627,414,1.849,430,1.543,440,2.627,463,1.434,484,4.395,492,4.089,592,1.299,638,2.37,639,1.933,640,3.616,641,2.97,642,3.616,643,3.616,644,3.616,645,2.887,646,2.272,647,2.272,648,3.491,649,3.491,650,3.491,651,3.491,652,2.272,653,4.75,654,2.272,655,2.272,656,2.272,657,2.272,658,2.272,659,2.272,660,2.272,661,5.434,662,3.843,663,2.272,664,2.272,665,2.272,666,2.272,667,2.97,668,3.491,669,3.491,670,2.272,671,1.933,672,2.272,673,2.272,674,3.199,675,3.199,676,1.933,677,1.709,678,4.089,679,4.251,680,3.199,681,3.199,682,3.59,683,1.709,684,1.709,685,2.43,686,1.933,687,2.272,688,1.709,689,1.709,690,2.272,691,1.933,692,2.97,693,1.933,694,1.933,695,1.933,696,1.933,697,1.933,698,3.59,699,1.933,700,1.933,701,1.933,702,1.933,703,1.709,704,1.709,705,1.933,706,1.933,707,2.97,708,4.089,709,5.434,710,2.272,711,2.272,712,2.97,713,3.491,714,2.627,715,2.272,716,2.272,717,2.272,718,2.272,719,4.251,720,2.272,721,2.272,722,2.97,723,2.627,724,2.97,725,2.97,726,2.272,727,2.272,728,2.272]],["title/modules/ProfileModule.html",[28,0.988,44,2.171]],["body/modules/ProfileModule.html",[2,2.225,3,0.225,4,0.193,5,0.193,11,0.023,16,0.354,17,0.697,20,0.225,21,0.183,26,0.018,27,0.018,28,1.705,30,1.752,31,1.752,32,1.993,33,1.993,34,1.752,35,2.606,36,1.993,43,2.715,44,4.438,47,2.13,48,2.401,49,2.532,50,1.993,51,1.993,53,2.912,57,2.292,63,1.752,64,1.993,67,1.549,68,1.752,191,1.892,200,1.647,382,1.867,450,2.134,638,4.101,685,3.832,686,3.68,729,3.68,730,3.68,731,4.326,732,4.326,733,4.326]],["title/injectables/ProfileService.html",[73,0.686,685,2]],["body/injectables/ProfileService.html",[3,0.141,4,0.121,5,0.121,7,0.438,8,1.27,11,0.024,12,1.106,14,1.848,15,1.288,16,0.302,17,0.438,20,0.141,21,0.115,23,1.919,24,2.034,26,0.013,27,0.013,47,1.911,48,1.87,63,1.102,64,1.253,67,0.974,68,1.102,72,2.744,73,0.784,74,1.035,85,0.99,115,1.962,118,1.803,120,2.292,124,2.498,125,2.214,129,2.253,166,1.441,182,1.803,183,1.803,184,1.803,191,1.474,200,1.035,214,2.708,225,1.842,228,2.51,231,2.498,233,2.254,252,1.253,281,3.008,290,3.4,312,1.555,382,1.174,392,1.688,403,5.247,417,4.031,422,4.031,433,3.93,440,4.186,450,1.342,463,2.255,640,4.031,641,4.443,642,4.443,643,4.443,644,4.031,645,3.546,667,3.4,684,2.047,685,2.285,734,2.314,735,3.217,736,2.72,737,2.72,738,2.72,739,2.72,740,2.72,741,2.72,742,2.72,743,6.294,744,2.72,745,2.72,746,2.047,747,2.314,748,2.314,749,2.314,750,2.314,751,2.314,752,2.314,753,3.997,754,3.997,755,2.72,756,4.443,757,3.997,758,3.997,759,2.72,760,3.997,761,3.997,762,2.72,763,2.72,764,2.72,765,2.047,766,2.72,767,2.72,768,2.72,769,2.72]],["title/classes/RoomDto.html",[21,0.148,335,1.332]],["body/classes/RoomDto.html",[3,0.17,4,0.145,5,0.145,7,0.525,10,2.348,11,0.023,12,1.281,15,1.342,16,0.295,20,0.17,21,0.193,26,0.015,27,0.015,80,1.036,82,1.732,85,1.472,86,2.832,98,0.818,109,2.263,147,1.864,160,3.068,335,1.732,351,4.053,366,3.836,367,1.864,395,2.412,407,2.778,463,2.013,480,1.728,494,3.253,495,2.576,500,3.253,502,3.945,503,3.945,504,3.56,505,3.945,506,3.945,508,3.945,509,3.945,510,3.945,511,3.945,512,3.945,513,3.945,540,3.52,545,3.945,770,2.774,771,3.56,772,3.261,773,3.261,774,3.261,775,4.551,776,3.261,777,5.968,778,3.261,779,3.261,780,3.261,781,3.261,782,3.261,783,3.261,784,3.261,785,3.261,786,3.261,787,3.261,788,3.261,789,3.261,790,3.261,791,6.182,792,4.551,793,5.243,794,3.261]],["title/classes/RoomEntity.html",[21,0.148,795,2.633]],["body/classes/RoomEntity.html",[3,0.173,4,0.148,5,0.148,7,0.537,10,2.355,11,0.023,12,1.285,15,1.347,16,0.276,20,0.173,21,0.141,26,0.015,27,0.015,80,1.06,82,1.759,85,1.484,86,2.919,98,0.836,109,2.29,147,1.906,160,3.082,395,2.449,407,2.811,463,2.029,480,1.767,494,3.292,495,2.597,500,3.292,502,3.992,503,3.992,504,3.603,505,3.992,506,3.992,508,3.992,509,3.992,510,3.992,511,3.992,512,3.992,513,3.992,540,4.038,545,3.992,771,4.086,795,3.478,796,2.837,797,3.335,798,3.335,799,3.335,800,3.335,801,3.335,802,3.335,803,3.335,804,3.335,805,3.335,806,3.335,807,3.335,808,3.335,809,3.335,810,3.335,811,3.335,812,3.335,813,2.509]],["title/controllers/RoomsController.html",[0,1.332,814,2.376]],["body/controllers/RoomsController.html",[0,0.706,2,0.752,3,0.194,4,0.083,5,0.083,7,0.299,8,0.946,10,2.056,11,0.023,12,1.104,14,2.009,15,1.356,16,0.292,17,0.299,20,0.096,21,0.079,22,0.915,23,0.752,24,1.907,26,0.01,27,0.01,72,1.469,85,1.321,89,2.899,90,2.648,95,1.26,96,2.648,97,2.898,98,0.465,102,2.314,104,1.26,107,2.532,108,1.26,109,1.842,110,2.022,111,1.26,112,2.132,113,1.26,114,1.26,115,1.258,120,0.665,125,1.004,128,0.915,129,2.206,157,1.469,160,2.51,175,1.26,182,2.243,183,2.321,184,2.243,233,1.285,254,1.51,291,2.648,295,1.396,300,3.916,317,3.916,330,1.061,335,2.353,349,2.777,407,3.652,423,2.44,430,1.26,463,1.258,480,0.983,492,1.396,495,2.778,514,2.806,562,2.533,565,3.212,572,1.396,592,1.061,653,4.975,674,1.396,675,1.396,676,1.579,677,1.396,678,3.212,680,2.241,681,2.241,682,2.806,683,1.396,688,1.396,689,1.396,691,1.579,692,2.533,693,1.579,694,1.579,695,1.579,696,1.579,697,1.579,698,2.241,699,1.579,700,1.579,701,1.579,702,1.579,703,1.396,704,1.396,705,1.579,706,1.579,708,4.516,712,1.579,714,1.396,765,2.806,813,1.396,814,2.022,815,1.579,816,3.173,817,2.533,818,2.533,819,2.533,820,3.631,821,2.533,822,2.533,823,2.533,824,2.533,825,2.533,826,3.173,827,3.173,828,1.856,829,1.856,830,1.856,831,1.856,832,1.856,833,1.856,834,1.856,835,1.856,836,1.856,837,1.856,838,1.856,839,1.856,840,1.856,841,2.533,842,4.268,843,1.579,844,1.579,845,3.976,846,2.241,847,1.856,848,1.856,849,1.856,850,1.856,851,1.856,852,1.856,853,1.856,854,1.856,855,1.856,856,1.856,857,1.856,858,1.856,859,1.856,860,1.856,861,1.856,862,1.856,863,1.856,864,1.856,865,3.881,866,1.856,867,1.856,868,1.856,869,1.856,870,1.856,871,2.132,872,1.579,873,1.856,874,1.579,875,1.579,876,1.856,877,1.856,878,1.579,879,6.001,880,1.856,881,3.729,882,1.856,883,1.856,884,5.893,885,1.856,886,1.579,887,2.978,888,1.856,889,1.856,890,1.856,891,1.856,892,1.856,893,1.856,894,4.268,895,4.268,896,4.268,897,1.856,898,1.856,899,1.856,900,1.856,901,1.856,902,1.856,903,1.856,904,1.856,905,1.856,906,1.856,907,1.856,908,1.856,909,1.856,910,1.856,911,1.856,912,1.856,913,1.856,914,1.856,915,1.856,916,3.729,917,3.631,918,1.856,919,1.856,920,1.856,921,1.856,922,1.856,923,2.533,924,1.856,925,1.856,926,1.856,927,1.856,928,1.856,929,1.856,930,1.856,931,1.856,932,1.856]],["title/modules/RoomsModule.html",[28,0.988,45,2.171]],["body/modules/RoomsModule.html",[2,2.225,3,0.225,4,0.193,5,0.193,11,0.023,16,0.354,17,0.697,20,0.225,21,0.183,26,0.018,27,0.018,28,1.705,30,1.752,31,1.752,32,1.993,33,1.993,34,1.752,35,2.606,36,1.993,43,2.715,45,4.438,47,2.13,48,2.401,49,2.532,50,1.993,51,1.993,53,2.912,57,2.292,63,1.752,64,1.993,67,1.549,68,1.752,191,1.892,200,1.647,382,1.867,450,2.134,814,4.101,871,3.832,872,3.68,933,3.68,934,4.326,935,3.68,936,4.326,937,4.326]],["title/injectables/RoomsService.html",[73,0.686,871,2]],["body/injectables/RoomsService.html",[3,0.214,4,0.096,5,0.096,7,0.349,8,1.069,11,0.024,12,1.164,14,1.983,15,1.374,16,0.314,17,0.349,20,0.113,21,0.092,23,1.67,24,2.054,26,0.011,27,0.011,47,1.478,48,1.665,63,0.877,64,0.997,67,0.775,68,0.877,73,0.66,74,0.824,85,1.321,115,1.391,118,2.339,119,1.147,120,1.665,125,1.568,134,1.237,142,2.658,157,1.068,160,2.649,166,1.147,170,4.174,182,2.407,183,2.407,184,2.407,191,1.313,200,0.824,214,2.357,225,1.55,228,2.185,233,1.451,252,1.55,274,2.284,316,2.658,335,2.435,349,3.39,382,0.934,392,1.343,395,2.185,407,3.307,418,2.086,423,1.922,425,1.47,450,1.068,459,2.8,463,1.391,478,1.842,479,1.842,480,1.147,495,2.761,514,2.53,544,1.629,565,1.629,735,2.8,746,1.629,765,1.629,813,1.629,816,2.861,817,2.861,818,2.861,819,2.861,820,2.861,821,2.861,822,2.861,823,2.861,824,2.861,825,2.861,826,2.861,827,2.861,865,3.924,871,1.922,874,1.842,875,1.842,917,3.508,923,1.842,938,1.842,939,2.165,940,3.363,941,2.165,942,3.363,943,2.165,944,3.363,945,2.165,946,3.363,947,2.165,948,3.363,949,2.165,950,3.363,951,3.363,952,2.165,953,3.363,954,2.165,955,3.363,956,2.165,957,3.363,958,2.165,959,3.363,960,2.165,961,3.363,962,2.165,963,3.363,964,2.165,965,1.842,966,3.956,967,3.508,968,2.165,969,2.165,970,2.165,971,3.363,972,4.65,973,3.363,974,2.165,975,2.165,976,2.165,977,2.165,978,2.165,979,2.165,980,1.842,981,2.165,982,5.229,983,6.146,984,2.165,985,2.165,986,2.861,987,1.842,988,2.165,989,2.165]],["title/classes/SongInfoDto.html",[21,0.148,495,1.51]],["body/classes/SongInfoDto.html",[3,0.239,4,0.205,5,0.205,7,0.74,10,2.19,11,0.023,12,1.195,15,1.354,16,0.297,20,0.239,21,0.242,26,0.018,27,0.018,80,1.46,82,2.172,85,1.395,86,2.704,98,1.152,351,3.876,366,3.852,367,2.627,495,2.463,515,4.672,516,4.672,517,4.672,518,4.672,540,3.541,771,3.12,846,4.295,990,3.91,991,4.595,992,4.595,993,4.595,994,4.595,995,4.595,996,4.595,997,5.708]],["title/classes/SongInfoEntity.html",[21,0.148,998,2.633]],["body/classes/SongInfoEntity.html",[3,0.243,4,0.208,5,0.208,7,0.754,10,2.204,11,0.023,12,1.203,15,1.359,16,0.243,20,0.243,21,0.198,26,0.018,27,0.018,80,1.487,82,2.197,85,1.428,86,2.805,98,1.173,147,2.674,515,4.71,516,4.71,517,4.71,518,4.71,540,4.055,771,3.919,998,4.343,999,3.98,1000,4.678,1001,4.678,1002,4.678,1003,4.678]],["title/classes/UpdateRoomDto.html",[21,0.148,865,2.171]],["body/classes/UpdateRoomDto.html",[3,0.278,4,0.238,5,0.238,11,0.023,16,0.325,20,0.278,21,0.226,26,0.02,27,0.02,80,1.698,98,1.34,332,3.084,333,5.319,334,3.629,335,2.034,336,4.546,865,3.879,1004,4.546]],["title/classes/UpdateUserDto.html",[21,0.148,1005,2.171]],["body/classes/UpdateUserDto.html",[3,0.276,4,0.237,5,0.237,11,0.023,16,0.324,20,0.276,21,0.225,26,0.02,27,0.02,80,1.689,98,1.333,128,2.622,254,2.153,256,3.61,332,3.074,334,3.61,337,4,1005,3.867,1006,4.523,1007,6.233]],["title/classes/UpdateUserProfileDto.html",[21,0.148,662,2.376]],["body/classes/UpdateUserProfileDto.html",[3,0.278,4,0.238,5,0.238,11,0.023,16,0.325,20,0.278,21,0.226,26,0.02,27,0.02,80,1.698,98,1.34,332,3.084,334,3.629,463,1.802,662,4.245,1008,4.546,1009,6.252,1010,5.344]],["title/classes/UserDto.html",[21,0.148,482,2]],["body/classes/UserDto.html",[3,0.27,4,0.231,5,0.231,11,0.023,15,1.207,16,0.32,20,0.27,21,0.26,26,0.02,27,0.02,80,1.651,84,1.752,86,2.653,98,1.303,137,3.224,366,4.064,367,2.97,482,3.515,1011,4.421,1012,4.421,1013,4.421,1014,5.196]],["title/classes/UserEntity.html",[21,0.148,1015,2.633]],["body/classes/UserEntity.html",[3,0.177,4,0.151,5,0.151,7,0.548,10,2.323,11,0.023,12,1.268,15,1.342,16,0.3,20,0.177,21,0.144,26,0.015,27,0.015,80,1.081,82,1.783,84,1.808,85,1.483,86,2.919,98,0.853,231,2.04,235,4.829,312,3.669,335,2.04,339,3.064,395,3.4,397,4.358,414,2.84,421,3.064,463,1.808,481,2.309,489,4.034,490,4.034,493,4.034,494,3.326,495,2.493,496,4.034,497,4.034,498,4.034,499,4.034,684,2.559,1015,3.526,1016,2.893,1017,3.401,1018,3.401,1019,3.401,1020,3.401,1021,3.401,1022,3.401,1023,3.401,1024,3.401,1025,3.401,1026,3.401,1027,3.401,1028,3.401,1029,3.401,1030,3.401]],["title/classes/UserProfileDto.html",[21,0.148,463,1.18]],["body/classes/UserProfileDto.html",[3,0.172,4,0.147,5,0.147,7,0.534,10,2.313,11,0.023,12,1.262,15,1.336,16,0.297,20,0.172,21,0.195,26,0.015,27,0.015,80,1.053,82,1.752,84,1.783,85,1.479,86,2.796,98,0.831,231,2.013,235,4.795,312,3.643,335,2.013,339,3.023,351,4.076,366,3.855,367,1.894,395,3.376,397,4.327,414,2.802,421,3.023,463,1.927,489,3.979,490,3.979,493,3.979,494,3.281,495,2.465,496,3.979,497,3.979,498,3.979,499,3.979,1012,5.528,1013,3.915,1031,2.819,1032,3.313,1033,3.313,1034,3.313,1035,6.372,1036,3.313,1037,3.313,1038,3.313,1039,3.313,1040,3.313,1041,3.313,1042,3.313,1043,3.313,1044,3.313,1045,3.313,1046,3.313,1047,3.313,1048,3.313]],["title/controllers/UsersController.html",[0,1.332,1049,2.376]],["body/controllers/UsersController.html",[0,0.578,2,0.615,3,0.169,4,0.068,5,0.068,7,0.245,8,0.803,10,1.819,11,0.024,12,0.993,14,1.714,15,1.058,16,0.288,17,0.245,20,0.079,21,0.064,23,1.314,24,1.941,26,0.008,27,0.008,47,0.803,48,0.905,63,0.615,64,0.699,67,0.544,68,0.615,72,2.793,84,0.852,85,1.35,89,1.567,90,2.814,91,2.442,96,3.125,98,0.381,102,2.984,109,2.075,112,1.444,115,2.137,118,1.99,119,2.005,120,1.804,124,2.118,125,1.867,128,1.246,129,2.242,136,1.031,137,0.942,158,0.868,165,1.031,166,0.804,167,2.771,168,3.244,175,1.031,182,2.053,183,2.325,184,2.053,214,1.855,222,1.901,225,0.699,231,2.532,233,2.533,254,1.023,256,1.031,281,1.142,300,1.716,316,0.868,317,1.716,328,3.619,329,3.619,330,2.749,335,2.325,349,1.719,382,0.655,414,1.719,418,1.567,421,1.855,423,2.989,450,0.749,459,1.031,463,1.947,480,0.804,481,1.031,482,3.083,484,1.901,500,2.607,592,0.868,645,2.204,653,4.767,671,1.291,674,1.901,675,1.901,677,1.142,678,3.162,680,4.166,681,3.79,682,3.79,683,1.142,688,1.142,689,1.142,698,4.343,707,1.291,708,4.059,714,1.142,722,4.285,723,3.619,724,4.091,725,4.091,735,1.031,747,1.291,748,1.291,749,1.291,750,1.291,751,1.291,752,1.291,841,2.149,843,2.761,844,4.091,845,4.817,846,4.26,878,4.091,886,1.291,1005,3.745,1049,1.716,1050,1.291,1051,2.761,1052,2.149,1053,2.149,1054,2.149,1055,2.149,1056,2.149,1057,2.149,1058,2.761,1059,1.518,1060,1.518,1061,1.518,1062,1.518,1063,1.518,1064,1.518,1065,6.464,1066,1.518,1067,1.518,1068,1.518,1069,1.518,1070,1.518,1071,1.518,1072,1.518,1073,1.518,1074,3.783,1075,1.518,1076,1.518,1077,1.518,1078,3.219,1079,1.518,1080,1.518,1081,1.518,1082,1.518,1083,2.761,1084,1.518,1085,1.518,1086,1.518,1087,1.518,1088,1.518,1089,1.518,1090,1.518,1091,1.518,1092,1.518,1093,1.518,1094,1.518,1095,1.518,1096,1.855,1097,1.291,1098,1.291,1099,1.291,1100,1.291,1101,5.537,1102,1.518,1103,1.518,1104,1.518,1105,1.518,1106,1.518,1107,1.518,1108,1.291,1109,1.518,1110,1.518,1111,1.518,1112,1.518,1113,1.518,1114,1.518,1115,1.518,1116,1.518,1117,1.518,1118,1.518,1119,1.518,1120,1.518,1121,1.518,1122,1.518,1123,1.518,1124,1.518,1125,2.526,1126,1.518,1127,1.518,1128,1.518,1129,1.518,1130,1.518,1131,1.518,1132,1.518,1133,1.518,1134,1.518,1135,1.518,1136,1.518,1137,1.518,1138,1.518,1139,2.149,1140,1.518,1141,1.518,1142,1.291,1143,1.518,1144,1.518,1145,1.518,1146,1.518,1147,1.518,1148,1.518,1149,1.518,1150,1.518,1151,1.518,1152,1.518,1153,1.518,1154,1.518,1155,1.518,1156,1.518,1157,1.518,1158,1.518,1159,1.518]],["title/modules/UsersModule.html",[28,0.988,46,2.171]],["body/modules/UsersModule.html",[2,2.225,3,0.225,4,0.193,5,0.193,11,0.023,16,0.354,17,0.697,20,0.225,21,0.183,26,0.018,27,0.018,28,1.705,30,1.752,31,1.752,32,1.993,33,1.993,34,1.752,35,2.606,36,1.993,43,2.715,46,4.438,47,2.13,48,2.401,49,2.532,50,1.993,51,1.993,53,2.912,57,2.292,63,1.752,64,1.993,67,1.549,68,1.752,191,1.892,200,1.647,382,1.867,450,2.134,1049,4.101,1096,3.832,1097,3.68,1160,3.68,1161,4.326,1162,3.68,1163,4.326,1164,4.326]],["title/injectables/UsersService.html",[73,0.686,1096,2]],["body/injectables/UsersService.html",[3,0.081,4,0.069,5,0.069,7,0.25,8,0.817,11,0.024,12,1.117,14,1.904,15,1.319,16,0.296,17,0.25,20,0.081,21,0.066,23,1.334,24,1.989,26,0.008,27,0.008,47,1.218,48,1.373,63,0.628,64,0.715,67,0.555,68,0.628,73,0.505,74,0.59,84,0.523,85,1.234,112,0.886,115,2.092,118,2.496,119,0.822,120,2.08,124,2.135,125,1.922,128,1.269,129,1.967,142,3.014,157,0.765,170,1.747,182,2.247,183,2.28,184,2.247,185,3.45,191,1.083,200,0.59,214,1.884,222,2.885,225,1.185,228,1.746,231,2.336,233,2.46,252,1.185,254,1.722,256,1.747,286,1.167,291,3.536,307,1.319,308,3.113,310,1.747,311,1.319,312,1.884,321,1.319,330,2.431,335,1.848,338,1.167,339,0.886,346,1.167,348,1.167,349,2.573,382,0.669,392,0.962,407,1.363,414,2.032,418,3.271,420,3.199,421,1.47,423,2.621,425,1.053,428,1.935,433,1.167,450,0.765,459,2.238,463,1.111,480,0.822,481,1.053,482,3.107,500,0.962,504,1.053,524,1.319,531,1.319,538,1.319,539,1.319,541,1.319,544,1.935,572,1.935,645,1.747,735,2.238,756,1.319,965,1.319,966,4.624,967,1.319,980,1.319,982,2.188,986,2.188,1005,3.717,1051,2.188,1052,2.188,1053,2.188,1054,2.188,1055,2.188,1056,2.188,1057,2.803,1058,2.188,1078,2.188,1083,2.188,1096,1.47,1098,1.319,1099,1.319,1100,1.319,1108,3.262,1139,1.319,1142,1.319,1165,1.319,1166,2.572,1167,1.551,1168,2.572,1169,1.551,1170,2.572,1171,1.551,1172,1.551,1173,2.572,1174,1.551,1175,2.572,1176,1.551,1177,2.572,1178,1.551,1179,2.572,1180,1.551,1181,2.572,1182,1.551,1183,2.572,1184,1.551,1185,1.551,1186,2.572,1187,1.551,1188,2.572,1189,1.551,1190,2.572,1191,1.551,1192,2.572,1193,1.551,1194,2.572,1195,1.551,1196,1.551,1197,1.551,1198,1.551,1199,1.551,1200,1.551,1201,1.551,1202,1.551,1203,1.551,1204,1.551,1205,2.572,1206,2.572,1207,2.572,1208,2.572,1209,1.551,1210,2.572,1211,1.551,1212,1.551,1213,1.551,1214,1.551,1215,4.252,1216,4.252,1217,3.617,1218,2.572,1219,2.572,1220,2.572,1221,4.584,1222,4.584,1223,4.584,1224,1.551,1225,1.551,1226,3.295,1227,1.551,1228,1.551,1229,1.551,1230,1.551,1231,1.551,1232,3.834,1233,4.252,1234,1.551,1235,2.572,1236,1.551,1237,2.572,1238,1.551,1239,2.572,1240,1.551,1241,2.572,1242,1.551,1243,2.572,1244,1.551,1245,2.572,1246,1.551,1247,2.572,1248,1.551,1249,1.551,1250,1.551,1251,1.551,1252,1.551,1253,1.551,1254,1.551,1255,1.551,1256,1.551,1257,2.572,1258,1.551,1259,2.572,1260,1.551,1261,1.551,1262,1.551,1263,1.551,1264,1.551,1265,1.551,1266,1.551,1267,1.551,1268,1.551,1269,3.834,1270,4.584,1271,1.551,1272,1.551,1273,1.551,1274,1.551,1275,1.551,1276,1.551,1277,1.551,1278,1.551,1279,3.295,1280,1.551,1281,2.572,1282,1.551,1283,1.551,1284,1.551,1285,1.551,1286,1.551]],["title/coverage.html",[1287,3.595]],["body/coverage.html",[0,2.366,1,2.485,5,0.163,6,3.113,11,0.023,18,2.092,21,0.296,26,0.016,27,0.016,34,1.482,47,1.163,48,1.311,63,1.482,67,1.311,73,1.348,75,3.113,79,2.485,81,3.706,85,0.765,93,1.686,100,2.271,125,1.234,134,4.163,158,2.092,189,2.271,190,2.271,191,1.033,213,3.113,254,1.995,255,2.754,330,2.092,331,3.113,335,1.393,337,3.706,368,3.113,380,2.754,383,3.113,448,2.754,451,3.113,463,1.234,482,2.092,495,1.579,592,2.092,593,3.113,594,3.113,597,3.113,618,3.113,629,3.113,638,2.485,639,3.113,662,2.485,685,2.092,703,2.754,734,3.113,770,3.113,795,2.754,796,3.113,814,2.485,815,3.113,865,2.271,871,2.092,938,3.113,990,3.113,998,2.754,999,3.113,1004,3.113,1005,2.271,1006,3.113,1008,3.113,1011,3.113,1015,2.754,1016,3.113,1031,3.113,1049,2.485,1050,3.113,1096,2.092,1165,3.113,1287,2.754,1288,3.66,1289,3.66,1290,5.956,1291,5.568,1292,3.66,1293,6.542,1294,3.113,1295,3.66,1296,3.66,1297,3.66,1298,5.568,1299,4.926,1300,3.66,1301,5.568,1302,4.926,1303,3.66,1304,3.66,1305,3.66,1306,3.66]],["title/dependencies.html",[31,1.704,1307,2.484]],["body/dependencies.html",[11,0.023,17,0.773,21,0.248,26,0.019,27,0.019,31,1.943,35,2.071,56,3.258,98,1.203,106,3.258,167,2.542,195,2.977,197,4.082,250,5.385,251,4.082,252,2.211,367,2.743,606,4.763,622,4.082,1308,4.798,1309,4.798,1310,4.798,1311,5.862,1312,4.798,1313,6.329,1314,4.798,1315,4.798,1316,4.798,1317,4.798,1318,4.798,1319,4.798,1320,4.798,1321,4.798,1322,4.798,1323,4.798,1324,4.798,1325,4.798,1326,4.798,1327,4.798,1328,4.798,1329,4.798,1330,4.798,1331,4.798,1332,4.798,1333,4.798]],["title/miscellaneous/functions.html",[1334,2.484,1335,3.58]],["body/miscellaneous/functions.html",[7,0.898,11,0.02,26,0.02,27,0.02,34,2.73,1294,4.742,1334,4.742,1335,4.742,1336,5.574]],["title/index.html",[7,0.47,1337,2.92,1338,2.92]],["body/index.html",[4,0.201,11,0.023,26,0.018,27,0.018,109,1.948,704,3.397,723,3.397,746,4.635,987,3.841,1217,3.841,1287,3.397,1339,4.515,1340,4.515,1341,5.645,1342,4.515,1343,4.515,1344,4.515,1345,4.515,1346,4.515,1347,4.515,1348,6.159,1349,4.515,1350,4.515,1351,4.515,1352,4.515,1353,6.875,1354,4.515,1355,4.515,1356,4.515,1357,6.777,1358,4.515,1359,4.515,1360,5.645,1361,4.515,1362,4.515,1363,4.515,1364,4.515,1365,5.645,1366,5.645,1367,4.515,1368,4.515,1369,4.515,1370,5.645,1371,5.645,1372,4.515,1373,4.515,1374,4.515,1375,4.515,1376,4.515,1377,3.841,1378,4.515,1379,4.515,1380,4.515,1381,4.515,1382,4.515,1383,4.515,1384,3.841,1385,4.515,1386,4.515,1387,4.515,1388,4.515,1389,4.515,1390,4.515,1391,3.841]],["title/modules.html",[30,1.935]],["body/modules.html",[11,0.019,26,0.019,27,0.019,29,3.476,30,2.073,40,3.176,41,3.176,42,3.176,43,2.073,44,3.176,45,3.176,46,3.176,1377,6.051,1392,7.112,1393,7.112,1394,7.112]],["title/overview.html",[1395,4.065]],["body/overview.html",[2,1.382,11,0.023,18,3.07,26,0.015,27,0.015,28,0.963,29,4.848,30,1.382,31,1.382,32,1.572,33,1.572,34,1.382,35,1.472,36,1.572,37,2.903,38,2.903,39,2.903,40,4.276,41,4.169,42,4.245,43,2.771,44,4.276,45,4.276,46,4.276,47,2.174,48,2.43,49,2.164,50,1.572,51,1.572,74,1.299,80,1.084,93,2.474,186,2.903,188,2.903,189,3.332,190,3.332,191,1.945,376,2.903,378,2.903,444,2.903,447,2.903,624,2.903,625,2.903,685,3.07,729,2.903,730,2.903,871,3.07,933,2.903,935,2.903,1096,3.07,1160,2.903,1162,2.903,1395,2.903,1396,3.412,1397,3.412,1398,3.412,1399,3.412]],["title/properties.html",[82,1.602,1307,2.484]],["body/properties.html",[11,0.023,26,0.02,27,0.02,82,2.105,109,2.386,1384,4.704,1391,4.704,1400,5.53,1401,5.53,1402,5.53]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuthBody.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"modules/DbUtilsModule.html":{},"injectables/DbUtilsService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":134,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/RoomsService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1401,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1325,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1331,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1324,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1326,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1293,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1296,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1305,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1292,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1303,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1298,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":1304,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":1301,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1291,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1290,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1302,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1299,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1300,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1297,"title":{},"body":{"coverage.html":{}}}],["0ab5",{"_index":750,"title":{},"body":{"injectables/ProfileService.html":{},"controllers/UsersController.html":{}}}],["1",{"_index":274,"title":{"classes/CreateUserDto-1.html":{}},"body":{"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/RoomsService.html":{}}}],["1.0.0",{"_index":1328,"title":{},"body":{"dependencies.html":{}}}],["10.0.0",{"_index":1313,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":1317,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1316,"title":{},"body":{"dependencies.html":{}}}],["11",{"_index":1398,"title":{},"body":{"overview.html":{}}}],["14",{"_index":1399,"title":{},"body":{"overview.html":{}}}],["2.1637.0",{"_index":1322,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":700,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["201",{"_index":108,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["2xx",{"_index":894,"title":{},"body":{"controllers/RoomsController.html":{}}}],["3.2.2",{"_index":1314,"title":{},"body":{"dependencies.html":{}}}],["3.592.0",{"_index":1311,"title":{},"body":{"dependencies.html":{}}}],["311ce2e8",{"_index":747,"title":{},"body":{"injectables/ProfileService.html":{},"controllers/UsersController.html":{}}}],["4.0.1",{"_index":1327,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":1143,"title":{},"body":{"controllers/UsersController.html":{}}}],["403",{"_index":113,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["4xx",{"_index":896,"title":{},"body":{"controllers/RoomsController.html":{}}}],["5",{"_index":1397,"title":{},"body":{"overview.html":{}}}],["5.15.0",{"_index":1321,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":1141,"title":{},"body":{"controllers/UsersController.html":{}}}],["60m",{"_index":207,"title":{},"body":{"modules/AuthModule.html":{}}}],["7.3.1",{"_index":1320,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1333,"title":{},"body":{"dependencies.html":{}}}],["70bd",{"_index":749,"title":{},"body":{"injectables/ProfileService.html":{},"controllers/UsersController.html":{}}}],["8",{"_index":1396,"title":{},"body":{"overview.html":{}}}],["8041",{"_index":748,"title":{},"body":{"injectables/ProfileService.html":{},"controllers/UsersController.html":{}}}],["access",{"_index":210,"title":{},"body":{"modules/AuthModule.html":{}}}],["accesskeyid",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["accountfollowedid",{"_index":403,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/ProfileService.html":{}}}],["accountunfollowedid",{"_index":743,"title":{},"body":{"injectables/ProfileService.html":{}}}],["activity",{"_index":338,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/UsersService.html":{}}}],["add",{"_index":157,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DtoGenService.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{}}}],["added",{"_index":563,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["address",{"_index":138,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["adds",{"_index":901,"title":{},"body":{"controllers/RoomsController.html":{}}}],["addsongtoqueue",{"_index":816,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["addsongtoqueue(req",{"_index":828,"title":{},"body":{"controllers/RoomsController.html":{}}}],["addsongtoqueue(roomid",{"_index":940,"title":{},"body":{"injectables/RoomsService.html":{}}}],["admin_no_srp_auth",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["admingetuser",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["admininitiateauth(params",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["af",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["again",{"_index":725,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["algorithm",{"_index":1268,"title":{},"body":{"injectables/UsersService.html":{}}}],["allrooms",{"_index":971,"title":{},"body":{"injectables/RoomsService.html":{}}}],["amazing",{"_index":1378,"title":{},"body":{"index.html":{}}}],["api",{"_index":104,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["apibadrequestresponse",{"_index":679,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apibearerauth",{"_index":680,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@get('followers')@apitags('users')@apioperation({summary",{"_index":1064,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@get('following')@apitags('users')@apioperation({summary",{"_index":1069,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@get('friends')@apitags('users')@apioperation({summary",{"_index":1081,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@get('new')@apioperation({summary",{"_index":840,"title":{},"body":{"controllers/RoomsController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@get('rooms')@apitags('users')@apioperation({summary",{"_index":1089,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@get('rooms/foryou')@apitags('users')@apioperation({summary",{"_index":1077,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@get('rooms/recent')@apitags('users')@apioperation({summary",{"_index":1073,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@get()@apitags('users",{"_index":1086,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@patch()@apitags('users",{"_index":1094,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@post(':username/follow')@apitags('profile')@apioperation({summary",{"_index":647,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@post(':username/unfollow')@apitags('profile')@apioperation({summary",{"_index":666,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@post('rooms')@apitags('users')@apioperation({summary",{"_index":1060,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@put()@apitags('users",{"_index":1091,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibody",{"_index":95,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["apiokresponse",{"_index":681,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":96,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["apiparam",{"_index":682,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":86,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{}}}],["apiproperty()@isboolean",{"_index":777,"title":{},"body":{"classes/RoomDto.html":{}}}],["apiproperty()@isdate",{"_index":994,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["apiproperty()@isdatestring",{"_index":775,"title":{},"body":{"classes/RoomDto.html":{}}}],["apiproperty()@isint",{"_index":1035,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["apiproperty()@isnumber",{"_index":784,"title":{},"body":{"classes/RoomDto.html":{}}}],["apiproperty()@isstring",{"_index":351,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RoomDto.html":{},"classes/SongInfoDto.html":{},"classes/UserProfileDto.html":{}}}],["apiproperty()@validatenested",{"_index":1033,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["apiproperty({type",{"_index":771,"title":{},"body":{"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{}}}],["apiresponse",{"_index":97,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["apitags",{"_index":683,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["apitags(\"profile",{"_index":709,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apitags(\"rooms",{"_index":879,"title":{},"body":{"controllers/RoomsController.html":{}}}],["apitags(\"users",{"_index":1101,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":1355,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":1347,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":845,"title":{},"body":{"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["artists",{"_index":516,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{}}}],["async",{"_index":115,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["attr",{"_index":145,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["attr.value",{"_index":153,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["attribute.name",{"_index":144,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["attributes",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["attrs.find((attribute",{"_index":146,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["auth",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":193,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":689,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":594,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":94,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/jwt",{"_index":688,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["authbody",{"_index":79,"title":{"classes/AuthBody.html":{}},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"coverage.html":{}}}],["authbody})@apiresponse({status",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["authcontroller",{"_index":100,"title":{"controllers/AuthController.html":{}},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticationresult",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["autherror01",{"_index":130,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["autherror02",{"_index":135,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["autherror03",{"_index":156,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["autherror04",{"_index":163,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["authflow",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["authguard",{"_index":596,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":595,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authinfo",{"_index":117,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["authinfo.usercognitosub",{"_index":152,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["authinfo.username",{"_index":162,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["authmodule",{"_index":40,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1384,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authparameters",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["authresponse",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["authresponse.authenticationresult",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["authservice",{"_index":93,"title":{"injectables/AuthService.html":{}},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":120,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["aws.cognitoidentityserviceprovider",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["aws.cognitoidentityserviceprovider.admininitiateauthrequest",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["aws_access_key_id",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["aws_cognito_client_id",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["aws_cognito_user_pool_id",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["aws_secret_access_key",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["back",{"_index":1121,"title":{},"body":{"controllers/UsersController.html":{}}}],["backers",{"_index":1379,"title":{},"body":{"index.html":{}}}],["basic",{"_index":1103,"title":{},"body":{"controllers/UsersController.html":{}}}],["be97283ee182",{"_index":751,"title":{},"body":{"injectables/ProfileService.html":{},"controllers/UsersController.html":{}}}],["belongs",{"_index":887,"title":{},"body":{"controllers/RoomsController.html":{}}}],["bigdaddy",{"_index":1126,"title":{},"body":{"controllers/UsersController.html":{}}}],["bio",{"_index":339,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/DtoGenService.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"injectables/UsersService.html":{}}}],["body",{"_index":90,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["bookmark",{"_index":340,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["boolean",{"_index":160,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DtoGenService.html":{},"controllers/ProfileController.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["boolean})@apibadrequestresponse({description",{"_index":651,"title":{},"body":{"controllers/ProfileController.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RoomsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["break",{"_index":155,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["browse",{"_index":1394,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1392,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1342,"title":{},"body":{"index.html":{}}}],["catch",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProfileService.html":{}}}],["check",{"_index":521,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["class",{"_index":21,"title":{"classes/AuthBody.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuthBody.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"modules/DbUtilsModule.html":{},"injectables/DbUtilsService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":80,"title":{},"body":{"classes/AuthBody.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"overview.html":{}}}],["clear",{"_index":989,"title":{},"body":{"injectables/RoomsService.html":{}}}],["clearroomqueue",{"_index":817,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["clearroomqueue(@request",{"_index":925,"title":{},"body":{"controllers/RoomsController.html":{}}}],["clearroomqueue(req",{"_index":831,"title":{},"body":{"controllers/RoomsController.html":{}}}],["clearroomqueue(roomid",{"_index":942,"title":{},"body":{"injectables/RoomsService.html":{}}}],["clears",{"_index":921,"title":{},"body":{"controllers/RoomsController.html":{}}}],["clientid",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":186,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":187,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":188,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_dbutilsmodule",{"_index":376,"title":{},"body":{"modules/DbUtilsModule.html":{},"overview.html":{}}}],["cluster_dbutilsmodule_exports",{"_index":378,"title":{},"body":{"modules/DbUtilsModule.html":{},"overview.html":{}}}],["cluster_dbutilsmodule_imports",{"_index":377,"title":{},"body":{"modules/DbUtilsModule.html":{}}}],["cluster_dbutilsmodule_providers",{"_index":379,"title":{},"body":{"modules/DbUtilsModule.html":{}}}],["cluster_dtogenmodule",{"_index":444,"title":{},"body":{"modules/DtoGenModule.html":{},"overview.html":{}}}],["cluster_dtogenmodule_exports",{"_index":447,"title":{},"body":{"modules/DtoGenModule.html":{},"overview.html":{}}}],["cluster_dtogenmodule_imports",{"_index":446,"title":{},"body":{"modules/DtoGenModule.html":{}}}],["cluster_dtogenmodule_providers",{"_index":445,"title":{},"body":{"modules/DtoGenModule.html":{}}}],["cluster_prismamodule",{"_index":624,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":625,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":626,"title":{},"body":{"modules/PrismaModule.html":{}}}],["cluster_profilemodule",{"_index":729,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_profilemodule_imports",{"_index":731,"title":{},"body":{"modules/ProfileModule.html":{}}}],["cluster_profilemodule_providers",{"_index":730,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_roomsmodule",{"_index":933,"title":{},"body":{"modules/RoomsModule.html":{},"overview.html":{}}}],["cluster_roomsmodule_imports",{"_index":934,"title":{},"body":{"modules/RoomsModule.html":{}}}],["cluster_roomsmodule_providers",{"_index":935,"title":{},"body":{"modules/RoomsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1160,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1161,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1162,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["cognito",{"_index":106,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["cognito'})@apibody({type",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["cognitoidentityserviceprovider",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["column",{"_index":585,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["configmodule",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configservice",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["configuration",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["connect",{"_index":1232,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(\"1",{"_index":1122,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(\"2",{"_index":1123,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(\"3",{"_index":1124,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(\"4",{"_index":1127,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(\"5",{"_index":1128,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(\"6",{"_index":1130,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(err",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(response",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(result",{"_index":1116,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(updateuserdto",{"_index":1203,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(user",{"_index":1212,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(users",{"_index":122,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["console.log(users.users",{"_index":123,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["const",{"_index":118,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ProfileService.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":600,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["constructor(configservice",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(prisma",{"_index":392,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/ProfileService.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/DbUtilsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["continue",{"_index":148,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"classes/AuthBody.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller(\"auth",{"_index":99,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["controller(\"profile",{"_index":690,"title":{},"body":{"controllers/ProfileController.html":{}}}],["controller(\"rooms",{"_index":876,"title":{},"body":{"controllers/RoomsController.html":{}}}],["controller(\"users",{"_index":1102,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["count",{"_index":397,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{}}}],["cover",{"_index":517,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{}}}],["coverage",{"_index":1287,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":128,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":1106,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(createuserdto",{"_index":1168,"title":{},"body":{"injectables/UsersService.html":{}}}],["created",{"_index":112,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createroom",{"_index":1051,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createroom(createroomdto",{"_index":1170,"title":{},"body":{"injectables/UsersService.html":{}}}],["createroom(req",{"_index":1059,"title":{},"body":{"controllers/UsersController.html":{}}}],["createroomdto",{"_index":330,"title":{"classes/CreateRoomDto.html":{}},"body":{"classes/CreateRoomDto.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createroomdto.creator",{"_index":1139,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createroomdto.creator.userid",{"_index":1142,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createroomdto.current_song",{"_index":1247,"title":{},"body":{"injectables/UsersService.html":{}}}],["createroomdto.description",{"_index":1235,"title":{},"body":{"injectables/UsersService.html":{}}}],["createroomdto.end_date",{"_index":1259,"title":{},"body":{"injectables/UsersService.html":{}}}],["createroomdto.has_explicit_content",{"_index":1241,"title":{},"body":{"injectables/UsersService.html":{}}}],["createroomdto.has_nsfw_content",{"_index":1243,"title":{},"body":{"injectables/UsersService.html":{}}}],["createroomdto.is_private",{"_index":1252,"title":{},"body":{"injectables/UsersService.html":{}}}],["createroomdto.is_scheduled",{"_index":1261,"title":{},"body":{"injectables/UsersService.html":{}}}],["createroomdto.is_temporary",{"_index":1237,"title":{},"body":{"injectables/UsersService.html":{}}}],["createroomdto.language",{"_index":1239,"title":{},"body":{"injectables/UsersService.html":{}}}],["createroomdto.room_image",{"_index":1245,"title":{},"body":{"injectables/UsersService.html":{}}}],["createroomdto.room_name",{"_index":1228,"title":{},"body":{"injectables/UsersService.html":{}}}],["createroomdto.roomid",{"_index":1233,"title":{},"body":{"injectables/UsersService.html":{}}}],["createroomdto.start_date",{"_index":1257,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuser",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["createuser(@body",{"_index":695,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["createuser(username",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["createuserdto",{"_index":254,"title":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.activity",{"_index":1201,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.bio",{"_index":1199,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.preferences",{"_index":1202,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.profile_picture",{"_index":1200,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.userid",{"_index":1197,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.username",{"_index":1198,"title":{},"body":{"injectables/UsersService.html":{}}}],["creating",{"_index":1266,"title":{},"body":{"injectables/UsersService.html":{}}}],["creation",{"_index":1256,"title":{},"body":{"injectables/UsersService.html":{}}}],["creator",{"_index":500,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["credentials",{"_index":127,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["crud",{"_index":1104,"title":{},"body":{"controllers/UsersController.html":{}}}],["current",{"_index":565,"title":{},"body":{"injectables/DtoGenService.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["current_song",{"_index":494,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{}}}],["currently",{"_index":911,"title":{},"body":{"controllers/RoomsController.html":{}}}],["data",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DtoGenService.html":{},"injectables/ProfileService.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"injectables/UsersService.html":{}}}],["date",{"_index":540,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{}}}],["date_created",{"_index":969,"title":{},"body":{"injectables/RoomsService.html":{}}}],["dates",{"_index":566,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["datetime",{"_index":507,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["db",{"_index":382,"title":{},"body":{"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["dbutils",{"_index":459,"title":{},"body":{"injectables/DtoGenService.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dbutilsmodule",{"_index":41,"title":{"modules/DbUtilsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DbUtilsModule.html":{},"modules.html":{},"overview.html":{}}}],["dbutilsservice",{"_index":47,"title":{"injectables/DbUtilsService.html":{}},"body":{"modules/AppModule.html":{},"modules/DbUtilsModule.html":{},"injectables/DbUtilsService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RoomsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decoded",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["decoded.sub",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthBody.html":{},"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"controllers/ProfileController.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":478,"title":{},"body":{"injectables/DtoGenService.html":{},"injectables/RoomsService.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":765,"title":{},"body":{"injectables/ProfileService.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["delete(\":id",{"_index":1117,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(\":roomid",{"_index":897,"title":{},"body":{"controllers/RoomsController.html":{}}}],["delete(\":roomid/songs",{"_index":924,"title":{},"body":{"controllers/RoomsController.html":{}}}],["deleteroom",{"_index":818,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["deleteroom(@request",{"_index":898,"title":{},"body":{"controllers/RoomsController.html":{}}}],["deleteroom(req",{"_index":834,"title":{},"body":{"controllers/RoomsController.html":{}}}],["deleteroom(roomid",{"_index":944,"title":{},"body":{"injectables/RoomsService.html":{}}}],["deletes",{"_index":893,"title":{},"body":{"controllers/RoomsController.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RoomsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":970,"title":{},"body":{"injectables/RoomsService.html":{}}}],["description",{"_index":109,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/DtoGenService.html":{},"controllers/ProfileController.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["detailed",{"_index":705,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["dev",{"_index":692,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["development",{"_index":1356,"title":{},"body":{"index.html":{}}}],["disable",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["documentation",{"_index":703,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"coverage.html":{}}}],["doesn't",{"_index":432,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["dto",{"_index":450,"title":{},"body":{"modules/DtoGenModule.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["dto/create",{"_index":1196,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto/createroomdto",{"_index":873,"title":{},"body":{"controllers/RoomsController.html":{}}}],["dto/room.dto",{"_index":875,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["dto/songinfo.dto",{"_index":813,"title":{},"body":{"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["dto/update",{"_index":1098,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/updateroomdto",{"_index":874,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["dto/updateuserprofile.dto",{"_index":687,"title":{},"body":{"controllers/ProfileController.html":{}}}],["dto/user.dto",{"_index":1099,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/userprofile.dto",{"_index":684,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/UserEntity.html":{}}}],["dtogen",{"_index":735,"title":{},"body":{"injectables/ProfileService.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtogenmodule",{"_index":42,"title":{"modules/DtoGenModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DtoGenModule.html":{},"modules.html":{},"overview.html":{}}}],["dtogenservice",{"_index":48,"title":{"injectables/DtoGenService.html":{}},"body":{"modules/AppModule.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["dtos",{"_index":520,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["duplicate",{"_index":573,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["e",{"_index":760,"title":{},"body":{"injectables/ProfileService.html":{}}}],["e2e",{"_index":1367,"title":{},"body":{"index.html":{}}}],["each",{"_index":693,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["edits",{"_index":712,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["efficient",{"_index":1343,"title":{},"body":{"index.html":{}}}],["email",{"_index":137,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{}}}],["end_date",{"_index":508,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{}}}],["ensure",{"_index":208,"title":{},"body":{"modules/AuthModule.html":{}}}],["environment",{"_index":211,"title":{},"body":{"modules/AuthModule.html":{}}}],["err",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["error",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DtoGenService.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"injectables/UsersService.html":{}}}],["error(\"failed",{"_index":761,"title":{},"body":{"injectables/ProfileService.html":{}}}],["error(\"invalid",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["error(\"missing",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["error(\"more",{"_index":442,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["error(\"no",{"_index":1224,"title":{},"body":{"injectables/UsersService.html":{}}}],["error(\"room",{"_index":429,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["error(\"something",{"_index":1263,"title":{},"body":{"injectables/UsersService.html":{}}}],["error(\"user",{"_index":756,"title":{},"body":{"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["error(\"you",{"_index":753,"title":{},"body":{"injectables/ProfileService.html":{}}}],["eslint",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["example",{"_index":746,"title":{},"body":{"injectables/ProfileService.html":{},"injectables/RoomsService.html":{},"index.html":{}}}],["except",{"_index":922,"title":{},"body":{"controllers/RoomsController.html":{}}}],["exist",{"_index":433,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["existinguser",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["exists",{"_index":522,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["expiration",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["expired",{"_index":173,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["expiresin",{"_index":206,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuthBody.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"modules/DbUtilsModule.html":{},"injectables/DbUtilsService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RoomsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":1319,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":332,"title":{},"body":{"classes/CreateRoomDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["extractjwt",{"_index":605,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":613,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["f",{"_index":1270,"title":{},"body":{"injectables/UsersService.html":{}}}],["failed",{"_index":1140,"title":{},"body":{"controllers/UsersController.html":{}}}],["false",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{}}}],["fav_genres",{"_index":496,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{}}}],["fav_rooms",{"_index":498,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{}}}],["fav_songs",{"_index":497,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuthBody.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"modules/DbUtilsModule.html":{},"injectables/DbUtilsService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["find",{"_index":763,"title":{},"body":{"injectables/ProfileService.html":{}}}],["findall",{"_index":1108,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone",{"_index":1166,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone(@param(\"id",{"_index":1111,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(userid",{"_index":1173,"title":{},"body":{"injectables/UsersService.html":{}}}],["fix",{"_index":580,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["follow",{"_index":440,"title":{},"body":{"injectables/DbUtilsService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["follow.follows_id",{"_index":769,"title":{},"body":{"injectables/ProfileService.html":{}}}],["follow.length",{"_index":441,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["followed",{"_index":650,"title":{},"body":{"controllers/ProfileController.html":{}}}],["followee",{"_index":417,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/ProfileService.html":{}}}],["followee.user_id",{"_index":1286,"title":{},"body":{"injectables/UsersService.html":{}}}],["followees",{"_index":1284,"title":{},"body":{"injectables/UsersService.html":{}}}],["followees.map((followee",{"_index":1285,"title":{},"body":{"injectables/UsersService.html":{}}}],["follower",{"_index":422,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/ProfileService.html":{}}}],["follower.user_id",{"_index":1283,"title":{},"body":{"injectables/UsersService.html":{}}}],["followers",{"_index":421,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["followers'})@apiparam({name",{"_index":1066,"title":{},"body":{"controllers/UsersController.html":{}}}],["followers.map((follower",{"_index":1282,"title":{},"body":{"injectables/UsersService.html":{}}}],["following",{"_index":414,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"controllers/ProfileController.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["following'})@apiparam({name",{"_index":1070,"title":{},"body":{"controllers/UsersController.html":{}}}],["following.length",{"_index":526,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["follows_follows_followeetousers",{"_index":341,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["follows_follows_followertousers",{"_index":342,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["follows_id",{"_index":768,"title":{},"body":{"injectables/ProfileService.html":{}}}],["followuser",{"_index":640,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["followuser(req",{"_index":646,"title":{},"body":{"controllers/ProfileController.html":{}}}],["followuser(userid",{"_index":737,"title":{},"body":{"injectables/ProfileService.html":{}}}],["forbidden",{"_index":114,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["foreign",{"_index":1230,"title":{},"body":{"injectables/UsersService.html":{}}}],["found",{"_index":430,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["framework",{"_index":1341,"title":{},"body":{"index.html":{}}}],["friend",{"_index":1275,"title":{},"body":{"injectables/UsersService.html":{}}}],["friend.friend1",{"_index":1276,"title":{},"body":{"injectables/UsersService.html":{}}}],["friend1",{"_index":1272,"title":{},"body":{"injectables/UsersService.html":{}}}],["friend2",{"_index":1273,"title":{},"body":{"injectables/UsersService.html":{}}}],["friends",{"_index":1083,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["friends'})@apiparam({name",{"_index":1082,"title":{},"body":{"controllers/UsersController.html":{}}}],["friends_friends_friend1tousers",{"_index":343,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["friends_friends_friend2tousers",{"_index":344,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["fully_qualify",{"_index":476,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["function",{"_index":1295,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1335,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gen.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["gen.module.ts",{"_index":449,"title":{},"body":{"modules/DtoGenModule.html":{}}}],["gen.service",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/DtoGenModule.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["gen.service.ts",{"_index":451,"title":{},"body":{"injectables/DtoGenService.html":{},"coverage.html":{}}}],["gen.service.ts:173",{"_index":462,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["gen.service.ts:218",{"_index":468,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["gen.service.ts:242",{"_index":471,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["gen.service.ts:300",{"_index":473,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["gen.service.ts:354",{"_index":465,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["gen.service.ts:420",{"_index":474,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["gen.service.ts:87",{"_index":460,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["gen.service.ts:93",{"_index":477,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["gen/dto",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["generate",{"_index":166,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DtoGenService.html":{},"injectables/ProfileService.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{}}}],["generatebriefuserprofiledto",{"_index":452,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generatebriefuserprofiledto(user",{"_index":461,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generatejwt",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatejwt(payload",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatemultipleroomdto",{"_index":453,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generatemultipleroomdto(room_ids",{"_index":464,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generatemultipleuserprofiledto",{"_index":454,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generatemultipleuserprofiledto(user_ids",{"_index":467,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generateroomdto",{"_index":455,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generateroomdto(roomid",{"_index":470,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generateroomdtofromroom",{"_index":456,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generateroomdtofromroom(room",{"_index":472,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generateuserdto",{"_index":457,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generateuserprofiledto",{"_index":458,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generateuserprofiledto(userid",{"_index":475,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generating",{"_index":1222,"title":{},"body":{"injectables/UsersService.html":{}}}],["get(\":id",{"_index":1110,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(\":roomid",{"_index":882,"title":{},"body":{"controllers/RoomsController.html":{}}}],["get(\":roomid/songs",{"_index":918,"title":{},"body":{"controllers/RoomsController.html":{}}}],["get(\":roomid/songs/current",{"_index":930,"title":{},"body":{"controllers/RoomsController.html":{}}}],["get(\":roomid/users",{"_index":913,"title":{},"body":{"controllers/RoomsController.html":{}}}],["get(\":username",{"_index":718,"title":{},"body":{"controllers/ProfileController.html":{}}}],["get(\"followers",{"_index":1154,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(\"following",{"_index":1157,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(\"friends",{"_index":1151,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(\"new",{"_index":877,"title":{},"body":{"controllers/RoomsController.html":{}}}],["get(\"rooms",{"_index":1135,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(\"rooms/foryou",{"_index":1148,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(\"rooms/recent",{"_index":1145,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id",{"_index":696,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["getcurrentsong",{"_index":819,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["getcurrentsong(@request",{"_index":931,"title":{},"body":{"controllers/RoomsController.html":{}}}],["getcurrentsong(req",{"_index":837,"title":{},"body":{"controllers/RoomsController.html":{}}}],["getcurrentsong(roomid",{"_index":946,"title":{},"body":{"injectables/RoomsService.html":{}}}],["getfollowers",{"_index":1052,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getfollowers(@request",{"_index":1155,"title":{},"body":{"controllers/UsersController.html":{}}}],["getfollowers(req",{"_index":1063,"title":{},"body":{"controllers/UsersController.html":{}}}],["getfollowers(userid",{"_index":1175,"title":{},"body":{"injectables/UsersService.html":{}}}],["getfollowing",{"_index":1053,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getfollowing(@request",{"_index":1158,"title":{},"body":{"controllers/UsersController.html":{}}}],["getfollowing(req",{"_index":1068,"title":{},"body":{"controllers/UsersController.html":{}}}],["getfollowing(userid",{"_index":1177,"title":{},"body":{"injectables/UsersService.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getnewrooms",{"_index":820,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["getnewrooms(limit",{"_index":948,"title":{},"body":{"injectables/RoomsService.html":{}}}],["getprofile",{"_index":641,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["getprofile(@request",{"_index":710,"title":{},"body":{"controllers/ProfileController.html":{}}}],["getprofile(req",{"_index":654,"title":{},"body":{"controllers/ProfileController.html":{}}}],["getprofilebyusername",{"_index":642,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["getprofilebyusername(req",{"_index":657,"title":{},"body":{"controllers/ProfileController.html":{}}}],["getrandomrooms",{"_index":384,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["getrandomrooms(count",{"_index":394,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["getrecentrooms",{"_index":1054,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getrecentrooms(@request",{"_index":1146,"title":{},"body":{"controllers/UsersController.html":{}}}],["getrecentrooms(req",{"_index":1072,"title":{},"body":{"controllers/UsersController.html":{}}}],["getrecentrooms(userid",{"_index":1179,"title":{},"body":{"injectables/UsersService.html":{}}}],["getrecommendedrooms",{"_index":1055,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getrecommendedrooms(@request",{"_index":1149,"title":{},"body":{"controllers/UsersController.html":{}}}],["getrecommendedrooms(req",{"_index":1076,"title":{},"body":{"controllers/UsersController.html":{}}}],["getrecommendedrooms(userid",{"_index":1181,"title":{},"body":{"injectables/UsersService.html":{}}}],["getroominfo",{"_index":821,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["getroominfo(@request",{"_index":883,"title":{},"body":{"controllers/RoomsController.html":{}}}],["getroominfo(req",{"_index":849,"title":{},"body":{"controllers/RoomsController.html":{}}}],["getroominfo(roomid",{"_index":951,"title":{},"body":{"injectables/RoomsService.html":{}}}],["getroomqueue",{"_index":822,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["getroomqueue(@request",{"_index":919,"title":{},"body":{"controllers/RoomsController.html":{}}}],["getroomqueue(req",{"_index":852,"title":{},"body":{"controllers/RoomsController.html":{}}}],["getroomqueue(roomid",{"_index":953,"title":{},"body":{"injectables/RoomsService.html":{}}}],["getroomusers",{"_index":823,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["getroomusers(@request",{"_index":914,"title":{},"body":{"controllers/RoomsController.html":{}}}],["getroomusers(req",{"_index":855,"title":{},"body":{"controllers/RoomsController.html":{}}}],["getroomusers(roomid",{"_index":955,"title":{},"body":{"injectables/RoomsService.html":{}}}],["gets",{"_index":707,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["getting",{"_index":1337,"title":{"index.html":{}},"body":{}}],["getuser(@param('id",{"_index":701,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["getuserfollowers",{"_index":385,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["getuserfollowers(userid",{"_index":398,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["getuserfollowing",{"_index":386,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["getuserfollowing(userid",{"_index":400,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["getuserfriends",{"_index":1056,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserfriends(@request",{"_index":1152,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserfriends(req",{"_index":1080,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserfriends(userid",{"_index":1183,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserinfo",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserinfo(@request",{"_index":1120,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserinfo(jwt_token",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["getuserinfo(req",{"_index":1085,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserrooms",{"_index":1057,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserrooms(@request",{"_index":1136,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserrooms(req",{"_index":1088,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserrooms(userid",{"_index":1186,"title":{},"body":{"injectables/UsersService.html":{}}}],["given",{"_index":139,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{}}}],["goes",{"_index":1216,"title":{},"body":{"injectables/UsersService.html":{}}}],["grow",{"_index":1374,"title":{},"body":{"index.html":{}}}],["has_explicit_content",{"_index":510,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{}}}],["has_nsfw_content",{"_index":511,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{}}}],["hello",{"_index":77,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":1217,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["httpexception",{"_index":91,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["https://nestjs.com",{"_index":1388,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":92,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["httpstatus.unauthorized",{"_index":131,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["id",{"_index":698,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["identifier",{"_index":1288,"title":{},"body":{"coverage.html":{}}}],["identity",{"_index":1309,"title":{},"body":{"dependencies.html":{}}}],["ids",{"_index":420,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/UsersService.html":{}}}],["ids.push(friend.friend1",{"_index":1278,"title":{},"body":{"injectables/UsersService.html":{}}}],["ids.push(friend.friend2",{"_index":1277,"title":{},"body":{"injectables/UsersService.html":{}}}],["ignoreexpiration",{"_index":614,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implement",{"_index":982,"title":{},"body":{"injectables/RoomsService.html":{},"injectables/UsersService.html":{}}}],["implementation",{"_index":1215,"title":{},"body":{"injectables/UsersService.html":{}}}],["implements",{"_index":635,"title":{},"body":{"injectables/PrismaService.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuthBody.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"modules/DbUtilsModule.html":{},"injectables/DbUtilsService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imported",{"_index":209,"title":{},"body":{"modules/AuthModule.html":{}}}],["imports",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"modules/ProfileModule.html":{},"modules/RoomsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuthBody.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"modules/DbUtilsModule.html":{},"injectables/DbUtilsService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":487,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["informative",{"_index":706,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["injectable",{"_index":73,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/ProfileService.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/ProfileService.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":74,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/ProfileService.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["input",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["installation",{"_index":1352,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1354,"title":{},"body":{"index.html":{}}}],["int",{"_index":491,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["invalid",{"_index":126,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["is_private",{"_index":504,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"injectables/UsersService.html":{}}}],["is_scheduled",{"_index":505,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{}}}],["is_temporary",{"_index":503,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{}}}],["isarray",{"_index":846,"title":{},"body":{"controllers/RoomsController.html":{},"classes/SongInfoDto.html":{},"controllers/UsersController.html":{}}}],["isboolean",{"_index":791,"title":{},"body":{"classes/RoomDto.html":{}}}],["isdate",{"_index":997,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["isdatestring",{"_index":793,"title":{},"body":{"classes/RoomDto.html":{}}}],["isfollowing",{"_index":387,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["isfollowing(userid",{"_index":402,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["isglobal",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":1012,"title":{},"body":{"classes/UserDto.html":{},"classes/UserProfileDto.html":{}}}],["isnumber",{"_index":792,"title":{},"body":{"classes/RoomDto.html":{}}}],["isroomprivate",{"_index":388,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["isroomprivate(roomid",{"_index":405,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["isroompublic",{"_index":389,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["isroompublic(roomid",{"_index":408,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["isstring",{"_index":366,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RoomDto.html":{},"classes/SongInfoDto.html":{},"classes/UserDto.html":{},"classes/UserProfileDto.html":{}}}],["join",{"_index":987,"title":{},"body":{"injectables/RoomsService.html":{},"index.html":{}}}],["joinroom",{"_index":824,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["joinroom(@request",{"_index":903,"title":{},"body":{"controllers/RoomsController.html":{}}}],["joinroom(req",{"_index":858,"title":{},"body":{"controllers/RoomsController.html":{}}}],["joinroom(roomid",{"_index":957,"title":{},"body":{"injectables/RoomsService.html":{}}}],["json",{"_index":488,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["jsonwebtoken",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwt",{"_index":167,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["jwt.sign(payload",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwt.strategy",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt.verify(jwt_token",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwt_secret_key",{"_index":610,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwt_token",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtauthguard",{"_index":592,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":612,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":201,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtsecret",{"_index":608,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtstrategy",{"_index":189,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1385,"title":{},"body":{"index.html":{}}}],["key",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["language",{"_index":509,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{}}}],["later",{"_index":564,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["leave",{"_index":988,"title":{},"body":{"injectables/RoomsService.html":{}}}],["leaveroom",{"_index":825,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["leaveroom(@request",{"_index":907,"title":{},"body":{"controllers/RoomsController.html":{}}}],["leaveroom(req",{"_index":861,"title":{},"body":{"controllers/RoomsController.html":{}}}],["leaveroom(roomid",{"_index":959,"title":{},"body":{"injectables/RoomsService.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RoomsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":1391,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1371,"title":{},"body":{"index.html":{}}}],["limit",{"_index":950,"title":{},"body":{"injectables/RoomsService.html":{}}}],["line",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["links",{"_index":493,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{}}}],["listing",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["listusers",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["listusers(params",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["literal",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{}}}],["local",{"_index":622,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{}}}],["localstrategy",{"_index":190,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":724,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["logic",{"_index":983,"title":{},"body":{"injectables/RoomsService.html":{}}}],["login",{"_index":103,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["login(@body",{"_index":116,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["login(authinfo",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout",{"_index":174,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["match",{"_index":136,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["matches",{"_index":149,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuthBody.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"modules/DbUtilsModule.html":{},"injectables/DbUtilsService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["message",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["metadata",{"_index":1330,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":171,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["miscellaneous",{"_index":1334,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["mit",{"_index":1370,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1360,"title":{},"body":{"index.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RoomsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RoomsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RoomsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/db",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/dto",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/profile/profile.module",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/rooms/rooms.module",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/users/users.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":704,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"index.html":{}}}],["myśliwiec",{"_index":1386,"title":{},"body":{"index.html":{}}}],["name",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":1249,"title":{},"body":{"injectables/UsersService.html":{}}}],["nest",{"_index":1348,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1390,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuthBody.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DbUtilsModule.html":{},"injectables/DbUtilsService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1315,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":197,"title":{},"body":{"modules/AuthModule.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":195,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1318,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":98,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"controllers/ProfileController.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":125,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newly",{"_index":841,"title":{},"body":{"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["newroom",{"_index":1226,"title":{},"body":{"injectables/UsersService.html":{}}}],["newroom.current_song",{"_index":1248,"title":{},"body":{"injectables/UsersService.html":{}}}],["newroom.description",{"_index":1236,"title":{},"body":{"injectables/UsersService.html":{}}}],["newroom.end_date",{"_index":1260,"title":{},"body":{"injectables/UsersService.html":{}}}],["newroom.explicit",{"_index":1242,"title":{},"body":{"injectables/UsersService.html":{}}}],["newroom.is_temporary",{"_index":1238,"title":{},"body":{"injectables/UsersService.html":{}}}],["newroom.language",{"_index":1240,"title":{},"body":{"injectables/UsersService.html":{}}}],["newroom.nsfw",{"_index":1244,"title":{},"body":{"injectables/UsersService.html":{}}}],["newroom.playlist_photo",{"_index":1246,"title":{},"body":{"injectables/UsersService.html":{}}}],["newroom.private_room",{"_index":1253,"title":{},"body":{"injectables/UsersService.html":{}}}],["newroom.public_room",{"_index":1254,"title":{},"body":{"injectables/UsersService.html":{}}}],["newroom.room_id",{"_index":1234,"title":{},"body":{"injectables/UsersService.html":{}}}],["newroom.start_date",{"_index":1258,"title":{},"body":{"injectables/UsersService.html":{}}}],["next",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["node.js",{"_index":1340,"title":{},"body":{"index.html":{}}}],["none",{"_index":878,"title":{},"body":{"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["none'})@apiokresponse({description",{"_index":844,"title":{},"body":{"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["note",{"_index":691,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["npm",{"_index":1353,"title":{},"body":{"index.html":{}}}],["null",{"_index":142,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{}}}],["number",{"_index":395,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"injectables/RoomsService.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{}}}],["object",{"_index":485,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["occurred",{"_index":1221,"title":{},"body":{"injectables/UsersService.html":{}}}],["one",{"_index":443,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["onmoduledestroy",{"_index":631,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":632,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":1372,"title":{},"body":{"index.html":{}}}],["operations",{"_index":1105,"title":{},"body":{"controllers/UsersController.html":{}}}],["optional",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["orderby",{"_index":968,"title":{},"body":{"injectables/RoomsService.html":{}}}],["out",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RoomsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["output",{"_index":713,"title":{},"body":{"controllers/ProfileController.html":{}}}],["overview",{"_index":1395,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1307,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":676,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["param(\"roomid",{"_index":884,"title":{},"body":{"controllers/RoomsController.html":{}}}],["param(\"username",{"_index":719,"title":{},"body":{"controllers/ProfileController.html":{}}}],["parameters",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["params",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["partial",{"_index":888,"title":{},"body":{"controllers/RoomsController.html":{}}}],["partialtype",{"_index":334,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["partialtype(createuserdto",{"_index":1007,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(roomdto",{"_index":333,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/UpdateRoomDto.html":{}}}],["partialtype(userprofiledto",{"_index":1009,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["participant",{"_index":562,"title":{},"body":{"injectables/DtoGenService.html":{},"controllers/RoomsController.html":{}}}],["participant_count",{"_index":545,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{}}}],["participate",{"_index":345,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["partipicant_count",{"_index":501,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["passport",{"_index":606,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":194,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":607,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":598,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["patch",{"_index":675,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["patch(\":id",{"_index":1113,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(\":roomid",{"_index":889,"title":{},"body":{"controllers/RoomsController.html":{}}}],["patchprofile",{"_index":643,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["patchprofile(req",{"_index":660,"title":{},"body":{"controllers/ProfileController.html":{}}}],["paths",{"_index":694,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["payload",{"_index":164,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":616,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":617,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["people",{"_index":910,"title":{},"body":{"controllers/RoomsController.html":{}}}],["playing",{"_index":923,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["please",{"_index":723,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["post",{"_index":89,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["post(\":roomid/join",{"_index":902,"title":{},"body":{"controllers/RoomsController.html":{}}}],["post(\":roomid/leave",{"_index":906,"title":{},"body":{"controllers/RoomsController.html":{}}}],["post(\":roomid/songs",{"_index":927,"title":{},"body":{"controllers/RoomsController.html":{}}}],["post(\":username/follow",{"_index":721,"title":{},"body":{"controllers/ProfileController.html":{}}}],["post(\":username/unfollow",{"_index":727,"title":{},"body":{"controllers/ProfileController.html":{}}}],["post(\"login",{"_index":101,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["post(\"rooms",{"_index":1138,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('login')@apioperation({summary",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["pr",{"_index":972,"title":{},"body":{"injectables/RoomsService.html":{}}}],["pr.room_id",{"_index":977,"title":{},"body":{"injectables/RoomsService.html":{}}}],["preferences",{"_index":346,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/UsersService.html":{}}}],["prefix",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["prettier/prettier",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["previously",{"_index":912,"title":{},"body":{"controllers/RoomsController.html":{}}}],["prisma",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto-1.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/ProfileService.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{}}}],["prisma.follows",{"_index":415,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["prisma.jsonvalue",{"_index":369,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["prisma.private_room",{"_index":438,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["prisma.public_room",{"_index":435,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["prisma.room",{"_index":424,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{}}}],["prisma.roomcreateinput",{"_index":1227,"title":{},"body":{"injectables/UsersService.html":{}}}],["prisma.service",{"_index":628,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma.users",{"_index":419,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{}}}],["prisma.userscreateinput",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["prisma.usersupdateinput",{"_index":1204,"title":{},"body":{"injectables/UsersService.html":{}}}],["prisma/client",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto-1.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/PrismaService.html":{},"injectables/ProfileService.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["prisma/prisma.module",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"modules/ProfileModule.html":{},"modules/RoomsModule.html":{},"modules/UsersModule.html":{}}}],["prisma/prisma.module.ts",{"_index":627,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/prisma.service",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DbUtilsModule.html":{},"injectables/DbUtilsService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["prisma/prisma.service.ts",{"_index":629,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["prisma/prisma.service.ts:13",{"_index":633,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prisma/prisma.service.ts:9",{"_index":634,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaclient",{"_index":630,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":43,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RoomsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":191,"title":{"injectables/PrismaService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DbUtilsModule.html":{},"injectables/DbUtilsService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["prismatypes",{"_index":965,"title":{},"body":{"injectables/RoomsService.html":{},"injectables/UsersService.html":{}}}],["prismatypes.friends",{"_index":1274,"title":{},"body":{"injectables/UsersService.html":{}}}],["prismatypes.public_room",{"_index":973,"title":{},"body":{"injectables/RoomsService.html":{}}}],["prismatypes.room",{"_index":967,"title":{},"body":{"injectables/RoomsService.html":{},"injectables/UsersService.html":{}}}],["prismatypes.users",{"_index":1281,"title":{},"body":{"injectables/UsersService.html":{}}}],["private",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DtoGenService.html":{},"injectables/ProfileService.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["private_message",{"_index":347,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["private_room",{"_index":1250,"title":{},"body":{"injectables/UsersService.html":{}}}],["privateroom",{"_index":437,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["probably",{"_index":431,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["process.env.jwt_secret",{"_index":203,"title":{},"body":{"modules/AuthModule.html":{}}}],["process.env.jwt_secret_key",{"_index":609,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["production",{"_index":1362,"title":{},"body":{"index.html":{}}}],["profile",{"_index":484,"title":{},"body":{"injectables/DtoGenService.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["profile.controller",{"_index":733,"title":{},"body":{"modules/ProfileModule.html":{}}}],["profile.service",{"_index":686,"title":{},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{}}}],["profile/dto/userprofile.dto",{"_index":480,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["profile/{username",{"_index":717,"title":{},"body":{"controllers/ProfileController.html":{}}}],["profile_name",{"_index":489,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{}}}],["profile_picture",{"_index":348,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/UsersService.html":{}}}],["profile_picture_url",{"_index":490,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{}}}],["profilecontroller",{"_index":638,"title":{"controllers/ProfileController.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"coverage.html":{}}}],["profiledto",{"_index":492,"title":{},"body":{"injectables/DtoGenService.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["profilemodule",{"_index":44,"title":{"modules/ProfileModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProfileModule.html":{},"modules.html":{},"overview.html":{}}}],["profileservice",{"_index":685,"title":{"injectables/ProfileService.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"overview.html":{}}}],["progressive",{"_index":1339,"title":{},"body":{"index.html":{}}}],["project",{"_index":1373,"title":{},"body":{"index.html":{}}}],["promise",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/LocalStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":82,"title":{"properties.html":{}},"body":{"classes/AuthBody.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"properties.html":{}}}],["provided",{"_index":1225,"title":{},"body":{"injectables/UsersService.html":{}}}],["provider",{"_index":1310,"title":{},"body":{"dependencies.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RoomsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["public",{"_index":842,"title":{},"body":{"controllers/RoomsController.html":{}}}],["publicroom",{"_index":434,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["publicrooms",{"_index":975,"title":{},"body":{"injectables/RoomsService.html":{}}}],["publicrooms.find((pr",{"_index":976,"title":{},"body":{"injectables/RoomsService.html":{}}}],["publicrooms.splice(limit",{"_index":979,"title":{},"body":{"injectables/RoomsService.html":{}}}],["put",{"_index":674,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["put(\":roomid",{"_index":891,"title":{},"body":{"controllers/RoomsController.html":{}}}],["put/patch",{"_index":886,"title":{},"body":{"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["queue",{"_index":917,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["r",{"_index":966,"title":{},"body":{"injectables/RoomsService.html":{},"injectables/UsersService.html":{}}}],["r.description",{"_index":583,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["r.explicit",{"_index":587,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["r.is_temporary",{"_index":584,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["r.name",{"_index":582,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["r.nsfw",{"_index":588,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["r.playlist_photo",{"_index":589,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["r.room_creator",{"_index":571,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["r.room_id",{"_index":527,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["r.room_language",{"_index":586,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["r.tags",{"_index":590,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["read",{"_index":1381,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["received",{"_index":1223,"title":{},"body":{"injectables/UsersService.html":{}}}],["recent",{"_index":1074,"title":{},"body":{"controllers/UsersController.html":{}}}],["recent_rooms",{"_index":499,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{}}}],["recentrooms",{"_index":530,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["recentrooms.length",{"_index":533,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["recentrooms.map((r",{"_index":534,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["recommendation",{"_index":1267,"title":{},"body":{"injectables/UsersService.html":{}}}],["recommended",{"_index":1078,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["recommends",{"_index":1269,"title":{},"body":{"injectables/UsersService.html":{}}}],["record",{"_index":110,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["reflect",{"_index":1329,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":172,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["region",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["relation",{"_index":1231,"title":{},"body":{"injectables/UsersService.html":{}}}],["relationship",{"_index":764,"title":{},"body":{"injectables/ProfileService.html":{}}}],["remove",{"_index":572,"title":{},"body":{"injectables/DtoGenService.html":{},"controllers/RoomsController.html":{},"injectables/UsersService.html":{}}}],["remove(@param(\"id",{"_index":1118,"title":{},"body":{"controllers/UsersController.html":{}}}],["remove(userid",{"_index":1188,"title":{},"body":{"injectables/UsersService.html":{}}}],["repository",{"_index":1351,"title":{},"body":{"index.html":{}}}],["representing",{"_index":486,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["req",{"_index":653,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["req.user",{"_index":1125,"title":{},"body":{"controllers/UsersController.html":{}}}],["req.user.email",{"_index":1131,"title":{},"body":{"controllers/UsersController.html":{}}}],["req.user.sub",{"_index":722,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["req.user.username",{"_index":1129,"title":{},"body":{"controllers/UsersController.html":{}}}],["request",{"_index":678,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["required",{"_index":699,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["reset",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RoomsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["responsepromise",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["result",{"_index":418,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["result.creator",{"_index":561,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["result.end_date",{"_index":558,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["result.fav_rooms.data",{"_index":529,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["result.following.count",{"_index":525,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["result.is_scheduled",{"_index":555,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["result.push(room",{"_index":591,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["result.push(roomdto",{"_index":981,"title":{},"body":{"injectables/RoomsService.html":{}}}],["result.recent_rooms.count",{"_index":532,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["result.recent_rooms.data",{"_index":535,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["result.start_date",{"_index":556,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuthBody.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"modules/DbUtilsModule.html":{},"injectables/DbUtilsService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["retrieve",{"_index":697,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["room",{"_index":349,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["room'})@apiparam({name",{"_index":1061,"title":{},"body":{"controllers/UsersController.html":{}}}],["room.description",{"_index":547,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["room.dto",{"_index":336,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/UpdateRoomDto.html":{}}}],["room.explicit",{"_index":551,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["room.is_temporary",{"_index":548,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["room.name",{"_index":546,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["room.nsfw",{"_index":552,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["room.playlist_photo",{"_index":553,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["room.room_id",{"_index":544,"title":{},"body":{"injectables/DtoGenService.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{}}}],["room.room_language",{"_index":550,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["room.tags",{"_index":554,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["room_creator",{"_index":1218,"title":{},"body":{"injectables/UsersService.html":{}}}],["room_id",{"_index":428,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/UsersService.html":{}}}],["room_ids",{"_index":466,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["room_image",{"_index":512,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{}}}],["room_name",{"_index":502,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{}}}],["roomdto",{"_index":335,"title":{"classes/RoomDto.html":{}},"body":{"classes/CreateRoomDto.html":{},"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"classes/UpdateRoomDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["roomentity",{"_index":795,"title":{"classes/RoomEntity.html":{}},"body":{"classes/RoomEntity.html":{},"coverage.html":{}}}],["roomexists",{"_index":390,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["roomexists(roomid",{"_index":410,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["roomid",{"_index":407,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{}}}],["rooms",{"_index":423,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rooms'})@apiparam({name",{"_index":843,"title":{},"body":{"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["rooms.controller",{"_index":937,"title":{},"body":{"modules/RoomsModule.html":{}}}],["rooms.length",{"_index":426,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["rooms.map((r",{"_index":570,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["rooms.map((room",{"_index":1219,"title":{},"body":{"injectables/UsersService.html":{}}}],["rooms.push(room",{"_index":978,"title":{},"body":{"injectables/RoomsService.html":{}}}],["rooms.service",{"_index":872,"title":{},"body":{"controllers/RoomsController.html":{},"modules/RoomsModule.html":{}}}],["rooms/dto/createroomdto",{"_index":1100,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rooms/dto/room.dto",{"_index":481,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rooms/dto/songinfo.dto",{"_index":1030,"title":{},"body":{"classes/UserEntity.html":{}}}],["rooms/{roomid",{"_index":881,"title":{},"body":{"controllers/RoomsController.html":{}}}],["rooms/{roomid}/join",{"_index":900,"title":{},"body":{"controllers/RoomsController.html":{}}}],["rooms/{roomid}/leave",{"_index":905,"title":{},"body":{"controllers/RoomsController.html":{}}}],["rooms/{roomid}/songs",{"_index":916,"title":{},"body":{"controllers/RoomsController.html":{}}}],["rooms/{roomid}/songs/current",{"_index":929,"title":{},"body":{"controllers/RoomsController.html":{}}}],["rooms/{roomid}/users",{"_index":909,"title":{},"body":{"controllers/RoomsController.html":{}}}],["roomscontroller",{"_index":814,"title":{"controllers/RoomsController.html":{}},"body":{"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"coverage.html":{}}}],["roomsmodule",{"_index":45,"title":{"modules/RoomsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RoomsModule.html":{},"modules.html":{},"overview.html":{}}}],["roomsservice",{"_index":871,"title":{"injectables/RoomsService.html":{}},"body":{"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"coverage.html":{},"overview.html":{}}}],["run",{"_index":1357,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1332,"title":{},"body":{"dependencies.html":{}}}],["sample",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["scalable",{"_index":1344,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":1255,"title":{},"body":{"injectables/UsersService.html":{}}}],["scheduledroom",{"_index":542,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["scheduledroom.end_date",{"_index":559,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["scheduledroom.start_date",{"_index":557,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["sdk",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["sdk/client",{"_index":1308,"title":{},"body":{"dependencies.html":{}}}],["sdk/credential",{"_index":1312,"title":{},"body":{"dependencies.html":{}}}],["secret",{"_index":202,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["secretaccesskey",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretkey",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":615,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["server",{"_index":1345,"title":{},"body":{"index.html":{}}}],["service",{"_index":519,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["set",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["set(userids",{"_index":575,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["side",{"_index":1346,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":205,"title":{},"body":{"modules/AuthModule.html":{}}}],["song",{"_index":514,"title":{},"body":{"injectables/DtoGenService.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["songinfo.dto",{"_index":794,"title":{},"body":{"classes/RoomDto.html":{}}}],["songinfodto",{"_index":495,"title":{"classes/SongInfoDto.html":{}},"body":{"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"classes/SongInfoDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"coverage.html":{}}}],["songinfoentity",{"_index":998,"title":{"classes/SongInfoEntity.html":{}},"body":{"classes/SongInfoEntity.html":{},"coverage.html":{}}}],["songs",{"_index":567,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["soon",{"_index":581,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuthBody.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"modules/DbUtilsModule.html":{},"injectables/DbUtilsService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["south",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["sponsors",{"_index":1376,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":1336,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":75,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":76,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":81,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:18",{"_index":88,"title":{},"body":{"classes/AuthBody.html":{}}}],["src/auth/auth.controller.ts:21",{"_index":87,"title":{},"body":{"classes/AuthBody.html":{}}}],["src/auth/auth.controller.ts:37",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":192,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:11",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:12",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:13",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:139",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:14",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:15",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:173",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:193",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:58",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:98",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/jwt",{"_index":593,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":597,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:21",{"_index":603,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:7",{"_index":601,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/local.strategy.ts",{"_index":618,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts:12",{"_index":621,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/local.strategy.ts:7",{"_index":619,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/main.ts",{"_index":1294,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/db",{"_index":380,"title":{},"body":{"modules/DbUtilsModule.html":{},"injectables/DbUtilsService.html":{},"coverage.html":{}}}],["src/modules/dto",{"_index":448,"title":{},"body":{"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"coverage.html":{}}}],["src/modules/profile/dto/updateuserprofile.dto.ts",{"_index":1008,"title":{},"body":{"classes/UpdateUserProfileDto.html":{},"coverage.html":{}}}],["src/modules/profile/dto/userprofile.dto.ts",{"_index":1031,"title":{},"body":{"classes/UserProfileDto.html":{},"coverage.html":{}}}],["src/modules/profile/dto/userprofile.dto.ts:13",{"_index":1045,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/modules/profile/dto/userprofile.dto.ts:17",{"_index":1046,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/modules/profile/dto/userprofile.dto.ts:21",{"_index":1043,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/modules/profile/dto/userprofile.dto.ts:25",{"_index":1039,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/modules/profile/dto/userprofile.dto.ts:32",{"_index":1040,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/modules/profile/dto/userprofile.dto.ts:39",{"_index":1041,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/modules/profile/dto/userprofile.dto.ts:46",{"_index":1032,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/modules/profile/dto/userprofile.dto.ts:50",{"_index":1034,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/modules/profile/dto/userprofile.dto.ts:54",{"_index":1036,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/modules/profile/dto/userprofile.dto.ts:61",{"_index":1038,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/modules/profile/dto/userprofile.dto.ts:68",{"_index":1037,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/modules/profile/dto/userprofile.dto.ts:75",{"_index":1044,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/modules/profile/dto/userprofile.dto.ts:9",{"_index":1042,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/modules/profile/entities/userprofile.entity.ts",{"_index":1016,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["src/modules/profile/entities/userprofile.entity.ts:11",{"_index":1028,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/profile/entities/userprofile.entity.ts:14",{"_index":1029,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/profile/entities/userprofile.entity.ts:17",{"_index":1026,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/profile/entities/userprofile.entity.ts:20",{"_index":1022,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/profile/entities/userprofile.entity.ts:26",{"_index":1023,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/profile/entities/userprofile.entity.ts:32",{"_index":1024,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/profile/entities/userprofile.entity.ts:38",{"_index":1017,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/profile/entities/userprofile.entity.ts:41",{"_index":1018,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/profile/entities/userprofile.entity.ts:44",{"_index":1019,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/profile/entities/userprofile.entity.ts:50",{"_index":1021,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/profile/entities/userprofile.entity.ts:56",{"_index":1020,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/profile/entities/userprofile.entity.ts:62",{"_index":1027,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/profile/entities/userprofile.entity.ts:8",{"_index":1025,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/profile/profile.controller.ts",{"_index":639,"title":{},"body":{"controllers/ProfileController.html":{},"coverage.html":{}}}],["src/modules/profile/profile.controller.ts:119",{"_index":652,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/profile/profile.controller.ts:144",{"_index":670,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/profile/profile.controller.ts:53",{"_index":656,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/profile/profile.controller.ts:66",{"_index":673,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/profile/profile.controller.ts:82",{"_index":664,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/profile/profile.controller.ts:98",{"_index":659,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/profile/profile.module.ts",{"_index":732,"title":{},"body":{"modules/ProfileModule.html":{}}}],["src/modules/profile/profile.service.ts",{"_index":734,"title":{},"body":{"injectables/ProfileService.html":{},"coverage.html":{}}}],["src/modules/profile/profile.service.ts:16",{"_index":739,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:28",{"_index":745,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:32",{"_index":741,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:36",{"_index":740,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:40",{"_index":738,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:73",{"_index":744,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:9",{"_index":736,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/rooms/dto/createroomdto.ts",{"_index":331,"title":{},"body":{"classes/CreateRoomDto.html":{},"coverage.html":{}}}],["src/modules/rooms/dto/room.dto",{"_index":1047,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts",{"_index":770,"title":{},"body":{"classes/RoomDto.html":{},"coverage.html":{}}}],["src/modules/rooms/dto/room.dto.ts:12",{"_index":788,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:16",{"_index":785,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:20",{"_index":787,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:24",{"_index":774,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:28",{"_index":782,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:32",{"_index":780,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:36",{"_index":781,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:40",{"_index":789,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:44",{"_index":776,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:48",{"_index":783,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:52",{"_index":778,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:56",{"_index":779,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:60",{"_index":786,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:63",{"_index":773,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:66",{"_index":790,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:8",{"_index":772,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/songinfo.dto",{"_index":1048,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/modules/rooms/dto/songinfo.dto.ts",{"_index":990,"title":{},"body":{"classes/SongInfoDto.html":{},"coverage.html":{}}}],["src/modules/rooms/dto/songinfo.dto.ts:11",{"_index":992,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["src/modules/rooms/dto/songinfo.dto.ts:15",{"_index":993,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["src/modules/rooms/dto/songinfo.dto.ts:19",{"_index":995,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["src/modules/rooms/dto/songinfo.dto.ts:7",{"_index":996,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["src/modules/rooms/dto/updateroomdto.ts",{"_index":1004,"title":{},"body":{"classes/UpdateRoomDto.html":{},"coverage.html":{}}}],["src/modules/rooms/entities/room.entity.ts",{"_index":796,"title":{},"body":{"classes/RoomEntity.html":{},"coverage.html":{}}}],["src/modules/rooms/entities/room.entity.ts:10",{"_index":810,"title":{},"body":{"classes/RoomEntity.html":{}}}],["src/modules/rooms/entities/room.entity.ts:13",{"_index":807,"title":{},"body":{"classes/RoomEntity.html":{}}}],["src/modules/rooms/entities/room.entity.ts:16",{"_index":809,"title":{},"body":{"classes/RoomEntity.html":{}}}],["src/modules/rooms/entities/room.entity.ts:19",{"_index":799,"title":{},"body":{"classes/RoomEntity.html":{}}}],["src/modules/rooms/entities/room.entity.ts:22",{"_index":805,"title":{},"body":{"classes/RoomEntity.html":{}}}],["src/modules/rooms/entities/room.entity.ts:25",{"_index":803,"title":{},"body":{"classes/RoomEntity.html":{}}}],["src/modules/rooms/entities/room.entity.ts:28",{"_index":804,"title":{},"body":{"classes/RoomEntity.html":{}}}],["src/modules/rooms/entities/room.entity.ts:31",{"_index":811,"title":{},"body":{"classes/RoomEntity.html":{}}}],["src/modules/rooms/entities/room.entity.ts:34",{"_index":800,"title":{},"body":{"classes/RoomEntity.html":{}}}],["src/modules/rooms/entities/room.entity.ts:37",{"_index":806,"title":{},"body":{"classes/RoomEntity.html":{}}}],["src/modules/rooms/entities/room.entity.ts:40",{"_index":801,"title":{},"body":{"classes/RoomEntity.html":{}}}],["src/modules/rooms/entities/room.entity.ts:43",{"_index":802,"title":{},"body":{"classes/RoomEntity.html":{}}}],["src/modules/rooms/entities/room.entity.ts:46",{"_index":808,"title":{},"body":{"classes/RoomEntity.html":{}}}],["src/modules/rooms/entities/room.entity.ts:49",{"_index":798,"title":{},"body":{"classes/RoomEntity.html":{}}}],["src/modules/rooms/entities/room.entity.ts:52",{"_index":812,"title":{},"body":{"classes/RoomEntity.html":{}}}],["src/modules/rooms/entities/room.entity.ts:7",{"_index":797,"title":{},"body":{"classes/RoomEntity.html":{}}}],["src/modules/rooms/entities/songinfo.entity.ts",{"_index":999,"title":{},"body":{"classes/SongInfoEntity.html":{},"coverage.html":{}}}],["src/modules/rooms/entities/songinfo.entity.ts:11",{"_index":1001,"title":{},"body":{"classes/SongInfoEntity.html":{}}}],["src/modules/rooms/entities/songinfo.entity.ts:14",{"_index":1002,"title":{},"body":{"classes/SongInfoEntity.html":{}}}],["src/modules/rooms/entities/songinfo.entity.ts:5",{"_index":1003,"title":{},"body":{"classes/SongInfoEntity.html":{}}}],["src/modules/rooms/entities/songinfo.entity.ts:8",{"_index":1000,"title":{},"body":{"classes/SongInfoEntity.html":{}}}],["src/modules/rooms/rooms.controller.ts",{"_index":815,"title":{},"body":{"controllers/RoomsController.html":{},"coverage.html":{}}}],["src/modules/rooms/rooms.controller.ts:114",{"_index":836,"title":{},"body":{"controllers/RoomsController.html":{}}}],["src/modules/rooms/rooms.controller.ts:127",{"_index":860,"title":{},"body":{"controllers/RoomsController.html":{}}}],["src/modules/rooms/rooms.controller.ts:140",{"_index":863,"title":{},"body":{"controllers/RoomsController.html":{}}}],["src/modules/rooms/rooms.controller.ts:153",{"_index":857,"title":{},"body":{"controllers/RoomsController.html":{}}}],["src/modules/rooms/rooms.controller.ts:166",{"_index":854,"title":{},"body":{"controllers/RoomsController.html":{}}}],["src/modules/rooms/rooms.controller.ts:179",{"_index":833,"title":{},"body":{"controllers/RoomsController.html":{}}}],["src/modules/rooms/rooms.controller.ts:192",{"_index":830,"title":{},"body":{"controllers/RoomsController.html":{}}}],["src/modules/rooms/rooms.controller.ts:209",{"_index":839,"title":{},"body":{"controllers/RoomsController.html":{}}}],["src/modules/rooms/rooms.controller.ts:60",{"_index":848,"title":{},"body":{"controllers/RoomsController.html":{}}}],["src/modules/rooms/rooms.controller.ts:73",{"_index":851,"title":{},"body":{"controllers/RoomsController.html":{}}}],["src/modules/rooms/rooms.controller.ts:86",{"_index":870,"title":{},"body":{"controllers/RoomsController.html":{}}}],["src/modules/rooms/rooms.controller.ts:97",{"_index":867,"title":{},"body":{"controllers/RoomsController.html":{}}}],["src/modules/rooms/rooms.module.ts",{"_index":936,"title":{},"body":{"modules/RoomsModule.html":{}}}],["src/modules/rooms/rooms.service.ts",{"_index":938,"title":{},"body":{"injectables/RoomsService.html":{},"coverage.html":{}}}],["src/modules/rooms/rooms.service.ts:102",{"_index":954,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/rooms/rooms.service.ts:107",{"_index":943,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/rooms/rooms.service.ts:112",{"_index":941,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/rooms/rooms.service.ts:117",{"_index":947,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/rooms/rooms.service.ts:13",{"_index":939,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/rooms/rooms.service.ts:20",{"_index":949,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/rooms/rooms.service.ts:59",{"_index":952,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/rooms/rooms.service.ts:72",{"_index":964,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/rooms/rooms.service.ts:77",{"_index":962,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/rooms/rooms.service.ts:82",{"_index":945,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/rooms/rooms.service.ts:87",{"_index":958,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/rooms/rooms.service.ts:92",{"_index":960,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/rooms/rooms.service.ts:97",{"_index":956,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/users/dto/create",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/update",{"_index":1006,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/user.dto.ts",{"_index":1011,"title":{},"body":{"classes/UserDto.html":{},"coverage.html":{}}}],["src/modules/users/entities/user.entity.ts",{"_index":368,"title":{},"body":{"classes/CreateUserDto-1.html":{},"coverage.html":{}}}],["src/modules/users/entities/user.entity.ts:12",{"_index":371,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["src/modules/users/entities/user.entity.ts:15",{"_index":373,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["src/modules/users/entities/user.entity.ts:18",{"_index":370,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["src/modules/users/entities/user.entity.ts:21",{"_index":372,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["src/modules/users/entities/user.entity.ts:6",{"_index":374,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["src/modules/users/entities/user.entity.ts:9",{"_index":375,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["src/modules/users/users.controller.ts",{"_index":1050,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/modules/users/users.controller.ts:107",{"_index":1095,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:118",{"_index":1092,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:136",{"_index":1090,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:154",{"_index":1062,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:195",{"_index":1075,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:214",{"_index":1079,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:233",{"_index":1084,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:252",{"_index":1067,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:271",{"_index":1071,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:78",{"_index":1087,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.module.ts",{"_index":1163,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/modules/users/users.service.ts",{"_index":1165,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/modules/users/users.service.ts:109",{"_index":1171,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:15",{"_index":1167,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:189",{"_index":1180,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:194",{"_index":1182,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:213",{"_index":1184,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:22",{"_index":1169,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:233",{"_index":1176,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:249",{"_index":1178,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:34",{"_index":1172,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:38",{"_index":1174,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:44",{"_index":1191,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:60",{"_index":1189,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:66",{"_index":1185,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:71",{"_index":1195,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:76",{"_index":1193,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:81",{"_index":1187,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":1358,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1361,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1363,"title":{},"body":{"index.html":{}}}],["start_date",{"_index":506,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{}}}],["start_time",{"_index":518,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{}}}],["started",{"_index":1338,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1350,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1289,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":107,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["stay",{"_index":1382,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":604,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/LocalStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["sub",{"_index":165,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["success",{"_index":895,"title":{},"body":{"controllers/RoomsController.html":{}}}],["successful",{"_index":159,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["successfully",{"_index":111,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["such",{"_index":702,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["summary",{"_index":102,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":611,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":1377,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1393,"title":{},"body":{"modules.html":{}}}],["table",{"_index":158,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DtoGenService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1306,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":513,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{}}}],["tba",{"_index":1014,"title":{},"body":{"classes/UserDto.html":{}}}],["tbale",{"_index":1251,"title":{},"body":{"injectables/UsersService.html":{}}}],["test",{"_index":1366,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1369,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1368,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1365,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1375,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":636,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":637,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.accesskeyid",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.createuser",{"_index":161,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["this.authservice.generatejwt(payload",{"_index":169,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["this.authservice.listusers",{"_index":121,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["this.authservice.validateuser(username",{"_index":623,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.clientid",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cognitoidentityserviceprovider",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get(\"aws_access_key_id",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get(\"aws_cognito_client_id",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get(\"jwt_expiration_time",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get(\"jwt_secret_key",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.dbutils.getrandomrooms(5",{"_index":531,"title":{},"body":{"injectables/DtoGenService.html":{},"injectables/UsersService.html":{}}}],["this.dbutils.getuserfollowers(userid",{"_index":1280,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.dbutils.getuserfollowing(userid",{"_index":524,"title":{},"body":{"injectables/DtoGenService.html":{},"injectables/UsersService.html":{}}}],["this.dbutils.isroomprivate(room.room_id",{"_index":568,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["this.dbutils.isroomprivate(roomid",{"_index":549,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["this.dbutilsservice.isfollowing(userid",{"_index":758,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.dbutilsservice.userexists(accountfollowedid",{"_index":755,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.dbutilsservice.userexists(accountunfollowedid",{"_index":762,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.dbutilsservice.userexists(userid",{"_index":757,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.dtogen.generatemultipleroomdto(ids",{"_index":1220,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.dtogen.generatemultipleuserprofiledto(ids",{"_index":1279,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.dtogen.generateroomdto(roomid",{"_index":985,"title":{},"body":{"injectables/RoomsService.html":{}}}],["this.dtogen.generateroomdtofromroom(room",{"_index":980,"title":{},"body":{"injectables/RoomsService.html":{},"injectables/UsersService.html":{}}}],["this.dtogen.generateuserprofiledto(userid",{"_index":752,"title":{},"body":{"injectables/ProfileService.html":{},"controllers/UsersController.html":{}}}],["this.generatebriefuserprofiledto(user",{"_index":523,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["this.generatemultipleroomdto(ids",{"_index":528,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["this.generateuserprofiledto(room.room_creator",{"_index":560,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["this.prisma.follows.create",{"_index":759,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.prisma.follows.delete",{"_index":767,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.prisma.follows.findfirst",{"_index":766,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.prisma.follows.findmany",{"_index":416,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["this.prisma.friends.findmany",{"_index":1271,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.private_room.findunique",{"_index":439,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["this.prisma.public_room.findmany",{"_index":974,"title":{},"body":{"injectables/RoomsService.html":{}}}],["this.prisma.public_room.findunique",{"_index":436,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["this.prisma.room.create",{"_index":1262,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.room.findmany",{"_index":425,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{}}}],["this.prisma.room.findunique",{"_index":427,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{}}}],["this.prisma.scheduled_room.findunique",{"_index":543,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["this.prisma.users.create",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.prisma.users.delete",{"_index":1214,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.users.findmany",{"_index":541,"title":{},"body":{"injectables/DtoGenService.html":{},"injectables/UsersService.html":{}}}],["this.prisma.users.findunique",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/UsersService.html":{}}}],["this.prisma.users.update",{"_index":1213,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.profileservice.followuser(userid",{"_index":726,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.getprofile",{"_index":711,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.getprofilebyusername",{"_index":720,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.patchprofile",{"_index":716,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.unfollowuser(userid",{"_index":728,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.updateprofile",{"_index":715,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.roomsservice.addsongtoqueue(roomid",{"_index":928,"title":{},"body":{"controllers/RoomsController.html":{}}}],["this.roomsservice.clearroomqueue(roomid",{"_index":926,"title":{},"body":{"controllers/RoomsController.html":{}}}],["this.roomsservice.deleteroom(roomid",{"_index":899,"title":{},"body":{"controllers/RoomsController.html":{}}}],["this.roomsservice.getcurrentsong(roomid",{"_index":932,"title":{},"body":{"controllers/RoomsController.html":{}}}],["this.roomsservice.getnewrooms",{"_index":880,"title":{},"body":{"controllers/RoomsController.html":{}}}],["this.roomsservice.getroominfo(roomid",{"_index":885,"title":{},"body":{"controllers/RoomsController.html":{}}}],["this.roomsservice.getroomqueue(roomid",{"_index":920,"title":{},"body":{"controllers/RoomsController.html":{}}}],["this.roomsservice.getroomusers(roomid",{"_index":915,"title":{},"body":{"controllers/RoomsController.html":{}}}],["this.roomsservice.joinroom(roomid",{"_index":904,"title":{},"body":{"controllers/RoomsController.html":{}}}],["this.roomsservice.leaveroom(roomid",{"_index":908,"title":{},"body":{"controllers/RoomsController.html":{}}}],["this.roomsservice.updateroom(roomid",{"_index":892,"title":{},"body":{"controllers/RoomsController.html":{}}}],["this.roomsservice.updateroominfo(roomid",{"_index":890,"title":{},"body":{"controllers/RoomsController.html":{}}}],["this.secretaccesskey",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userpoolid",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":1107,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.createroom(createroomdto",{"_index":1144,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":1109,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(id",{"_index":1112,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getfollowers(userid",{"_index":1156,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getfollowing(userid",{"_index":1159,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getrecentrooms(userid",{"_index":1147,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getrecommendedrooms(userid",{"_index":1150,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserfriends(userid",{"_index":1153,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserinfo",{"_index":1132,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserrooms(userid",{"_index":1137,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(id",{"_index":1119,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(id",{"_index":1115,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updateprofile(updateuserdto",{"_index":1134,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updateuserprofile(updateuserdto",{"_index":1133,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":124,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["title",{"_index":515,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{}}}],["todo",{"_index":170,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{}}}],["token",{"_index":168,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["touch",{"_index":1383,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":1323,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["true})@apitags('rooms",{"_index":847,"title":{},"body":{"controllers/RoomsController.html":{}}}],["try",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProfileService.html":{},"controllers/UsersController.html":{}}}],["twitter",{"_index":1389,"title":{},"body":{"index.html":{}}}],["type",{"_index":85,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["typeof",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["typescript",{"_index":1349,"title":{},"body":{"index.html":{}}}],["u",{"_index":578,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["u.userid",{"_index":577,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["unauthorizedexception",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception(\"error",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception(\"invalid",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":147,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/SongInfoEntity.html":{}}}],["undefined})@isarray",{"_index":991,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["unfollow",{"_index":667,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["unfollowed",{"_index":668,"title":{},"body":{"controllers/ProfileController.html":{}}}],["unfollowing",{"_index":669,"title":{},"body":{"controllers/ProfileController.html":{}}}],["unfollowuser",{"_index":644,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["unfollowuser(req",{"_index":665,"title":{},"body":{"controllers/ProfileController.html":{}}}],["unfollowuser(userid",{"_index":742,"title":{},"body":{"injectables/ProfileService.html":{}}}],["uniqueuserids",{"_index":574,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["unit",{"_index":1364,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":1402,"title":{},"body":{"properties.html":{}}}],["untitled",{"_index":1229,"title":{},"body":{"injectables/UsersService.html":{}}}],["update",{"_index":986,"title":{},"body":{"injectables/RoomsService.html":{},"injectables/UsersService.html":{}}}],["update(@param(\"id",{"_index":1114,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(userid",{"_index":1190,"title":{},"body":{"injectables/UsersService.html":{}}}],["updated",{"_index":714,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["updateprofile",{"_index":645,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateprofile(req",{"_index":671,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["updateprofile(updateuserdto",{"_index":1192,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateprofiledto",{"_index":661,"title":{},"body":{"controllers/ProfileController.html":{}}}],["updateroom",{"_index":826,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["updateroom(req",{"_index":864,"title":{},"body":{"controllers/RoomsController.html":{}}}],["updateroom(roomid",{"_index":961,"title":{},"body":{"injectables/RoomsService.html":{}}}],["updateroomdto",{"_index":865,"title":{"classes/UpdateRoomDto.html":{}},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"classes/UpdateRoomDto.html":{},"coverage.html":{}}}],["updateroominfo",{"_index":827,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["updateroominfo(req",{"_index":868,"title":{},"body":{"controllers/RoomsController.html":{}}}],["updateroominfo(roomid",{"_index":963,"title":{},"body":{"injectables/RoomsService.html":{}}}],["updateuserdto",{"_index":1005,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserdto.activity",{"_index":1208,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto.bio",{"_index":1206,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto.preferences",{"_index":1210,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto.profile_picture",{"_index":1207,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto.username",{"_index":1205,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserprofile",{"_index":1058,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuserprofile(req",{"_index":1093,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserprofile(updateuserdto",{"_index":1194,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserprofiledto",{"_index":662,"title":{"classes/UpdateUserProfileDto.html":{}},"body":{"controllers/ProfileController.html":{},"classes/UpdateUserProfileDto.html":{},"coverage.html":{}}}],["useguards",{"_index":677,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":708,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@apitags('profile",{"_index":655,"title":{},"body":{"controllers/ProfileController.html":{}}}],["useguards(jwtauthguard)@delete(':roomid')@apitags('rooms",{"_index":835,"title":{},"body":{"controllers/RoomsController.html":{}}}],["useguards(jwtauthguard)@delete(':roomid/songs')@apitags('rooms",{"_index":832,"title":{},"body":{"controllers/RoomsController.html":{}}}],["useguards(jwtauthguard)@get(':roomid')@apitags('rooms",{"_index":850,"title":{},"body":{"controllers/RoomsController.html":{}}}],["useguards(jwtauthguard)@get(':roomid/songs')@apitags('rooms",{"_index":853,"title":{},"body":{"controllers/RoomsController.html":{}}}],["useguards(jwtauthguard)@get(':roomid/songs/current')@apitags('rooms",{"_index":838,"title":{},"body":{"controllers/RoomsController.html":{}}}],["useguards(jwtauthguard)@get(':roomid/users')@apitags('rooms",{"_index":856,"title":{},"body":{"controllers/RoomsController.html":{}}}],["useguards(jwtauthguard)@get(':username')@apitags('profile",{"_index":658,"title":{},"body":{"controllers/ProfileController.html":{}}}],["useguards(jwtauthguard)@patch(':roomid')@apitags('rooms",{"_index":869,"title":{},"body":{"controllers/RoomsController.html":{}}}],["useguards(jwtauthguard)@patch()@apitags('profile",{"_index":663,"title":{},"body":{"controllers/ProfileController.html":{}}}],["useguards(jwtauthguard)@post(':roomid/join')@apitags('rooms",{"_index":859,"title":{},"body":{"controllers/RoomsController.html":{}}}],["useguards(jwtauthguard)@post(':roomid/leave')@apitags('rooms",{"_index":862,"title":{},"body":{"controllers/RoomsController.html":{}}}],["useguards(jwtauthguard)@post(':roomid/songs')@apitags('rooms",{"_index":829,"title":{},"body":{"controllers/RoomsController.html":{}}}],["useguards(jwtauthguard)@put(':roomid')@apitags('rooms",{"_index":866,"title":{},"body":{"controllers/RoomsController.html":{}}}],["useguards(jwtauthguard)@put()@apitags('profile",{"_index":672,"title":{},"body":{"controllers/ProfileController.html":{}}}],["user",{"_index":129,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/LocalStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user's",{"_index":1065,"title":{},"body":{"controllers/UsersController.html":{}}}],["user'})@apiparam({name",{"_index":648,"title":{},"body":{"controllers/ProfileController.html":{}}}],["user.activity",{"_index":1209,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.bio",{"_index":539,"title":{},"body":{"injectables/DtoGenService.html":{},"injectables/UsersService.html":{}}}],["user.dto",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":337,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":365,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:15",{"_index":352,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":362,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":350,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:25",{"_index":360,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:28",{"_index":353,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:31",{"_index":354,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:34",{"_index":355,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:37",{"_index":356,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:40",{"_index":357,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:43",{"_index":358,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:46",{"_index":359,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:49",{"_index":361,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:52",{"_index":363,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:7",{"_index":364,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.full_name",{"_index":536,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["user.preferences",{"_index":1211,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.profile_picture",{"_index":538,"title":{},"body":{"injectables/DtoGenService.html":{},"injectables/UsersService.html":{}}}],["user.user_id",{"_index":537,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["user.userattributes",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.username",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DtoGenService.html":{},"injectables/UsersService.html":{}}}],["user_id",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/UsersService.html":{}}}],["user_ids",{"_index":469,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["usercognitosub",{"_index":83,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["userdto",{"_index":482,"title":{"classes/UserDto.html":{}},"body":{"injectables/DtoGenService.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["useremail",{"_index":143,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["userentity",{"_index":1015,"title":{"classes/UserEntity.html":{}},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["userexists",{"_index":391,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["userexists(userid",{"_index":412,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["userid",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["userids",{"_index":569,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["usermatch",{"_index":141,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["usermatch.username",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["username",{"_index":84,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ProfileController.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["username'})@apiokresponse({description",{"_index":649,"title":{},"body":{"controllers/ProfileController.html":{}}}],["userpool",{"_index":140,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["userpoolid",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["userprofile.dto",{"_index":1010,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["userprofiledto",{"_index":463,"title":{"classes/UserProfileDto.html":{}},"body":{"injectables/DtoGenService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userprofiles",{"_index":576,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["users",{"_index":119,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DtoGenService.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":1164,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1097,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users.users",{"_index":132,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["users.users.length",{"_index":133,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["users.users[i",{"_index":154,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["users.users[i].username",{"_index":151,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["users/dto/user.dto",{"_index":483,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["userscontroller",{"_index":1049,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":46,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":1096,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usersub",{"_index":150,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{}}}],["using",{"_index":105,"title":{},"body":{"classes/AuthBody.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["utils.module",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["utils.module.ts",{"_index":381,"title":{},"body":{"modules/DbUtilsModule.html":{}}}],["utils.service",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["utils.service.ts",{"_index":383,"title":{},"body":{"injectables/DbUtilsService.html":{},"coverage.html":{}}}],["utils.service.ts:10",{"_index":401,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["utils.service.ts:100",{"_index":409,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["utils.service.ts:120",{"_index":406,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["utils.service.ts:140",{"_index":413,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["utils.service.ts:150",{"_index":411,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["utils.service.ts:160",{"_index":404,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["utils.service.ts:45",{"_index":399,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["utils.service.ts:6",{"_index":393,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["utils.service.ts:79",{"_index":396,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["utils/db",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/DbUtilsModule.html":{},"injectables/DbUtilsService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["validate",{"_index":599,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":602,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":620,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validatenested",{"_index":1013,"title":{},"body":{"classes/UserDto.html":{},"classes/UserProfileDto.html":{}}}],["validateuser",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":367,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RoomDto.html":{},"classes/SongInfoDto.html":{},"classes/UserDto.html":{},"classes/UserProfileDto.html":{},"dependencies.html":{}}}],["value",{"_index":479,"title":{},"body":{"injectables/DtoGenService.html":{},"injectables/RoomsService.html":{}}}],["variables",{"_index":212,"title":{},"body":{"modules/AuthModule.html":{}}}],["version",{"_index":1400,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":1359,"title":{},"body":{"index.html":{}}}],["website",{"_index":1387,"title":{},"body":{"index.html":{}}}],["weird",{"_index":579,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["went",{"_index":1264,"title":{},"body":{"injectables/UsersService.html":{}}}],["world",{"_index":78,"title":{},"body":{"injectables/AppService.html":{}}}],["wrong",{"_index":1265,"title":{},"body":{"injectables/UsersService.html":{}}}],["xxxx",{"_index":984,"title":{},"body":{"injectables/RoomsService.html":{}}}],["you'd",{"_index":1380,"title":{},"body":{"index.html":{}}}],["your_jwt_secret",{"_index":204,"title":{},"body":{"modules/AuthModule.html":{}}}],["yourself",{"_index":754,"title":{},"body":{"injectables/ProfileService.html":{}}}],["zoom",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RoomsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport { AppService } from \"./app.service\";\n\n@Controller()\nexport class AppController {\n\tconstructor(private readonly appService: AppService) {}\n\n\t@Get()\n\tgetHello(): string {\n\t\treturn this.appService.getHello();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDbUtilsModule\n\nDbUtilsModule\n\nAppModule -->\n\nDbUtilsModule->AppModule\n\n\n\n\n\nDtoGenModule\n\nDtoGenModule\n\nAppModule -->\n\nDtoGenModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nRoomsModule\n\nRoomsModule\n\nAppModule -->\n\nRoomsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nDbUtilsService\n\nDbUtilsService\n\nAppModule -->\n\nDbUtilsService->AppModule\n\n\n\n\n\nDtoGenService\n\nDtoGenService\n\nAppModule -->\n\nDtoGenService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            DbUtilsService\n                        \n                        \n                            DtoGenService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            DbUtilsModule\n                        \n                        \n                            DtoGenModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            ProfileModule\n                        \n                        \n                            RoomsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { AppController } from \"./app.controller\";\nimport { AppService } from \"./app.service\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { PrismaModule } from \"./../prisma/prisma.module\";\nimport { UsersModule } from \"./modules/users/users.module\";\nimport { AuthModule } from \"./auth/auth.module\";\nimport { RoomsModule } from \"./modules/rooms/rooms.module\";\nimport { ProfileModule } from \"./modules/profile/profile.module\";\nimport { DtoGenService } from \"./modules/dto-gen/dto-gen.service\";\nimport { DtoGenModule } from \"./modules/dto-gen/dto-gen.module\";\nimport { DbUtilsService } from \"./modules/db-utils/db-utils.service\";\nimport { DbUtilsModule } from \"./modules/db-utils/db-utils.module\";\n\n@Module({\n\timports: [\n\t\tConfigModule.forRoot({ isGlobal: true }),\n\t\tPrismaModule,\n\t\tUsersModule,\n\t\tAuthModule,\n\t\tRoomsModule,\n\t\tProfileModule,\n\t\tDtoGenModule,\n\t\tDbUtilsModule,\n\t],\n\tcontrollers: [AppController],\n\tproviders: [AppService, DtoGenService, DbUtilsService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\n@Injectable()\nexport class AppService {\n\tgetHello(): string {\n\t\treturn \"Hello World!\";\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthBody.html":{"url":"classes/AuthBody.html","title":"class - AuthBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                userCognitoSub\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userCognitoSub\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.controller.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.controller.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n\tController,\n\tPost,\n\tBody,\n\tHttpException,\n\tHttpStatus,\n} from \"@nestjs/common\";\nimport { AuthService } from \"./auth.service\";\nimport {\n\tApiBody,\n\tApiOperation,\n\tApiProperty,\n\tApiResponse,\n} from \"@nestjs/swagger\";\n\nclass AuthBody {\n\t@ApiProperty()\n\tusername: string;\n\n\t@ApiProperty()\n\tuserCognitoSub: string;\n}\n\n@Controller(\"auth\")\nexport class AuthController {\n\tconstructor(private readonly authService: AuthService) {}\n\n\t@Post(\"login\")\n\t@ApiOperation({ summary: \"Login in the API using Cognito\" })\n\t@ApiBody({ type: AuthBody })\n\t@ApiResponse({\n\t\tstatus: 201,\n\t\tdescription: \"The record has been successfully created.\",\n\t\ttype: AuthBody,\n\t})\n\t@ApiResponse({ status: 403, description: \"Forbidden.\" })\n\tasync login(@Body() authInfo: AuthBody) {\n\t\tconst users = await this.authService.listUsers();\n\t\tconsole.log(users);\n\t\tconsole.log(users.Users);\n\t\tif (!users) {\n\t\t\tthrow new HttpException(\n\t\t\t\t\"Invalid credentials. Could not create user. AuthError01\",\n\t\t\t\tHttpStatus.UNAUTHORIZED,\n\t\t\t);\n\t\t}\n\n\t\tif (!users.Users || users.Users.length === 0) {\n\t\t\tthrow new HttpException(\n\t\t\t\t\"Invalid credentials. Could not create user. AuthError02\",\n\t\t\t\tHttpStatus.UNAUTHORIZED,\n\t\t\t);\n\t\t}\n\n\t\t//match the email address given with the email in the UserPool\n\t\tlet userMatch = null;\n\t\tlet userEmail = \"\";\n\t\tfor (let i = 0; i  attribute.Name === \"email\")) {\n\t\t\t\tconst attr = attrs.find((attribute) => attribute.Name === \"email\");\n\t\t\t\tif (!attr || attr === undefined) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t//if the userCognitoSub matches the UserSub in the UserPool\n\t\t\t\tif (users.Users[i].Username === authInfo.userCognitoSub && attr.Value) {\n\t\t\t\t\tuserMatch = users.Users[i];\n\t\t\t\t\tuserEmail = attr.Value;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (userMatch === null || !userMatch) {\n\t\t\tthrow new HttpException(\n\t\t\t\t\"Invalid credentials. Could not create user. AuthError03\",\n\t\t\t\tHttpStatus.UNAUTHORIZED,\n\t\t\t);\n\t\t}\n\n\t\t// add users to table\n\t\tconst successful: boolean = await this.authService.createUser(\n\t\t\tauthInfo.username,\n\t\t\tuserEmail,\n\t\t\tauthInfo.userCognitoSub,\n\t\t);\n\n\t\tif (!successful) {\n\t\t\tthrow new HttpException(\n\t\t\t\t\"Invalid credentials. Could not create user. AuthError04\",\n\t\t\t\tHttpStatus.UNAUTHORIZED,\n\t\t\t);\n\t\t}\n\n\t\tconst payload = {\n\t\t\tsub: authInfo.userCognitoSub,\n\t\t\tusername: authInfo.username,\n\t\t\temail: userEmail,\n\t\t};\n\n\t\t//generate JWT token using payload\n\t\tconst token: string = await this.authService.generateJWT(payload);\n\n\t\t//return the JWT as a string\n\t\treturn { token: token };\n\t}\n\n\t//TODO: Add a POST method to refresh an expired JWT token\n\t//TODO: Add a POST method to logout a user\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(authInfo: AuthBody)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@ApiOperation({summary: 'Login in the API using Cognito'})@ApiBody({type: AuthBody})@ApiResponse({status: 201, description: 'The record has been successfully created.', type: AuthBody})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authInfo\n                                            \n                                                            AuthBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n\tController,\n\tPost,\n\tBody,\n\tHttpException,\n\tHttpStatus,\n} from \"@nestjs/common\";\nimport { AuthService } from \"./auth.service\";\nimport {\n\tApiBody,\n\tApiOperation,\n\tApiProperty,\n\tApiResponse,\n} from \"@nestjs/swagger\";\n\nclass AuthBody {\n\t@ApiProperty()\n\tusername: string;\n\n\t@ApiProperty()\n\tuserCognitoSub: string;\n}\n\n@Controller(\"auth\")\nexport class AuthController {\n\tconstructor(private readonly authService: AuthService) {}\n\n\t@Post(\"login\")\n\t@ApiOperation({ summary: \"Login in the API using Cognito\" })\n\t@ApiBody({ type: AuthBody })\n\t@ApiResponse({\n\t\tstatus: 201,\n\t\tdescription: \"The record has been successfully created.\",\n\t\ttype: AuthBody,\n\t})\n\t@ApiResponse({ status: 403, description: \"Forbidden.\" })\n\tasync login(@Body() authInfo: AuthBody) {\n\t\tconst users = await this.authService.listUsers();\n\t\tconsole.log(users);\n\t\tconsole.log(users.Users);\n\t\tif (!users) {\n\t\t\tthrow new HttpException(\n\t\t\t\t\"Invalid credentials. Could not create user. AuthError01\",\n\t\t\t\tHttpStatus.UNAUTHORIZED,\n\t\t\t);\n\t\t}\n\n\t\tif (!users.Users || users.Users.length === 0) {\n\t\t\tthrow new HttpException(\n\t\t\t\t\"Invalid credentials. Could not create user. AuthError02\",\n\t\t\t\tHttpStatus.UNAUTHORIZED,\n\t\t\t);\n\t\t}\n\n\t\t//match the email address given with the email in the UserPool\n\t\tlet userMatch = null;\n\t\tlet userEmail = \"\";\n\t\tfor (let i = 0; i  attribute.Name === \"email\")) {\n\t\t\t\tconst attr = attrs.find((attribute) => attribute.Name === \"email\");\n\t\t\t\tif (!attr || attr === undefined) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t//if the userCognitoSub matches the UserSub in the UserPool\n\t\t\t\tif (users.Users[i].Username === authInfo.userCognitoSub && attr.Value) {\n\t\t\t\t\tuserMatch = users.Users[i];\n\t\t\t\t\tuserEmail = attr.Value;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (userMatch === null || !userMatch) {\n\t\t\tthrow new HttpException(\n\t\t\t\t\"Invalid credentials. Could not create user. AuthError03\",\n\t\t\t\tHttpStatus.UNAUTHORIZED,\n\t\t\t);\n\t\t}\n\n\t\t// add users to table\n\t\tconst successful: boolean = await this.authService.createUser(\n\t\t\tauthInfo.username,\n\t\t\tuserEmail,\n\t\t\tauthInfo.userCognitoSub,\n\t\t);\n\n\t\tif (!successful) {\n\t\t\tthrow new HttpException(\n\t\t\t\t\"Invalid credentials. Could not create user. AuthError04\",\n\t\t\t\tHttpStatus.UNAUTHORIZED,\n\t\t\t);\n\t\t}\n\n\t\tconst payload = {\n\t\t\tsub: authInfo.userCognitoSub,\n\t\t\tusername: authInfo.username,\n\t\t\temail: userEmail,\n\t\t};\n\n\t\t//generate JWT token using payload\n\t\tconst token: string = await this.authService.generateJWT(payload);\n\n\t\t//return the JWT as a string\n\t\treturn { token: token };\n\t}\n\n\t//TODO: Add a POST method to refresh an expired JWT token\n\t//TODO: Add a POST method to logout a user\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAuthModule -->\n\nPrismaService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { AuthService } from \"./auth.service\";\nimport { AuthController } from \"./auth.controller\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { JwtModule } from \"@nestjs/jwt\";\nimport { LocalStrategy } from \"./local.strategy\";\nimport { JwtStrategy } from \"./jwt.strategy\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { PrismaService } from \"../../prisma/prisma.service\";\nimport { PrismaModule } from \"../../prisma/prisma.module\";\n\n@Module({\n\timports: [\n\t\tPassportModule,\n\t\tJwtModule.register({\n\t\t\tsecret: process.env.JWT_SECRET || \"your_jwt_secret\",\n\t\t\tsignOptions: { expiresIn: \"60m\" },\n\t\t}),\n\t\tConfigModule.forRoot(), // Ensure ConfigModule is imported to access environment variables\n\t\tPrismaModule,\n\t],\n\tproviders: [AuthService, LocalStrategy, JwtStrategy, PrismaService],\n\tcontrollers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                accessKeyId\n                            \n                            \n                                    Private\n                                clientId\n                            \n                            \n                                    Private\n                                cognitoIdentityServiceProvider\n                            \n                            \n                                    Private\n                                secretAccessKey\n                            \n                            \n                                    Private\n                                userPoolId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                generateJWT\n                            \n                            \n                                    Async\n                                getUserInfo\n                            \n                            \n                                    Async\n                                listUsers\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(username: string, email: string, userID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:139\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateJWT(payload: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:173\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserInfo(jwt_token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:193\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                jwt_token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        listUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    listUsers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:98\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(username: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        accessKeyId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        clientId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cognitoIdentityServiceProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :     AWS.CognitoIdentityServiceProvider\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        secretAccessKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        userPoolId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport * as AWS from \"aws-sdk\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { PrismaService } from \"../../prisma/prisma.service\";\nimport { Prisma } from \"@prisma/client\";\nimport * as jwt from \"jsonwebtoken\";\n//import { CreateUserDto } from \"src/modules/users/dto/create-user.dto\";\n\n@Injectable()\nexport class AuthService {\n\tprivate cognitoIdentityServiceProvider: AWS.CognitoIdentityServiceProvider;\n\tprivate accessKeyId: string;\n\tprivate secretAccessKey: string;\n\tprivate userPoolId: string;\n\tprivate clientId: string;\n\n\tconstructor(\n\t\tprivate configService: ConfigService,\n\t\tprivate prisma: PrismaService,\n\t) {\n\t\t// Set the AWS credentials\n\t\tconst accessKeyId = this.configService.get(\"AWS_ACCESS_KEY_ID\");\n\t\tif (!accessKeyId) {\n\t\t\tthrow new Error(\"Missing AWS_ACCESS_KEY_ID\");\n\t\t}\n\t\tthis.accessKeyId = accessKeyId;\n\n\t\tconst secretAccessKey = this.configService.get(\n\t\t\t\"AWS_SECRET_ACCESS_KEY\",\n\t\t);\n\t\tif (!secretAccessKey) {\n\t\t\tthrow new Error(\"Missing AWS_SECRET_ACCESS_KEY\");\n\t\t}\n\t\tthis.secretAccessKey = secretAccessKey;\n\n\t\tconst userPoolId = this.configService.get(\n\t\t\t\"AWS_COGNITO_USER_POOL_ID\",\n\t\t);\n\t\tif (!userPoolId) {\n\t\t\tthrow new Error(\"Missing AWS_COGNITO_USER_POOL_ID\");\n\t\t}\n\t\tthis.userPoolId = userPoolId;\n\n\t\tconst clientId = this.configService.get(\"AWS_COGNITO_CLIENT_ID\");\n\t\tif (!clientId) {\n\t\t\tthrow new Error(\"Missing AWS_COGNITO_CLIENT_ID\");\n\t\t}\n\t\tthis.clientId = clientId;\n\n\t\tthis.cognitoIdentityServiceProvider =\n\t\t\tnew AWS.CognitoIdentityServiceProvider({\n\t\t\t\tregion: \"af-south-1\",\n\t\t\t\taccessKeyId: this.accessKeyId,\n\t\t\t\tsecretAccessKey: this.secretAccessKey,\n\t\t\t});\n\t}\n\n\tasync validateUser(username: string, password: string): Promise {\n\t\tif (!this.userPoolId || !this.clientId) {\n\t\t\tthrow new Error(\"Missing Cognito configuration\");\n\t\t}\n\n\t\tconst params: AWS.CognitoIdentityServiceProvider.AdminInitiateAuthRequest =\n\t\t\t{\n\t\t\t\tAuthFlow: \"ADMIN_NO_SRP_AUTH\",\n\t\t\t\tClientId: this.clientId,\n\t\t\t\tUserPoolId: this.userPoolId,\n\t\t\t\tAuthParameters: {\n\t\t\t\t\tUSERNAME: username,\n\t\t\t\t\tPASSWORD: password,\n\t\t\t\t},\n\t\t\t};\n\n\t\ttry {\n\t\t\tconst authResponse = await this.cognitoIdentityServiceProvider\n\t\t\t\t.adminInitiateAuth(params)\n\t\t\t\t.promise();\n\t\t\tif (authResponse.AuthenticationResult) {\n\t\t\t\tconst user = await this.cognitoIdentityServiceProvider\n\t\t\t\t\t.adminGetUser({\n\t\t\t\t\t\tUserPoolId: this.userPoolId,\n\t\t\t\t\t\tUsername: username,\n\t\t\t\t\t})\n\t\t\t\t\t.promise();\n\n\t\t\t\treturn {\n\t\t\t\t\tusername: user.Username,\n\t\t\t\t\tattributes: user.UserAttributes,\n\t\t\t\t\tauthenticationResult: authResponse.AuthenticationResult,\n\t\t\t\t};\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthrow new UnauthorizedException(\"Invalid credentials\");\n\t\t}\n\t}\n\n\t// eslint-disable-next-line prettier/prettier\n  \tasync listUsers(): Promise {\n\t\tconst params = {\n\t\t\tUserPoolId: this.userPoolId,\n\t\t};\n\n\t\ttry {\n\t\t\tconst responsePromise = await this.cognitoIdentityServiceProvider\n\t\t\t\t.listUsers(params)\n\t\t\t\t.promise();\n\t\t\tconst response = await responsePromise;\n\t\t\treturn response;\n\t\t} catch (error) {\n\t\t\tthrow new UnauthorizedException(\"Error listing users\");\n\t\t}\n\t}\n\n\t//Sample code\n\t/*\n\tif (!userMatch) {\n\t\t\treturn { message: \"Invalid credentials. No user match\" };\n\t\t}\n\n\t\t// add users to table\n\t\tconst successful: boolean = await this.authService.createUser(\n\t\t\tuserMatch.Username,\n\t\t\tuserEmail,\n\t\t);\n\n\t\tif (!successful) {\n\t\t\treturn { message: \"Invalid credentials. Could not create user\" };\n\t\t}\n\n\t\tconst payload = {\n\t\t\tsub: userMatch.Username,\n\t\t\tusername: authInfo.username,\n\t\t\temail: userEmail,\n\t\t};\n\n\t\t//generate JWT token using payload\n\t\tconst token: string = this.authService.generateJWT(payload);\n\t*/\n\tasync createUser(\n\t\tusername: string,\n\t\temail: string,\n\t\tuserID: string,\n\t): Promise {\n\t\tconst user: Prisma.usersCreateInput = {\n\t\t\tusername: username,\n\t\t\temail: email,\n\t\t\tuser_id: userID,\n\t\t};\n\t\tconst existingUser = await this.prisma.users.findUnique({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\t\tif (existingUser) {\n\t\t\treturn true;\n\t\t}\n\t\ttry {\n\t\t\tconst response = await this.prisma.users.create({ data: user });\n\t\t\tconsole.log(response);\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t//input payload\n\t/*\n\tconst payload = {\n\t\t\tsub: userMatch.Username,\n\t\t\tusername: authInfo.username,\n\t\t\temail: userEmail,\n\t\t};\n\t*/\n\tasync generateJWT(payload: {\n\t\tsub: string;\n\t\tusername: string;\n\t\temail: string;\n\t}): Promise {\n\t\tconst secretKey = this.configService.get(\"JWT_SECRET_KEY\");\n\t\tconst expiresIn = this.configService.get(\"JWT_EXPIRATION_TIME\");\n\n\t\tif (!secretKey || secretKey === undefined || secretKey === \"\") {\n\t\t\tthrow new Error(\"Missing JWT secret key\");\n\t\t}\n\n\t\tif (!expiresIn || expiresIn === undefined || expiresIn === \"\") {\n\t\t\tthrow new Error(\"Missing JWT expiration time\");\n\t\t}\n\n\t\tconst token = jwt.sign(payload, secretKey, { expiresIn });\n\t\treturn token;\n\t}\n\n\tasync getUserInfo(jwt_token: string): Promise {\n\t\tconst secretKey = this.configService.get(\"JWT_SECRET_KEY\");\n\t\tconst expiresIn = this.configService.get(\"JWT_EXPIRATION_TIME\");\n\n\t\tif (!secretKey || secretKey === undefined || secretKey === \"\") {\n\t\t\tthrow new Error(\"Missing JWT secret key\");\n\t\t}\n\n\t\tif (!expiresIn || expiresIn === undefined || expiresIn === \"\") {\n\t\t\tthrow new Error(\"Missing JWT expiration time\");\n\t\t}\n\n\t\tconst decoded = jwt.verify(jwt_token, secretKey);\n\t\tconst userID = decoded.sub;\n\t\tif (!userID) {\n\t\t\tthrow new Error(\"Invalid JWT token\");\n\t\t}\n\t\tif (typeof userID !== \"string\") {\n\t\t\tthrow new Error(\"Invalid JWT token\");\n\t\t}\n\n\t\tconst user = await this.prisma.users.findUnique({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\t\treturn user;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRoomDto.html":{"url":"classes/CreateRoomDto.html","title":"class - CreateRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/dto/createroomdto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(RoomDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/swagger\";\nimport { RoomDto } from \"./room.dto\";\n\nexport class CreateRoomDto extends PartialType(RoomDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                activity\n                            \n                            \n                                    \n                                    \n                                bio\n                            \n                            \n                                    \n                                bookmark\n                            \n                            \n                                    \n                                follows_follows_followeeTousers\n                            \n                            \n                                    \n                                follows_follows_followerTousers\n                            \n                            \n                                    \n                                friends_friends_friend1Tousers\n                            \n                            \n                                    \n                                friends_friends_friend2Tousers\n                            \n                            \n                                    \n                                message\n                            \n                            \n                                    \n                                participate\n                            \n                            \n                                    \n                                preferences\n                            \n                            \n                                    \n                                private_message\n                            \n                            \n                                    \n                                    \n                                profile_picture\n                            \n                            \n                                    \n                                room\n                            \n                            \n                                    \n                                    \n                                userID\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        activity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        bookmark\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        follows_follows_followeeTousers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        follows_follows_followerTousers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        friends_friends_friend1Tousers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        friends_friends_friend2Tousers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        participate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        preferences\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        private_message\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        profile_picture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        room\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString } from \"class-validator\";\n\nexport class CreateUserDto {\n\t@ApiProperty()\n\t@IsString()\n\tuserID: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tusername: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tbio: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tprofile_picture: string;\n\n\t@ApiProperty()\n\tactivity: any;\n\n\t@ApiProperty()\n\tpreferences: any;\n\n\t@ApiProperty()\n\tbookmark: any[];\n\n\t@ApiProperty()\n\tfollows_follows_followeeTousers: any[];\n\n\t@ApiProperty()\n\tfollows_follows_followerTousers: any[];\n\n\t@ApiProperty()\n\tfriends_friends_friend1Tousers: any[];\n\n\t@ApiProperty()\n\tfriends_friends_friend2Tousers: any[];\n\n\t@ApiProperty()\n\tmessage: any[];\n\n\t@ApiProperty()\n\tparticipate: any[];\n\n\t@ApiProperty()\n\tprivate_message: any[];\n\n\t@ApiProperty()\n\troom: any[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto-1.html":{"url":"classes/CreateUserDto-1.html","title":"class - CreateUserDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/entities/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                activity\n                            \n                            \n                                    \n                                bio\n                            \n                            \n                                    \n                                preferences\n                            \n                            \n                                    \n                                profile_picture\n                            \n                            \n                                    \n                                userID\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        activity\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Prisma.JsonValue\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        preferences\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Prisma.JsonValue\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        profile_picture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma } from \"@prisma/client\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n\nexport class CreateUserDto {\n\t@ApiProperty()\n\tuserID: string;\n\n\t@ApiProperty()\n\tusername: string;\n\n\t@ApiProperty()\n\tbio: string;\n\n\t@ApiProperty()\n\tprofile_picture: string;\n\n\t@ApiProperty()\n\tactivity: Prisma.JsonValue;\n\n\t@ApiProperty()\n\tpreferences: Prisma.JsonValue;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DbUtilsModule.html":{"url":"modules/DbUtilsModule.html","title":"module - DbUtilsModule","body":"\n                   \n\n\n\n\n    Modules\n    DbUtilsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DbUtilsModule\n\n\n\ncluster_DbUtilsModule_imports\n\n\n\ncluster_DbUtilsModule_exports\n\n\n\ncluster_DbUtilsModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nDbUtilsModule\n\nDbUtilsModule\n\nDbUtilsModule -->\n\nPrismaModule->DbUtilsModule\n\n\n\n\n\nDbUtilsService \n\nDbUtilsService \n\nDbUtilsService  -->\n\nDbUtilsModule->DbUtilsService \n\n\n\n\n\nDbUtilsService\n\nDbUtilsService\n\nDbUtilsModule -->\n\nDbUtilsService->DbUtilsModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nDbUtilsModule -->\n\nPrismaService->DbUtilsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/db-utils/db-utils.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DbUtilsService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DbUtilsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\nimport { PrismaModule } from \"prisma/prisma.module\";\nimport { DbUtilsService } from \"./db-utils.service\";\n\n@Module({\n\timports: [PrismaModule],\n\tproviders: [PrismaService, DbUtilsService],\n\texports: [DbUtilsService],\n})\nexport class DbUtilsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DbUtilsService.html":{"url":"injectables/DbUtilsService.html","title":"injectable - DbUtilsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DbUtilsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/db-utils/db-utils.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getRandomRooms\n                            \n                            \n                                    Async\n                                getUserFollowers\n                            \n                            \n                                    Async\n                                getUserFollowing\n                            \n                            \n                                    Async\n                                isFollowing\n                            \n                            \n                                    Async\n                                isRoomPrivate\n                            \n                            \n                                    Async\n                                isRoomPublic\n                            \n                            \n                                    Async\n                                roomExists\n                            \n                            \n                                    Async\n                                userExists\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/db-utils/db-utils.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRandomRooms\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRandomRooms(count: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/db-utils/db-utils.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                count\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserFollowers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserFollowers(userID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/db-utils/db-utils.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserFollowing\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserFollowing(userID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/db-utils/db-utils.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isFollowing\n                        \n                    \n                \n            \n            \n                \n                        \n                    isFollowing(userID: string, accountFollowedId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/db-utils/db-utils.service.ts:160\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                accountFollowedId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isRoomPrivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    isRoomPrivate(roomID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/db-utils/db-utils.service.ts:120\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isRoomPublic\n                        \n                    \n                \n            \n            \n                \n                        \n                    isRoomPublic(roomID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/db-utils/db-utils.service.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        roomExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    roomExists(roomID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/db-utils/db-utils.service.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        userExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    userExists(userID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/db-utils/db-utils.service.ts:140\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\nimport * as Prisma from \"@prisma/client\";\n\n@Injectable()\nexport class DbUtilsService {\n\tconstructor(private readonly prisma: PrismaService) {}\n\n\t//get user following\n\tasync getUserFollowing(userID: string): Promise {\n\t\tconst following: Prisma.follows[] | null =\n\t\t\tawait this.prisma.follows.findMany({\n\t\t\t\twhere: { followee: userID },\n\t\t\t});\n\n\t\tif (!following || following === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst result: Prisma.users[] = [];\n\t\tconst ids: string[] = [];\n\t\tfor (let i = 0; i  {\n\t\tconst followers: Prisma.follows[] | null =\n\t\t\tawait this.prisma.follows.findMany({\n\t\t\t\twhere: { follower: userID },\n\t\t\t});\n\n\t\tif (!followers || followers === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst result: Prisma.users[] = [];\n\t\tconst ids: string[] = [];\n\t\tfor (let i = 0; i  {\n\t\tconst rooms: Prisma.room[] | null = await this.prisma.room.findMany();\n\n\t\tif (!rooms || rooms === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (rooms.length  {\n\t\tconst room: Prisma.room | null = await this.prisma.room.findUnique({\n\t\t\twhere: { room_id: roomID },\n\t\t});\n\t\tif (!room || room === null) {\n\t\t\tthrow new Error(\"Room not found. Probably doesn't exist.\");\n\t\t}\n\n\t\tconst publicRoom: Prisma.public_room | null =\n\t\t\tawait this.prisma.public_room.findUnique({\n\t\t\t\twhere: { room_id: roomID },\n\t\t\t});\n\n\t\tif (!publicRoom || publicRoom === null) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasync isRoomPrivate(roomID: string): Promise {\n\t\tconst room: Prisma.room | null = await this.prisma.room.findUnique({\n\t\t\twhere: { room_id: roomID },\n\t\t});\n\t\tif (!room || room === null) {\n\t\t\tthrow new Error(\"Room not found. Probably doesn't exist.\");\n\t\t}\n\n\t\tconst privateRoom: Prisma.private_room | null =\n\t\t\tawait this.prisma.private_room.findUnique({\n\t\t\t\twhere: { room_id: roomID },\n\t\t\t});\n\n\t\tif (!privateRoom || privateRoom === null) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasync userExists(userID: string): Promise {\n\t\tconst user: Prisma.users | null = await this.prisma.users.findUnique({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\t\tif (!user || user === null) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tasync roomExists(roomID: string): Promise {\n\t\tconst room: Prisma.room | null = await this.prisma.room.findUnique({\n\t\t\twhere: { room_id: roomID },\n\t\t});\n\t\tif (!room || room === null) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tasync isFollowing(\n\t\tuserID: string,\n\t\taccountFollowedId: string,\n\t): Promise {\n\t\tconst follow: Prisma.follows[] = await this.prisma.follows.findMany({\n\t\t\twhere: {\n\t\t\t\tfollower: userID,\n\t\t\t\tfollowee: accountFollowedId,\n\t\t\t},\n\t\t});\n\t\tif (!follow || follow === null) {\n\t\t\treturn false;\n\t\t}\n\t\tif (follow.length === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tif (follow.length > 1) {\n\t\t\tthrow new Error(\"More than one follow found.\");\n\t\t}\n\t\treturn true;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DtoGenModule.html":{"url":"modules/DtoGenModule.html","title":"module - DtoGenModule","body":"\n                   \n\n\n\n\n    Modules\n    DtoGenModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DtoGenModule\n\n\n\ncluster_DtoGenModule_providers\n\n\n\ncluster_DtoGenModule_imports\n\n\n\ncluster_DtoGenModule_exports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nDtoGenModule\n\nDtoGenModule\n\nDtoGenModule -->\n\nPrismaModule->DtoGenModule\n\n\n\n\n\nDtoGenService \n\nDtoGenService \n\nDtoGenService  -->\n\nDtoGenModule->DtoGenService \n\n\n\n\n\nDbUtilsService\n\nDbUtilsService\n\nDtoGenModule -->\n\nDbUtilsService->DtoGenModule\n\n\n\n\n\nDtoGenService\n\nDtoGenService\n\nDtoGenModule -->\n\nDtoGenService->DtoGenModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nDtoGenModule -->\n\nPrismaService->DtoGenModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/dto-gen/dto-gen.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DbUtilsService\n                        \n                        \n                            DtoGenService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DtoGenService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\nimport { PrismaModule } from \"prisma/prisma.module\";\nimport { DtoGenService } from \"./dto-gen.service\";\nimport { DbUtilsService } from \"../db-utils/db-utils.service\";\n\n@Module({\n\timports: [PrismaModule],\n\tproviders: [PrismaService, DtoGenService, DbUtilsService],\n\texports: [DtoGenService],\n})\nexport class DtoGenModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DtoGenService.html":{"url":"injectables/DtoGenService.html","title":"injectable - DtoGenService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DtoGenService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/dto-gen/dto-gen.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generateBriefUserProfileDto\n                            \n                            \n                                    Async\n                                generateMultipleRoomDto\n                            \n                            \n                                    Async\n                                generateMultipleUserProfileDto\n                            \n                            \n                                    Async\n                                generateRoomDto\n                            \n                            \n                                    Async\n                                generateRoomDtoFromRoom\n                            \n                            \n                                    Async\n                                generateUserDto\n                            \n                            \n                                    Async\n                                generateUserProfileDto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, dbUtils: DbUtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/dto-gen/dto-gen.service.ts:87\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dbUtils\n                                                  \n                                                        \n                                                                        DbUtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateBriefUserProfileDto\n                        \n                    \n                \n            \n            \n                \ngenerateBriefUserProfileDto(user: Prisma.users)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/dto-gen/dto-gen.service.ts:173\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                        Prisma.users\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserProfileDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateMultipleRoomDto\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateMultipleRoomDto(room_ids: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/dto-gen/dto-gen.service.ts:354\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                room_ids\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateMultipleUserProfileDto\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateMultipleUserProfileDto(user_ids: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/dto-gen/dto-gen.service.ts:218\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_ids\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateRoomDto\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateRoomDto(roomID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/dto-gen/dto-gen.service.ts:242\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateRoomDtoFromRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateRoomDtoFromRoom(room: Prisma.room)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/dto-gen/dto-gen.service.ts:300\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                room\n                                            \n                                                        Prisma.room\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateUserDto\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateUserDto()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/dto-gen/dto-gen.service.ts:420\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateUserProfileDto\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateUserProfileDto(userID: string, fully_qualify: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/dto-gen/dto-gen.service.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                fully_qualify\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { UserProfileDto } from \"../profile/dto/userprofile.dto\";\nimport { RoomDto } from \"../rooms/dto/room.dto\";\nimport { UserDto } from \"../users/dto/user.dto\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\nimport * as Prisma from \"@prisma/client\";\nimport { DbUtilsService } from \"../db-utils/db-utils.service\";\n\n/*\n## UserProfileDto (User Profile Info)\nA object representing User Profile information.\n```json\n{\n\tprofile_name : string,\n\tuserID : string,\n\tusername : string,\n\tprofile_picture_url : string,\n\tfollowers: {\n\t\tcount: int,\n\t\tdata: [ProfileDto]\n\t},\n\tfollowing: {\n\t\tcount: int,\n\t\tdata: [ProfileDto]\n\t},\n\tlinks: {\n\t\tcount: int,\n\t\tdata: [string]\n\t},\n\tbio : string,\n\tcurrent_song: SongInfoDto,\n\tfav_genres: {\n\t\tcount: int,\n\t\tdata: [string]\n\t},\n\tfav_songs: {\n\t\tcount: int,\n\t\tdata: [SongInfoDto]\n\t},\n\tfav_rooms: {\n\t\tcount: int,\n\t\tdata: [RoomDto]\n\t},\n\trecent_rooms: {\n\t\tcount: int,\n\t\tdata: [RoomDto]\n\t}\n}\n```\n\n## RoomDto (Room Info)\nA object representing Room information.\n```json\n{\n\tcreator: ProfileDto,\n\troomID: string,\n\tpartipicant_count: number,\n\troom_name: string,\n\tdescription: string,\n\tis_temporary: boolean,\n\tis_private: boolean,\n\tis_scheduled: boolean,\n\tstart_date: DateTime,\n\tend_date: DateTime,\n\tlanguage: string,\n\thas_explicit_content: boolean,\n\thas_nsfw_content: boolean,\n\troom_image: string,\n\tcurrent_song: SongInfoDto,\n\ttags: [string]\n}\n```\n\n## SongInfoDto (Song Info)\nA object representing Song information.\n```json\n{\n\ttitle: string,\n\tartists: [string],\n\tcover: string,\n\tstart_time: DateTime\n}\n```\n*/\n// A service that will generate DTOs\n@Injectable()\nexport class DtoGenService {\n\tconstructor(\n\t\tprivate readonly prisma: PrismaService,\n\t\tprivate readonly dbUtils: DbUtilsService,\n\t) {}\n\n\tasync generateUserProfileDto(\n\t\tuserID: string,\n\t\tfully_qualify: boolean = true,\n\t): Promise {\n\t\t//check if userID exists\n\t\tconst user: Prisma.users | null = await this.prisma.users.findUnique({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\n\t\tif (!user || user === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t//get user info\n\t\tconst result: UserProfileDto = this.generateBriefUserProfileDto(user);\n\n\t\tconst following: Prisma.users[] | null =\n\t\t\tawait this.dbUtils.getUserFollowing(userID);\n\t\tif (following && following !== null) {\n\t\t\tresult.following.count = following.length;\n\t\t\tif (fully_qualify) {\n\t\t\t\tfor (let i = 0; i  r.room_id);\n\t\t\t\tconst rooms = await this.generateMultipleRoomDto(ids);\n\t\t\t\tif (rooms && rooms !== null) {\n\t\t\t\t\tresult.fav_rooms.data = rooms;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (fully_qualify) {\n\t\t\tconst recentRooms: Prisma.room[] | null =\n\t\t\t\tawait this.dbUtils.getRandomRooms(5);\n\t\t\tif (recentRooms && recentRooms !== null) {\n\t\t\t\tresult.recent_rooms.count = recentRooms.length;\n\t\t\t\tconst ids: string[] = recentRooms.map((r) => r.room_id);\n\t\t\t\tconst rooms = await this.generateMultipleRoomDto(ids);\n\t\t\t\tif (rooms && rooms !== null) {\n\t\t\t\t\tresult.recent_rooms.data = rooms;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tgenerateBriefUserProfileDto(user: Prisma.users): UserProfileDto {\n\t\tconst result: UserProfileDto = {\n\t\t\tprofile_name: user.full_name || \"\",\n\t\t\tuserID: user.user_id,\n\t\t\tusername: user.username,\n\t\t\tprofile_picture_url: user.profile_picture || \"\",\n\t\t\tfollowers: {\n\t\t\t\tcount: 0,\n\t\t\t\tdata: [],\n\t\t\t},\n\t\t\tfollowing: {\n\t\t\t\tcount: 0,\n\t\t\t\tdata: [],\n\t\t\t},\n\t\t\tlinks: {\n\t\t\t\tcount: 0,\n\t\t\t\tdata: [],\n\t\t\t},\n\t\t\tbio: user.bio || \"\",\n\t\t\tcurrent_song: {\n\t\t\t\ttitle: \"\",\n\t\t\t\tartists: [],\n\t\t\t\tcover: \"\",\n\t\t\t\tstart_time: new Date(),\n\t\t\t},\n\t\t\tfav_genres: {\n\t\t\t\tcount: 0,\n\t\t\t\tdata: [],\n\t\t\t},\n\t\t\tfav_songs: {\n\t\t\t\tcount: 0,\n\t\t\t\tdata: [],\n\t\t\t},\n\t\t\tfav_rooms: {\n\t\t\t\tcount: 0,\n\t\t\t\tdata: [],\n\t\t\t},\n\t\t\trecent_rooms: {\n\t\t\t\tcount: 0,\n\t\t\t\tdata: [],\n\t\t\t},\n\t\t};\n\t\treturn result;\n\t}\n\n\tasync generateMultipleUserProfileDto(\n\t\tuser_ids: string[],\n\t): Promise {\n\t\tconst users: Prisma.users[] | null = await this.prisma.users.findMany({\n\t\t\twhere: { user_id: { in: user_ids } },\n\t\t});\n\n\t\tif (!users || users === null) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst result: UserProfileDto[] = [];\n\t\tfor (let i = 0; i  {\n\t\tconst room: Prisma.room | null = await this.prisma.room.findUnique({\n\t\t\twhere: { room_id: roomID },\n\t\t});\n\n\t\tif (!room || room === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst scheduledRoom = await this.prisma.scheduled_room.findUnique({\n\t\t\twhere: { room_id: roomID },\n\t\t});\n\n\t\tconst result: RoomDto = {\n\t\t\tcreator: new UserProfileDto(),\n\t\t\troomID: room.room_id,\n\t\t\tparticipant_count: 0,\n\t\t\troom_name: room.name,\n\t\t\tdescription: room.description || \"\",\n\t\t\tis_temporary: room.is_temporary || false,\n\t\t\tis_private: await this.dbUtils.isRoomPrivate(roomID),\n\t\t\tis_scheduled: false,\n\t\t\tstart_date: new Date(),\n\t\t\tend_date: new Date(),\n\t\t\tlanguage: room.room_language || \"\",\n\t\t\thas_explicit_content: room.explicit || false,\n\t\t\thas_nsfw_content: room.nsfw || false,\n\t\t\troom_image: room.playlist_photo || \"\",\n\t\t\tcurrent_song: {\n\t\t\t\ttitle: \"\",\n\t\t\t\tartists: [],\n\t\t\t\tcover: \"\",\n\t\t\t\tstart_time: new Date(),\n\t\t\t},\n\t\t\ttags: room.tags || [],\n\t\t};\n\n\t\tif (scheduledRoom && scheduledRoom !== null) {\n\t\t\tresult.is_scheduled = true;\n\t\t\t/*\n\t\t\tresult.start_date = scheduledRoom.start_date;\n\t\t\tresult.end_date = scheduledRoom.end_date;\n\t\t\t*/\n\t\t}\n\n\t\tconst creator = await this.generateUserProfileDto(room.room_creator, false);\n\t\tif (creator && creator !== null) {\n\t\t\tresult.creator = creator;\n\t\t}\n\n\t\t//participant count will be added later\n\t\t//current song will be added later\n\t\t//dates will be added later\n\t\t//current songs will be added later\n\n\t\treturn result;\n\t}\n\n\tasync generateRoomDtoFromRoom(room: Prisma.room): Promise {\n\t\tif (!room || room === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst scheduledRoom = await this.prisma.scheduled_room.findUnique({\n\t\t\twhere: { room_id: room.room_id },\n\t\t});\n\n\t\tconst result: RoomDto = {\n\t\t\tcreator: new UserProfileDto(),\n\t\t\troomID: room.room_id,\n\t\t\tparticipant_count: 0,\n\t\t\troom_name: room.name,\n\t\t\tdescription: room.description || \"\",\n\t\t\tis_temporary: room.is_temporary || false,\n\t\t\tis_private: await this.dbUtils.isRoomPrivate(room.room_id),\n\t\t\tis_scheduled: false,\n\t\t\tstart_date: new Date(),\n\t\t\tend_date: new Date(),\n\t\t\tlanguage: room.room_language || \"\",\n\t\t\thas_explicit_content: room.explicit || false,\n\t\t\thas_nsfw_content: room.nsfw || false,\n\t\t\troom_image: room.playlist_photo || \"\",\n\t\t\tcurrent_song: {\n\t\t\t\ttitle: \"\",\n\t\t\t\tartists: [],\n\t\t\t\tcover: \"\",\n\t\t\t\tstart_time: new Date(),\n\t\t\t},\n\t\t\ttags: room.tags || [],\n\t\t};\n\n\t\tconst creator = await this.generateUserProfileDto(room.room_creator, false);\n\t\tif (creator && creator !== null) {\n\t\t\tresult.creator = creator;\n\t\t}\n\n\t\tif (scheduledRoom && scheduledRoom !== null) {\n\t\t\tresult.is_scheduled = true;\n\t\t\t/*\n\t\t\tresult.start_date = scheduledRoom.start_date;\n\t\t\tresult.end_date = scheduledRoom.end_date;\n\t\t\t*/\n\t\t}\n\n\t\t//participant count will be added later\n\t\t//current song will be added later\n\t\t//dates will be added later\n\t\t//current songs will be added later\n\n\t\treturn result;\n\t}\n\n\tasync generateMultipleRoomDto(room_ids: string[]): Promise {\n\t\tconst rooms: Prisma.room[] | null = await this.prisma.room.findMany({\n\t\t\twhere: { room_id: { in: room_ids } },\n\t\t});\n\n\t\tif (!rooms || rooms === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst userIds: string[] = rooms.map((r) => r.room_creator);\n\t\t//remove duplicate user ids\n\t\tconst uniqueUserIds: string[] = [...new Set(userIds)];\n\t\tconst users: Prisma.users[] | null = await this.prisma.users.findMany({\n\t\t\twhere: { user_id: { in: uniqueUserIds } },\n\t\t});\n\n\t\tconst userProfiles: UserProfileDto[] = [];\n\t\tfor (let i = 0; i  u.userID === r.room_creator);\n\t\t\t\tif (!u || u === null) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\"Weird error. Got users from Rooms table but user (\" +\n\t\t\t\t\t\t\tr.room_creator +\n\t\t\t\t\t\t\t\") not found in Users table\",\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tconst room: RoomDto = {\n\t\t\t\t\tcreator: u || new UserProfileDto(),\n\t\t\t\t\troomID: r.room_id,\n\t\t\t\t\tparticipant_count: 0, //to fix soon\n\t\t\t\t\troom_name: r.name,\n\t\t\t\t\tdescription: r.description || \"\",\n\t\t\t\t\tis_temporary: r.is_temporary || false,\n\t\t\t\t\tis_private: false, //db must add column\n\t\t\t\t\tis_scheduled: false, //db must add column\n\t\t\t\t\tstart_date: new Date(),\n\t\t\t\t\tend_date: new Date(),\n\t\t\t\t\tlanguage: r.room_language || \"\",\n\t\t\t\t\thas_explicit_content: r.explicit || false,\n\t\t\t\t\thas_nsfw_content: r.nsfw || false,\n\t\t\t\t\troom_image: r.playlist_photo || \"\",\n\t\t\t\t\tcurrent_song: {\n\t\t\t\t\t\ttitle: \"\",\n\t\t\t\t\t\tartists: [],\n\t\t\t\t\t\tcover: \"\",\n\t\t\t\t\t\tstart_time: new Date(),\n\t\t\t\t\t},\n\t\t\t\t\ttags: r.tags || [],\n\t\t\t\t};\n\t\t\t\tresult.push(room);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync generateUserDto(): Promise {\n\t\treturn new UserDto();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy, ExtractJwt } from \"passport-jwt\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { Injectable } from \"@nestjs/common\";\nimport { AuthService } from \"./auth.service\";\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n\tconstructor(private authService: AuthService) {\n\t\tconst jwtSecret = process.env.JWT_SECRET_KEY;\n\t\tif (!jwtSecret || jwtSecret === \"\") {\n\t\t\tthrow new Error(\"Missing JWT_SECRET_KEY\");\n\t\t}\n\n\t\tsuper({\n\t\t\tjwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n\t\t\tignoreExpiration: false,\n\t\t\tsecretOrKey: jwtSecret,\n\t\t});\n\t}\n\n\tasync validate(payload: any) {\n\t\treturn { userId: payload.sub, username: payload.username };\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(username: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/local.strategy.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from \"passport-local\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { AuthService } from \"./auth.service\";\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n\tconstructor(private authService: AuthService) {\n\t\tsuper();\n\t}\n\n\tasync validate(username: string, password: string): Promise {\n\t\tconst user = await this.authService.validateUser(username, password);\n\t\tif (!user) {\n\t\t\tthrow new UnauthorizedException();\n\t\t}\n\t\treturn user;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PrismaService } from \"./prisma.service\";\n\n@Module({\n\tproviders: [PrismaService],\n\texports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in prisma/prisma.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in prisma/prisma.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit, OnModuleDestroy } from \"@nestjs/common\";\nimport { PrismaClient } from \"@prisma/client\";\n\n@Injectable()\nexport class PrismaService\n\textends PrismaClient\n\timplements OnModuleInit, OnModuleDestroy\n{\n\tasync onModuleInit() {\n\t\tawait this.$connect();\n\t}\n\n\tasync onModuleDestroy() {\n\t\tawait this.$disconnect();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProfileController.html":{"url":"controllers/ProfileController.html","title":"controller - ProfileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProfileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/profile.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                profile\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                followUser\n                            \n                            \n                                    \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getProfileByUsername\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                patchProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                unfollowUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        followUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    followUser(req: any, username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Post(':username/follow')@ApiTags('profile')@ApiOperation({summary: 'Follow the given user'})@ApiParam({name: 'username'})@ApiOkResponse({description: 'Successfully followed the user.', type: Boolean})@ApiBadRequestResponse({description: 'Error following the user.', type: Boolean})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/profile/profile.controller.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@ApiTags('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/profile/profile.controller.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserProfileDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getProfileByUsername\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfileByUsername(req: any, username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get(':username')@ApiTags('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/profile/profile.controller.ts:98\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        patchProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchProfile(req: any, updateProfileDto: UpdateUserProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch()@ApiTags('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/profile/profile.controller.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateProfileDto\n                                            \n                                                            UpdateUserProfileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        unfollowUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    unfollowUser(req: any, username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Post(':username/unfollow')@ApiTags('profile')@ApiOperation({summary: 'Unfollow the given user'})@ApiParam({name: 'username'})@ApiOkResponse({description: 'Successfully unfollowed the user.', type: Boolean})@ApiBadRequestResponse({description: 'Error unfollowing the user.', type: Boolean})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/profile/profile.controller.ts:144\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(req: any, updateProfileDto: UpdateUserProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Put()@ApiTags('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/profile/profile.controller.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateProfileDto\n                                            \n                                                            UpdateUserProfileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n\tController,\n\tGet,\n\tPost,\n\tPut,\n\tPatch,\n\tBody,\n\tParam,\n\tUseGuards,\n\tRequest,\n} from \"@nestjs/common\";\nimport { ApiBadRequestResponse, ApiBearerAuth, ApiOkResponse, ApiOperation, ApiParam, ApiTags } from \"@nestjs/swagger\";\nimport { UserProfileDto } from \"./dto/userprofile.dto\";\nimport { ProfileService } from \"./profile.service\";\nimport { UpdateUserProfileDto } from \"./dto/updateuserprofile.dto\";\nimport { JwtAuthGuard } from \"./../../auth/jwt-auth.guard\";\n\n@Controller(\"profile\")\nexport class ProfileController {\n\tconstructor(private readonly profileService: ProfileService) {}\n\n\t//NOTE TO DEV:\n\t/*\n    add decorators to each of these paths like:\n    @Post()\n    @ApiOperation({ summary: 'Create user' })\n    @ApiBody({ type: CreateUserDto })\n    @ApiResponse({ status: 201, description: 'The record has been successfully created.', type: User })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    createUser(@Body() createUserDto: CreateUserDto) {\n      //...\n    }\n\n    @Get(':id')\n    @ApiOperation({ summary: 'Retrieve user' })\n    @ApiParam({ name: 'id', required: true })\n    @ApiResponse({ status: 200, description: 'The found record', type: User })\n    getUser(@Param('id') id: string) {\n      //...\n    }\n\n    such that the API documentation is more detailed and informative for the next dev.\n  */\n\n\t/*\n    GET /profile\n    gets profile info\n    no input\n    response: return ProfileDto\n    */\n\t@UseGuards(JwtAuthGuard)\n\t@ApiTags(\"profile\")\n\tgetProfile(@Request() req: any): UserProfileDto {\n\t\treturn this.profileService.getProfile();\n\t}\n\n\t/*\n    PUT /profile\n    edits profile info\n    input: ProfileDto\n    output: updated ProfileDto\n    */\n\t@UseGuards(JwtAuthGuard)\n\t@Put()\n\t@ApiTags(\"profile\")\n\tasync updateProfile(\n\t\t@Request() req: any,\n\t\t@Body() updateProfileDto: UpdateUserProfileDto,\n\t): Promise {\n\t\treturn await this.profileService.updateProfile();\n\t}\n\n\t/*\n    PATCH /profile\n    edits profile info\n    input: ProfileDto\n    output: updated ProfileDto\n    */\n\t@UseGuards(JwtAuthGuard)\n\t@Patch()\n\t@ApiTags(\"profile\")\n\tasync patchProfile(\n\t\t@Request() req: any,\n\t\t@Body() updateProfileDto: UpdateUserProfileDto,\n\t): Promise {\n\t\treturn await this.profileService.patchProfile();\n\t}\n\n\t/*\n    GET /profile/{username}\n    gets profile info for given username\n    no input\n    response: ProfileDto\n    */\n\t@UseGuards(JwtAuthGuard)\n\t@Get(\":username\")\n\t@ApiTags(\"profile\")\n\tasync getProfileByUsername(\n\t\t@Request() req: any,\n\t\t@Param(\"username\") username: string,\n\t): Promise {\n\t\treturn await this.profileService.getProfileByUsername();\n\t}\n\n\t@ApiBearerAuth()\n\t@UseGuards(JwtAuthGuard)\n\t@Post(\":username/follow\")\n\t@ApiTags(\"profile\")\n\t@ApiOperation({ summary: \"Follow the given user\" })\n\t@ApiParam({ name: \"username\" })\n\t@ApiOkResponse({\n\t\tdescription: \"Successfully followed the user.\",\n\t\ttype: Boolean,\n\t})\n\t@ApiBadRequestResponse({\n\t\tdescription: \"Error following the user.\",\n\t\ttype: Boolean,\n\t})\n\tasync followUser(\n\t\t@Request() req: any,\n\t\t@Param(\"username\") username: string,\n\t): Promise {\n\t\tconst userID = req.user.sub;\n\t\tif (!userID || userID === \"\" || typeof userID !== \"string\") {\n\t\t\tthrow new Error(\"Invalid user ID in JWT token. Please log in again.\");\n\t\t}\n\t\treturn await this.profileService.followUser(userID, username);\n\t}\n\n\t@ApiBearerAuth()\n\t@UseGuards(JwtAuthGuard)\n\t@Post(\":username/unfollow\")\n\t@ApiTags(\"profile\")\n\t@ApiOperation({ summary: \"Unfollow the given user\" })\n\t@ApiParam({ name: \"username\" })\n\t@ApiOkResponse({\n\t\tdescription: \"Successfully unfollowed the user.\",\n\t\ttype: Boolean,\n\t})\n\t@ApiBadRequestResponse({\n\t\tdescription: \"Error unfollowing the user.\",\n\t\ttype: Boolean,\n\t})\n\tasync unfollowUser(\n\t\t@Request() req: any,\n\t\t@Param(\"username\") username: string,\n\t): Promise {\n\t\tconst userID = req.user.sub;\n\t\tif (!userID || userID === \"\" || typeof userID !== \"string\") {\n\t\t\tthrow new Error(\"Invalid user ID in JWT token. Please log in again.\");\n\t\t}\n\t\treturn await this.profileService.unfollowUser(userID, username);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProfileModule.html":{"url":"modules/ProfileModule.html","title":"module - ProfileModule","body":"\n                   \n\n\n\n\n    Modules\n    ProfileModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_providers\n\n\n\ncluster_ProfileModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nProfileModule\n\nProfileModule\n\nProfileModule -->\n\nPrismaModule->ProfileModule\n\n\n\n\n\nDbUtilsService\n\nDbUtilsService\n\nProfileModule -->\n\nDbUtilsService->ProfileModule\n\n\n\n\n\nDtoGenService\n\nDtoGenService\n\nProfileModule -->\n\nDtoGenService->ProfileModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nProfileModule -->\n\nPrismaService->ProfileModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/profile/profile.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DbUtilsService\n                        \n                        \n                            DtoGenService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            ProfileService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProfileController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ProfileController } from \"./profile.controller\";\nimport { ProfileService } from \"./profile.service\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\nimport { PrismaModule } from \"prisma/prisma.module\";\nimport { DtoGenService } from \"../dto-gen/dto-gen.service\";\nimport { DbUtilsService } from \"../db-utils/db-utils.service\";\n\n@Module({\n\tcontrollers: [ProfileController],\n\tproviders: [ProfileService, PrismaService, DtoGenService, DbUtilsService],\n\timports: [PrismaModule],\n})\nexport class ProfileModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfileService.html":{"url":"injectables/ProfileService.html","title":"injectable - ProfileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProfileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/profile.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                followUser\n                            \n                            \n                                getProfile\n                            \n                            \n                                getProfileByUsername\n                            \n                            \n                                patchProfile\n                            \n                            \n                                    Async\n                                unfollowUser\n                            \n                            \n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, dtogen: DtoGenService, dbUtilsService: DbUtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/profile/profile.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dtogen\n                                                  \n                                                        \n                                                                        DtoGenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dbUtilsService\n                                                  \n                                                        \n                                                                        DbUtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        followUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    followUser(userId: string, accountFollowedId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/profile/profile.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                accountFollowedId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProfile\n                        \n                    \n                \n            \n            \n                \ngetProfile()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/profile/profile.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         UserProfileDto\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProfileByUsername\n                        \n                    \n                \n            \n            \n                \ngetProfileByUsername()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/profile/profile.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         UserProfileDto\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        patchProfile\n                        \n                    \n                \n            \n            \n                \npatchProfile()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/profile/profile.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         UserProfileDto\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        unfollowUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    unfollowUser(userId: string, accountUnfollowedId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/profile/profile.service.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                accountUnfollowedId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateProfile\n                        \n                    \n                \n            \n            \n                \nupdateProfile()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/profile/profile.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         UserProfileDto\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { UserProfileDto } from \"./dto/userprofile.dto\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\nimport { DtoGenService } from \"../dto-gen/dto-gen.service\";\nimport { DbUtilsService } from \"../db-utils/db-utils.service\";\nimport * as Prisma from \"@prisma/client\";\n\n@Injectable()\nexport class ProfileService {\n\tconstructor(\n\t\tprivate readonly prisma: PrismaService,\n\t\tprivate readonly dtogen: DtoGenService,\n\t\tprivate readonly dbUtilsService: DbUtilsService,\n\t) {}\n\n\tgetProfile(): UserProfileDto {\n\t\t// an an example to generate a UserProfileDto\n\t\t/*\n\t\tconst userID = \"311ce2e8-8041-70bd-0ab5-be97283ee182\"\n\t\tconst user = await this.dtogen.generateUserProfileDto(userID);\n\t\tif (user) {\n\t\t\treturn user;\n\t\t}\n\t\t*/\n\t\treturn new UserProfileDto();\n\t}\n\n\tupdateProfile(): UserProfileDto {\n\t\treturn new UserProfileDto();\n\t}\n\n\tpatchProfile(): UserProfileDto {\n\t\treturn new UserProfileDto();\n\t}\n\n\tgetProfileByUsername(): UserProfileDto {\n\t\treturn new UserProfileDto();\n\t}\n\n\tasync followUser(\n\t\tuserId: string,\n\t\taccountFollowedId: string,\n\t): Promise {\n\t\tif (userId === accountFollowedId) {\n\t\t\tthrow new Error(\"You cannot follow yourself\");\n\t\t}\n\n\t\tif (!(await this.dbUtilsService.userExists(accountFollowedId))) {\n\t\t\tthrow new Error(\"User (\" + accountFollowedId + \") does not exist\");\n\t\t}\n\n\t\tif (!(await this.dbUtilsService.userExists(userId))) {\n\t\t\tthrow new Error(\"User (\" + userId + \") does not exist\");\n\t\t}\n\n\t\tif (await this.dbUtilsService.isFollowing(userId, accountFollowedId)) {\n\t\t\treturn true;\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.prisma.follows.create({\n\t\t\t\tdata: {\n\t\t\t\t\tfollower: userId,\n\t\t\t\t\tfollowee: accountFollowedId,\n\t\t\t\t},\n\t\t\t});\n\t\t\treturn true;\n\t\t} catch (e) {\n\t\t\tthrow new Error(\"Failed to follow user (\" + accountFollowedId + \")\");\n\t\t}\n\t}\n\n\tasync unfollowUser(\n\t\tuserId: string,\n\t\taccountUnfollowedId: string,\n\t): Promise {\n\t\tif (userId === accountUnfollowedId) {\n\t\t\tthrow new Error(\"You cannot unfollow yourself\");\n\t\t}\n\n\t\tif (!(await this.dbUtilsService.userExists(accountUnfollowedId))) {\n\t\t\tthrow new Error(\"User (\" + accountUnfollowedId + \") does not exist\");\n\t\t}\n\n\t\tif (!(await this.dbUtilsService.userExists(userId))) {\n\t\t\tthrow new Error(\"User (\" + userId + \") does not exist\");\n\t\t}\n\n\t\tif (!(await this.dbUtilsService.isFollowing(userId, accountUnfollowedId))) {\n\t\t\treturn true;\n\t\t}\n\n\t\ttry {\n\t\t\t//find the follow relationship and delete it\n\t\t\tconst follow = await this.prisma.follows.findFirst({\n\t\t\t\twhere: {\n\t\t\t\t\tfollower: userId,\n\t\t\t\t\tfollowee: accountUnfollowedId,\n\t\t\t\t},\n\t\t\t});\n\t\t\tif (!follow) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tawait this.prisma.follows.delete({\n\t\t\t\twhere: {\n\t\t\t\t\tfollows_id: follow.follows_id,\n\t\t\t\t\tfollower: userId,\n\t\t\t\t\tfollowee: accountUnfollowedId,\n\t\t\t\t},\n\t\t\t});\n\t\t\treturn true;\n\t\t} catch (e) {\n\t\t\tthrow new Error(\"Failed to unfollow user (\" + accountUnfollowedId + \")\");\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoomDto.html":{"url":"classes/RoomDto.html","title":"class - RoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/dto/room.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                creator\n                            \n                            \n                                    \n                                current_song\n                            \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                end_date\n                            \n                            \n                                    \n                                    \n                                has_explicit_content\n                            \n                            \n                                    \n                                    \n                                has_nsfw_content\n                            \n                            \n                                    \n                                    \n                                is_private\n                            \n                            \n                                    \n                                    \n                                is_scheduled\n                            \n                            \n                                    \n                                    \n                                is_temporary\n                            \n                            \n                                    \n                                    \n                                language\n                            \n                            \n                                    \n                                    \n                                participant_count\n                            \n                            \n                                    \n                                    \n                                room_image\n                            \n                            \n                                    \n                                    \n                                room_name\n                            \n                            \n                                    \n                                    \n                                roomID\n                            \n                            \n                                    \n                                    \n                                start_date\n                            \n                            \n                                    \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserProfileDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: UserProfileDto})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        current_song\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SongInfoDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: SongInfoDto})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        end_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        has_explicit_content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        has_nsfw_content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        is_private\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        is_scheduled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        is_temporary\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        participant_count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        room_image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        room_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        roomID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:66\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsBoolean, IsNumber, IsDateString } from \"class-validator\";\nimport { UserProfileDto } from \"../../profile/dto/userprofile.dto\";\nimport { SongInfoDto } from \"./songinfo.dto\";\n\nexport class RoomDto {\n\t@ApiProperty({ type: UserProfileDto })\n\tcreator: UserProfileDto;\n\n\t@ApiProperty()\n\t@IsString()\n\troomID: string;\n\n\t@ApiProperty()\n\t@IsNumber()\n\tparticipant_count: number;\n\n\t@ApiProperty()\n\t@IsString()\n\troom_name: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tdescription: string;\n\n\t@ApiProperty()\n\t@IsBoolean()\n\tis_temporary: boolean;\n\n\t@ApiProperty()\n\t@IsBoolean()\n\tis_private: boolean;\n\n\t@ApiProperty()\n\t@IsBoolean()\n\tis_scheduled: boolean;\n\n\t@ApiProperty()\n\t@IsDateString()\n\tstart_date: Date;\n\n\t@ApiProperty()\n\t@IsDateString()\n\tend_date: Date;\n\n\t@ApiProperty()\n\t@IsString()\n\tlanguage: string;\n\n\t@ApiProperty()\n\t@IsBoolean()\n\thas_explicit_content: boolean;\n\n\t@ApiProperty()\n\t@IsBoolean()\n\thas_nsfw_content: boolean;\n\n\t@ApiProperty()\n\t@IsString()\n\troom_image: string;\n\n\t@ApiProperty({ type: SongInfoDto })\n\tcurrent_song: SongInfoDto;\n\n\t@ApiProperty({ type: [String] })\n\ttags: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoomEntity.html":{"url":"classes/RoomEntity.html","title":"class - RoomEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoomEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/entities/room.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                creator\n                            \n                            \n                                    \n                                current_song\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                end_date\n                            \n                            \n                                    \n                                has_explicit_content\n                            \n                            \n                                    \n                                has_nsfw_content\n                            \n                            \n                                    \n                                is_private\n                            \n                            \n                                    \n                                is_scheduled\n                            \n                            \n                                    \n                                is_temporary\n                            \n                            \n                                    \n                                language\n                            \n                            \n                                    \n                                participant_count\n                            \n                            \n                                    \n                                room_image\n                            \n                            \n                                    \n                                room_name\n                            \n                            \n                                    \n                                roomID\n                            \n                            \n                                    \n                                start_date\n                            \n                            \n                                    \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserProfileDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: UserProfileDto})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/room.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        current_song\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SongInfoDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: SongInfoDto})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/room.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/room.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        end_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Date})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/room.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        has_explicit_content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/room.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        has_nsfw_content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/room.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        is_private\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/room.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        is_scheduled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/room.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        is_temporary\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/room.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/room.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        participant_count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/room.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        room_image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/room.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        room_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/room.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        roomID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/room.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Date})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/room.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/room.entity.ts:52\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { UserProfileDto } from \"../../profile/dto/userprofile.dto\";\nimport { SongInfoDto } from \"../dto/songinfo.dto\";\n\nexport class RoomEntity {\n\t@ApiProperty({ type: UserProfileDto })\n\tcreator: UserProfileDto;\n\n\t@ApiProperty()\n\troomID: string;\n\n\t@ApiProperty()\n\tparticipant_count: number;\n\n\t@ApiProperty()\n\troom_name: string;\n\n\t@ApiProperty()\n\tdescription: string;\n\n\t@ApiProperty()\n\tis_temporary: boolean;\n\n\t@ApiProperty()\n\tis_private: boolean;\n\n\t@ApiProperty()\n\tis_scheduled: boolean;\n\n\t@ApiProperty({ type: Date })\n\tstart_date: Date;\n\n\t@ApiProperty({ type: Date })\n\tend_date: Date;\n\n\t@ApiProperty()\n\tlanguage: string;\n\n\t@ApiProperty()\n\thas_explicit_content: boolean;\n\n\t@ApiProperty()\n\thas_nsfw_content: boolean;\n\n\t@ApiProperty()\n\troom_image: string;\n\n\t@ApiProperty({ type: SongInfoDto })\n\tcurrent_song: SongInfoDto;\n\n\t@ApiProperty({ type: [String] })\n\ttags: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RoomsController.html":{"url":"controllers/RoomsController.html","title":"controller - RoomsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RoomsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/rooms.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                rooms\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                addSongToQueue\n                            \n                            \n                                    \n                                    \n                                    \n                                clearRoomQueue\n                            \n                            \n                                    \n                                    \n                                    \n                                deleteRoom\n                            \n                            \n                                    \n                                    \n                                    \n                                getCurrentSong\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getNewRooms\n                            \n                            \n                                    \n                                    \n                                    \n                                getRoomInfo\n                            \n                            \n                                    \n                                    \n                                    \n                                getRoomQueue\n                            \n                            \n                                    \n                                    \n                                    \n                                getRoomUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                joinRoom\n                            \n                            \n                                    \n                                    \n                                    \n                                leaveRoom\n                            \n                            \n                                    \n                                    \n                                    \n                                updateRoom\n                            \n                            \n                                    \n                                    \n                                    \n                                updateRoomInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        addSongToQueue\n                        \n                    \n                \n            \n            \n                \n                        \n                    addSongToQueue(req: any, roomID: string, songInfoDto: SongInfoDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post(':roomID/songs')@ApiTags('rooms')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.controller.ts:192\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                songInfoDto\n                                            \n                                                            SongInfoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         SongInfoDto[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        clearRoomQueue\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearRoomQueue(req: any, roomID: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete(':roomID/songs')@ApiTags('rooms')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.controller.ts:179\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        deleteRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteRoom(req: any, roomID: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete(':roomID')@ApiTags('rooms')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.controller.ts:114\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getCurrentSong\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCurrentSong(req: any, roomID: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get(':roomID/songs/current')@ApiTags('rooms')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.controller.ts:209\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         SongInfoDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getNewRooms\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNewRooms()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get('new')@ApiOperation({summary: 'Get newly created public rooms'})@ApiParam({name: 'none'})@ApiOkResponse({description: 'The new public rooms as an array of RoomDto.', type: RoomDto, isArray: true})@ApiTags('rooms')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getRoomInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRoomInfo(req: any, roomID: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get(':roomID')@ApiTags('rooms')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.controller.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         RoomDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getRoomQueue\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRoomQueue(req: any, roomID: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get(':roomID/songs')@ApiTags('rooms')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.controller.ts:166\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         SongInfoDto[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getRoomUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRoomUsers(req: any, roomID: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get(':roomID/users')@ApiTags('rooms')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.controller.ts:153\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserProfileDto[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        joinRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    joinRoom(req: any, roomID: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post(':roomID/join')@ApiTags('rooms')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.controller.ts:127\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        leaveRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    leaveRoom(req: any, roomID: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post(':roomID/leave')@ApiTags('rooms')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.controller.ts:140\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        updateRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateRoom(req: any, roomID: string, updateRoomDto: UpdateRoomDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Put(':roomID')@ApiTags('rooms')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.controller.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateRoomDto\n                                            \n                                                            UpdateRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         RoomDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        updateRoomInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateRoomInfo(req: any, roomID: string, updateRoomDto: UpdateRoomDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch(':roomID')@ApiTags('rooms')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.controller.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateRoomDto\n                                            \n                                                            UpdateRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         RoomDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n\tBody,\n\tController,\n\tDelete,\n\tGet,\n\tParam,\n\tPatch,\n\tPost,\n\tPut,\n\tUseGuards,\n\tRequest,\n} from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiOkResponse, ApiOperation, ApiParam, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { SongInfoDto } from \"./dto/songinfo.dto\";\nimport { RoomsService } from \"./rooms.service\";\nimport { CreateRoomDto } from \"./dto/createroomdto\";\nimport { UpdateRoomDto } from \"./dto/updateroomdto\";\nimport { RoomDto } from \"./dto/room.dto\";\nimport { UserProfileDto } from \"../profile/dto/userprofile.dto\";\nimport { JwtAuthGuard } from \"./../../auth/jwt-auth.guard\";\n\n@Controller(\"rooms\")\nexport class RoomsController {\n\tconstructor(private readonly roomsService: RoomsService) {}\n\n\t//NOTE TO DEV:\n\t/*\n    add decorators to each of these paths like:\n    @Post()\n    @ApiOperation({ summary: 'Create user' })\n    @ApiBody({ type: CreateUserDto })\n    @ApiResponse({ status: 201, description: 'The record has been successfully created.', type: User })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    createUser(@Body() createUserDto: CreateUserDto) {\n      //...\n    }\n\n    @Get(':id')\n    @ApiOperation({ summary: 'Retrieve user' })\n    @ApiParam({ name: 'id', required: true })\n    @ApiResponse({ status: 200, description: 'The found record', type: User })\n    getUser(@Param('id') id: string) {\n      //...\n    }\n\n    such that the API documentation is more detailed and informative for the next dev.\n  */\n\n\t@ApiBearerAuth()\n\t@UseGuards(JwtAuthGuard)\n\t@Get(\"new\")\n\t@ApiOperation({ summary: \"Get newly created public rooms\" })\n\t@ApiParam({ name: \"none\" })\n\t@ApiOkResponse({\n\t\tdescription: \"The new public rooms as an array of RoomDto.\",\n\t\ttype: RoomDto,\n\t\tisArray: true,\n\t})\n\t@ApiTags(\"rooms\")\n\tasync getNewRooms(): Promise {\n\t\treturn await this.roomsService.getNewRooms();\n\t}\n\n\t/*\n    GET /rooms/{roomID}\n    returns info about a room\n    no input\n    response: RoomDto\n    */\n\t@UseGuards(JwtAuthGuard)\n\t@Get(\":roomID\")\n\t@ApiTags(\"rooms\")\n\tgetRoomInfo(@Request() req: any, @Param(\"roomID\") roomID: string): RoomDto {\n\t\treturn this.roomsService.getRoomInfo(roomID);\n\t}\n\n\t/*\n    PUT/PATCH /rooms/{roomID}\n    edits room info (only if it belongs to the user)\n    input: partial RoomDto\n    response: updated RoomDto\n    */\n\t@UseGuards(JwtAuthGuard)\n\t@Patch(\":roomID\")\n\t@ApiTags(\"rooms\")\n\tupdateRoomInfo(\n\t\t@Request() req: any,\n\t\t@Param(\"roomID\") roomID: string,\n\t\t@Body() updateRoomDto: UpdateRoomDto,\n\t): RoomDto {\n\t\treturn this.roomsService.updateRoomInfo(roomID, updateRoomDto);\n\t}\n\n\t@UseGuards(JwtAuthGuard)\n\t@Put(\":roomID\")\n\t@ApiTags(\"rooms\")\n\tupdateRoom(\n\t\t@Request() req: any,\n\t\t@Param(\"roomID\") roomID: string,\n\t\t@Body() updateRoomDto: UpdateRoomDto,\n\t): RoomDto {\n\t\treturn this.roomsService.updateRoom(roomID, updateRoomDto);\n\t}\n\n\t/*\n    DELETE /rooms/{roomID}\n    deletes the room (only if it belongs to the user)\n    no input\n    response: (2xx for success, 4xx for error)\n    */\n\t@UseGuards(JwtAuthGuard)\n\t@Delete(\":roomID\")\n\t@ApiTags(\"rooms\")\n\tdeleteRoom(@Request() req: any, @Param(\"roomID\") roomID: string): boolean {\n\t\treturn this.roomsService.deleteRoom(roomID);\n\t}\n\n\t/*\n    POST /rooms/{roomID}/join\n    adds current user as a participant to the room\n    no input\n    response: (2xx for success, 4xx for error)\n    */\n\t@UseGuards(JwtAuthGuard)\n\t@Post(\":roomID/join\")\n\t@ApiTags(\"rooms\")\n\tjoinRoom(@Request() req: any, @Param(\"roomID\") roomID: string): boolean {\n\t\treturn this.roomsService.joinRoom(roomID);\n\t}\n\n\t/*\n    POST /rooms/{roomID}/leave\n    remove current user as a participant to the room\n    no input\n    response: (2xx for success, 4xx for error)\n    */\n\t@UseGuards(JwtAuthGuard)\n\t@Post(\":roomID/leave\")\n\t@ApiTags(\"rooms\")\n\tleaveRoom(@Request() req: any, @Param(\"roomID\") roomID: string): boolean {\n\t\treturn this.roomsService.leaveRoom(roomID);\n\t}\n\n\t/*\n    GET /rooms/{roomID}/users\n    returns people currently (and previously in room)\n    no input\n    response: array of ProfileDto\n    */\n\t@UseGuards(JwtAuthGuard)\n\t@Get(\":roomID/users\")\n\t@ApiTags(\"rooms\")\n\tgetRoomUsers(@Request() req: any, @Param(\"roomID\") roomID: string): UserProfileDto[] {\n\t\treturn this.roomsService.getRoomUsers(roomID);\n\t}\n\n\t/*\n    GET /rooms/{roomID}/songs\n    returns the queue\n    no input\n    response: array of SongInfoDto\n    */\n\t@UseGuards(JwtAuthGuard)\n\t@Get(\":roomID/songs\")\n\t@ApiTags(\"rooms\")\n\tgetRoomQueue(@Request() req: any, @Param(\"roomID\") roomID: string): SongInfoDto[] {\n\t\treturn this.roomsService.getRoomQueue(roomID);\n\t}\n\n\t/*\n    DELETE /rooms/{roomID}/songs\n    clears the queue (except for current song, if playing)\n    no input\n    response: (2xx for success, 4xx for error)\n    */\n\t@UseGuards(JwtAuthGuard)\n\t@Delete(\":roomID/songs\")\n\t@ApiTags(\"rooms\")\n\tclearRoomQueue(@Request() req: any, @Param(\"roomID\") roomID: string): boolean {\n\t\treturn this.roomsService.clearRoomQueue(roomID);\n\t}\n\n\t/*\n    POST /rooms/{roomID}/songs\n    add a song to queue\n    input: SongInfoDto\n    response: array of SongInfoDto (room queue)\n    */\n\t@UseGuards(JwtAuthGuard)\n\t@Post(\":roomID/songs\")\n\t@ApiTags(\"rooms\")\n\taddSongToQueue(\n\t\t@Request() req: any,\n\t\t@Param(\"roomID\") roomID: string,\n\t\t@Body() songInfoDto: SongInfoDto,\n\t): SongInfoDto[] {\n\t\treturn this.roomsService.addSongToQueue(roomID, songInfoDto);\n\t}\n\n\t/*\n    GET /rooms/{roomID}/songs/current\n    returns the current playing song\n    no input\n    response: SongInfoDto\n    */\n\t@UseGuards(JwtAuthGuard)\n\t@Get(\":roomID/songs/current\")\n\t@ApiTags(\"rooms\")\n\tgetCurrentSong(@Request() req: any, @Param(\"roomID\") roomID: string): SongInfoDto {\n\t\treturn this.roomsService.getCurrentSong(roomID);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RoomsModule.html":{"url":"modules/RoomsModule.html","title":"module - RoomsModule","body":"\n                   \n\n\n\n\n    Modules\n    RoomsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RoomsModule\n\n\n\ncluster_RoomsModule_imports\n\n\n\ncluster_RoomsModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nRoomsModule\n\nRoomsModule\n\nRoomsModule -->\n\nPrismaModule->RoomsModule\n\n\n\n\n\nDbUtilsService\n\nDbUtilsService\n\nRoomsModule -->\n\nDbUtilsService->RoomsModule\n\n\n\n\n\nDtoGenService\n\nDtoGenService\n\nRoomsModule -->\n\nDtoGenService->RoomsModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nRoomsModule -->\n\nPrismaService->RoomsModule\n\n\n\n\n\nRoomsService\n\nRoomsService\n\nRoomsModule -->\n\nRoomsService->RoomsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/rooms/rooms.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DbUtilsService\n                        \n                        \n                            DtoGenService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            RoomsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RoomsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { RoomsController } from \"./rooms.controller\";\nimport { RoomsService } from \"./rooms.service\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\nimport { PrismaModule } from \"prisma/prisma.module\";\nimport { DtoGenService } from \"../dto-gen/dto-gen.service\";\nimport { DbUtilsService } from \"../db-utils/db-utils.service\";\n\n@Module({\n\tcontrollers: [RoomsController],\n\tproviders: [RoomsService, PrismaService, DtoGenService, DbUtilsService],\n\timports: [PrismaModule],\n})\nexport class RoomsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RoomsService.html":{"url":"injectables/RoomsService.html","title":"injectable - RoomsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RoomsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/rooms.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addSongToQueue\n                            \n                            \n                                clearRoomQueue\n                            \n                            \n                                deleteRoom\n                            \n                            \n                                getCurrentSong\n                            \n                            \n                                    Async\n                                getNewRooms\n                            \n                            \n                                getRoomInfo\n                            \n                            \n                                getRoomQueue\n                            \n                            \n                                getRoomUsers\n                            \n                            \n                                joinRoom\n                            \n                            \n                                leaveRoom\n                            \n                            \n                                updateRoom\n                            \n                            \n                                updateRoomInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, dtogen: DtoGenService, dbUtils: DbUtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/rooms/rooms.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dtogen\n                                                  \n                                                        \n                                                                        DtoGenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dbUtils\n                                                  \n                                                        \n                                                                        DbUtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addSongToQueue\n                        \n                    \n                \n            \n            \n                \naddSongToQueue(roomID: string, songInfoDto: SongInfoDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.service.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                songInfoDto\n                                            \n                                                            SongInfoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         SongInfoDto[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearRoomQueue\n                        \n                    \n                \n            \n            \n                \nclearRoomQueue(roomID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.service.ts:107\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteRoom\n                        \n                    \n                \n            \n            \n                \ndeleteRoom(roomID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.service.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCurrentSong\n                        \n                    \n                \n            \n            \n                \ngetCurrentSong(roomID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.service.ts:117\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         SongInfoDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getNewRooms\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNewRooms(limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    -1\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRoomInfo\n                        \n                    \n                \n            \n            \n                \ngetRoomInfo(roomID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         RoomDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRoomQueue\n                        \n                    \n                \n            \n            \n                \ngetRoomQueue(roomID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.service.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         SongInfoDto[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRoomUsers\n                        \n                    \n                \n            \n            \n                \ngetRoomUsers(roomID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.service.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserProfileDto[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        joinRoom\n                        \n                    \n                \n            \n            \n                \njoinRoom(roomID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        leaveRoom\n                        \n                    \n                \n            \n            \n                \nleaveRoom(roomID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.service.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateRoom\n                        \n                    \n                \n            \n            \n                \nupdateRoom(roomID: string, updateRoomDto: UpdateRoomDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.service.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateRoomDto\n                                            \n                                                            UpdateRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         RoomDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateRoomInfo\n                        \n                    \n                \n            \n            \n                \nupdateRoomInfo(roomID: string, updateRoomDto: UpdateRoomDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateRoomDto\n                                            \n                                                            UpdateRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         RoomDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { RoomDto } from \"./dto/room.dto\";\nimport { UpdateRoomDto } from \"./dto/updateroomdto\";\nimport { SongInfoDto } from \"./dto/songinfo.dto\";\nimport { UserProfileDto } from \"../profile/dto/userprofile.dto\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\nimport * as PrismaTypes from \"@prisma/client\";\nimport { Prisma } from \"@prisma/client\";\nimport { DtoGenService } from \"../dto-gen/dto-gen.service\";\nimport { DbUtilsService } from \"../db-utils/db-utils.service\";\n\n@Injectable()\nexport class RoomsService {\n\tconstructor(\n\t\tprivate readonly prisma: PrismaService,\n\t\tprivate readonly dtogen: DtoGenService,\n\t\tprivate readonly dbUtils: DbUtilsService,\n\t) {}\n\n\tasync getNewRooms(limit: number = -1): Promise {\n\t\tconst r: PrismaTypes.room[] | null = await this.prisma.room.findMany({\n\t\t\torderBy: {\n\t\t\t\tdate_created: \"desc\",\n\t\t\t},\n\t\t});\n\t\tif (!r || r === null) {\n\t\t\treturn [];\n\t\t}\n\t\tconst allRooms: PrismaTypes.room[] = r;\n\n\t\tconst pr: PrismaTypes.public_room[] | null =\n\t\t\tawait this.prisma.public_room.findMany();\n\t\tif (!pr || pr === null) {\n\t\t\treturn [];\n\t\t}\n\t\tconst publicRooms: PrismaTypes.public_room[] = pr;\n\n\t\tconst rooms: PrismaTypes.room[] = [];\n\t\tfor (const room of allRooms) {\n\t\t\tif (publicRooms.find((pr) => pr.room_id === room.room_id)) {\n\t\t\t\trooms.push(room);\n\t\t\t}\n\t\t}\n\n\t\tif (limit > 0) {\n\t\t\tpublicRooms.splice(limit);\n\t\t}\n\n\t\tconst result: RoomDto[] = [];\n\t\tfor (const room of rooms) {\n\t\t\tconst roomDto = await this.dtogen.generateRoomDtoFromRoom(room);\n\t\t\tif (roomDto) {\n\t\t\t\tresult.push(roomDto);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tgetRoomInfo(roomID: string): RoomDto {\n\t\t// TODO: Implement logic to get room info\n\t\t// an an example to generate a RoomDto\n\t\t/*\n\t\tconst roomID = \"xxxx\"\n\t\tconst room = await this.dtogen.generateRoomDto(roomID);\n\t\tif (room) {\n\t\t\treturn room;\n\t\t}\n\t\t*/\n\t\treturn new RoomDto();\n\t}\n\n\tupdateRoomInfo(roomID: string, updateRoomDto: UpdateRoomDto): RoomDto {\n\t\t// TODO: Implement logic to update room info\n\t\treturn new RoomDto();\n\t}\n\n\tupdateRoom(roomID: string, updateRoomDto: UpdateRoomDto): RoomDto {\n\t\t// TODO: Implement logic to update room\n\t\treturn new RoomDto();\n\t}\n\n\tdeleteRoom(roomID: string): boolean {\n\t\t// TODO: Implement logic to delete room\n\t\treturn false;\n\t}\n\n\tjoinRoom(roomID: string): boolean {\n\t\t// TODO: Implement logic to join room\n\t\treturn false;\n\t}\n\n\tleaveRoom(roomID: string): boolean {\n\t\t// TODO: Implement logic to leave room\n\t\treturn false;\n\t}\n\n\tgetRoomUsers(roomID: string): UserProfileDto[] {\n\t\t// TODO: Implement logic to get room users\n\t\treturn [];\n\t}\n\n\tgetRoomQueue(roomID: string): SongInfoDto[] {\n\t\t// TODO: Implement logic to get room queue\n\t\treturn [];\n\t}\n\n\tclearRoomQueue(roomID: string): boolean {\n\t\t// TODO: Implement logic to clear room queue\n\t\treturn false;\n\t}\n\n\taddSongToQueue(roomID: string, songInfoDto: SongInfoDto): SongInfoDto[] {\n\t\t// TODO: Implement logic to add song to queue\n\t\treturn [];\n\t}\n\n\tgetCurrentSong(roomID: string): SongInfoDto {\n\t\t// TODO: Implement logic to get current playing song\n\t\treturn new SongInfoDto();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SongInfoDto.html":{"url":"classes/SongInfoDto.html","title":"class - SongInfoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SongInfoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/dto/songinfo.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                artists\n                            \n                            \n                                    \n                                    \n                                cover\n                            \n                            \n                                    \n                                    \n                                start_time\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        artists\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/songinfo.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/songinfo.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        start_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/songinfo.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/songinfo.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsArray, IsDate } from \"class-validator\";\n\nexport class SongInfoDto {\n\t@ApiProperty()\n\t@IsString()\n\ttitle: string;\n\n\t@ApiProperty({ type: [String] })\n\t@IsArray()\n\tartists: string[];\n\n\t@ApiProperty()\n\t@IsString()\n\tcover: string;\n\n\t@ApiProperty()\n\t@IsDate()\n\tstart_time: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SongInfoEntity.html":{"url":"classes/SongInfoEntity.html","title":"class - SongInfoEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SongInfoEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/entities/songinfo.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                artists\n                            \n                            \n                                    \n                                cover\n                            \n                            \n                                    \n                                start_time\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        artists\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/songinfo.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/songinfo.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        start_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Date})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/songinfo.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/songinfo.entity.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\n\nexport class SongInfoEntity {\n\t@ApiProperty()\n\ttitle: string;\n\n\t@ApiProperty({ type: [String] })\n\tartists: string[];\n\n\t@ApiProperty()\n\tcover: string;\n\n\t@ApiProperty({ type: Date })\n\tstart_time: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRoomDto.html":{"url":"classes/UpdateRoomDto.html","title":"class - UpdateRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/dto/updateroomdto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(RoomDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/swagger\";\nimport { RoomDto } from \"./room.dto\";\n\nexport class UpdateRoomDto extends PartialType(RoomDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/swagger\";\nimport { CreateUserDto } from \"./create-user.dto\";\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserProfileDto.html":{"url":"classes/UpdateUserProfileDto.html","title":"class - UpdateUserProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/dto/updateuserprofile.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(UserProfileDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/swagger\";\nimport { UserProfileDto } from \"./userprofile.dto\";\n\nexport class UpdateUserProfileDto extends PartialType(UserProfileDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsInt, ValidateNested } from \"class-validator\";\n\nexport class UserDto {\n    //TBA\n    /*\n\t@ApiProperty()\n    @IsString()\n    username: string;\n\n    @ApiProperty()\n    @IsString()\n    email: string;\n\n    */\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/entities/userprofile.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                bio\n                            \n                            \n                                    \n                                current_song\n                            \n                            \n                                    \n                                fav_genres\n                            \n                            \n                                    \n                                fav_rooms\n                            \n                            \n                                    \n                                fav_songs\n                            \n                            \n                                    \n                                followers\n                            \n                            \n                                    \n                                following\n                            \n                            \n                                    \n                                links\n                            \n                            \n                                    \n                                profile_name\n                            \n                            \n                                    \n                                profile_picture_url\n                            \n                            \n                                    \n                                recent_rooms\n                            \n                            \n                                    \n                                userID\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/entities/userprofile.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        current_song\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SongInfoDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/entities/userprofile.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fav_genres\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/entities/userprofile.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fav_rooms\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/entities/userprofile.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fav_songs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/entities/userprofile.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        followers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/entities/userprofile.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        following\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/entities/userprofile.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        links\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/entities/userprofile.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        profile_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/entities/userprofile.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        profile_picture_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/entities/userprofile.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        recent_rooms\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/entities/userprofile.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/entities/userprofile.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/entities/userprofile.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { UserProfileDto } from \"../dto/userprofile.dto\";\nimport { RoomDto } from \"../../rooms/dto/room.dto\";\nimport { SongInfoDto } from \"../../rooms/dto/songinfo.dto\";\n\nexport class UserEntity {\n\t@ApiProperty()\n\tprofile_name: string;\n\n\t@ApiProperty()\n\tuserID: string;\n\n\t@ApiProperty()\n\tusername: string;\n\n\t@ApiProperty()\n\tprofile_picture_url: string;\n\n\t@ApiProperty()\n\tfollowers: {\n\t\tcount: number;\n\t\tdata: UserProfileDto[];\n\t};\n\n\t@ApiProperty()\n\tfollowing: {\n\t\tcount: number;\n\t\tdata: UserProfileDto[];\n\t};\n\n\t@ApiProperty()\n\tlinks: {\n\t\tcount: number;\n\t\tdata: string[];\n\t};\n\n\t@ApiProperty()\n\tbio: string;\n\n\t@ApiProperty()\n\tcurrent_song: SongInfoDto;\n\n\t@ApiProperty()\n\tfav_genres: {\n\t\tcount: number;\n\t\tdata: string[];\n\t};\n\n\t@ApiProperty()\n\tfav_songs: {\n\t\tcount: number;\n\t\tdata: SongInfoDto[];\n\t};\n\n\t@ApiProperty()\n\tfav_rooms: {\n\t\tcount: number;\n\t\tdata: RoomDto[];\n\t};\n\n\t@ApiProperty()\n\trecent_rooms: {\n\t\tcount: number;\n\t\tdata: RoomDto[];\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserProfileDto.html":{"url":"classes/UserProfileDto.html","title":"class - UserProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/dto/userprofile.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                bio\n                            \n                            \n                                    \n                                    \n                                current_song\n                            \n                            \n                                    \n                                    \n                                fav_genres\n                            \n                            \n                                    \n                                    \n                                fav_rooms\n                            \n                            \n                                    \n                                    \n                                fav_songs\n                            \n                            \n                                    \n                                    \n                                followers\n                            \n                            \n                                    \n                                    \n                                following\n                            \n                            \n                                    \n                                    \n                                links\n                            \n                            \n                                    \n                                    \n                                profile_name\n                            \n                            \n                                    \n                                    \n                                profile_picture_url\n                            \n                            \n                                    \n                                    \n                                recent_rooms\n                            \n                            \n                                    \n                                    \n                                userID\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/dto/userprofile.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        current_song\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SongInfoDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/dto/userprofile.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        fav_genres\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/dto/userprofile.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        fav_rooms\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/dto/userprofile.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        fav_songs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/dto/userprofile.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        followers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/dto/userprofile.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        following\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/dto/userprofile.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        links\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/dto/userprofile.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        profile_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/dto/userprofile.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        profile_picture_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/dto/userprofile.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        recent_rooms\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/dto/userprofile.dto.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/dto/userprofile.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/dto/userprofile.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsInt, ValidateNested } from \"class-validator\";\nimport { RoomDto } from \"src/modules/rooms/dto/room.dto\";\nimport { SongInfoDto } from \"src/modules/rooms/dto/songinfo.dto\";\n\nexport class UserProfileDto {\n\t@ApiProperty()\n\t@IsString()\n\tprofile_name: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tuserID: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tusername: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tprofile_picture_url: string;\n\n\t@ApiProperty()\n\t@IsInt()\n\tfollowers: {\n\t\tcount: number;\n\t\tdata: UserProfileDto[];\n\t};\n\n\t@ApiProperty()\n\t@IsInt()\n\tfollowing: {\n\t\tcount: number;\n\t\tdata: UserProfileDto[];\n\t};\n\n\t@ApiProperty()\n\t@IsInt()\n\tlinks: {\n\t\tcount: number;\n\t\tdata: string[];\n\t};\n\n\t@ApiProperty()\n\t@IsString()\n\tbio: string;\n\n\t@ApiProperty()\n\t@ValidateNested()\n\tcurrent_song: SongInfoDto;\n\n\t@ApiProperty()\n\t@IsInt()\n\tfav_genres: {\n\t\tcount: number;\n\t\tdata: string[];\n\t};\n\n\t@ApiProperty()\n\t@IsInt()\n\tfav_songs: {\n\t\tcount: number;\n\t\tdata: SongInfoDto[];\n\t};\n\n\t@ApiProperty()\n\t@IsInt()\n\tfav_rooms: {\n\t\tcount: number;\n\t\tdata: RoomDto[];\n\t};\n\n\t@ApiProperty()\n\t@IsInt()\n\trecent_rooms: {\n\t\tcount: number;\n\t\tdata: RoomDto[];\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                createRoom\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getFollowers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getFollowing\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getRecentRooms\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getRecommendedRooms\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getUserFriends\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                getUserInfo\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getUserRooms\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                updateProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                updateUserProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        createRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRoom(req: any, createRoomDto: CreateRoomDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Post('rooms')@ApiTags('users')@ApiOperation({summary: 'Create a new room'})@ApiParam({name: 'none'})@ApiOkResponse({description: 'The newly created room as a RoomDto.', type: RoomDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:154\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createRoomDto\n                                            \n                                                            CreateRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getFollowers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFollowers(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get('followers')@ApiTags('users')@ApiOperation({summary: 'Get a user's followers'})@ApiParam({name: 'none'})@ApiOkResponse({description: 'The user's followers as an array of UserProfileDto.', type: UserProfileDto, isArray: true})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:252\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getFollowing\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFollowing(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get('following')@ApiTags('users')@ApiOperation({summary: 'Get a user's following'})@ApiParam({name: 'none'})@ApiOkResponse({description: 'The user's following as an array of UserProfileDto.', type: UserProfileDto, isArray: true})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:271\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getRecentRooms\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRecentRooms(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get('rooms/recent')@ApiTags('users')@ApiOperation({summary: 'Get a user's recent rooms'})@ApiParam({name: 'none'})@ApiOkResponse({description: 'The user's recent rooms as an array of RoomDto.', type: RoomDto, isArray: true})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:195\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getRecommendedRooms\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRecommendedRooms(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get('rooms/foryou')@ApiTags('users')@ApiOperation({summary: 'Get a user's recommended rooms'})@ApiParam({name: 'none'})@ApiOkResponse({description: 'The user's recommended rooms as an array of RoomDto.', type: RoomDto, isArray: true})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:214\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getUserFriends\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserFriends(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get('friends')@ApiTags('users')@ApiOperation({summary: 'Get a user's friends'})@ApiParam({name: 'none'})@ApiOkResponse({description: 'The user's friends as an array of UserProfileDto.', type: UserProfileDto, isArray: true})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:233\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        getUserInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserInfo(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get()@ApiTags('users')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getUserRooms\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRooms(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get('rooms')@ApiTags('users')@ApiOperation({summary: 'Get a user's rooms'})@ApiParam({name: 'none'})@ApiOkResponse({description: 'The user's rooms as an array of RoomDto.', type: RoomDto, isArray: true})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:136\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(req: any, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Put()@ApiTags('users')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:118\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        updateUserProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserProfile(req: any, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Patch()@ApiTags('users')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:107\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n\tController,\n\tGet,\n\tPost,\n\tBody,\n\tPatch,\n\tPut,\n\tUseGuards,\n\tRequest,\n\tHttpException,\n} from \"@nestjs/common\";\nimport { UsersService } from \"./users.service\";\nimport { UpdateUserDto } from \"./dto/update-user.dto\";\nimport {\n\tApiBearerAuth,\n\tApiOkResponse,\n\tApiOperation,\n\tApiParam,\n\tApiTags,\n} from \"@nestjs/swagger\";\nimport { UserDto } from \"./dto/user.dto\";\nimport { RoomDto } from \"../rooms/dto/room.dto\";\nimport { CreateRoomDto } from \"../rooms/dto/createroomdto\";\nimport { UserProfileDto } from \"../profile/dto/userprofile.dto\";\nimport { JwtAuthGuard } from \"./../../auth/jwt-auth.guard\";\nimport { DbUtilsService } from \"../db-utils/db-utils.service\";\nimport { DtoGenService } from \"../dto-gen/dto-gen.service\";\n\n@ApiTags(\"users\")\n@Controller(\"users\")\nexport class UsersController {\n\tconstructor(\n\t\tprivate readonly usersService: UsersService,\n\t\tprivate readonly dbUtils: DbUtilsService,\n\t\tprivate readonly dtogen: DtoGenService,\n\t) {}\n\n\t//basic CRUD operations on the users table\n\t/*\n\t@Post()\n\tcreate(@Body() createUserDto: CreateUserDto) {\n\t\treturn this.usersService.create(createUserDto);\n\t}\n\n\t@Get()\n\tfindAll() {\n\t\treturn this.usersService.findAll();\n\t}\n\n\t@Get(\":id\")\n\tfindOne(@Param(\"id\") id: string) {\n\t\treturn this.usersService.findOne(id);\n\t}\n\n\t@Patch(\":id\")\n\tupdate(@Param(\"id\") id: string, @Body() updateUserDto: UpdateUserDto) {\n\t\tconst result = this.usersService.update(id, updateUserDto);\n\t\tconsole.log(result);\n\t\treturn result;\n\t}\n\n\t@Delete(\":id\")\n\tremove(@Param(\"id\") id: string) {\n\t\treturn this.usersService.remove(id);\n\t}\n  */\n\n\t/*\n    GET /users\n    gets user info\n    no input\n    response: return UserDto\n  */\n\t@ApiBearerAuth()\n\t@UseGuards(JwtAuthGuard)\n\t@Get()\n\t@ApiTags(\"users\")\n\tgetUserInfo(@Request() req: any): UserDto {\n\t\t//try to get sub, username & email back from JWT token\n\t\tconsole.log(\"1\");\n\t\tconsole.log(\"2\", req);\n\t\tconsole.log(\"3\", req.user);\n\t\t//req.user\n\t\t/*\n\t\t{\n\t\t\tuserId: '311ce2e8-8041-70bd-0ab5-be97283ee182',\n\t\t\tusername: 'bigdaddy'\n\t\t}\n\t\t*/\n\t\tconsole.log(\"4\", req.user.sub);\n\t\tconsole.log(\"5\", req.user.username);\n\t\tconsole.log(\"6\", req.user.email);\n\n\t\treturn this.usersService.getUserInfo();\n\t}\n\n\t/*\n    PUT/PATCH /users\n    user profile info\n    input: UserDto\n    response: return updated UserDto\n  */\n\t@ApiBearerAuth()\n\t@UseGuards(JwtAuthGuard)\n\t@Patch()\n\t@ApiTags(\"users\")\n\tupdateUserProfile(\n\t\t@Request() req: any,\n\t\t@Body() updateUserDto: UpdateUserDto,\n\t): UserDto {\n\t\treturn this.usersService.updateUserProfile(updateUserDto);\n\t}\n\n\t@ApiBearerAuth()\n\t@UseGuards(JwtAuthGuard)\n\t@Put()\n\t@ApiTags(\"users\")\n\tupdateProfile(\n\t\t@Request() req: any,\n\t\t@Body() updateUserDto: UpdateUserDto,\n\t): UserDto {\n\t\treturn this.usersService.updateProfile(updateUserDto);\n\t}\n\n\t@ApiBearerAuth()\n\t@UseGuards(JwtAuthGuard)\n\t@Get(\"rooms\")\n\t@ApiTags(\"users\")\n\t@ApiOperation({ summary: \"Get a user's rooms\" })\n\t@ApiParam({ name: \"none\" })\n\t@ApiOkResponse({\n\t\tdescription: \"The user's rooms as an array of RoomDto.\",\n\t\ttype: RoomDto,\n\t\tisArray: true,\n\t})\n\tasync getUserRooms(@Request() req: any): Promise {\n\t\tconst userID = req.user.sub;\n\t\tif (!userID || userID === \"\" || typeof userID !== \"string\") {\n\t\t\tthrow new Error(\"Invalid user ID in JWT token. Please log in again.\");\n\t\t}\n\t\treturn await this.usersService.getUserRooms(userID);\n\t}\n\n\t@ApiBearerAuth()\n\t@UseGuards(JwtAuthGuard)\n\t@Post(\"rooms\")\n\t@ApiTags(\"users\")\n\t@ApiOperation({ summary: \"Create a new room\" })\n\t@ApiParam({ name: \"none\" })\n\t@ApiOkResponse({\n\t\tdescription: \"The newly created room as a RoomDto.\",\n\t\ttype: RoomDto,\n\t})\n\tasync createRoom(\n\t\t@Request() req: any,\n\t\t@Body() createRoomDto: CreateRoomDto,\n\t): Promise {\n\t\tconst userID = req.user.sub;\n\t\tif (!userID || userID === \"\" || typeof userID !== \"string\") {\n\t\t\tthrow new Error(\"Invalid user ID in JWT token. Please log in again.\");\n\t\t}\n\n\t\tif (!createRoomDto.creator) {\n\t\t\tconst creator = await this.dtogen.generateUserProfileDto(userID, false);\n\t\t\tif (creator) {\n\t\t\t\tcreateRoomDto.creator = creator;\n\t\t\t} else {\n\t\t\t\tthrow new HttpException(\n\t\t\t\t\t\"Failed to generate creator profile from user ID.\",\n\t\t\t\t\t500,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (userID !== createRoomDto.creator.userID) {\n\t\t\tthrow new HttpException(\n\t\t\t\t\"User ID in JWT token does not match creator ID in request body.\",\n\t\t\t\t400,\n\t\t\t);\n\t\t}\n\t\treturn await this.usersService.createRoom(createRoomDto);\n\t}\n\n\t@ApiBearerAuth()\n\t@UseGuards(JwtAuthGuard)\n\t@Get(\"rooms/recent\")\n\t@ApiTags(\"users\")\n\t@ApiOperation({ summary: \"Get a user's recent rooms\" })\n\t@ApiParam({ name: \"none\" })\n\t@ApiOkResponse({\n\t\tdescription: \"The user's recent rooms as an array of RoomDto.\",\n\t\ttype: RoomDto,\n\t\tisArray: true,\n\t})\n\tasync getRecentRooms(@Request() req: any): Promise {\n\t\tconst userID = req.user.sub;\n\t\tif (!userID || userID === \"\" || typeof userID !== \"string\") {\n\t\t\tthrow new Error(\"Invalid user ID in JWT token. Please log in again.\");\n\t\t}\n\t\treturn await this.usersService.getRecentRooms(userID);\n\t}\n\n\t@ApiBearerAuth()\n\t@UseGuards(JwtAuthGuard)\n\t@Get(\"rooms/foryou\")\n\t@ApiTags(\"users\")\n\t@ApiOperation({ summary: \"Get a user's recommended rooms\" })\n\t@ApiParam({ name: \"none\" })\n\t@ApiOkResponse({\n\t\tdescription: \"The user's recommended rooms as an array of RoomDto.\",\n\t\ttype: RoomDto,\n\t\tisArray: true,\n\t})\n\tasync getRecommendedRooms(@Request() req: any): Promise {\n\t\tconst userID = req.user.sub;\n\t\tif (!userID || userID === \"\" || typeof userID !== \"string\") {\n\t\t\tthrow new Error(\"Invalid user ID in JWT token. Please log in again.\");\n\t\t}\n\t\treturn await this.usersService.getRecommendedRooms(userID);\n\t}\n\n\t@ApiBearerAuth()\n\t@UseGuards(JwtAuthGuard)\n\t@Get(\"friends\")\n\t@ApiTags(\"users\")\n\t@ApiOperation({ summary: \"Get a user's friends\" })\n\t@ApiParam({ name: \"none\" })\n\t@ApiOkResponse({\n\t\tdescription: \"The user's friends as an array of UserProfileDto.\",\n\t\ttype: UserProfileDto,\n\t\tisArray: true,\n\t})\n\tasync getUserFriends(@Request() req: any): Promise {\n\t\tconst userID = req.user.sub;\n\t\tif (!userID || userID === \"\" || typeof userID !== \"string\") {\n\t\t\tthrow new Error(\"Invalid user ID in JWT token. Please log in again.\");\n\t\t}\n\t\treturn await this.usersService.getUserFriends(userID);\n\t}\n\n\t@ApiBearerAuth()\n\t@UseGuards(JwtAuthGuard)\n\t@Get(\"followers\")\n\t@ApiTags(\"users\")\n\t@ApiOperation({ summary: \"Get a user's followers\" })\n\t@ApiParam({ name: \"none\" })\n\t@ApiOkResponse({\n\t\tdescription: \"The user's followers as an array of UserProfileDto.\",\n\t\ttype: UserProfileDto,\n\t\tisArray: true,\n\t})\n\tasync getFollowers(@Request() req: any): Promise {\n\t\tconst userID = req.user.sub;\n\t\tif (!userID || userID === \"\" || typeof userID !== \"string\") {\n\t\t\tthrow new Error(\"Invalid user ID in JWT token. Please log in again.\");\n\t\t}\n\t\treturn await this.usersService.getFollowers(userID);\n\t}\n\n\t@ApiBearerAuth()\n\t@UseGuards(JwtAuthGuard)\n\t@Get(\"following\")\n\t@ApiTags(\"users\")\n\t@ApiOperation({ summary: \"Get a user's following\" })\n\t@ApiParam({ name: \"none\" })\n\t@ApiOkResponse({\n\t\tdescription: \"The user's following as an array of UserProfileDto.\",\n\t\ttype: UserProfileDto,\n\t\tisArray: true,\n\t})\n\tasync getFollowing(@Request() req: any): Promise {\n\t\tconst userID = req.user.sub;\n\t\tif (!userID || userID === \"\" || typeof userID !== \"string\") {\n\t\t\tthrow new Error(\"Invalid user ID in JWT token. Please log in again.\");\n\t\t}\n\t\treturn await this.usersService.getFollowing(userID);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\n\n\nDbUtilsService\n\nDbUtilsService\n\nUsersModule -->\n\nDbUtilsService->UsersModule\n\n\n\n\n\nDtoGenService\n\nDtoGenService\n\nUsersModule -->\n\nDtoGenService->UsersModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nUsersModule -->\n\nPrismaService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DbUtilsService\n                        \n                        \n                            DtoGenService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { UsersController } from \"./users.controller\";\nimport { UsersService } from \"./users.service\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\nimport { PrismaModule } from \"prisma/prisma.module\";\nimport { DtoGenService } from \"../dto-gen/dto-gen.service\";\nimport { DbUtilsService } from \"../db-utils/db-utils.service\";\n\n@Module({\n\timports: [PrismaModule],\n\tcontrollers: [UsersController],\n\tproviders: [UsersService, PrismaService, DtoGenService, DbUtilsService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                createRoom\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                getFollowers\n                            \n                            \n                                    Async\n                                getFollowing\n                            \n                            \n                                getRecentRooms\n                            \n                            \n                                    Async\n                                getRecommendedRooms\n                            \n                            \n                                    Async\n                                getUserFriends\n                            \n                            \n                                getUserInfo\n                            \n                            \n                                    Async\n                                getUserRooms\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                            \n                                updateProfile\n                            \n                            \n                                updateUserProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, dbUtils: DbUtilsService, dtogen: DtoGenService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/users.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dbUtils\n                                                  \n                                                        \n                                                                        DbUtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dtogen\n                                                  \n                                                        \n                                                                        DtoGenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRoom(createRoomDto: CreateRoomDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createRoomDto\n                                            \n                                                            CreateRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(userID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getFollowers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFollowers(userID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:233\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getFollowing\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFollowing(userID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:249\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRecentRooms\n                        \n                    \n                \n            \n            \n                \ngetRecentRooms(userID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:189\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         RoomDto[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRecommendedRooms\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRecommendedRooms(userID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:194\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserFriends\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserFriends(userID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:213\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserInfo\n                        \n                    \n                \n            \n            \n                \ngetUserInfo()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         UserDto\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserRooms\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRooms(userID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(userID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(userID: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateProfile\n                        \n                    \n                \n            \n            \n                \nupdateProfile(updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateUserProfile\n                        \n                    \n                \n            \n            \n                \nupdateUserProfile(updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\nimport * as PrismaTypes from \"@prisma/client\";\nimport { Prisma } from \"@prisma/client\";\nimport { CreateUserDto } from \"./dto/create-user.dto\";\nimport { UpdateUserDto } from \"./dto/update-user.dto\";\nimport { UserDto } from \"./dto/user.dto\";\nimport { CreateRoomDto } from \"../rooms/dto/createroomdto\";\nimport { UserProfileDto } from \"../profile/dto/userprofile.dto\";\nimport { RoomDto } from \"../rooms/dto/room.dto\";\nimport { DbUtilsService } from \"../db-utils/db-utils.service\";\nimport { DtoGenService } from \"../dto-gen/dto-gen.service\";\n\n@Injectable()\nexport class UsersService {\n\tconstructor(\n\t\tprivate readonly prisma: PrismaService,\n\t\tprivate readonly dbUtils: DbUtilsService,\n\t\tprivate readonly dtogen: DtoGenService,\n\t) {}\n\n\tcreate(createUserDto: CreateUserDto) {\n\t\tconst user: Prisma.usersCreateInput = {\n\t\t\tuser_id: createUserDto.userID,\n\t\t\tusername: createUserDto.username,\n\t\t\tbio: createUserDto.bio,\n\t\t\tprofile_picture: createUserDto.profile_picture,\n\t\t\tactivity: createUserDto.activity,\n\t\t\tpreferences: createUserDto.preferences,\n\t\t};\n\t\treturn this.prisma.users.create({ data: user });\n\t}\n\n\tfindAll() {\n\t\treturn this.prisma.users.findMany();\n\t}\n\n\tfindOne(userID: string) {\n\t\treturn this.prisma.users.findUnique({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\t}\n\n\tupdate(userID: string, updateUserDto: UpdateUserDto) {\n\t\tconsole.log(updateUserDto);\n\t\tconst user: Prisma.usersUpdateInput = {};\n\t\tif (updateUserDto.username) user.username = updateUserDto.username;\n\t\tif (updateUserDto.bio) user.bio = updateUserDto.bio;\n\t\tif (updateUserDto.profile_picture)\n\t\t\tuser.profile_picture = updateUserDto.profile_picture;\n\t\tif (updateUserDto.activity) user.activity = updateUserDto.activity;\n\t\tif (updateUserDto.preferences) user.preferences = updateUserDto.preferences;\n\t\tconsole.log(user);\n\t\treturn this.prisma.users.update({\n\t\t\twhere: { user_id: userID },\n\t\t\tdata: user,\n\t\t});\n\t}\n\n\tremove(userID: string) {\n\t\treturn this.prisma.users.delete({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\t}\n\n\tgetUserInfo(): UserDto {\n\t\t// implementation goes here\n\t\treturn new UserDto();\n\t}\n\n\tupdateUserProfile(updateUserDto: UpdateUserDto): UserDto {\n\t\t// implementation goes here\n\t\treturn new UserDto();\n\t}\n\n\tupdateProfile(updateUserDto: UpdateUserDto): UserDto {\n\t\t// implementation goes here\n\t\treturn new UserDto();\n\t}\n\n\tasync getUserRooms(userID: string): Promise {\n\t\t// implementation goes here\n\t\tconst user = await this.prisma.users.findUnique({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\n\t\tif (!user) {\n\t\t\tthrow new Error(\"User does not exist\");\n\t\t}\n\n\t\tconst rooms = await this.prisma.room.findMany({\n\t\t\twhere: { room_creator: userID },\n\t\t});\n\n\t\tif (!rooms) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst ids: string[] = rooms.map((room) => room.room_id);\n\t\tconst r = await this.dtogen.generateMultipleRoomDto(ids);\n\t\tif (!r || r === null) {\n\t\t\tthrow new Error(\n\t\t\t\t\"An unknown error occurred while generating RoomDto for user rooms (getUserRooms). Received null.\",\n\t\t\t);\n\t\t}\n\t\treturn r;\n\t}\n\n\tasync createRoom(createRoomDto: CreateRoomDto): Promise {\n\t\tif (!createRoomDto.creator) {\n\t\t\tthrow new Error(\"No creator provided for the room\");\n\t\t}\n\n\t\tconst newRoom: Prisma.roomCreateInput = {\n\t\t\tname: createRoomDto.room_name || \"Untitled Room\",\n\n\t\t\t//foreign key relation for 'room_creator'\n\t\t\tusers: {\n\t\t\t\tconnect: {\n\t\t\t\t\tuser_id: createRoomDto.creator.userID,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tif (createRoomDto.roomID) newRoom.room_id = createRoomDto.roomID;\n\t\tif (createRoomDto.description)\n\t\t\tnewRoom.description = createRoomDto.description;\n\t\tif (createRoomDto.is_temporary)\n\t\t\tnewRoom.is_temporary = createRoomDto.is_temporary;\n\n\t\t/*\n\t\tif (createRoomDto.language) newRoom.language = createRoomDto.language;\n\t\t*/\n\t\tif (createRoomDto.has_explicit_content)\n\t\t\tnewRoom.explicit = createRoomDto.has_explicit_content;\n\t\tif (createRoomDto.has_nsfw_content)\n\t\t\tnewRoom.nsfw = createRoomDto.has_nsfw_content;\n\t\tif (createRoomDto.room_image)\n\t\t\tnewRoom.playlist_photo = createRoomDto.room_image;\n\n\t\t/*\n\t\tif (createRoomDto.current_song)\n\t\t\tnewRoom.current_song = createRoomDto.current_song;\n\t\t*/\n\n\t\t//for is_private, we will need to add the roomID to the private_room tbale\n\t\tif (createRoomDto.is_private) {\n\t\t\tnewRoom.private_room = {\n\t\t\t\tconnect: {\n\t\t\t\t\troom_id: createRoomDto.roomID,\n\t\t\t\t},\n\t\t\t};\n\t\t} else {\n\t\t\tnewRoom.public_room = {\n\t\t\t\tconnect: {\n\t\t\t\t\troom_id: createRoomDto.roomID,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\t//TODO: implement scheduled room creation\n\t\t/*\n\t\tif (createRoomDto.start_date) newRoom.start_date = createRoomDto.start_date;\n\t\tif (createRoomDto.end_date) newRoom.end_date = createRoomDto.end_date;\t\t\n\t\tif (createRoomDto.is_scheduled) {\n\t\t\tnewRoom.\n\t\t\t\tconnect: {\n\t\t\t\t\troomID: createRoomDto.roomID,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\t\t*/\n\n\t\tconst room = await this.prisma.room.create({\n\t\t\tdata: newRoom,\n\t\t});\n\t\tif (!room) {\n\t\t\tthrow new Error(\"Something went wrong while creating the room\");\n\t\t}\n\n\t\tconst result = await this.dtogen.generateRoomDtoFromRoom(room);\n\t\tif (!result) {\n\t\t\tthrow new Error(\n\t\t\t\t\"An unknown error occurred while generating RoomDto for created room. Received null.\",\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tgetRecentRooms(userID: string): RoomDto[] {\n\t\t// implementation goes here\n\t\treturn [];\n\t}\n\n\tasync getRecommendedRooms(userID: string): Promise {\n\t\t//TODO: implement recommendation algorithm\n\t\tconst r = await this.dbUtils.getRandomRooms(5);\n\t\tif (!r || r === null) {\n\t\t\tthrow new Error(\n\t\t\t\t\"An unknown error occurred while generating RoomDto for recommended rooms. Received null.\",\n\t\t\t);\n\t\t}\n\t\tconst rooms: PrismaTypes.room[] = r;\n\t\tconst ids: string[] = rooms.map((room) => room.room_id);\n\t\tconst recommends = await this.dtogen.generateMultipleRoomDto(ids);\n\t\tif (!recommends || recommends === null) {\n\t\t\tthrow new Error(\n\t\t\t\t\"An unknown error occurred while generating RoomDto for recommended rooms. Received null.\",\n\t\t\t);\n\t\t}\n\t\treturn recommends;\n\t}\n\n\tasync getUserFriends(userID: string): Promise {\n\t\tconst f = await this.prisma.friends.findMany({\n\t\t\twhere: { OR: [{ friend1: userID }, { friend2: userID }] },\n\t\t});\n\t\tif (!f) {\n\t\t\treturn [];\n\t\t}\n\t\tconst friends: PrismaTypes.friends[] = f;\n\t\tconst ids: string[] = [];\n\t\tfor (const friend of friends) {\n\t\t\tif (friend.friend1 === userID) {\n\t\t\t\tids.push(friend.friend2);\n\t\t\t} else {\n\t\t\t\tids.push(friend.friend1);\n\t\t\t}\n\t\t}\n\t\tconst r = await this.dtogen.generateMultipleUserProfileDto(ids);\n\t\treturn r;\n\t}\n\n\tasync getFollowers(userID: string): Promise {\n\t\tconst f = await this.dbUtils.getUserFollowers(userID);\n\t\tif (!f) {\n\t\t\treturn [];\n\t\t}\n\t\tconst followers: PrismaTypes.users[] = f;\n\t\tconst ids: string[] = followers.map((follower) => follower.user_id);\n\t\tconst result = await this.dtogen.generateMultipleUserProfileDto(ids);\n\t\tif (!result) {\n\t\t\tthrow new Error(\n\t\t\t\t\"An unknown error occurred while generating UserProfileDto for followers. Received null.\",\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync getFollowing(userID: string): Promise {\n\t\tconst following = await this.dbUtils.getUserFollowing(userID);\n\t\tif (!following) {\n\t\t\treturn [];\n\t\t}\n\t\tconst followees: PrismaTypes.users[] = following;\n\t\tconst ids: string[] = followees.map((followee) => followee.user_id);\n\t\tconst result = await this.dtogen.generateMultipleUserProfileDto(ids);\n\t\tif (!result) {\n\t\t\tthrow new Error(\n\t\t\t\t\"An unknown error occurred while generating UserProfileDto for following. Received null.\",\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            class\n            AuthBody\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/db-utils/db-utils.service.ts\n            \n            injectable\n            DbUtilsService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/dto-gen/dto-gen.service.ts\n            \n            injectable\n            DtoGenService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/profile/dto/updateuserprofile.dto.ts\n            \n            class\n            UpdateUserProfileDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/profile/dto/userprofile.dto.ts\n            \n            class\n            UserProfileDto\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/modules/profile/entities/userprofile.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/modules/profile/profile.controller.ts\n            \n            controller\n            ProfileController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/profile/profile.service.ts\n            \n            injectable\n            ProfileService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/rooms/dto/createroomdto.ts\n            \n            class\n            CreateRoomDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/rooms/dto/room.dto.ts\n            \n            class\n            RoomDto\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/modules/rooms/dto/songinfo.dto.ts\n            \n            class\n            SongInfoDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/rooms/dto/updateroomdto.ts\n            \n            class\n            UpdateRoomDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/rooms/entities/room.entity.ts\n            \n            class\n            RoomEntity\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/modules/rooms/entities/songinfo.entity.ts\n            \n            class\n            SongInfoEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/rooms/rooms.controller.ts\n            \n            controller\n            RoomsController\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/modules/rooms/rooms.service.ts\n            \n            injectable\n            RoomsService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/modules/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/modules/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/dto/user.dto.ts\n            \n            class\n            UserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/entities/user.entity.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/modules/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/17)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @aws-sdk/client-cognito-identity-provider : ^3.592.0\n        \n            @aws-sdk/credential-providers : ^3.592.0\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.1\n        \n            @prisma/client : ^5.15.0\n        \n            aws-sdk : ^2.1637.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DbUtilsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DtoGenModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProfileModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RoomsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_DbUtilsModule\n\n\n\ncluster_DbUtilsModule_exports\n\n\n\ncluster_DtoGenModule\n\n\n\ncluster_DtoGenModule_exports\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_providers\n\n\n\ncluster_RoomsModule\n\n\n\ncluster_RoomsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDbUtilsModule\n\nDbUtilsModule\n\nAppModule -->\n\nDbUtilsModule->AppModule\n\n\n\n\n\nDbUtilsService \n\nDbUtilsService \n\nDbUtilsService  -->\n\nDbUtilsModule->DbUtilsService \n\n\n\n\n\nDtoGenModule\n\nDtoGenModule\n\nAppModule -->\n\nDtoGenModule->AppModule\n\n\n\n\n\nDtoGenService \n\nDtoGenService \n\nDtoGenService  -->\n\nDtoGenModule->DtoGenService \n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\nDbUtilsModule -->\n\nPrismaModule->DbUtilsModule\n\n\n\nDtoGenModule -->\n\nPrismaModule->DtoGenModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nProfileModule -->\n\nPrismaModule->ProfileModule\n\n\n\n\n\nRoomsModule\n\nRoomsModule\n\nRoomsModule -->\n\nPrismaModule->RoomsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\nAppModule -->\n\nRoomsModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nDbUtilsService\n\nDbUtilsService\n\nDbUtilsModule -->\n\nDbUtilsService->DbUtilsModule\n\n\n\nDtoGenModule -->\n\nDbUtilsService->DtoGenModule\n\n\n\nProfileModule -->\n\nDbUtilsService->ProfileModule\n\n\n\nRoomsModule -->\n\nDbUtilsService->RoomsModule\n\n\n\nUsersModule -->\n\nDbUtilsService->UsersModule\n\n\n\nAppModule -->\n\nDbUtilsService->AppModule\n\n\n\n\n\nDtoGenService\n\nDtoGenService\n\nDtoGenModule -->\n\nDtoGenService->DtoGenModule\n\n\n\nProfileModule -->\n\nDtoGenService->ProfileModule\n\n\n\nRoomsModule -->\n\nDtoGenService->RoomsModule\n\n\n\nUsersModule -->\n\nDtoGenService->UsersModule\n\n\n\nAppModule -->\n\nDtoGenService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAuthModule -->\n\nPrismaService->AuthModule\n\n\n\nDbUtilsModule -->\n\nPrismaService->DbUtilsModule\n\n\n\nDtoGenModule -->\n\nPrismaService->DtoGenModule\n\n\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\nProfileModule -->\n\nPrismaService->ProfileModule\n\n\n\nRoomsModule -->\n\nPrismaService->RoomsModule\n\n\n\nUsersModule -->\n\nPrismaService->UsersModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\nRoomsService\n\nRoomsService\n\nRoomsModule -->\n\nRoomsService->RoomsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    14 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
