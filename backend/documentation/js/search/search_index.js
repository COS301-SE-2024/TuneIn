var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AllTimeSessionDataDto.html",[0,0.261,1,1.985]],["body/classes/AllTimeSessionDataDto.html",[0,0.506,1,2.79,2,0.513,3,0.052,4,0.046,5,0.041,6,1.395,7,0.28,8,1.127,9,2.953,10,2.953,11,2.953,12,0.812,13,0.008,14,1.717,15,1.05,16,2.305,17,2.953,18,3.584,19,3.548,20,4.3,21,0.5,22,3.097,23,2.497,24,3.097,25,2.642,26,3.097,27,0.143,28,1.809,29,0.459,30,2.777,31,1.608,32,2.634,33,2.509,34,1.026,35,2.523,36,0.621,37,1.529,38,1.191,39,0.925,40,0.13,41,1.356,42,2.106,43,2.642,44,2.191,45,2.642,46,2.642,47,2.694,48,3.671,49,2.567,50,2.642,51,3.071,52,1.436,53,1.986,54,1.818,55,2.077,56,1.436,57,2.184,58,1.436,59,1.395,60,2.184,61,1.436,62,2.79,63,3.482,64,2.738,65,1.436,66,2.541,67,1.436,68,2.642,69,2.184,70,2.077,71,1.436,72,1.32,73,1.436,74,2.79,75,2.184,76,1.32,77,3.086,78,1.395,79,1.32,80,2.308,81,1.436,82,3.646,83,2.953,84,1.356,85,1.751,86,2.497,87,2.497,88,2.642,89,2.642,90,2.79,91,2.642,92,1.356,93,1.436,94,2.567,95,2.953,96,1.536,97,2.953,98,2.953,99,1.436,100,1.162,101,2.277,102,1.436,103,1.436,104,1.645,105,1.725,106,1.436,107,1.436,108,1.32,109,0.905,110,1.436,111,1.436,112,2.184,113,2.184,114,1.436,115,1.436,116,1.436,117,1.221,118,1.395,119,1.436,120,2.497,121,2.79,122,2.575,123,2.366,124,2.184,125,1.436,126,1.436,127,1.395,128,1.436,129,3.537,130,1.536,131,1.709,132,2.359,133,1.356,134,0.413,135,1.395,136,1.32,137,2.063,138,1.436,139,3.176,140,2.122,141,3.176,142,3.176,143,1.395,144,1.436,145,1.436,146,1.436,147,2.79,148,1.436,149,1.436,150,2.184,151,2.184,152,2.184,153,2.122,154,2.184,155,2.184,156,1.436,157,1.436,158,1.436,159,2.79,160,1.436,161,1.436,162,2.184,163,1.436,164,1.436,165,2.79,166,1.436,167,2.642,168,0.905,169,2.184,170,2.184,171,1.436,172,1.356,173,3.345,174,2.184,175,2.122,176,2.184,177,0.004,178,0.004]],["title/controllers/AppController.html",[179,1.985,180,2.9]],["body/controllers/AppController.html",[0,0.287,3,0.084,4,0.075,5,0.124,7,0.45,8,0.66,12,0.736,13,0.008,15,1.219,21,0.581,27,0.194,29,0.74,40,0.075,42,1.204,53,1.893,85,1.063,100,1.23,109,1.427,134,0.743,177,0.006,178,0.006,179,2.898,180,4.234,181,2.069,182,4.416,183,2.158,184,7.292,185,1.992,186,7.007,187,4.986,188,7.007,189,7.007,190,6.411,191,4.986,192,4.986,193,2.699,194,4.416,195,6.578,196,4.986,197,7.007,198,5.178,199,6.382,200,5.268,201,6.858,202,5.861,203,5.601,204,5.861,205,4.448,206,6.858,207,6.617,208,4.986,209,4.986,210,5.861,211,4.986,212,4.986,213,4.986,214,1.59,215,1.775,216,1.282,217,4.041,218,2.621,219,3.191,220,4.644,221,4.986,222,4.041,223,6.617,224,0.691,225,4.36,226,4.416,227,5.363,228,5.861,229,4.986,230,5.601,231,4.99,232,4.416,233,4.986,234,3.537,235,3.35,236,4.544,237,4.986,238,4.99,239,3.537,240,3.35,241,4.416,242,4.041,243,1.456,244,2.158,245,2.019,246,4.446,247,4.986,248,4.986,249,4.986,250,4.986,251,4.986,252,4.986,253,4.986,254,4.416,255,4.041,256,4.416,257,3.191,258,4.416,259,2.455,260,2.815,261,4.986,262,4.041,263,5.861,264,4.986,265,4.416,266,4.986,267,4.986,268,2.98,269,4.986,270,3.191,271,4.986,272,4.041,273,4.041,274,5.861,275,6.617,276,4.986,277,4.416,278,4.986,279,4.986,280,4.986,281,4.986,282,4.986,283,3.35,284,6.617,285,4.986,286,3.051,287,4.99,288,4.986,289,1.852,290,4.986,291,4.416,292,4.986,293,2.714,294,4.986,295,4.986,296,4.416,297,4.416,298,1.741,299,4.986,300,4.041,301,1.366,302,2.311,303,1.395,304,4.986,305,4.986]],["title/modules/AppModule.html",[306,0.817,307,2.9]],["body/modules/AppModule.html",[0,0.276,3,0.081,4,0.072,5,0.063,13,0.008,27,0.213,40,0.072,85,1.023,168,0.921,177,0.006,178,0.006,180,4.66,181,2.675,200,3.069,203,3.617,205,2.521,224,0.665,225,4.912,226,4.247,234,3.401,235,3.222,238,4.862,239,3.401,293,2.61,306,1.314,307,6.146,308,1.529,309,1.564,310,1.675,311,1.675,312,1.599,313,2.485,314,1.636,315,4.247,316,4.247,317,4.247,318,4.555,319,5.121,320,5.121,321,3.879,322,4.121,323,5.355,324,5.623,325,5.355,326,3.298,327,4.912,328,5.355,329,5.121,330,5.355,331,5.355,332,5.355,333,4.725,334,4.912,335,4.725,336,5.355,337,2.251,338,1.675,339,1.564,340,4.795,341,2.418,342,3.886,343,4.795,344,2.361,345,4.795,346,2.16,347,3.886,348,3.401,349,4.247,350,2.934,351,1.89,352,2.708,353,2.815,354,1.843,355,2.521,356,4.795,357,4.795,358,3.617,359,4.573,360,2.61,361,3.886,362,3.945,363,3.401,364,3.617,365,3.069,366,3.617,367,4.795,368,4.795,369,4.795,370,3.617,371,4.795,372,3.617,373,3.222,374,4.795,375,3.886,376,4.247,377,4.247,378,3.617,379,2.708,380,3.617,381,4.795,382,4.795,383,3.886,384,3.886,385,4.795,386,4.795,387,4.795,388,4.795,389,4.247,390,3.617,391,4.795,392,3.069,393,4.795,394,2.61,395,4.795,396,3.617,397,3.617,398,3.222,399,4.247,400,3.222,401,4.247,402,2.934,403,4.247,404,3.617,405,4.247]],["title/injectables/AppService.html",[225,2.66,406,0.8]],["body/injectables/AppService.html",[0,0.412,3,0.12,4,0.107,5,0.094,7,0.645,13,0.008,21,0.627,27,0.16,40,0.107,109,1.373,134,0.726,177,0.007,178,0.007,183,2.698,184,7.96,188,6.327,189,6.327,193,2.438,224,0.99,225,4.858,406,1.461,407,2.679,408,6.327,409,7.143]],["title/controllers/AuthController.html",[179,1.985,410,3.045]],["body/controllers/AuthController.html",[0,0.213,3,0.091,4,0.056,5,0.049,7,0.334,12,0.743,13,0.008,15,1.167,21,0.556,27,0.142,29,0.549,40,0.056,53,1.98,54,2.218,80,1.606,85,1.737,109,1.217,123,2.232,131,1.981,134,0.715,168,1.738,177,0.005,178,0.005,179,1.622,181,1.537,183,1.754,185,2.228,190,6.246,193,2.162,214,2.02,215,1.7,216,1.63,217,4.36,218,3.883,219,2.369,220,3.158,224,0.513,228,6.543,231,4.673,245,1.13,246,4.258,259,4.645,262,4.36,268,3.581,273,5.636,289,2.508,298,2.58,300,4.36,301,2.311,303,2.157,402,2.266,410,3.615,411,3.28,412,2.626,413,5.612,414,5.089,415,8.305,416,3.703,417,4.932,418,3.703,419,7.707,420,6.927,421,5.613,422,4.572,423,7.044,424,3.816,425,5.38,426,4.933,427,5.466,428,4.779,429,6.336,430,6.955,431,3.443,432,3.703,433,6.837,434,7.707,435,6.336,436,6.826,437,5.466,438,5.38,439,5.38,440,4.765,441,4.765,442,3.703,443,5.38,444,3.703,445,4.932,446,3.703,447,7.654,448,3.222,449,2.928,450,3.703,451,3.816,452,6.955,453,3.703,454,5.38,455,5.38,456,3.703,457,7.387,458,3.703,459,5.315,460,3.703,461,3.785,462,2.834,463,4.18,464,4.933,465,4.258,466,3.816,467,3.703,468,3.703,469,5.38,470,3.703,471,3.703,472,5.38,473,2.937,474,3.615,475,3.026,476,2.091,477,7.216,478,2.626,479,3.703,480,3.28,481,2.266,482,3.703,483,2.854,484,4.043,485,3.703,486,6.336,487,1.794,488,3.927,489,5.38,490,2.488,491,3.703,492,3.816,493,5.38,494,3.703,495,5.38,496,3.703,497,1.413,498,5.38,499,3.703,500,3.703,501,3.785,502,3.703,503,2.266,504,5.38,505,3.703,506,3.703,507,5.38,508,3.816,509,3.703,510,5.38,511,1.537,512,3.703,513,3.703,514,3.703,515,3.703,516,2.488,517,1.768,518,3.703,519,3.703,520,3.28,521,3.703,522,3.703,523,3.703,524,1.716,525,3.703,526,3.703,527,3.703,528,3.703,529,3.703,530,5.38,531,1.716,532,2.793,533,3.703,534,3.703,535,3.28,536,2.626,537,3.703]],["title/modules/AuthModule.html",[306,0.817,318,2.467]],["body/modules/AuthModule.html",[0,0.349,3,0.102,4,0.091,5,0.08,13,0.008,27,0.208,40,0.091,177,0.006,178,0.006,181,3.109,224,0.839,289,1.694,298,2.113,301,1.658,306,1.468,308,1.93,309,1.973,310,2.113,311,2.113,312,2.018,313,2.777,314,2.777,318,5.138,326,3.51,337,2.617,338,2.113,339,1.973,341,2.81,346,2.725,410,5.468,473,4.332,476,3.417,538,5.36,539,5.36,540,5.36,541,5.36,542,5.45,543,6.317,544,6.317,545,4.904,546,5.468,547,6.052,548,6.072,549,3.873,550,4.904,551,4.564,552,6.052,553,6.052,554,6.052,555,6.052,556,5.873,557,4.904,558,2.216,559,3.294,560,6.052,561,4.904,562,4.904,563,3.077,564,4.904,565,3.181,566,4.904]],["title/injectables/AuthService.html",[406,0.8,473,2.101]],["body/injectables/AuthService.html",[0,0.386,3,0.05,4,0.044,5,0.039,7,0.266,8,0.6,12,0.725,13,0.008,14,0.997,21,0.739,27,0.179,28,1.36,29,0.437,34,1.541,36,0.59,40,0.106,42,0.712,53,1.429,54,1.762,85,0.967,96,1.479,100,1.118,109,1.581,131,1.483,134,0.828,168,1.661,177,0.004,178,0.004,179,1.29,183,1.479,185,2.384,193,2.597,198,3.382,214,2.427,215,2.041,216,1.957,218,2.905,219,1.886,224,0.408,243,1.325,244,2.819,245,0.899,259,3.994,268,2.042,286,2.775,289,2.498,293,1.604,298,3.104,301,2.499,302,3.417,303,2.231,344,1.451,379,1.664,394,2.468,406,0.801,407,1.105,417,1.886,421,3.798,422,4.189,424,3.921,445,1.886,449,2.468,451,2.09,459,1.886,462,2.97,463,4.326,464,2.09,473,2.102,474,3.714,475,3.634,487,2.07,488,1.664,490,1.98,492,3.216,497,2.13,501,3.647,508,2.09,516,4.755,517,1.407,524,2.877,531,2.877,558,2.453,559,4.338,563,2.81,565,4.103,567,1.98,568,5.229,569,4.467,570,4.169,571,5.229,572,6.011,573,3.921,574,4.169,575,4.016,576,4.016,577,4.534,578,4.681,579,4.534,580,4.169,581,2.388,582,3.598,583,2.509,584,2.118,585,4.534,586,2.947,587,2.947,588,2.54,589,2.947,590,2.947,591,4.169,592,3.42,593,2.947,594,3.42,595,2.947,596,3.42,597,2.947,598,2.947,599,3.42,600,2.947,601,2.947,602,4.753,603,2.947,604,2.947,605,4.681,606,2.947,607,2.947,608,2.947,609,4.169,610,3.42,611,2.09,612,2.09,613,2.222,614,1.886,615,1.98,616,1.98,617,1.161,618,1.833,619,1.29,620,1.664,621,2.222,622,2.09,623,2.222,624,2.222,625,2.222,626,2.222,627,2.222,628,1.73,629,2.222,630,2.222,631,2.222,632,2.222,633,2.222,634,2.56,635,1.73,636,1.886,637,2.09,638,2.09,639,3.216,640,2.56,641,3.047,642,3.216,643,3.216,644,5.337,645,2.222,646,2.09,647,3.644,648,2.222,649,1.98,650,2.222,651,2.222,652,1.079,653,2.09,654,2.902,655,2.222,656,2.222,657,2.222,658,2.222,659,2.222,660,3.42,661,2.222,662,3.505,663,3.42,664,5.054,665,2.222,666,2.222,667,2.125,668,3.42,669,2.222,670,3.121,671,2.222,672,2.222,673,1.451,674,1.73,675,3.106,676,2.662,677,4.171,678,1.73,679,1.73,680,1.549,681,1.73,682,4.947,683,3.245,684,2.662,685,1.976,686,1.73,687,3.42,688,2.222,689,2.222,690,1.98,691,1.803,692,2.305,693,3.42,694,3.42,695,3.42,696,2.09,697,2.222,698,2.222,699,2.222,700,2.383,701,2.09,702,2.222,703,1.98,704,2.09,705,2.222,706,2.09,707,1.191,708,1.223,709,2.222,710,2.222,711,1.98,712,2.305,713,3.42,714,3.42,715,2.222,716,2.222,717,3.245,718,2.222,719,2.222,720,2.222,721,2.222,722,2.222,723,2.222,724,2.222,725,2.222]],["title/modules/AutoModerationModule.html",[306,0.817,726,2.66]],["body/modules/AutoModerationModule.html",[0,0.399,3,0.117,4,0.104,5,0.091,13,0.008,27,0.182,40,0.104,177,0.007,178,0.007,224,0.96,306,1.556,308,2.209,309,2.259,310,2.419,311,2.419,312,2.31,313,2.944,314,2.944,337,2.839,338,2.419,339,2.259,726,5.446,727,6.136,728,6.136,729,6.136,730,6.08,731,6.927,732,6.927]],["title/injectables/AutoModerationService.html",[406,0.8,730,2.9]],["body/injectables/AutoModerationService.html",[0,0.423,3,0.123,4,0.11,5,0.097,13,0.008,27,0.165,40,0.11,177,0.007,178,0.007,224,1.016,406,1.483,407,2.75,730,5.376,733,6.494]],["title/modules/BullBoardModule.html",[306,0.817,319,2.773]],["body/modules/BullBoardModule.html",[0,0.379,3,0.111,4,0.099,5,0.087,13,0.008,27,0.196,40,0.118,70,2.143,177,0.007,178,0.007,215,1.763,224,0.911,306,1.578,308,2.096,309,2.143,310,2.295,311,2.295,312,2.192,313,2.879,314,2.879,319,5.703,320,5.558,337,2.752,338,2.295,339,2.143,341,2.955,362,5.163,363,4.662,364,4.957,365,5.042,734,5.822,735,5.822,736,6.573,737,5.822,738,6.043,739,4.417,740,7.879,741,5.327,742,4.206,743,5.327,744,5.822,745,4.662,746,6.573,747,4.662,748,6.573]],["title/injectables/BullBoardService.html",[406,0.8,738,2.9]],["body/injectables/BullBoardService.html",[0,0.347,3,0.101,4,0.09,5,0.079,7,0.543,8,0.988,12,0.513,13,0.008,21,0.712,27,0.202,40,0.09,70,2.845,85,1.283,109,1.156,177,0.006,178,0.006,183,2.434,193,2.053,214,1.919,215,1.614,216,1.547,224,0.834,235,5.454,243,1.758,244,2.768,245,1.836,289,2.089,293,4.064,301,2.224,362,5.34,365,5.431,400,4.043,406,1.318,407,2.257,483,2.71,484,3.059,680,3.163,738,4.778,739,5.703,742,3.85,749,5.329,750,8.488,751,8.117,752,7.877,753,5.329,754,7.466,755,6.613,756,6.017,757,3.682,758,2.963,759,7.466,760,5.329,761,6.017,762,6.017,763,7.466,764,5.329,765,5.329,766,4.538,767,6.017,768,6.017,769,4.583,770,5.329,771,7.466,772,6.017,773,7.466,774,4.538,775,6.613,776,7.466,777,4.538,778,6.017,779,6.051,780,6.017,781,6.017,782,6.017,783,6.017,784,6.017,785,4.043,786,6.017,787,6.017,788,4.538,789,6.017,790,6.017]],["title/modules/BullConfigModule.html",[306,0.817,320,2.773]],["body/modules/BullConfigModule.html",[0,0.41,3,0.12,4,0.107,5,0.094,13,0.008,27,0.185,40,0.107,177,0.007,178,0.007,224,0.986,306,1.489,308,2.269,320,5.052,341,2.669,363,5.046,398,4.781,400,4.781,739,4.781,741,5.766,742,4.553,791,7.115,792,7.115,793,7.115,794,6.301,795,7.115,796,7.115]],["title/interfaces/Category.html",[797,2.382,798,3.214]],["body/interfaces/Category.html",[0,0.451,3,0.109,4,0.097,5,0.086,7,0.586,8,1.035,12,0.715,13,0.008,14,1.171,27,0.175,28,1.674,29,0.963,31,2.669,34,1.828,36,1.301,40,0.126,53,1.79,80,2.334,123,2.694,134,0.836,168,1.247,177,0.007,178,0.007,215,2.391,216,2.011,428,4.896,448,3.976,497,1.705,685,3.115,797,4.111,798,6.18,799,4.605,800,4.896,801,6.634,802,5.261,803,5.261,804,5.261,805,4.605,806,5.261,807,4.362,808,3.811,809,3.1,810,3.666]],["title/classes/ChatEventDto.html",[0,0.261,811,3.673]],["body/classes/ChatEventDto.html",[0,0.471,2,1.011,3,0.103,4,0.092,5,0.081,7,0.551,8,0.997,12,0.79,13,0.008,15,1.572,16,2.469,21,0.749,27,0.191,28,1.448,29,0.906,31,2.571,33,2.201,34,1.779,35,2.154,36,1.224,39,1.823,40,0.092,53,1.82,80,2.547,85,1.303,134,0.783,177,0.006,178,0.006,216,2.296,448,4.456,465,4.104,487,2.846,497,2.302,667,2.897,769,4.255,808,4.797,809,4.074,811,6.107,812,5.41,813,7.238,814,5.889,815,6.163,816,6.108,817,6.108,818,6.915,819,6.108,820,6.108,821,6.108,822,6.108,823,7.535,824,6.674,825,6.674,826,6.107,827,5.41,828,6.108,829,4.202,830,6.108,831,3.737]],["title/classes/CombinedSearchHistory.html",[0,0.261,832,3.418]],["body/classes/CombinedSearchHistory.html",[0,0.252,2,0.272,3,0.028,4,0.025,5,0.022,7,0.148,8,0.372,12,0.457,13,0.008,14,0.968,15,0.302,16,0.663,21,0.144,27,0.147,28,0.84,29,0.243,30,2.019,35,1.055,36,0.329,37,1.814,38,0.631,40,0.055,42,0.679,47,0.938,53,1.224,55,2.539,66,1.888,85,1.291,92,2.77,100,0.405,101,1.564,104,2.655,105,1.03,108,2.695,109,1.603,131,1.696,134,0.802,168,1.334,177,0.006,178,0.003,185,1.979,205,4.387,214,0.897,215,0.754,216,0.422,224,0.227,243,0.479,244,0.917,245,0.858,270,4.047,283,2.939,289,1.835,301,2.49,302,3.889,303,2.425,351,0.647,392,3.149,406,0.497,420,2.991,462,0.96,483,1.267,487,1.459,497,2.203,511,2.722,558,3.192,583,0.663,584,0.96,588,2.121,617,0.647,618,0.663,619,0.719,652,0.601,654,3.875,673,4.036,675,3.219,685,1.006,691,1.721,692,1.877,708,2.807,711,1.89,758,0.808,805,4.486,809,2.35,832,2.784,833,1.33,834,2.491,835,3.103,836,2.491,837,1.641,838,1.641,839,1.238,840,5.582,841,1.453,842,1.267,843,3.571,844,0.863,845,2.279,846,1.238,847,1.453,848,2.491,849,1.453,850,1.453,851,1.05,852,1.004,853,3.269,854,3.545,855,1.453,856,2.491,857,2.279,858,2.491,859,6.42,860,2.618,861,1.453,862,1.453,863,3.269,864,1.453,865,1.453,866,1.453,867,1.453,868,1.453,869,1.453,870,1.453,871,3.269,872,2.491,873,2.491,874,5.084,875,4.77,876,1.453,877,1.453,878,3.874,879,5.602,880,2.491,881,6.897,882,5.363,883,6.535,884,1.453,885,1.453,886,4.358,887,1.453,888,1.453,889,5.628,890,6.293,891,1.453,892,1.453,893,6.818,894,3.306,895,3.874,896,1.453,897,1.453,898,1.453,899,1.33,900,1.453,901,2.491,902,3.306,903,2.279,904,4.329,905,2.586,906,3.299,907,4.358,908,3.874,909,3.269,910,3.269,911,5.602,912,4.947,913,5.602,914,2.491,915,3.269,916,4.754,917,1.33,918,1.33,919,1.238,920,3.299,921,2.491,922,2.279,923,2.121,924,2.491,925,2.491,926,1.453,927,2.279,928,2.491,929,2.491,930,3.874,931,2.491,932,1.453,933,3.874,934,3.874,935,2.491,936,2.279,937,2.491,938,5.602,939,6.778,940,1.453,941,3.874,942,3.874,943,1.995,944,2.491,945,2.491,946,1.89,947,1.8,948,1.8,949,2.491,950,2.491,951,2.491,952,3.306,953,6.42,954,6.42,955,3.874,956,7.037,957,4.358,958,3.269,959,2.491,960,1.453,961,1.453,962,1.453,963,2.491,964,1.453,965,3.545,966,1.164,967,3.874,968,1.453,969,1.164,970,1.453,971,3.269,972,1.103,973,1.453,974,3.874,975,1.164,976,2.206,977,1.453,978,2.491,979,1.453,980,1.453,981,3.545,982,1.453,983,1.453,984,3.874,985,1.453,986,1.453,987,1.453,988,1.453,989,2.491,990,3.874,991,2.491,992,2.991,993,3.269,994,0.927,995,1.453,996,3.874,997,2.279,998,2.491,999,1.453,1000,3.874,1001,3.545,1002,3.874,1003,6.42,1004,3.269,1005,2.279,1006,3.988,1007,2.991,1008,5.602,1009,4.358,1010,5.126,1011,4.358,1012,4.358,1013,3.874,1014,3.554,1015,3.49,1016,3.874,1017,3.299,1018,3.874,1019,3.874,1020,3.874,1021,1.453,1022,3.874,1023,3.874,1024,3.874,1025,3.874,1026,2.677,1027,3.103,1028,5.363,1029,3.874,1030,3.874,1031,1.453,1032,1.453,1033,1.453,1034,3.874,1035,1.453,1036,4.907,1037,2.491,1038,2.491,1039,2.491,1040,2.491,1041,2.491,1042,3.299,1043,1.8,1044,2.491,1045,3.874,1046,2.491,1047,1.8,1048,2.491,1049,1.453,1050,1.385,1051,1.343,1052,1.453,1053,1.453,1054,5.363,1055,3.269,1056,2.491,1057,5.363,1058,3.269,1059,2.491,1060,2.121,1061,2.279,1062,1.453,1063,1.453,1064,3.269,1065,1.531,1066,1.453,1067,1.453,1068,1.453,1069,1.453,1070,1.453,1071,1.453,1072,1.453,1073,1.453,1074,3.269,1075,1.453,1076,1.453,1077,4.754,1078,4.358,1079,2.084,1080,2.491,1081,1.453,1082,1.453,1083,2.491,1084,1.453,1085,1.453,1086,2.491,1087,1.453,1088,1.453,1089,1.453,1090,1.238,1091,1.453,1092,1.453,1093,1.453,1094,1.453,1095,1.453,1096,1.164,1097,1.453,1098,4.754,1099,2.491,1100,4.358,1101,2.491,1102,4.358,1103,1.453,1104,2.491,1105,2.491,1106,2.491,1107,2.491,1108,1.453,1109,1.453,1110,1.453,1111,3.269,1112,1.453,1113,1.453]],["title/classes/CombinedSearchResults.html",[0,0.261,846,3.418]],["body/classes/CombinedSearchResults.html",[0,0.251,2,0.27,3,0.027,4,0.024,5,0.022,7,0.147,8,0.37,12,0.456,13,0.008,14,0.965,15,0.515,21,0.245,27,0.147,28,0.837,29,0.242,30,2.104,35,1.05,36,0.327,37,1.902,38,0.627,40,0.055,42,0.394,47,0.933,53,1.345,55,2.61,66,1.953,85,1.345,92,2.762,100,0.402,101,1.912,104,2.613,105,0.597,108,2.688,109,1.602,131,1.692,134,0.801,168,1.362,177,0.005,178,0.003,185,1.975,205,4.381,214,0.892,215,0.75,216,0.419,224,0.226,243,0.476,244,0.912,245,0.853,270,4.036,283,2.926,289,1.831,301,2.489,302,3.884,303,2.422,351,0.643,392,3.136,406,0.494,420,2.977,462,0.954,483,1.26,487,1.453,497,2.201,511,2.715,558,3.189,583,0.659,584,0.954,588,2.116,617,0.643,618,0.659,619,0.714,652,0.597,654,3.863,673,4.105,675,3.211,685,1,691,2.665,692,1.867,708,2.942,711,1.879,758,0.803,805,4.474,809,2.732,832,2.109,833,1.321,834,1.444,835,3.476,836,1.444,839,1.23,840,5.573,841,1.444,842,1.26,843,3.561,844,0.857,845,2.267,846,2.109,847,1.444,848,2.477,849,1.444,850,1.444,851,1.043,852,0.998,853,3.253,854,3.529,855,1.444,856,2.477,857,2.267,858,2.477,859,6.407,860,2.605,861,1.444,862,1.444,863,3.253,864,1.444,865,1.444,866,1.444,867,1.444,868,1.444,869,1.444,870,1.444,871,3.253,872,2.477,873,2.477,874,5.067,875,4.757,876,1.444,877,1.444,878,3.857,879,5.586,880,2.477,881,6.886,882,5.347,883,6.522,884,1.444,885,1.444,886,4.341,887,1.444,888,1.444,889,5.615,890,6.279,891,1.444,892,1.444,893,6.807,894,3.293,895,3.857,896,1.444,897,1.444,898,1.444,899,1.321,900,1.444,901,2.477,902,3.293,903,2.267,904,4.315,905,2.576,906,3.285,907,4.341,908,3.857,909,3.253,910,3.253,911,5.586,912,4.934,913,5.586,914,2.477,915,3.253,916,4.737,917,1.321,918,1.321,919,1.23,920,3.285,921,2.477,922,2.267,923,2.109,924,2.477,925,2.477,926,1.444,927,2.267,928,2.477,929,2.477,930,3.857,931,2.477,932,1.444,933,3.857,934,3.857,935,2.477,936,2.267,937,2.477,938,5.586,939,6.773,940,1.444,941,3.857,942,3.857,943,1.984,944,2.477,945,2.477,946,1.879,947,1.79,948,1.79,949,2.477,950,2.477,951,2.477,952,3.293,953,6.407,954,6.407,955,3.857,956,7.026,957,4.341,958,3.253,959,2.477,960,1.444,961,1.444,962,1.444,963,2.477,964,1.444,965,3.529,966,1.156,967,3.857,968,1.444,969,1.156,970,1.444,971,3.253,972,1.095,973,1.444,974,3.857,975,1.156,976,2.199,977,1.444,978,2.477,979,1.444,980,1.444,981,3.529,982,1.444,983,1.444,984,3.857,985,1.444,986,1.444,987,1.444,988,1.444,989,2.477,990,3.857,991,2.477,992,2.977,993,3.253,994,0.921,995,1.444,996,3.857,997,2.267,998,2.477,999,1.444,1000,3.857,1001,3.529,1002,3.857,1003,6.407,1004,3.253,1005,2.267,1006,3.972,1007,2.977,1008,5.586,1009,4.341,1010,5.112,1011,4.341,1012,4.341,1013,3.857,1014,3.544,1015,3.476,1016,3.857,1017,3.285,1018,3.857,1019,3.857,1020,3.857,1021,1.444,1022,3.857,1023,3.857,1024,3.857,1025,3.857,1026,2.665,1027,3.089,1028,5.347,1029,3.857,1030,3.857,1031,1.444,1032,1.444,1033,1.444,1034,3.857,1035,1.444,1036,4.892,1037,2.477,1038,2.477,1039,2.477,1040,2.477,1041,2.477,1042,3.285,1043,1.79,1044,2.477,1045,3.857,1046,2.477,1047,1.79,1048,2.477,1049,1.444,1050,1.377,1051,1.336,1052,1.444,1053,1.444,1054,5.347,1055,3.253,1056,2.477,1057,5.347,1058,3.253,1059,2.477,1060,2.109,1061,2.267,1062,1.444,1063,1.444,1064,3.253,1065,1.522,1066,1.444,1067,1.444,1068,1.444,1069,1.444,1070,1.444,1071,1.444,1072,1.444,1073,1.444,1074,3.253,1075,1.444,1076,1.444,1077,4.737,1078,4.341,1079,2.074,1080,2.477,1081,1.444,1082,1.444,1083,2.477,1084,1.444,1085,1.444,1086,2.477,1087,1.444,1088,1.444,1089,1.444,1090,1.23,1091,1.444,1092,1.444,1093,1.444,1094,1.444,1095,1.444,1096,1.156,1097,1.444,1098,4.737,1099,2.477,1100,4.341,1101,2.477,1102,4.341,1103,1.444,1104,2.477,1105,2.477,1106,2.477,1107,2.477,1108,1.444,1109,1.444,1110,1.444,1111,3.253,1112,1.444,1113,1.444,1114,1.377,1115,2.797,1116,2.797,1117,1.63,1118,1.63]],["title/classes/CreateRoomDto.html",[0,0.261,1119,3.418]],["body/classes/CreateRoomDto.html",[0,0.444,2,0.889,3,0.09,4,0.081,5,0.071,7,0.485,8,0.919,12,0.794,13,0.008,14,1.252,15,1.703,16,2.17,21,0.811,27,0.173,28,1.564,29,0.796,30,2.316,31,2.627,32,2.073,34,1.836,36,1.075,39,1.602,40,0.081,53,1.736,66,2.073,80,2.43,85,1.481,134,0.807,177,0.006,178,0.006,216,2.428,289,1.943,483,3.127,511,3.767,829,4.502,946,5.173,947,4.926,948,4.926,952,5.665,1119,5.237,1120,4.754,1121,5.806,1122,5.806,1123,5.806,1124,5.806,1125,5.806,1126,5.806,1127,5.806,1128,6.239,1129,3.127,1130,5.367,1131,6.944,1132,5.367,1133,8.43,1134,5.367,1135,5.367,1136,5.367,1137,5.367,1138,5.367,1139,6.944,1140,5.367,1141,5.367,1142,5.367,1143,5.367,1144,5.367,1145,5.367,1146,6.15,1147,5.367,1148,4.7,1149,8.097,1150,7.698,1151,6.944]],["title/classes/CreateUserDto.html",[0,0.261,1152,3.045]],["body/classes/CreateUserDto.html",[0,0.417,2,0.947,3,0.096,4,0.086,5,0.075,7,0.517,8,0.958,12,0.8,13,0.008,15,1.729,21,0.823,27,0.162,28,1.84,29,0.849,34,1.872,36,1.147,40,0.086,66,2.368,134,0.792,177,0.006,178,0.006,462,2.707,497,2.084,809,3.789,972,5.331,1129,3.754,1152,4.861,1153,8.335,1154,4.638,1155,7.027,1156,4.17,1157,5.984,1158,7.934,1159,7.934,1160,7.934,1161,7.934,1162,7.027,1163,6.43,1164,7.027,1165,5.723,1166,5.723,1167,5.723,1168,5.723,1169,5.723,1170,5.723,1171,5.723,1172,5.723,1173,5.723,1174,5.723,1175,5.723,1176,5.723,1177,5.723,1178,5.723,1179,5.723]],["title/classes/CreateUserDto-1.html",[0,0.218,652,1.382,1152,2.537]],["body/classes/CreateUserDto-1.html",[0,0.377,2,1.084,3,0.11,4,0.098,5,0.086,7,0.591,8,1.041,12,0.773,13,0.008,15,1.672,21,0.796,27,0.176,28,1.819,29,0.971,40,0.098,134,0.812,177,0.007,178,0.007,462,2.875,497,2.213,583,2.648,618,2.648,1152,5.282,1155,7.462,1156,4.428,1162,7.462,1164,7.462,1180,5.8,1181,8.738,1182,6.548,1183,6.548,1184,6.548,1185,6.548,1186,6.548,1187,6.548]],["title/modules/DbUtilsModule.html",[306,0.817,321,2.101]],["body/modules/DbUtilsModule.html",[0,0.389,3,0.114,4,0.101,5,0.089,13,0.008,27,0.192,40,0.101,177,0.007,178,0.007,224,0.937,306,1.54,308,2.155,309,2.204,310,2.36,311,2.36,312,2.254,313,2.914,314,2.914,321,4.339,326,3.603,337,2.798,338,2.36,339,2.204,341,3.005,346,3.044,354,2.598,1188,5.986,1189,6.758,1190,5.986,1191,5.986,1192,4.037,1193,4.325,1194,6.758,1195,3.552,1196,3.679]],["title/classes/DirectMessageDto.html",[0,0.261,1197,2.9]],["body/classes/DirectMessageDto.html",[0,0.463,2,0.972,3,0.099,4,0.088,5,0.077,7,0.76,8,0.973,12,0.804,13,0.008,14,1.326,15,1.685,16,2.972,21,0.803,27,0.189,28,1.77,29,0.871,31,2.739,32,2.194,33,2.345,34,1.748,35,2.295,36,1.176,37,2.453,38,2.256,39,1.752,40,0.088,53,1.568,80,2.511,134,0.738,177,0.006,178,0.006,511,3.491,809,4.017,1129,3.311,1148,4.369,1197,4.704,1198,5.199,1199,7.109,1200,7.109,1201,7.109,1202,7.109,1203,6.505,1204,7.109,1205,7.021,1206,6.534,1207,5.214,1208,5.869,1209,5.544,1210,5.869,1211,5.869,1212,2.984,1213,5.869,1214,5.869,1215,5.869,1216,5.869,1217,6.511,1218,5.869,1219,5.869]],["title/modules/DmUsersModule.html",[306,0.817,1220,2.773]],["body/modules/DmUsersModule.html",[0,0.37,3,0.108,4,0.096,5,0.085,13,0.008,27,0.203,40,0.096,177,0.007,178,0.007,224,0.891,306,1.507,308,2.05,309,2.096,310,2.245,311,2.245,312,2.144,313,2.852,314,2.852,321,4.188,322,4.45,335,5.102,337,2.715,338,2.245,339,2.096,341,2.916,347,5.21,350,3.934,351,2.534,352,3.63,353,3.774,354,2.471,355,3.379,726,5.304,1220,5.812,1221,5.694,1222,6.428,1223,5.694,1224,5.694,1225,5.529,1226,6.428,1227,6.428,1228,5.21]],["title/injectables/DmUsersService.html",[406,0.8,1225,2.66]],["body/injectables/DmUsersService.html",[0,0.17,3,0.05,4,0.044,5,0.039,7,0.267,8,0.602,12,0.702,13,0.008,21,0.732,27,0.171,37,2.096,40,0.044,42,1.622,79,3.659,109,1.662,122,2.24,131,2.044,134,0.825,168,1.778,177,0.004,178,0.004,183,1.483,185,2.096,193,2.77,214,2.627,215,2.21,216,2.119,224,0.41,243,1.329,244,2.311,245,1.69,289,2.509,298,3.106,301,2.488,303,2.132,350,1.81,351,1.166,353,1.737,354,1.137,406,0.803,407,1.11,426,2.098,483,3.023,487,3.044,497,2.001,536,2.098,558,3.117,588,1.857,652,1.083,667,1.748,673,1.457,685,1.981,700,1.555,757,2.783,758,1.457,769,3.512,774,3.43,797,1.555,842,2.801,844,1.555,852,3.391,976,1.748,1014,2.67,1027,2.098,1043,2.91,1047,3.546,1096,2.098,1192,2.65,1196,1.61,1197,3.98,1225,2.67,1229,2.397,1230,4.179,1231,4.179,1232,4.548,1233,4.548,1234,4.028,1235,4.548,1236,4.548,1237,4.548,1238,4.028,1239,4.028,1240,4.548,1241,4.49,1242,2.62,1243,4.517,1244,2.958,1245,2.475,1246,2.62,1247,7.296,1248,2.958,1249,6.292,1250,2.397,1251,4.028,1252,2.958,1253,4.028,1254,2.958,1255,3.43,1256,2.958,1257,4.691,1258,4.028,1259,2.958,1260,4.028,1261,2.958,1262,4.028,1263,2.958,1264,3.43,1265,2.958,1266,3.43,1267,2.958,1268,4.028,1269,2.958,1270,2.958,1271,2.958,1272,4.028,1273,2.958,1274,2.098,1275,2.62,1276,1.988,1277,2.098,1278,2.397,1279,2.62,1280,7.541,1281,4.691,1282,2.098,1283,1.61,1284,5.338,1285,2.231,1286,2.397,1287,6.173,1288,2.231,1289,6.608,1290,2.231,1291,4.028,1292,2.231,1293,2.098,1294,2.098,1295,2.231,1296,5.063,1297,2.231,1298,3.43,1299,2.231,1300,2.231,1301,2.231,1302,5.063,1303,2.397,1304,5.063,1305,2.62,1306,2.397,1307,5.946,1308,4.028,1309,2.62,1310,5.509,1311,7.067,1312,2.62,1313,2.62,1314,2.62,1315,4.908,1316,4.028,1317,2.62,1318,2.62,1319,1.67,1320,4.908,1321,5.946,1322,4.028,1323,4.908,1324,2.62,1325,2.397,1326,2.098,1327,4.028,1328,4.028,1329,2.62,1330,2.62,1331,2.397,1332,2.62,1333,2.62,1334,4.908,1335,4.908,1336,2.62,1337,2.62]],["title/modules/DtoGenModule.html",[306,0.817,322,2.232]],["body/modules/DtoGenModule.html",[0,0.382,3,0.112,4,0.1,5,0.087,13,0.008,27,0.197,40,0.1,177,0.007,178,0.007,224,0.919,306,1.528,308,2.114,309,2.162,310,2.316,311,2.316,312,2.212,313,2.89,314,2.89,321,4.218,322,4.639,326,3.587,337,2.766,338,2.316,339,2.162,341,2.971,346,2.986,351,2.613,354,2.549,355,3.485,842,4.257,843,3.744,844,3.485,1195,3.485,1338,5.873,1339,5.873,1340,5.873,1341,6.631,1342,4.243,1343,6.631]],["title/injectables/DtoGenService.html",[406,0.8,842,2.041]],["body/injectables/DtoGenService.html",[0,0.119,3,0.035,4,0.031,5,0.027,7,0.506,12,0.624,13,0.008,14,0.615,19,0.878,21,0.643,27,0.16,36,0.683,37,2.159,38,0.792,40,0.031,44,1.31,47,2.382,51,0.737,53,0.727,55,2.328,66,1.511,80,1.3,85,1.697,100,1.761,104,1.19,109,1.562,122,2.802,131,1.504,132,0.629,133,0.903,134,0.779,168,1.16,177,0.003,178,0.003,183,1.111,185,2.252,193,2.437,214,2.335,215,2.044,216,1.883,224,0.286,243,0.995,244,1.969,245,1.04,260,1.164,270,1.319,289,2.275,293,4.38,298,2.334,301,2.518,302,3.591,303,2.333,339,0.672,351,2.949,354,0.792,406,0.602,407,0.773,462,0.703,465,1.385,466,2.417,483,1.962,487,2.621,497,2.219,503,1.261,511,1.808,517,1.627,558,3.029,583,1.761,584,1.727,588,2.312,617,0.812,618,1.378,619,0.903,636,2.181,662,1.164,667,2.978,673,3.815,675,2.346,691,1.261,707,2.046,708,2.326,712,2.573,758,2.145,785,1.385,808,2,809,3.64,814,3.401,839,1.554,842,1.535,860,1.462,894,2.29,904,2.57,905,2.66,906,3.286,912,2.57,917,2.762,918,2.762,919,3.817,920,3.817,922,1.67,923,3.286,927,1.67,943,2.417,946,3.766,947,3.587,948,3.587,952,2.29,966,1.462,969,1.462,972,2.29,976,3.18,981,1.67,992,1.67,994,1.164,1006,1.67,1007,1.67,1014,2,1017,2.57,1036,4.543,1042,2.57,1050,1.678,1051,1.627,1121,2.57,1122,2.57,1123,2.57,1124,2.57,1125,2.57,1126,2.57,1127,2.57,1128,2.762,1156,1.083,1157,1.554,1192,2.157,1195,1.083,1196,1.122,1197,3.587,1199,3.018,1200,3.018,1201,3.018,1202,3.018,1203,4.543,1204,3.018,1205,5.616,1206,5.643,1245,2.371,1284,2.181,1287,4.057,1306,4.102,1319,1.164,1325,4.102,1342,4.788,1344,1.825,1345,3.408,1346,3.408,1347,4.357,1348,3.408,1349,4.357,1350,3.018,1351,4.357,1352,3.859,1353,4.357,1354,3.408,1355,1.554,1356,2.061,1357,3.408,1358,5.919,1359,2.061,1360,3.408,1361,2.061,1362,5.061,1363,2.061,1364,2.061,1365,5.179,1366,2.061,1367,2.061,1368,4.357,1369,2.061,1370,5.348,1371,2.061,1372,2.061,1373,2.061,1374,2.061,1375,4.543,1376,2.061,1377,2.061,1378,5.061,1379,2.061,1380,2.061,1381,5.605,1382,5.061,1383,2.061,1384,5.061,1385,3.408,1386,2.061,1387,1.825,1388,1.825,1389,1.554,1390,2.061,1391,1.164,1392,2.061,1393,1.164,1394,1.385,1395,1.164,1396,2.061,1397,1.164,1398,1.164,1399,1.164,1400,1.924,1401,1.261,1402,1.385,1403,3.018,1404,4.686,1405,5.061,1406,5.061,1407,3.408,1408,3.408,1409,5.061,1410,5.061,1411,3.408,1412,3.408,1413,1.825,1414,1.554,1415,2.061,1416,3.859,1417,2.061,1418,2.061,1419,2.061,1420,2.061,1421,2.061,1422,2.061,1423,1.385,1424,1.825,1425,2.061,1426,2.061,1427,1.67,1428,2.061,1429,2.061,1430,2.061,1431,2.061,1432,2.061,1433,2.061,1434,2.061,1435,2.061,1436,2.061,1437,2.061,1438,2.061,1439,1.825,1440,3.408,1441,2.061,1442,2.061,1443,2.061,1444,2.061,1445,2.061,1446,2.061,1447,4.965,1448,2.061,1449,2.061,1450,2.061,1451,3.408,1452,3.859,1453,3.408,1454,2.061,1455,2.061,1456,2.061,1457,3.408,1458,2.061,1459,2.061,1460,2.061,1461,3.408,1462,2.061,1463,3.408,1464,2.061,1465,2.061,1466,3.408,1467,2.061,1468,2.061,1469,2.061,1470,2.061,1471,2.061,1472,1.67,1473,2.061,1474,3.408,1475,2.061,1476,1.825,1477,1.67,1478,3.408,1479,5.348,1480,3.408,1481,3.408,1482,3.408,1483,5.04,1484,4.357,1485,2.061,1486,1.825,1487,3.408,1488,3.018,1489,5.061,1490,2.061,1491,2.061,1492,3.408,1493,3.018,1494,3.408,1495,3.408,1496,3.408,1497,3.408,1498,3.408,1499,3.408,1500,3.408,1501,3.408,1502,3.408,1503,3.018,1504,3.408,1505,3.018,1506,3.408,1507,3.408,1508,3.018,1509,3.408,1510,1.825,1511,2.061,1512,2.061,1513,2.061,1514,2.061,1515,2.061,1516,3.018,1517,1.825,1518,2.061,1519,1.825,1520,2.061,1521,2.061,1522,5.061,1523,2.061,1524,2.061,1525,2.061,1526,3.018,1527,2.061,1528,2.061,1529,2.061,1530,2.061,1531,3.408,1532,2.061,1533,2.061,1534,2.061,1535,5.061,1536,2.061,1537,1.825,1538,2.061,1539,1.825,1540,2.061,1541,2.061,1542,3.408,1543,3.018,1544,3.018,1545,2.061,1546,1.825,1547,2.061,1548,2.061,1549,2.061,1550,4.357,1551,4.357,1552,2.061,1553,2.061,1554,2.061,1555,3.408,1556,3.408,1557,3.408,1558,3.408,1559,3.408,1560,5.605,1561,2.061,1562,5.605,1563,2.061,1564,2.061,1565,2.061,1566,3.408,1567,3.408,1568,2.762,1569,2.061,1570,3.408,1571,3.408,1572,3.408,1573,3.408,1574,2.061,1575,2.061,1576,3.408,1577,3.408,1578,1.825,1579,2.085,1580,2.061,1581,2.061,1582,2.061,1583,2.061,1584,2.061,1585,2.061,1586,2.061,1587,2.061,1588,2.061,1589,1.67,1590,2.061,1591,2.061,1592,5.061,1593,3.408,1594,2.061,1595,2.061,1596,2.061,1597,4.357,1598,2.061,1599,2.061,1600,2.061,1601,1.385,1602,1.67,1603,2.061]],["title/interfaces/Emoji.html",[797,2.382,801,3.214]],["body/interfaces/Emoji.html",[0,0.444,3,0.107,4,0.095,5,0.084,7,0.573,8,1.021,12,0.768,13,0.008,14,1.499,27,0.173,28,1.661,29,0.941,31,2.632,34,1.809,36,1.271,40,0.125,53,1.772,80,2.302,123,2.632,134,0.84,168,1.219,177,0.007,178,0.007,215,2.376,428,4.784,448,3.921,497,1.666,685,2.268,797,4.054,798,6.389,799,4.499,800,4.784,801,6.643,802,5.141,803,5.141,804,7.006,805,6.132,806,7.006,807,4.262,808,3.724,809,3.029,810,3.582]],["title/classes/EmojiReactionDto.html",[0,0.261,807,3.045]],["body/classes/EmojiReactionDto.html",[0,0.446,2,1.055,3,0.107,4,0.096,5,0.084,7,0.575,8,1.024,12,0.71,13,0.008,14,1.15,15,1.534,16,3.367,21,0.731,27,0.174,28,1.664,29,0.946,31,2.639,34,1.813,36,1.277,40,0.125,53,1.776,80,2.585,123,2.645,134,0.825,168,1.486,177,0.007,178,0.007,215,2.075,428,4.807,448,4.402,497,2.187,685,2.279,797,4.066,798,5.906,800,4.807,801,6.532,802,5.166,803,5.166,804,5.166,805,4.521,806,5.166,807,5.197,808,4.888,809,3.693,810,4.367,1604,6.374,1605,6.374,1606,6.374,1607,6.374,1608,6.374,1609,6.374]],["title/injectables/EventQueueService.html",[406,0.8,1610,2.9]],["body/injectables/EventQueueService.html",[0,0.339,3,0.099,4,0.088,5,0.078,7,0.531,8,0.974,12,0.739,13,0.008,21,0.739,27,0.165,40,0.11,70,2.827,96,1.918,134,0.705,177,0.006,178,0.006,183,2.4,185,1.975,193,2.007,214,1.876,215,1.578,216,1.513,224,0.815,243,2.347,244,2.884,245,2.698,262,4.767,289,2.06,301,2.017,303,1.646,406,1.3,407,2.206,437,4.173,483,2.649,524,2.727,531,2.727,588,1.756,636,3.764,652,3.083,667,3.237,680,4.223,690,3.953,745,6.435,757,4.505,758,3.625,818,5.966,1610,4.711,1611,4.437,1612,6.824,1613,7.361,1614,7.361,1615,7.361,1616,7.678,1617,5.883,1618,7.361,1619,7.361,1620,5.883,1621,5.966,1622,5.883,1623,7.116,1624,5.883,1625,5.883,1626,5.883,1627,5.21,1628,5.883,1629,4.711,1630,5.883,1631,5.883,1632,5.883,1633,5.883,1634,7.361,1635,4.767,1636,5.883,1637,4.767,1638,5.883,1639,5.883,1640,5.883,1641,5.21,1642,5.883,1643,5.883,1644,5.883,1645,5.883,1646,5.883,1647,5.883,1648,4.767]],["title/classes/FollowersAndFollowing.html",[0,0.261,1649,2.66]],["body/classes/FollowersAndFollowing.html",[0,0.506,2,0.785,3,0.08,4,0.071,5,0.063,7,0.428,8,0.847,12,0.811,13,0.008,14,1.504,15,1.178,21,0.561,27,0.174,28,1.817,29,0.703,30,3.01,32,2.489,33,2.594,34,1.965,35,2.597,36,0.949,37,2.237,39,1.415,40,0.128,42,1.145,47,2.843,51,2.287,53,1.894,54,2.718,55,2.086,64,1.581,66,1.415,85,1.818,100,2.138,101,2.287,104,1.655,105,1.735,132,1.446,134,0.805,168,1.489,177,0.005,178,0.005,462,1.617,484,3.252,497,1.245,511,2.654,707,1.916,708,3.004,829,3.985,831,3.914,905,2.491,1050,3.565,1051,3.054,1065,2.579,1079,2.676,1114,2.334,1148,3.94,1156,2.491,1212,2.409,1391,2.676,1393,2.676,1395,3.611,1397,2.676,1398,2.676,1399,2.676,1400,2.676,1401,2.9,1579,2.9,1649,5.212,1650,2.9,1651,4.739,1652,4.197,1653,4.739,1654,4.334,1655,2.9,1656,5.004,1657,4.55,1658,4.55,1659,3.033,1660,4.55,1661,2.782,1662,3.033,1663,3.033,1664,3.611,1665,3.033,1666,2.579,1667,3.033,1668,3.033,1669,4.633,1670,2.782,1671,3.033,1672,3.755,1673,3.033,1674,3.033,1675,3.033,1676,3.033,1677,3.033]],["title/controllers/GenresController.html",[179,1.985,1678,3.045]],["body/controllers/GenresController.html",[0,0.375,3,0.11,4,0.098,5,0.086,7,0.588,12,0.743,13,0.008,15,1.199,21,0.571,27,0.189,29,0.965,30,2.612,40,0.098,53,1.86,85,1.388,109,1.25,134,0.737,177,0.007,178,0.007,179,2.85,181,2.701,183,2.554,185,2.254,193,2.867,224,0.902,230,5.907,231,5.263,245,1.985,246,4.373,272,6.348,303,1.821,412,4.616,478,4.616,481,3.982,588,2.338,835,6.185,1670,5.462,1678,5.263,1679,5.764,1680,7.723,1681,6.508,1682,6.508,1683,7.832,1684,7.832,1685,7.832,1686,7.832,1687,6.508,1688,6.508,1689,5.141,1690,5.764,1691,6.508,1692,6.508,1693,6.508]],["title/modules/GenresModule.html",[306,0.817,323,2.9]],["body/modules/GenresModule.html",[0,0.392,3,0.115,4,0.102,5,0.09,13,0.008,27,0.199,40,0.102,177,0.007,178,0.007,181,3.337,224,0.943,306,1.544,308,2.169,309,2.218,310,2.376,311,2.376,312,2.269,313,2.922,314,2.321,323,5.961,326,3.608,337,2.808,338,2.376,339,2.218,341,3.016,346,3.063,1678,5.753,1689,5.601,1690,6.025,1694,6.025,1695,6.802,1696,6.025,1697,6.802,1698,6.802]],["title/injectables/GenresService.html",[406,0.8,1689,2.773]],["body/injectables/GenresService.html",[0,0.39,3,0.114,4,0.102,5,0.089,7,0.611,12,0.577,13,0.008,21,0.703,27,0.18,40,0.102,134,0.703,177,0.007,178,0.007,183,2.614,185,2.291,193,2.309,214,2.158,215,1.815,216,1.74,224,0.938,243,1.977,245,2.065,301,2.34,302,3.137,303,1.894,406,1.416,407,2.538,481,4.141,487,2.257,583,3.241,584,3.014,588,2.393,617,2.667,854,5.484,976,2.601,1355,5.104,1680,7.823,1689,4.906,1699,5.994,1700,6.767,1701,6.767,1702,6.767,1703,6.767,1704,6.767,1705,6.767]],["title/classes/GenresWithCount.html",[0,0.261,1660,2.66]],["body/classes/GenresWithCount.html",[0,0.506,2,0.785,3,0.08,4,0.071,5,0.063,7,0.428,8,0.847,12,0.811,13,0.008,14,1.504,15,1.179,21,0.562,27,0.174,28,1.817,29,0.704,30,3.011,32,2.49,33,2.594,34,1.965,35,2.597,36,0.95,37,2.08,39,1.416,40,0.128,42,1.146,47,2.844,51,2.288,53,1.894,54,2.719,55,2.087,64,1.582,66,1.416,85,1.849,100,2.139,101,2.288,104,1.657,105,1.737,132,1.447,134,0.812,168,1.49,177,0.005,178,0.005,462,1.619,484,3.254,497,1.246,511,2.656,707,1.918,708,3.005,829,3.987,831,3.916,905,2.493,1050,3.567,1051,3.056,1065,2.582,1079,2.678,1114,2.336,1148,3.942,1156,2.493,1212,2.412,1391,2.678,1393,2.678,1395,3.614,1397,2.678,1398,2.678,1399,2.678,1400,2.678,1401,2.903,1579,2.903,1649,5.158,1650,2.903,1654,4.335,1655,2.903,1656,5.005,1657,4.552,1658,4.552,1659,3.035,1660,4.753,1661,2.785,1662,3.035,1663,3.035,1664,3.614,1665,3.035,1666,2.582,1667,3.035,1668,3.035,1669,4.635,1670,2.785,1671,3.035,1672,3.757,1673,3.035,1674,3.035,1675,3.035,1676,3.035,1677,3.035,1706,4.743,1707,4.201,1708,4.743]],["title/modules/ImageModule.html",[306,0.817,324,3.045]],["body/modules/ImageModule.html",[0,0.399,3,0.117,4,0.104,5,0.091,13,0.008,27,0.182,40,0.104,177,0.007,178,0.007,224,0.96,306,1.556,308,2.209,309,2.259,310,2.419,311,2.419,312,2.31,313,2.944,314,2.944,324,6.234,337,2.839,338,2.419,339,2.259,1709,6.136,1710,6.136,1711,6.136,1712,6.739,1713,6.927,1714,6.927]],["title/injectables/ImageService.html",[406,0.8,1712,3.214]],["body/injectables/ImageService.html",[0,0.337,3,0.099,4,0.088,5,0.077,7,0.529,12,0.626,13,0.008,14,1.446,21,0.644,23,3.215,27,0.165,40,0.088,53,1.566,109,1.41,134,0.644,177,0.006,178,0.006,183,2.394,185,2.151,193,2.869,214,2.341,215,1.969,216,1.888,224,0.812,270,5.653,274,5.187,277,5.187,289,1.639,298,2.045,303,1.639,392,3.748,406,1.296,407,2.197,588,2.191,902,3.935,976,2.251,1015,6.429,1026,4.492,1090,6.048,1641,7.668,1712,5.207,1715,5.187,1716,7.341,1717,7.341,1718,7.341,1719,8.243,1720,8.658,1721,5.856,1722,5.772,1723,8.406,1724,8.658,1725,7.341,1726,8.406,1727,4.933,1728,4.698,1729,7.341,1730,5.856,1731,8.406,1732,6.502,1733,5.856,1734,7.341,1735,7.341,1736,5.856,1737,5.856,1738,7.341,1739,5.856,1740,5.187,1741,5.856,1742,5.856,1743,5.856,1744,5.856,1745,5.856,1746,5.856]],["title/classes/InternalError.html",[0,0.261,1747,3.673]],["body/classes/InternalError.html",[0,0.411,2,1.18,3,0.12,4,0.107,5,0.094,12,0.607,13,0.008,21,0.625,40,0.107,134,0.766,177,0.007,178,0.007,214,2.272,215,1.911,216,1.832,243,2.081,667,3.176,809,3.402,1747,7.073,1748,7.318,1749,5.774,1750,4.497,1751,7.318,1752,6.31,1753,6.31,1754,6.31]],["title/classes/JoinsCount.html",[0,0.261,86,1.985]],["body/classes/JoinsCount.html",[0,0.507,1,2.515,2,0.519,3,0.053,4,0.047,5,0.041,6,1.412,7,0.283,8,1.129,9,2.203,10,2.203,11,2.203,12,0.812,13,0.008,14,1.717,15,0.876,17,2.662,18,3.193,19,3.386,21,0.417,23,2.082,25,2.203,27,0.144,28,1.81,29,0.465,30,2.784,31,1.622,32,2.638,33,2.514,34,1.035,35,2.527,36,0.628,37,1.54,38,1.205,39,0.936,40,0.13,41,1.373,42,2.11,43,2.662,44,2.207,45,2.662,46,2.662,47,2.784,48,3.683,49,2.586,50,2.662,51,3.077,52,1.453,53,1.988,54,1.831,55,2.09,56,1.453,57,2.203,58,1.453,59,1.412,60,2.203,61,1.453,62,2.807,63,3.495,64,2.746,65,1.453,66,2.547,67,1.453,68,2.662,69,2.203,70,2.09,71,1.453,72,1.336,73,1.453,74,2.807,75,2.203,76,1.336,77,3.102,78,1.412,79,1.336,80,2.418,81,1.453,82,3.655,83,3.361,84,1.373,85,1.756,86,2.807,87,2.515,88,2.662,89,2.662,90,2.807,91,2.662,92,1.373,93,1.453,94,2.586,95,2.971,96,1.55,97,2.971,98,2.971,99,1.453,100,1.172,101,2.291,102,1.453,103,1.453,104,1.66,105,1.74,106,1.453,107,1.453,108,1.336,109,0.913,110,1.453,111,1.453,112,2.203,113,2.203,114,1.453,115,1.453,116,1.453,117,1.235,118,1.412,119,1.453,120,2.515,121,2.807,122,2.591,123,2.383,124,2.203,125,1.453,126,1.453,127,1.412,128,1.453,129,3.548,130,1.55,131,1.719,132,2.367,133,1.373,134,0.417,135,1.412,136,1.336,137,2.082,138,1.453,139,3.193,140,2.141,141,3.193,142,3.193,143,1.412,144,1.453,145,1.453,146,1.453,147,2.807,148,1.453,149,1.453,150,2.203,151,2.203,152,2.203,153,2.141,154,2.203,155,2.203,156,1.453,157,1.453,158,1.453,159,2.807,160,1.453,161,1.453,162,2.203,163,1.453,164,1.453,165,2.807,166,1.453,167,2.662,168,0.913,169,2.203,170,2.203,171,1.453,172,1.373,173,3.361,174,2.203,175,2.141,176,2.203,177,0.004,178,0.004,1114,2.341,1755,3.134,1756,3.134]],["title/classes/JoinsPerDay.html",[0,0.261,87,1.985]],["body/classes/JoinsPerDay.html",[0,0.507,1,2.522,2,0.521,3,0.053,4,0.047,5,0.042,6,1.418,7,0.284,8,1.13,9,2.211,10,2.211,11,2.211,12,0.812,13,0.008,14,1.716,17,2.669,18,3.2,19,3.391,21,0.419,23,2.089,25,2.211,27,0.144,28,1.811,29,0.467,30,2.787,31,1.628,32,2.64,33,2.516,34,1.039,35,2.529,36,0.631,37,1.545,38,1.211,39,0.94,40,0.13,41,1.379,42,2.112,43,2.669,44,2.214,45,2.669,46,2.669,47,2.706,48,3.688,49,2.594,50,2.669,51,3.08,52,1.46,53,1.989,54,1.836,55,2.095,56,1.46,57,2.211,58,1.46,59,1.418,60,2.211,61,1.46,62,2.813,63,3.5,64,2.749,65,1.46,66,2.549,67,1.46,68,2.669,69,2.211,70,2.095,71,1.46,72,1.342,73,1.46,74,2.813,75,2.211,76,1.342,77,3.109,78,1.418,79,1.342,80,2.32,81,1.46,82,3.659,83,2.978,84,1.379,85,1.758,86,3.023,87,2.813,88,3.2,89,3.2,90,2.813,91,2.669,92,1.379,93,1.46,94,2.594,95,2.978,96,1.556,97,2.978,98,2.978,99,1.46,100,1.177,101,2.297,102,1.46,103,1.46,104,1.666,105,1.747,106,1.46,107,1.46,108,1.342,109,0.917,110,1.46,111,1.46,112,2.211,113,2.211,114,1.46,115,1.46,116,1.46,117,1.241,118,1.418,119,1.46,120,2.522,121,2.813,122,2.597,123,2.39,124,2.211,125,1.46,126,1.46,127,1.418,128,1.46,129,3.552,130,1.556,131,1.723,132,2.371,133,1.379,134,0.419,135,1.418,136,1.342,137,2.089,138,1.46,139,3.2,140,2.148,141,3.2,142,3.2,143,1.418,144,1.46,145,1.46,146,1.46,147,2.813,148,1.46,149,1.46,150,2.211,151,2.211,152,2.211,153,2.148,154,2.211,155,2.211,156,1.46,157,1.46,158,1.46,159,2.813,160,1.46,161,1.46,162,2.211,163,1.46,164,1.46,165,2.813,166,1.46,167,2.669,168,0.917,169,2.211,170,2.211,171,1.46,172,1.379,173,3.367,174,2.211,175,2.148,176,2.211,177,0.004,178,0.004,1757,3.149,1758,3.149]],["title/injectables/JwtAuthGuard.html",[240,3.045,406,0.8]],["body/injectables/JwtAuthGuard.html",[0,0.417,3,0.122,4,0.109,5,0.095,13,0.008,27,0.187,40,0.109,177,0.007,178,0.007,224,1.002,240,5.6,406,1.472,407,2.713,549,4.628,1750,4.536,1759,5.861,1760,6.405,1761,8.334,1762,7.232]],["title/injectables/JwtStrategy.html",[406,0.8,543,3.214]],["body/injectables/JwtStrategy.html",[0,0.376,3,0.11,4,0.098,5,0.086,7,0.588,12,0.555,13,0.008,21,0.688,27,0.196,40,0.098,109,1.252,131,1.748,177,0.007,178,0.007,183,2.556,185,2.255,193,2.224,214,2.078,215,1.748,216,1.676,224,0.903,243,2.456,289,1.823,293,3.547,298,2.276,301,2.147,302,3.633,406,1.384,407,2.444,422,3.209,462,2.224,463,3.425,475,3.743,476,3.679,501,3.547,543,5.56,549,4.17,556,4.378,557,5.281,559,3.547,588,2.34,1750,4.266,1763,5.771,1764,6.942,1765,6.942,1766,6.516,1767,7.838,1768,6.516,1769,5.771,1770,6.516,1771,5.281,1772,5.771,1773,8.723,1774,5.281,1775,6.516,1776,6.516,1777,6.516,1778,6.516,1779,6.516,1780,6.516,1781,6.516]],["title/classes/LinksWithCount.html",[0,0.261,1658,2.66]],["body/classes/LinksWithCount.html",[0,0.506,2,0.786,3,0.08,4,0.071,5,0.063,7,0.429,8,0.848,12,0.811,13,0.008,14,1.505,15,1.18,21,0.562,27,0.174,28,1.817,29,0.704,30,2.989,32,2.491,33,2.595,34,1.966,35,2.597,36,0.951,37,2.08,39,1.417,40,0.128,42,1.547,47,2.844,51,2.289,53,1.894,54,2.719,55,2.088,64,1.583,66,1.417,85,1.819,100,2.139,101,2.289,104,1.658,105,1.738,132,1.448,134,0.805,168,1.49,177,0.005,178,0.005,462,1.62,484,3.256,497,1.247,511,2.657,707,1.92,708,3.007,829,3.988,831,3.918,905,2.496,1050,3.568,1051,3.058,1065,2.584,1079,3.616,1114,2.338,1148,3.944,1156,2.496,1212,2.414,1391,2.681,1393,2.681,1395,3.616,1397,2.681,1398,2.681,1399,2.681,1400,2.681,1401,2.905,1579,2.905,1649,5.159,1650,2.905,1654,4.336,1655,2.905,1656,5.006,1657,4.553,1658,4.754,1659,4.098,1660,4.553,1661,2.787,1662,3.038,1663,3.038,1664,3.616,1665,3.038,1666,2.584,1667,3.038,1668,3.038,1669,4.637,1670,2.787,1671,3.038,1672,3.759,1673,3.038,1674,3.038,1675,3.038,1676,3.038,1677,3.038,1782,4.748,1783,4.748,1784,4.748]],["title/classes/LiveChatMessageDto.html",[0,0.261,814,3.045]],["body/classes/LiveChatMessageDto.html",[0,0.482,2,1.066,3,0.108,4,0.097,5,0.085,7,0.581,8,1.03,12,0.779,13,0.008,15,1.639,21,0.78,27,0.195,28,1.709,29,0.955,31,2.655,33,2.273,34,1.892,35,2.224,36,1.29,37,2.33,39,1.921,40,0.097,80,2.322,134,0.793,177,0.007,178,0.007,216,2.001,707,3.381,814,5.228,829,3.831,1129,3.766,1203,6.777,1206,6.307,1274,4.565,1365,6.777,1526,7.406,1785,5.701,1786,5.216,1787,6.436,1788,6.436,1789,6.436,1790,6.436,1791,5.701,1792,6.436]],["title/modules/LiveModule.html",[306,0.817,325,2.9]],["body/modules/LiveModule.html",[0,0.332,3,0.097,4,0.086,5,0.076,13,0.008,27,0.208,40,0.086,177,0.006,178,0.006,224,0.798,306,1.435,308,1.837,309,1.878,310,2.012,311,2.012,312,1.921,313,2.716,314,2.716,321,4.078,322,4.332,325,6.132,329,5.383,335,4.967,337,2.537,338,2.012,339,1.878,341,2.725,347,4.668,349,5.102,350,3.525,351,2.27,352,3.253,353,3.382,354,2.214,355,3.028,726,5.164,1220,5.682,1228,4.668,1326,5.153,1610,5.629,1793,5.102,1794,5.102,1795,5.102,1796,5.102,1797,5.383,1798,5.942,1799,6.409,1800,5.629,1801,5.76,1802,7.265,1803,5.76,1804,5.76,1805,5.76,1806,5.76,1807,5.76,1808,5.76]],["title/injectables/LiveService.html",[406,0.8,1800,2.9]],["body/injectables/LiveService.html",[0,0.248,3,0.073,4,0.065,5,0.057,13,0.008,14,0.776,21,0.378,27,0.193,40,0.065,55,1.404,64,2.297,66,2.671,70,2.427,80,2.055,85,0.918,96,1.404,109,1.151,132,2.271,134,0.378,137,2.623,177,0.005,178,0.005,185,1.606,224,0.597,243,2.011,244,2.427,245,1.827,263,3.813,283,4.627,289,2.439,301,2.434,303,1.927,370,4.517,406,1.057,407,1.615,487,2.297,497,1.131,511,1.786,524,1.996,558,1.576,652,2.193,685,1.539,707,2.784,757,2.634,769,4.418,777,3.247,785,5.583,808,2.527,976,2.647,1014,4.042,1195,3.148,1276,2.893,1277,3.054,1278,3.489,1472,3.489,1664,2.431,1719,3.813,1800,3.832,1809,3.813,1810,4.305,1811,6.099,1812,6.886,1813,4.305,1814,4.517,1815,4.305,1816,3.832,1817,3.054,1818,3.813,1819,4.214,1820,3.813,1821,5.988,1822,5.988,1823,4.305,1824,4.305,1825,4.305,1826,4.305,1827,3.813,1828,2.755,1829,5.304,1830,4.305,1831,5.304,1832,4.305,1833,3.813,1834,4.853,1835,5.988,1836,4.305,1837,3.813,1838,4.305,1839,6.099,1840,6.93,1841,3.813,1842,4.305,1843,4.305,1844,4.305,1845,4.305,1846,4.305,1847,7.622,1848,5.988,1849,6.886,1850,5.304,1851,4.305,1852,4.305,1853,4.305,1854,6.886,1855,5.988,1856,4.305,1857,4.305,1858,4.517,1859,4.305,1860,3.813,1861,4.305,1862,4.305,1863,4.305,1864,4.305,1865,6.886,1866,4.305,1867,5.988,1868,4.305,1869,2.893,1870,3.813,1871,2.634,1872,4.305,1873,4.305,1874,3.813,1875,4.305,1876,4.305,1877,4.305,1878,4.305,1879,4.305,1880,4.305,1881,4.305,1882,4.305,1883,3.813,1884,5.304,1885,4.305,1886,6.886,1887,4.305,1888,4.305,1889,4.305,1890,4.305,1891,3.247,1892,4.305,1893,3.813,1894,4.305,1895,5.988,1896,4.305,1897,4.305,1898,4.305,1899,4.305,1900,4.305,1901,4.305,1902,4.305,1903,4.305]],["title/injectables/LocalStrategy.html",[406,0.8,544,3.214]],["body/injectables/LocalStrategy.html",[0,0.375,3,0.109,4,0.098,5,0.086,7,0.587,12,0.667,13,0.008,21,0.687,27,0.2,40,0.098,109,1.249,134,0.795,168,1.504,177,0.007,178,0.007,183,2.552,185,2.252,193,2.218,198,3.977,214,2.496,215,2.099,216,2.013,224,0.901,243,1.899,301,1.781,303,1.819,406,1.382,407,2.438,421,3.977,462,2.671,473,4.199,476,3.67,481,3.977,544,5.551,549,4.159,588,2.336,602,6.182,611,4.61,612,4.61,614,4.159,615,4.367,616,4.367,1750,4.26,1764,6.932,1765,7.438,1769,5.757,1771,5.268,1772,5.757,1774,5.268,1904,5.757,1905,6.5,1906,6.5,1907,6.5,1908,6.5,1909,5.757,1910,6.5]],["title/classes/LoginBody.html",[0,0.261,417,2.9]],["body/classes/LoginBody.html",[0,0.406,2,0.547,3,0.056,4,0.05,5,0.044,7,0.298,8,0.655,12,0.505,13,0.008,14,1.069,15,0.609,16,1.336,21,0.29,27,0.184,28,1.421,29,0.49,34,1.611,36,0.662,40,0.111,42,0.798,53,1.503,54,1.891,85,1.055,96,1.613,100,1.22,109,1.622,131,1.59,134,0.818,168,1.693,177,0.004,178,0.004,179,1.447,185,2.115,198,3.628,218,3.117,219,2.115,224,0.458,243,0.966,244,2.501,245,1.008,259,4.204,268,2.228,286,2.023,289,2.534,293,1.799,298,3.151,301,2.528,302,3.555,303,2.298,344,1.628,379,1.866,394,2.693,406,0.874,417,3.166,421,4.313,422,4.31,424,4.206,445,2.115,449,2.693,451,2.345,459,2.115,462,2.987,463,4.316,464,2.345,473,1.532,474,3.984,475,3.366,487,2.196,488,1.866,490,2.221,492,3.509,497,2.071,501,3.583,508,2.345,516,4.971,517,1.578,524,3.051,531,3.051,558,2.581,559,4.47,563,3.015,565,4.239,567,2.221,568,5,569,4.343,570,2.493,571,5,572,5.948,573,2.345,574,2.493,578,2.493,580,2.493,582,3.015,583,2,584,1.688,588,2.354,591,2.493,592,2.493,594,2.493,596,2.493,599,2.493,602,4.206,605,4.472,609,4.472,610,3.732,611,2.345,612,2.345,613,2.493,614,2.115,615,2.221,616,2.221,617,1.303,618,2,619,1.447,620,1.866,621,2.493,622,2.345,623,2.493,624,2.493,625,2.493,626,2.493,627,2.493,628,1.94,629,2.493,630,2.493,631,2.493,632,2.493,633,2.493,634,2.794,635,1.94,636,2.115,637,2.345,638,2.345,639,3.509,640,2.794,641,3.324,642,3.509,643,3.509,644,5.58,645,2.493,646,2.345,647,3.864,648,2.493,649,2.221,650,2.493,651,2.493,652,1.21,653,2.345,654,3.166,655,2.493,656,2.493,657,2.493,658,2.493,659,2.493,660,3.732,661,2.493,662,3.717,663,3.732,664,5.316,665,2.493,666,2.493,667,2.279,668,3.732,669,2.493,670,3.348,671,2.493,672,2.493,673,1.628,674,1.94,675,3.267,676,2.904,677,4.423,678,1.94,679,1.94,680,1.737,681,1.94,682,5.059,683,3.481,684,2.904,685,2.12,686,1.94,687,3.732,688,2.493,689,2.493,690,2.221,691,2.023,692,2.515,693,3.732,694,3.732,695,3.732,696,2.345,697,2.493,698,2.493,699,2.493,700,2.601,701,2.345,702,2.493,703,2.221,704,2.345,705,2.493,706,2.345,707,1.336,708,1.372,709,2.493,710,2.493,711,2.221,712,2.515,713,3.732,714,3.732,715,2.493,716,2.493,717,3.481,718,2.493,719,2.493,720,2.493,721,2.493,722,2.493,723,2.493,724,2.493,725,2.493,1911,3.305,1912,3.305]],["title/classes/MessagesPerHour.html",[0,0.261,120,1.985]],["body/classes/MessagesPerHour.html",[0,0.507,1,2.515,2,0.519,3,0.053,4,0.047,5,0.041,6,1.412,7,0.283,8,1.129,9,2.203,10,2.203,11,2.203,12,0.812,13,0.008,14,1.717,15,0.876,17,2.662,18,3.193,19,3.386,21,0.417,23,2.082,25,2.203,27,0.144,28,1.81,29,0.465,30,2.784,31,1.622,32,2.638,33,2.514,34,1.035,35,2.527,36,0.628,37,1.54,38,1.205,39,0.936,40,0.13,41,1.373,42,2.11,43,2.662,44,2.207,45,2.662,46,2.662,47,2.784,48,3.683,49,2.586,50,2.662,51,3.077,52,1.453,53,1.988,54,1.831,55,2.09,56,1.453,57,2.203,58,1.453,59,1.412,60,2.203,61,1.453,62,2.807,63,3.495,64,2.746,65,1.453,66,2.547,67,1.453,68,2.662,69,2.203,70,2.09,71,1.453,72,1.336,73,1.453,74,2.807,75,2.203,76,1.336,77,3.393,78,1.412,79,1.336,80,2.418,81,1.453,82,3.655,83,2.971,84,1.373,85,1.756,86,2.515,87,2.515,88,2.662,89,2.662,90,2.807,91,2.662,92,1.373,93,1.453,94,2.586,95,2.971,96,1.55,97,2.971,98,2.971,99,1.453,100,1.172,101,2.291,102,1.453,103,1.453,104,1.66,105,1.74,106,1.453,107,1.453,108,1.336,109,0.913,110,1.453,111,1.453,112,2.203,113,2.203,114,1.453,115,1.453,116,1.453,117,1.235,118,1.412,119,1.453,120,2.807,121,2.807,122,2.591,123,2.383,124,2.203,125,1.453,126,1.453,127,1.412,128,1.453,129,3.548,130,1.55,131,1.719,132,2.367,133,1.373,134,0.417,135,1.412,136,1.336,137,2.082,138,1.453,139,3.193,140,2.141,141,3.193,142,3.193,143,1.412,144,1.453,145,1.453,146,1.453,147,2.807,148,1.453,149,1.453,150,2.203,151,2.203,152,2.203,153,2.141,154,2.203,155,2.203,156,1.453,157,1.453,158,1.453,159,2.807,160,1.453,161,1.453,162,2.203,163,1.453,164,1.453,165,2.807,166,1.453,167,2.662,168,0.913,169,2.203,170,2.203,171,1.453,172,1.373,173,3.361,174,2.203,175,2.141,176,2.203,177,0.004,178,0.004,1114,2.341,1913,3.134,1914,3.134]],["title/modules/MockConfigModule.html",[306,0.817,1915,3.214]],["body/modules/MockConfigModule.html",[0,0.269,3,0.051,4,0.046,5,0.04,8,0.617,13,0.008,21,0.268,27,0.213,40,0.133,70,2.063,109,1.709,134,0.409,168,0.896,177,0.004,178,0.004,180,2.984,181,3.099,183,1.52,185,2.386,200,1.956,203,2.305,224,0.424,225,2.737,234,2.168,235,2.053,236,2.853,238,3.517,239,2.168,289,0.855,298,1.067,301,1.733,303,2.489,306,1.141,307,1.956,308,0.974,309,0.996,310,1.067,311,1.067,312,1.019,313,3.072,314,2.923,318,3.908,319,3.871,320,2.853,321,3.793,322,3.791,323,1.956,325,3.618,326,2.493,327,3.714,329,3.871,330,3.618,331,2.984,332,1.956,333,4.217,334,3.714,335,3.846,336,2.984,337,1.628,338,1.067,339,0.996,341,3.303,342,2.477,344,1.505,346,1.376,351,1.838,352,1.726,354,1.792,355,1.606,359,4.487,360,1.663,363,2.168,364,2.305,365,2.984,366,2.305,378,2.305,379,1.726,380,2.305,383,2.477,384,2.477,396,2.305,397,2.305,398,3.133,400,2.053,402,1.87,404,3.517,410,3.133,473,3.328,487,1.555,542,3.871,546,3.133,548,3.779,549,1.956,550,2.477,551,2.305,556,3.799,562,2.477,563,1.554,564,2.477,565,1.606,566,2.477,582,4.092,584,2.45,588,2.655,617,1.204,726,3.999,730,3.618,738,4.048,739,3.799,743,2.477,842,3.068,844,1.606,851,3.618,1192,3.06,1193,2.984,1196,1.663,1220,3.871,1225,3.319,1243,3.871,1342,2.984,1389,2.305,1610,2.984,1629,5.692,1678,3.133,1689,2.853,1797,1.87,1798,4.048,1799,4.01,1800,2.984,1816,3.618,1915,6.077,1916,2.707,1917,2.707,1918,2.168,1919,2.168,1920,2.305,1921,2.707,1922,2.707,1923,5.415,1924,4.771,1925,4.771,1926,2.707,1927,2.707,1928,2.707,1929,2.707,1930,2.707,1931,2.305,1932,2.707,1933,2.707,1934,2.972,1935,2.707,1936,2.707,1937,2.707,1938,3.46,1939,2.707,1940,2.707,1941,3.517,1942,2.707,1943,2.707,1944,3.799,1945,2.707,1946,3.517,1947,2.707,1948,2.707,1949,2.707,1950,2.168,1951,2.707,1952,2.707,1953,2.707,1954,2.707,1955,2.707,1956,2.707,1957,2.984,1958,2.707,1959,2.707,1960,2.053,1961,2.707,1962,2.451,1963,2.707,1964,2.707,1965,2.707,1966,2.707,1967,2.707,1968,3.46,1969,2.707,1970,3.133,1971,2.707,1972,2.707,1973,2.707,1974,2.707,1975,2.707,1976,2.707,1977,2.707,1978,4.359,1979,2.707,1980,2.707,1981,4.01,1982,2.707,1983,4.13,1984,4.771,1985,2.477,1986,2.707,1987,7.588,1988,7.248,1989,6.17,1990,2.305,1991,7.878,1992,2.707,1993,7.878,1994,2.305,1995,2.305,1996,2.305,1997,5.093,1998,5.603,1999,5.603,2000,3.779,2001,3.307,2002,2.305,2003,2.305,2004,2.305,2005,2.305,2006,2.305,2007,2.305,2008,2.305,2009,2.305,2010,2.305,2011,2.305,2012,2.305,2013,2.305,2014,2.305,2015,2.305,2016,2.305,2017,2.305,2018,2.305]],["title/modules/MockPrismaModule.html",[306,0.817,1989,3.214]],["body/modules/MockPrismaModule.html",[0,0.269,3,0.051,4,0.046,5,0.04,8,0.617,13,0.008,21,0.268,27,0.213,40,0.133,70,2.063,109,1.709,134,0.409,168,0.896,177,0.004,178,0.004,180,2.984,181,3.099,183,1.52,185,2.386,200,1.956,203,2.305,224,0.424,225,2.737,234,2.168,235,2.053,236,2.853,238,3.517,239,2.168,289,0.855,298,1.067,301,1.733,303,2.489,306,1.141,307,1.956,308,0.974,309,0.996,310,1.067,311,1.067,312,1.019,313,3.072,314,2.923,318,3.908,319,3.871,320,2.853,321,3.793,322,3.791,323,1.956,325,3.618,326,2.493,327,3.714,329,3.871,330,3.618,331,2.984,332,1.956,333,4.217,334,3.714,335,3.846,336,2.984,337,1.628,338,1.067,339,0.996,341,3.303,342,2.477,344,1.505,346,1.376,351,1.838,352,1.726,354,1.792,355,1.606,359,4.487,360,1.663,363,2.168,364,2.305,365,2.984,366,2.305,378,2.305,379,1.726,380,2.305,383,2.477,384,2.477,396,2.305,397,2.305,398,3.133,400,2.053,402,1.87,404,3.517,410,3.133,473,3.328,487,1.555,542,3.871,546,3.133,548,3.779,549,1.956,550,2.477,551,2.305,556,3.799,562,2.477,563,1.554,564,2.477,565,1.606,566,2.477,582,3.463,584,2.793,588,2.655,617,1.204,726,3.999,730,3.618,738,4.048,739,3.799,743,2.477,842,3.068,844,1.606,851,3.618,1192,3.06,1193,2.984,1196,1.663,1220,3.871,1225,3.319,1243,3.871,1342,2.984,1389,2.305,1610,2.984,1629,5.692,1678,3.133,1689,2.853,1797,1.87,1798,4.048,1799,4.01,1800,2.984,1816,3.618,1915,5.805,1918,2.168,1919,2.168,1920,2.305,1921,2.707,1922,2.707,1923,5.415,1924,4.771,1925,4.771,1926,2.707,1927,2.707,1928,2.707,1929,2.707,1930,2.707,1931,2.305,1932,2.707,1933,2.707,1934,2.972,1935,2.707,1936,2.707,1937,2.707,1938,3.46,1939,2.707,1940,2.707,1941,3.517,1942,2.707,1943,2.707,1944,3.799,1945,2.707,1946,3.517,1947,2.707,1948,2.707,1949,2.707,1950,2.168,1951,2.707,1952,2.707,1953,2.707,1954,2.707,1955,2.707,1956,2.707,1957,2.984,1958,2.707,1959,2.707,1960,2.053,1961,2.707,1962,2.451,1963,2.707,1964,2.707,1965,2.707,1966,2.707,1967,2.707,1968,3.46,1969,2.707,1970,3.133,1971,2.707,1972,2.707,1973,2.707,1974,2.707,1975,2.707,1976,2.707,1977,2.707,1978,4.359,1979,2.707,1980,2.707,1981,4.01,1982,2.707,1983,4.13,1984,4.771,1985,2.477,1986,2.707,1987,7.588,1988,7.248,1989,6.309,1990,2.305,1991,7.878,1992,2.707,1993,7.878,1994,2.305,1995,2.305,1996,2.305,1997,5.093,1998,5.603,1999,5.603,2000,3.779,2001,3.307,2002,2.305,2003,2.305,2004,2.305,2005,2.305,2006,2.305,2007,2.305,2008,2.305,2009,2.305,2010,2.305,2011,2.305,2012,2.305,2013,2.305,2014,2.305,2015,2.305,2016,2.305,2017,2.305,2018,2.305,2019,2.707,2020,2.707]],["title/injectables/MyLogger.html",[336,2.9,406,0.8]],["body/injectables/MyLogger.html",[0,0.333,3,0.134,4,0.087,5,0.076,7,0.522,8,0.964,12,0.735,13,0.008,21,0.773,27,0.163,40,0.087,134,0.83,177,0.006,178,0.006,183,2.374,193,2.943,214,2.75,215,2.313,216,2.218,224,0.801,244,2.599,245,2.431,270,5.1,289,2.464,336,4.659,394,3.962,406,1.285,407,2.168,483,2.603,667,3.216,757,5.277,758,2.846,766,4.359,809,4.118,1612,6.459,2021,5.119,2022,7.28,2023,7.28,2024,7.28,2025,7.28,2026,5.779,2027,7.28,2028,8.366,2029,5.779,2030,7.28,2031,5.779,2032,7.28,2033,5.779,2034,7.28,2035,5.779,2036,7.97,2037,8.366,2038,7.28,2039,7.28,2040,7.97,2041,7.28,2042,8.366,2043,8.366,2044,7.28,2045,7.28,2046,5.779,2047,7.28,2048,5.119,2049,5.779,2050,5.779,2051,5.779,2052,5.779,2053,5.779]],["title/classes/ParticipantsPerHourDto.html",[0,0.261,74,1.985]],["body/classes/ParticipantsPerHourDto.html",[0,0.506,1,2.506,2,0.516,3,0.053,4,0.047,5,0.041,6,1.404,7,0.281,8,1.128,9,2.194,10,2.194,11,2.194,12,0.812,13,0.008,14,1.717,15,0.872,16,1.914,17,2.653,18,3.186,19,3.381,21,0.415,23,2.073,25,2.194,27,0.143,28,1.81,29,0.462,30,2.781,31,1.616,32,2.636,33,2.512,34,1.031,35,2.525,36,0.625,37,1.535,38,1.198,39,0.931,40,0.13,41,1.365,42,2.108,43,2.653,44,2.2,45,2.653,46,2.653,47,2.814,48,3.678,49,2.578,50,2.653,51,3.074,52,1.445,53,1.987,54,1.825,55,2.084,56,1.445,57,2.194,58,1.445,59,1.404,60,2.194,61,1.445,62,2.799,63,3.489,64,2.743,65,1.445,66,2.567,67,1.445,68,2.653,69,2.194,70,2.084,71,1.445,72,1.329,73,1.445,74,3.01,75,2.653,76,2.017,77,3.259,78,2.132,79,2.017,80,2.368,81,2.653,82,3.651,83,2.963,84,1.365,85,1.754,86,2.506,87,2.506,88,2.653,89,2.653,90,2.799,91,2.653,92,1.365,93,1.445,94,2.578,95,2.963,96,1.544,97,2.963,98,2.963,99,1.445,100,1.168,101,2.285,102,1.445,103,1.445,104,1.653,105,1.733,106,1.445,107,1.445,108,1.329,109,0.91,110,1.445,111,1.445,112,2.194,113,2.194,114,1.445,115,1.445,116,1.445,117,1.229,118,1.404,119,1.445,120,2.506,121,2.799,122,2.584,123,2.375,124,2.194,125,1.445,126,1.445,127,1.404,128,1.445,129,3.543,130,1.544,131,1.714,132,2.364,133,1.365,134,0.415,135,1.404,136,1.329,137,2.073,138,1.445,139,3.186,140,2.132,141,3.186,142,3.186,143,1.404,144,1.445,145,1.445,146,1.445,147,2.799,148,1.445,149,1.445,150,2.194,151,2.194,152,2.194,153,2.132,154,2.194,155,2.194,156,1.445,157,1.445,158,1.445,159,2.799,160,1.445,161,1.445,162,2.194,163,1.445,164,1.445,165,2.799,166,1.445,167,2.653,168,0.91,169,2.194,170,2.194,171,1.445,172,1.365,173,3.354,174,2.194,175,2.132,176,2.194,177,0.004,178,0.004,2054,3.117,2055,3.117,2056,3.117,2057,3.117]],["title/classes/PlaybackEventDto.html",[0,0.261,1814,3.418]],["body/classes/PlaybackEventDto.html",[0,0.417,2,0.946,3,0.096,4,0.086,5,0.075,7,0.516,8,0.957,12,0.794,13,0.008,14,1.503,15,1.643,16,3.206,21,0.782,27,0.178,28,1.687,29,0.848,31,2.467,33,2.112,34,1.912,36,1.145,40,0.086,53,1.691,80,2.158,85,1.691,96,2.717,132,2.622,134,0.814,137,3.649,177,0.006,178,0.006,216,2.258,487,3.119,497,2.257,707,3.206,769,4.082,808,4.655,813,7.024,818,6.753,824,7.381,825,6.404,826,7.115,827,7.024,829,3.905,1129,2.575,1423,4.858,1786,4.633,1814,5.453,1819,4.852,1891,5.981,1893,7.024,2058,5.063,2059,5.717,2060,5.063,2061,5.717,2062,5.717,2063,5.717,2064,5.717,2065,5.717,2066,5.717,2067,7.23,2068,7.23,2069,5.717,2070,5.717]],["title/modules/PrismaModule.html",[306,0.817,326,1.786]],["body/modules/PrismaModule.html",[0,0.391,3,0.114,4,0.102,5,0.089,13,0.008,27,0.192,40,0.102,177,0.007,178,0.007,224,0.94,306,1.543,308,2.163,309,2.212,310,2.369,311,2.369,312,2.263,313,2.918,314,2.918,326,3.691,328,5.854,337,2.804,338,2.369,339,2.212,341,3.012,584,3.235,2071,6.009,2072,6.009,2073,6.785,2074,6.785,2075,6.785,2076,6.785,2077,6.785]],["title/injectables/PrismaService.html",[406,0.8,584,1.546]],["body/injectables/PrismaService.html",[0,0.323,3,0.094,4,0.084,5,0.074,7,0.506,8,0.945,12,0.478,13,0.008,21,0.726,27,0.176,40,0.084,109,1.372,140,2.525,177,0.006,178,0.006,183,2.329,185,2.41,193,2.437,214,1.788,215,1.504,216,1.442,224,0.777,243,1.638,244,2.563,245,2.524,289,1.999,301,2.153,303,2.316,392,3.588,406,1.261,407,2.103,466,5.869,481,3.431,483,2.525,484,3.996,524,2.599,531,2.599,584,2.437,618,2.267,652,2.615,667,3.021,747,3.977,752,7.738,758,2.761,766,4.229,785,3.768,976,2.155,1508,4.966,1612,6.706,1629,3.588,1635,4.544,1637,4.544,1750,3.887,1774,4.544,2078,4.544,2079,7.859,2080,8.736,2081,5.607,2082,5.87,2083,7.142,2084,5.607,2085,5.607,2086,7.142,2087,6.706,2088,5.607,2089,6.24,2090,5.607,2091,5.607,2092,5.607,2093,5.607,2094,5.607,2095,5.607,2096,7.142,2097,5.607,2098,4.966,2099,7.329,2100,4.966,2101,6.326,2102,5.607,2103,5.607,2104,4.966,2105,4.544,2106,4.966,2107,3.292,2108,5.607,2109,4.229,2110,7.329,2111,4.966,2112,6.326,2113,6.326,2114,4.966,2115,4.966,2116,5.607,2117,4.966,2118,5.607,2119,4.966,2120,4.966,2121,5.607,2122,5.607,2123,4.544,2124,4.966,2125,5.607,2126,5.607,2127,4.544,2128,5.607,2129,5.607]],["title/controllers/ProfileController.html",[179,1.985,2130,3.418]],["body/controllers/ProfileController.html",[0,0.237,3,0.151,4,0.062,5,0.054,7,0.371,12,0.788,13,0.008,15,1.47,21,0.7,27,0.191,29,0.609,40,0.062,53,1.879,54,2.544,76,3.107,109,1.533,134,0.747,168,1.777,177,0.005,178,0.005,179,1.799,181,1.704,183,1.889,185,2.413,193,3.006,214,2.544,215,2.284,216,2.052,220,2.411,222,3.329,224,0.569,227,5.441,230,6.185,231,5.51,240,3.893,241,3.638,242,4.696,243,1.2,244,1.889,245,1.768,246,5.362,255,6.467,268,4,272,6.232,273,5.909,286,5.281,301,2.107,303,2.041,402,2.513,412,2.913,427,4.11,437,5.66,448,4.169,462,3.101,473,3.112,475,3.916,478,2.913,511,3.311,588,2.63,667,2.803,1050,2.853,1090,3.098,1568,4.696,1664,3.272,1759,3.329,1931,3.098,2130,4.37,2131,3.638,2132,5.862,2133,5.946,2134,5.132,2135,5.946,2136,6.713,2137,6.713,2138,5.946,2139,4.107,2140,4.107,2141,5.132,2142,5.794,2143,5.794,2144,5.132,2145,5.794,2146,4.107,2147,4.107,2148,4.107,2149,6.713,2150,4.107,2151,4.107,2152,3.638,2153,4.107,2154,4.107,2155,4.107,2156,5.106,2157,4.107,2158,4.107,2159,7.417,2160,5.816,2161,4.107,2162,5.909,2163,7.292,2164,5.794,2165,7.292,2166,4.107,2167,4.107,2168,4.107,2169,4.107,2170,4.107,2171,4.107,2172,5.132,2173,5.794,2174,5.794,2175,4.107,2176,5.794,2177,5.794,2178,6.458,2179,3.329,2180,4.511,2181,3.638,2182,3.638,2183,3.638,2184,4.107,2185,8.2,2186,4.107,2187,6.232,2188,6.232,2189,4.107,2190,5.794,2191,4.696,2192,4.107,2193,6.713,2194,4.107,2195,4.107,2196,4.107,2197,4.107,2198,4.107]],["title/modules/ProfileModule.html",[306,0.817,2199,3.418]],["body/modules/ProfileModule.html",[0,0.351,3,0.103,4,0.091,5,0.08,13,0.008,27,0.209,40,0.091,177,0.006,178,0.006,181,3.12,224,0.844,306,1.472,308,1.941,309,1.985,310,2.126,311,2.126,312,2.03,313,2.784,314,2.784,326,3.515,337,2.626,338,2.126,339,1.985,341,2.82,346,2.741,351,2.964,354,2.89,473,4.19,584,3.043,617,2.399,842,4.071,843,3.437,844,3.952,1192,3.852,1193,3.895,1195,3.199,1196,4.093,1342,3.895,1931,4.591,2130,6.154,2180,6.285,2181,5.391,2183,5.391,2199,7.157,2200,5.391,2201,5.391,2202,6.087,2203,5.391,2204,6.087,2205,6.087]],["title/injectables/ProfileService.html",[406,0.8,2180,3.045]],["body/injectables/ProfileService.html",[0,0.246,3,0.072,4,0.064,5,0.056,7,0.386,12,0.689,13,0.008,21,0.709,27,0.19,40,0.064,85,1.665,100,1.47,109,1.651,134,0.813,168,1.651,177,0.005,178,0.005,183,1.944,185,2.427,193,2.664,214,2.577,215,2.168,216,2.079,224,0.593,243,1.741,244,2.238,245,2.094,289,2.533,298,3.071,301,2.272,303,2.533,351,2.35,354,2.292,406,1.053,407,1.604,462,2.342,497,2.377,503,2.617,524,2.763,531,2.763,532,4.496,583,2.41,584,2.533,588,2.598,617,1.686,675,2.763,677,2.874,712,3.031,842,3.515,843,2.415,844,3.134,852,4.199,1050,2.936,1060,5.887,1065,4.248,1192,3.605,1193,2.737,1195,2.248,1196,3.245,1283,4.4,1284,4.75,1342,2.737,1355,3.226,1672,2.511,2132,2.737,2133,6.078,2134,5.28,2135,5.28,2138,6.078,2141,6.913,2144,5.28,2152,5.28,2156,4.995,2159,6.574,2160,5.265,2172,5.28,2179,3.466,2180,4.006,2182,3.788,2206,3.788,2207,6.078,2208,4.277,2209,4.277,2210,8.46,2211,4.277,2212,5.961,2213,4.277,2214,4.277,2215,4.277,2216,4.277,2217,8.593,2218,4.277,2219,4.277,2220,4.277,2221,4.277,2222,5.961,2223,4.277,2224,4.277,2225,5.961,2226,4.277,2227,4.199,2228,5.961,2229,2.874,2230,4.277,2231,7.423,2232,5.961,2233,5.28,2234,5.961,2235,5.961,2236,4.277,2237,5.961,2238,5.961,2239,4.277,2240,4.277,2241,2.874,2242,3.466,2243,4.277,2244,4.277,2245,4.277,2246,4.277]],["title/classes/QueueEventDto.html",[0,0.261,2247,3.673]],["body/classes/QueueEventDto.html",[0,0.461,2,1.118,3,0.114,4,0.101,5,0.089,7,0.609,8,1.06,12,0.727,13,0.008,14,1.444,15,1.572,21,0.749,27,0.191,28,1.696,29,1.001,32,2.389,33,2.338,34,1.743,35,2.289,36,1.352,40,0.101,64,2.846,134,0.702,177,0.007,178,0.007,216,2.059,707,3.45,1129,3.04,1212,3.432,1819,5.222,1820,5.978,2247,6.487,2248,5.978,2249,7.559,2250,6.75,2251,6.75,2252,5.978,2253,6.75]],["title/modules/RecommendationsModule.html",[306,0.817,327,2.66]],["body/modules/RecommendationsModule.html",[0,0.398,3,0.116,4,0.104,5,0.091,13,0.008,27,0.182,40,0.104,177,0.007,178,0.007,224,0.958,306,1.554,308,2.203,309,2.253,310,2.413,311,2.413,312,2.304,313,2.941,314,2.941,327,5.443,337,2.834,338,2.413,339,2.253,341,2.592,1978,6.078,2254,6.12,2255,6.12,2256,6.12,2257,6.909,2258,6.909]],["title/injectables/RecommendationsService.html",[406,0.8,1978,2.9]],["body/injectables/RecommendationsService.html",[0,0.262,3,0.076,4,0.068,5,0.06,7,0.41,8,0.822,12,0.769,13,0.008,14,1.671,21,0.753,27,0.102,40,0.068,42,1.096,64,2.362,72,3.017,109,1.692,132,2.323,134,0.7,177,0.005,178,0.005,183,2.025,193,2.721,214,2.428,215,2.042,216,1.958,224,0.629,244,2.922,289,1.27,298,1.585,301,2.413,406,1.097,407,1.702,483,3.189,487,1.514,558,1.662,652,3.014,685,3.226,700,2.386,757,3.801,758,3.487,902,3.05,903,3.679,976,3.165,1589,3.679,1883,4.02,1978,3.975,2259,4.02,2260,7.08,2261,7.973,2262,7.292,2263,7.08,2264,6.743,2265,5.501,2266,5.501,2267,5.501,2268,4.539,2269,7.08,2270,8.233,2271,4.539,2272,7.08,2273,4.539,2274,4.649,2275,6.211,2276,4.539,2277,6.211,2278,6.211,2279,4.539,2280,6.211,2281,4.539,2282,7.08,2283,7.08,2284,8.118,2285,7.08,2286,6.271,2287,7.08,2288,7.08,2289,7.08,2290,7.08,2291,7.08,2292,7.08,2293,4.539,2294,4.539,2295,4.539,2296,4.539,2297,7.08,2298,4.539,2299,4.539,2300,4.539,2301,4.539,2302,6.211,2303,7.08,2304,4.539,2305,6.211,2306,6.211,2307,7.466,2308,7.08,2309,7.08,2310,7.08,2311,6.211,2312,6.211,2313,6.211,2314,4.539,2315,4.539,2316,7.08,2317,4.539,2318,6.211,2319,4.539,2320,4.539,2321,4.539,2322,6.211,2323,6.211,2324,4.539,2325,6.271,2326,4.539,2327,4.539,2328,4.539,2329,4.539,2330,4.539,2331,4.539]],["title/classes/RefreshBody.html",[0,0.261,445,2.9]],["body/classes/RefreshBody.html",[0,0.406,2,0.547,3,0.056,4,0.05,5,0.044,7,0.298,8,0.655,12,0.505,13,0.008,14,1.069,15,0.609,16,1.336,21,0.29,27,0.184,28,1.421,29,0.49,34,1.611,36,0.662,40,0.111,42,0.798,53,1.503,54,1.891,85,1.055,96,1.613,100,1.22,109,1.622,131,1.59,134,0.818,168,1.693,177,0.004,178,0.004,179,1.447,185,2.115,198,3.628,218,3.117,219,2.115,224,0.458,243,0.966,244,2.501,245,1.008,259,4.158,268,2.228,286,2.023,289,2.534,293,1.799,298,3.151,301,2.528,302,3.555,303,2.298,344,1.628,379,1.866,394,2.693,406,0.874,417,2.115,421,4.028,422,4.31,424,4.206,445,3.166,449,2.693,451,2.345,459,2.115,462,2.987,463,4.316,464,2.345,473,1.532,474,3.984,475,3.366,487,2.196,488,1.866,490,2.221,492,3.509,497,2.071,501,3.583,508,2.345,516,4.971,517,1.578,524,3.051,531,3.051,558,2.581,559,4.47,563,3.015,565,4.239,567,2.221,568,5,569,4.343,570,2.493,571,5,572,5.948,573,2.345,574,2.493,578,2.493,580,2.493,582,3.015,583,2,584,1.688,588,2.354,591,2.493,592,2.493,594,2.493,596,2.493,599,2.493,602,4.206,605,4.472,609,4.472,610,3.732,611,2.345,612,2.345,613,2.493,614,2.115,615,2.221,616,2.221,617,1.303,618,2,619,1.447,620,1.866,621,2.493,622,2.345,623,2.493,624,2.493,625,2.493,626,2.493,627,2.493,628,1.94,629,2.493,630,2.493,631,2.493,632,2.493,633,2.493,634,2.794,635,3.481,636,2.115,637,2.345,638,2.345,639,3.509,640,2.794,641,3.324,642,3.509,643,3.509,644,5.58,645,2.493,646,2.345,647,3.864,648,2.493,649,2.221,650,2.493,651,2.493,652,1.21,653,2.345,654,3.166,655,2.493,656,2.493,657,2.493,658,2.493,659,2.493,660,3.732,661,2.493,662,3.717,663,3.732,664,5.316,665,2.493,666,2.493,667,2.279,668,3.732,669,2.493,670,3.348,671,2.493,672,2.493,673,1.628,674,1.94,675,3.267,676,2.904,677,4.423,678,1.94,679,1.94,680,1.737,681,1.94,682,5.059,683,3.481,684,2.904,685,2.12,686,1.94,687,3.732,688,2.493,689,2.493,690,2.221,691,2.023,692,2.515,693,3.732,694,3.732,695,3.732,696,2.345,697,2.493,698,2.493,699,2.493,700,2.601,701,2.345,702,2.493,703,2.221,704,2.345,705,2.493,706,2.345,707,1.336,708,1.372,709,2.493,710,2.493,711,2.221,712,2.515,713,3.732,714,3.732,715,2.493,716,2.493,717,3.481,718,2.493,719,2.493,720,2.493,721,2.493,722,2.493,723,2.493,724,2.493,725,2.493,2332,3.305,2333,3.305]],["title/classes/RegisterBody.html",[0,0.261,459,2.9]],["body/classes/RegisterBody.html",[0,0.404,2,0.539,3,0.055,4,0.049,5,0.043,7,0.294,8,0.647,12,0.597,13,0.008,14,1.06,15,1.082,16,2.375,21,0.515,27,0.184,28,1.413,29,0.483,34,1.601,36,0.652,40,0.11,42,0.786,53,1.493,54,2.345,85,1.043,96,1.595,100,1.206,109,1.617,131,1.576,134,0.819,168,1.689,177,0.004,178,0.004,179,1.425,185,2.105,198,3.595,218,3.088,219,2.082,224,0.451,243,0.951,244,2.488,245,0.993,259,4.091,268,2.202,286,1.991,289,2.53,293,1.771,298,3.145,301,2.524,302,3.537,303,2.289,344,1.603,379,1.838,394,2.662,406,0.863,417,2.082,421,4.285,422,4.267,424,4.167,445,2.082,449,2.662,451,2.308,459,3.129,462,3.017,463,4.473,464,2.308,473,1.508,474,3.947,475,3.344,487,2.179,488,1.838,490,2.187,492,3.469,497,2.062,501,3.555,508,4.167,516,4.942,517,1.554,524,3.028,531,3.028,558,2.564,559,4.452,563,2.987,565,4.221,567,2.187,568,4.967,569,4.318,570,2.454,571,4.967,572,5.92,573,2.308,574,2.454,578,2.454,580,2.454,582,2.987,583,1.977,584,1.669,588,2.343,591,2.454,592,2.454,594,2.454,596,2.454,599,2.454,602,4.167,605,4.431,609,4.431,610,3.688,611,2.308,612,2.308,613,2.454,614,2.082,615,2.187,616,2.187,617,1.283,618,1.977,619,1.425,620,1.838,621,2.454,622,2.308,623,2.454,624,2.454,625,2.454,626,2.454,627,2.454,628,1.91,629,2.454,630,2.454,631,2.454,632,2.454,633,2.454,634,2.761,635,1.91,636,2.082,637,2.308,638,2.308,639,3.469,640,2.761,641,3.286,642,3.469,643,3.469,644,5.547,645,2.454,646,2.308,647,3.835,648,2.454,649,2.187,650,2.454,651,2.454,652,1.191,653,2.308,654,3.129,655,2.454,656,2.454,657,2.454,658,2.454,659,2.454,660,3.688,661,2.454,662,3.688,663,3.688,664,5.281,665,2.454,666,2.454,667,2.258,668,3.688,669,2.454,670,3.317,671,2.454,672,2.454,673,1.603,674,1.91,675,3.246,676,2.871,677,4.389,678,1.91,679,1.91,680,1.711,681,1.91,682,5.044,683,3.449,684,2.871,685,2.1,686,1.91,687,3.688,688,2.454,689,2.454,690,2.187,691,1.991,692,2.486,693,3.688,694,3.688,695,3.688,696,2.308,697,2.454,698,2.454,699,2.454,700,2.57,701,2.308,702,2.454,703,2.187,704,2.308,705,2.454,706,2.308,707,1.316,708,1.35,709,2.454,710,2.454,711,2.187,712,2.486,713,3.688,714,3.688,715,2.454,716,2.454,717,3.449,718,2.454,719,2.454,720,2.454,721,2.454,722,2.454,723,2.454,724,2.454,725,2.454,2334,3.254,2335,3.254,2336,3.254,2337,3.254,2338,3.254,2339,3.254]],["title/modules/RetryModule.html",[306,0.817,328,2.9]],["body/modules/RetryModule.html",[0,0.399,3,0.117,4,0.104,5,0.091,13,0.008,27,0.182,40,0.104,177,0.007,178,0.007,224,0.96,306,1.556,308,2.209,309,2.259,310,2.419,311,2.419,312,2.31,313,2.944,314,2.944,328,5.937,337,2.839,338,2.419,339,2.259,2082,6.384,2340,6.136,2341,6.136,2342,6.136,2343,6.927,2344,6.927]],["title/injectables/RetryService.html",[406,0.8,2082,3.045]],["body/injectables/RetryService.html",[0,0.255,3,0.075,4,0.067,5,0.058,7,0.738,12,0.738,13,0.008,14,1.562,19,2.98,21,0.536,23,1.941,27,0.099,40,0.113,42,1.071,109,1.448,130,1.445,153,1.996,177,0.005,178,0.005,183,1.992,185,2.323,193,2.386,202,5.412,214,2.23,215,1.639,216,1.571,224,0.614,268,3.561,283,2.978,287,5.963,289,1.71,298,2.134,301,2.338,303,1.71,389,3.925,390,3.343,392,2.836,406,1.079,407,1.662,427,4.334,483,1.996,484,4.02,524,2.054,531,2.054,532,6.164,558,1.623,588,2.547,636,2.836,652,2.992,667,3.369,680,2.33,701,4.334,703,2.978,747,4.334,758,3.443,785,2.978,875,3.343,975,3.144,976,3.142,1250,3.592,1539,5.412,1629,4.823,1637,3.592,1827,3.925,1828,2.836,1858,4.608,1870,3.925,1874,3.925,2082,4.106,2087,6.408,2089,6.677,2098,3.925,2099,6.676,2100,3.925,2101,6.193,2104,3.925,2105,6.788,2106,3.925,2107,5.009,2109,6.781,2110,7.418,2111,3.925,2112,5.412,2113,5.412,2114,3.925,2115,3.925,2117,3.925,2119,3.925,2120,3.925,2123,3.592,2124,3.925,2345,3.343,2346,6.993,2347,4.432,2348,7.558,2349,6.676,2350,4.432,2351,6.11,2352,7.906,2353,6.11,2354,4.432,2355,4.432,2356,4.432,2357,4.432,2358,5.412,2359,3.592,2360,4.432,2361,4.432,2362,4.432,2363,4.432,2364,3.592,2365,6.11,2366,4.432,2367,4.432,2368,5.412,2369,4.432,2370,4.432,2371,6.11,2372,4.432,2373,4.432,2374,4.432,2375,6.993,2376,4.432,2377,4.432,2378,4.432,2379,4.432,2380,4.432,2381,4.432,2382,4.432,2383,3.925,2384,6.11,2385,5.412,2386,6.11,2387,4.432,2388,4.432,2389,4.432,2390,4.432,2391,6.11,2392,6.11,2393,6.993,2394,4.432,2395,4.432,2396,4.432,2397,4.432,2398,6.11,2399,4.432,2400,4.432,2401,4.432,2402,4.432,2403,4.432]],["title/classes/RoomAnalyticsContributorsDto.html",[0,0.261,165,1.985]],["body/classes/RoomAnalyticsContributorsDto.html",[0,0.507,1,2.516,2,0.519,3,0.053,4,0.047,5,0.041,6,1.412,7,0.283,8,1.139,9,2.204,10,2.204,11,2.204,12,0.812,13,0.008,14,1.715,15,0.578,17,2.663,18,3.194,19,3.387,21,0.275,23,2.083,25,2.204,27,0.144,28,1.81,29,0.465,30,2.784,31,1.623,32,2.639,33,2.514,34,1.035,35,2.527,36,0.628,37,1.541,38,1.206,39,0.936,40,0.13,41,1.373,42,2.123,43,2.663,44,2.208,45,2.663,46,2.663,47,2.703,48,3.684,49,2.587,50,2.663,51,3.078,52,1.454,53,1.991,54,1.832,55,2.09,56,1.454,57,2.204,58,1.454,59,1.412,60,2.204,61,1.454,62,2.807,63,3.495,64,2.747,65,1.454,66,2.547,67,1.454,68,2.663,69,2.663,70,2.247,71,1.454,72,1.336,73,1.454,74,2.807,75,2.204,76,1.336,77,3.103,78,1.412,79,1.336,80,2.317,81,1.454,82,3.656,83,2.972,84,1.373,85,1.756,86,2.516,87,2.516,88,2.663,89,2.663,90,2.807,91,2.663,92,1.373,93,1.454,94,2.587,95,2.972,96,1.551,97,2.972,98,2.972,99,1.454,100,1.173,101,2.292,102,1.454,103,1.454,104,1.661,105,1.741,106,1.454,107,1.454,108,1.336,109,0.914,110,1.454,111,1.454,112,2.204,113,2.204,114,1.454,115,1.454,116,1.454,117,1.236,118,1.412,119,1.454,120,2.516,121,2.807,122,2.592,123,2.384,124,2.204,125,1.454,126,1.454,127,1.412,128,1.454,129,3.549,130,1.551,131,1.72,132,2.368,133,1.373,134,0.417,135,1.412,136,1.336,137,2.083,138,1.454,139,3.194,140,2.142,141,3.194,142,3.194,143,1.412,144,1.454,145,1.454,146,1.454,147,2.807,148,1.454,149,1.454,150,2.204,151,2.204,152,2.204,153,2.142,154,2.204,155,2.204,156,1.454,157,1.454,158,1.454,159,2.807,160,1.454,161,1.454,162,2.663,163,1.454,164,1.454,165,3.017,166,2.204,167,2.972,168,0.914,169,2.204,170,2.204,171,2.663,172,1.373,173,3.362,174,2.204,175,2.142,176,2.204,177,0.004,178,0.004,2274,1.771,2404,2.224,2405,2.365,2406,3.136]],["title/classes/RoomAnalyticsDto.html",[0,0.261,172,1.985]],["body/classes/RoomAnalyticsDto.html",[0,0.504,1,2.459,2,0.5,3,0.051,4,0.045,5,0.04,6,1.361,7,0.273,8,1.121,9,2.143,10,2.143,11,2.143,12,0.814,13,0.008,14,1.712,15,1.317,16,2.89,17,2.603,18,3.142,19,3.351,21,0.627,23,2.025,25,2.143,27,0.141,28,1.806,29,0.448,30,2.761,31,1.578,32,2.624,33,2.497,34,1.007,35,2.513,36,0.606,37,1.506,38,1.162,39,0.902,40,0.129,41,1.324,42,2.097,43,2.603,44,2.159,45,2.603,46,2.603,47,2.677,48,3.645,49,2.529,50,2.603,51,3.057,52,1.401,53,1.983,54,1.791,55,2.051,56,1.401,57,2.143,58,1.401,59,1.361,60,2.143,61,1.401,62,2.969,63,3.455,64,2.825,65,1.401,66,2.528,67,1.401,68,2.603,69,2.143,70,2.426,71,1.401,72,1.288,73,1.401,74,2.755,75,2.143,76,1.288,77,3.053,78,1.361,79,1.288,80,2.29,81,1.401,82,3.626,83,2.916,84,1.324,85,1.741,86,2.459,87,2.459,88,2.603,89,2.603,90,2.969,91,2.603,92,1.324,93,1.401,94,2.529,95,2.916,96,1.508,97,2.916,98,2.916,99,1.401,100,1.14,101,2.249,102,1.401,103,1.401,104,1.615,105,1.693,106,1.401,107,1.401,108,1.288,109,0.888,110,1.401,111,1.401,112,2.143,113,2.143,114,1.401,115,1.401,116,1.401,117,1.191,118,1.361,119,1.401,120,2.459,121,2.969,122,2.543,123,2.33,124,2.143,125,1.401,126,1.401,127,1.361,128,1.401,129,3.514,130,1.508,131,1.687,132,2.341,133,1.324,134,0.406,135,1.361,136,1.288,137,2.025,138,1.401,139,3.142,140,2.082,141,3.142,142,3.142,143,1.361,144,1.401,145,1.401,146,1.401,147,2.969,148,1.401,149,1.401,150,2.143,151,2.143,152,2.143,153,2.082,154,2.143,155,2.143,156,1.401,157,1.401,158,1.401,159,2.969,160,1.401,161,1.401,162,2.143,163,1.401,164,1.401,165,2.969,166,1.401,167,3.314,168,0.888,169,2.143,170,2.143,171,1.401,172,2.025,173,3.837,174,3.142,175,3.053,176,3.142,177,0.004,178,0.004,2407,3.023,2408,3.023,2409,3.023,2410,3.023,2411,3.023,2412,3.023,2413,3.023,2414,3.023,2415,3.023,2416,3.023,2417,3.023,2418,3.023]],["title/classes/RoomAnalyticsInteractionsDto.html",[0,0.261,121,1.985]],["body/classes/RoomAnalyticsInteractionsDto.html",[0,0.505,1,2.487,2,0.51,3,0.052,4,0.046,5,0.041,6,1.386,7,0.278,8,1.135,9,2.173,10,2.173,11,2.173,12,0.812,13,0.008,14,1.717,15,1.046,16,1.895,17,2.632,18,3.167,19,3.369,20,2.321,21,0.498,23,2.053,25,2.173,27,0.142,28,1.808,29,0.457,30,2.773,31,1.6,32,2.631,33,2.506,34,1.021,35,2.52,36,0.617,37,1.523,38,1.183,39,0.919,40,0.13,41,1.348,42,2.117,43,2.632,44,2.183,45,2.632,46,2.632,47,2.689,48,3.664,49,2.557,50,2.632,51,3.067,52,1.426,53,1.988,54,1.811,55,2.07,56,1.426,57,2.173,58,1.426,59,1.386,60,2.173,61,1.426,62,2.78,63,3.631,64,2.734,65,1.426,66,2.561,67,1.426,68,2.943,69,2.173,70,2.07,71,1.426,72,1.311,73,1.426,74,2.78,75,2.173,76,1.311,77,3.242,78,1.386,79,1.311,80,2.303,81,1.426,82,3.64,83,2.943,84,1.348,85,1.748,86,2.487,87,2.487,88,2.632,89,2.632,90,2.78,91,2.632,92,1.348,93,1.426,94,2.557,95,3.167,96,1.529,97,2.943,98,2.943,99,1.426,100,1.156,101,2.27,102,1.426,103,1.426,104,1.637,105,1.716,106,1.426,107,1.426,108,1.311,109,0.901,110,1.426,111,1.426,112,2.173,113,2.173,114,1.426,115,1.426,116,1.426,117,1.213,118,1.386,119,1.426,120,2.487,121,2.992,122,3.196,123,2.987,124,2.173,125,2.173,126,2.632,127,1.386,128,2.632,129,3.531,130,1.529,131,1.703,132,2.354,133,1.348,134,0.411,135,1.386,136,1.311,137,2.053,138,1.426,139,3.167,140,2.111,141,3.167,142,3.167,143,1.386,144,1.426,145,1.426,146,1.426,147,2.78,148,1.426,149,1.426,150,2.173,151,2.173,152,2.173,153,2.111,154,2.173,155,2.173,156,1.426,157,1.426,158,1.426,159,2.78,160,1.426,161,1.426,162,2.173,163,1.426,164,1.426,165,2.78,166,1.426,167,2.632,168,0.901,169,2.173,170,2.173,171,1.426,172,1.348,173,3.337,174,2.173,175,2.111,176,2.173,177,0.004,178,0.004,2274,1.738,2404,2.183,2405,2.321,2419,3.077,2420,3.077,2421,3.077,2422,3.077]],["title/classes/RoomAnalyticsKeyMetricsDto.html",[0,0.261,41,1.985]],["body/classes/RoomAnalyticsKeyMetricsDto.html",[0,0.505,1,2.477,2,0.506,3,0.052,4,0.046,5,0.04,6,1.377,7,0.276,8,1.151,9,2.162,10,2.162,11,2.162,12,0.813,13,0.008,14,1.713,15,1.042,17,2.933,18,3.329,19,3.43,21,0.496,23,2.043,25,2.162,27,0.142,28,1.808,29,0.454,30,2.769,31,1.592,32,2.629,33,2.503,34,1.016,35,2.518,36,0.613,37,1.517,38,1.175,39,0.913,40,0.13,41,2.043,42,2.138,43,2.622,44,2.432,45,3.158,46,2.622,47,2.685,48,3.658,49,2.547,50,2.622,51,3.063,52,2.162,53,1.992,54,2.29,55,2.435,56,2.622,57,2.933,58,2.162,59,2.101,60,2.933,61,2.162,62,2.771,63,3.468,64,2.73,65,1.417,66,2.534,67,1.417,68,2.622,69,2.162,70,2.063,71,1.417,72,1.303,73,1.417,74,2.771,75,2.162,76,1.303,77,3.069,78,1.377,79,1.303,80,2.299,81,1.417,82,3.635,83,2.933,84,1.339,85,1.745,86,2.477,87,2.477,88,2.622,89,2.622,90,2.771,91,2.622,92,1.339,93,1.417,94,2.547,95,2.933,96,1.521,97,2.933,98,2.933,99,1.417,100,1.151,101,2.262,102,1.417,103,1.417,104,1.629,105,1.708,106,1.417,107,1.417,108,1.303,109,0.896,110,1.417,111,1.417,112,2.162,113,2.162,114,1.417,115,1.417,116,1.417,117,1.205,118,1.377,119,1.417,120,2.477,121,2.771,122,2.558,123,2.347,124,2.162,125,1.417,126,1.417,127,1.377,128,1.417,129,3.525,130,1.521,131,1.697,132,2.349,133,1.339,134,0.409,135,1.377,136,1.303,137,2.043,138,1.417,139,3.158,140,2.101,141,3.158,142,3.158,143,1.377,144,1.417,145,1.417,146,1.417,147,2.771,148,1.417,149,1.417,150,2.162,151,2.162,152,2.162,153,2.101,154,2.162,155,2.162,156,1.417,157,1.417,158,1.417,159,2.771,160,1.417,161,1.417,162,2.162,163,1.417,164,1.417,165,2.771,166,1.417,167,2.622,168,0.896,169,2.162,170,2.162,171,1.417,172,1.339,173,3.329,174,2.162,175,2.101,176,2.162,177,0.004,178,0.004,2274,3.194,2404,4.012,2405,4.266,2423,3.058,2424,3.058,2425,3.058]],["title/classes/RoomAnalyticsParticipationDto.html",[0,0.261,90,1.985]],["body/classes/RoomAnalyticsParticipationDto.html",[0,0.502,1,2.437,2,0.493,3,0.05,4,0.045,5,0.039,6,1.341,7,0.269,8,1.146,9,2.119,10,2.119,11,2.119,12,0.813,13,0.008,14,1.713,15,1.24,16,1.848,17,2.893,18,3.294,19,3.406,21,0.591,23,2.437,25,2.579,27,0.14,28,1.805,29,0.442,30,2.786,31,1.56,32,2.618,33,2.49,34,0.995,35,2.508,36,0.597,37,1.492,38,1.145,39,0.889,40,0.129,41,1.304,42,2.13,43,2.579,44,2.399,45,2.579,46,2.579,47,2.666,48,3.63,49,2.506,50,2.579,51,3.048,52,1.38,53,1.988,54,1.774,55,2.035,56,1.38,57,2.119,58,1.38,59,1.341,60,2.119,61,1.38,62,2.733,63,3.527,64,2.712,65,1.38,66,2.545,67,1.38,68,2.579,69,2.119,70,2.035,71,1.38,72,1.269,73,1.38,74,3.112,75,2.579,76,1.269,77,3.201,78,1.341,79,1.269,80,2.279,81,1.38,82,3.613,83,3.294,84,1.304,85,1.734,86,2.437,87,2.437,88,2.579,89,2.579,90,2.949,91,3.43,92,2.002,93,2.119,94,3.033,95,3.43,96,2.035,97,2.893,98,2.893,99,1.38,100,1.539,101,2.232,102,2.579,103,2.119,104,1.597,105,1.674,106,2.579,107,2.119,108,1.948,109,1.199,110,2.119,111,2.119,112,2.119,113,2.119,114,2.579,115,2.119,116,2.119,117,1.802,118,1.341,119,2.579,120,2.437,121,2.733,122,2.524,123,2.309,124,2.119,125,1.38,126,1.38,127,1.341,128,1.38,129,3.501,130,1.491,131,1.674,132,2.33,133,1.304,134,0.401,135,1.341,136,1.269,137,2.002,138,1.38,139,3.121,140,2.059,141,3.121,142,3.121,143,1.341,144,1.38,145,1.38,146,1.38,147,2.733,148,1.38,149,1.38,150,2.119,151,2.119,152,2.119,153,2.059,154,2.119,155,2.119,156,1.38,157,1.38,158,1.38,159,2.733,160,1.38,161,1.38,162,2.119,163,1.38,164,1.38,165,2.733,166,1.38,167,2.579,168,0.878,169,2.119,170,2.119,171,1.38,172,1.304,173,3.294,174,2.119,175,2.059,176,2.119,177,0.004,178,0.004,2274,3.142,2404,3.947,2405,4.197,2426,2.978,2427,2.414,2428,2.246,2429,2.978,2430,2.978,2431,2.978,2432,2.978,2433,2.978]],["title/classes/RoomAnalyticsQueueDto.html",[0,0.261,62,1.985]],["body/classes/RoomAnalyticsQueueDto.html",[0,0.506,1,2.506,2,0.516,3,0.053,4,0.047,5,0.041,6,1.404,7,0.281,8,1.128,9,2.194,10,2.194,11,2.194,12,0.812,13,0.008,14,1.718,15,0.872,16,1.914,17,2.653,18,3.186,19,3.381,20,2.351,21,0.415,23,2.073,25,2.194,27,0.143,28,1.81,29,0.462,30,2.781,31,1.616,32,2.636,33,2.512,34,1.031,35,2.525,36,0.625,37,1.535,38,1.198,39,0.931,40,0.13,41,1.365,42,2.108,43,2.653,44,2.2,45,2.653,46,2.653,47,2.698,48,3.678,49,2.578,50,2.653,51,3.074,52,1.445,53,1.987,54,1.825,55,2.084,56,1.445,57,2.194,58,1.445,59,1.404,60,2.194,61,1.445,62,3.01,63,3.573,64,2.781,65,2.194,66,2.544,67,2.653,68,2.963,69,2.653,70,2.241,71,2.194,72,1.329,73,2.653,74,2.799,75,2.194,76,1.329,77,3.095,78,1.404,79,1.329,80,2.313,81,1.445,82,3.651,83,2.963,84,1.365,85,1.754,86,2.506,87,2.506,88,2.653,89,2.653,90,2.799,91,2.653,92,1.365,93,1.445,94,2.578,95,2.963,96,1.544,97,2.963,98,2.963,99,1.445,100,1.168,101,2.285,102,1.445,103,1.445,104,1.653,105,1.733,106,1.445,107,1.445,108,1.329,109,0.91,110,1.445,111,1.445,112,2.194,113,2.194,114,1.445,115,1.445,116,1.445,117,1.229,118,1.404,119,1.445,120,2.506,121,2.799,122,2.584,123,2.375,124,2.194,125,1.445,126,1.445,127,1.404,128,1.445,129,3.543,130,1.544,131,1.714,132,2.364,133,1.365,134,0.415,135,1.404,136,1.329,137,2.073,138,1.445,139,3.186,140,2.132,141,3.186,142,3.186,143,1.404,144,1.445,145,1.445,146,1.445,147,2.799,148,1.445,149,1.445,150,2.194,151,2.194,152,2.194,153,2.132,154,2.194,155,2.194,156,1.445,157,1.445,158,1.445,159,2.799,160,1.445,161,1.445,162,2.194,163,1.445,164,1.445,165,2.799,166,1.445,167,2.653,168,0.91,169,2.194,170,2.194,171,1.445,172,1.365,173,3.354,174,2.194,175,2.132,176,2.194,177,0.004,178,0.004,2434,3.117,2435,3.117,2436,3.117]],["title/classes/RoomAnalyticsSongsDto.html",[0,0.261,159,1.985]],["body/classes/RoomAnalyticsSongsDto.html",[0,0.506,1,2.499,2,0.514,3,0.052,4,0.047,5,0.041,6,1.397,7,0.28,8,1.127,9,2.187,10,2.187,11,2.187,12,0.812,13,0.008,14,1.715,15,0.869,16,1.254,17,2.645,18,3.179,19,3.377,21,0.414,23,2.066,25,2.187,27,0.143,28,1.809,29,0.46,30,2.84,31,1.61,32,2.635,33,2.51,34,1.027,35,2.523,36,0.622,37,1.531,38,1.193,39,0.926,40,0.13,41,1.359,42,2.107,43,2.645,44,2.194,45,2.645,46,2.645,47,2.695,48,3.673,49,2.57,50,2.645,51,3.072,52,1.438,53,1.989,54,1.82,55,2.079,56,1.438,57,2.187,58,1.438,59,1.397,60,2.187,61,1.438,62,2.792,63,3.484,64,2.811,65,1.438,66,2.585,67,1.438,68,2.645,69,2.187,70,2.079,71,1.438,72,1.322,73,1.438,74,2.792,75,2.187,76,1.322,77,3.089,78,1.397,79,1.322,80,2.309,81,1.438,82,3.647,83,2.955,84,1.359,85,1.752,86,2.499,87,2.499,88,2.645,89,2.645,90,2.792,91,2.645,92,1.359,93,1.438,94,2.57,95,2.955,96,1.538,97,2.955,98,2.955,99,1.438,100,1.163,101,2.28,102,1.438,103,1.438,104,1.647,105,1.727,106,1.438,107,1.438,108,1.322,109,0.906,110,1.438,111,1.438,112,2.187,113,2.187,114,1.438,115,1.438,116,1.438,117,1.223,118,1.397,119,1.438,120,2.499,121,2.792,122,2.578,123,2.368,124,2.187,125,1.438,126,1.438,127,1.397,128,1.438,129,3.729,130,1.538,131,1.71,132,2.36,133,1.359,134,0.414,135,1.397,136,1.322,137,2.499,138,1.438,139,3.179,140,2.124,141,3.179,142,3.179,143,1.397,144,1.438,145,1.438,146,1.438,147,2.792,148,1.438,149,1.438,150,2.187,151,2.187,152,2.187,153,2.124,154,2.187,155,2.187,156,1.438,157,1.438,158,1.438,159,3.003,160,2.187,161,2.645,162,2.645,163,2.187,164,2.645,165,2.792,166,1.438,167,2.645,168,0.906,169,2.187,170,2.187,171,1.438,172,1.359,173,3.348,174,2.187,175,2.124,176,2.187,177,0.004,178,0.004,2404,2.201,2427,3.823,2428,3.558,2437,3.103,2438,3.103]],["title/classes/RoomAnalyticsVotesDto.html",[0,0.261,147,1.985]],["body/classes/RoomAnalyticsVotesDto.html",[0,0.503,1,2.452,2,0.498,3,0.051,4,0.045,5,0.04,6,1.355,7,0.272,8,1.12,9,2.136,10,2.136,11,2.136,12,0.812,13,0.008,14,1.717,15,1.246,16,2.735,17,2.596,18,3.136,19,3.347,20,3.475,21,0.594,23,2.018,25,2.136,27,0.141,28,1.806,29,0.446,30,2.793,31,1.572,32,2.622,33,2.495,34,1.003,35,2.512,36,0.603,37,1.502,38,1.157,39,0.898,40,0.129,41,1.318,42,2.096,43,2.596,44,2.153,45,2.596,46,2.596,47,2.673,48,3.641,49,2.522,50,2.596,51,3.054,52,1.395,53,1.982,54,1.786,55,2.046,56,1.395,57,2.136,58,1.395,59,1.355,60,2.136,61,1.395,62,2.748,63,3.61,64,2.913,65,1.395,66,2.571,67,1.395,68,2.596,69,2.136,70,2.046,71,1.395,72,1.282,73,1.395,74,2.748,75,2.136,76,1.282,77,3.047,78,1.355,79,1.282,80,2.287,81,1.395,82,3.622,83,2.909,84,1.318,85,1.739,86,2.452,87,2.452,88,2.596,89,2.596,90,2.748,91,2.596,92,1.318,93,1.395,94,2.826,95,2.909,96,1.502,97,2.909,98,2.909,99,1.395,100,1.136,101,2.244,102,1.395,103,1.395,104,1.609,105,1.687,106,1.395,107,1.395,108,1.282,109,0.885,110,1.395,111,1.395,112,2.136,113,2.136,114,1.395,115,1.395,116,1.395,117,1.186,118,1.355,119,1.395,120,2.452,121,2.748,122,2.537,123,2.324,124,2.136,125,1.395,126,1.395,127,1.355,128,1.395,129,3.622,130,1.826,131,1.914,132,2.396,133,1.318,134,0.404,135,1.355,136,1.282,137,2.018,138,1.395,139,3.551,140,2.075,141,3.551,142,3.136,143,1.355,144,1.395,145,1.395,146,1.395,147,2.962,148,2.596,149,2.596,150,2.909,151,2.909,152,2.909,153,2.826,154,2.909,155,2.136,156,2.596,157,2.596,158,2.136,159,2.748,160,1.395,161,1.395,162,2.136,163,1.395,164,1.395,165,2.748,166,1.395,167,2.596,168,0.885,169,2.136,170,2.136,171,1.395,172,1.318,173,3.308,174,2.136,175,2.075,176,2.136,177,0.004,178,0.004,2427,2.438,2428,2.269,2439,4.608,2440,3.009,2441,3.009,2442,3.009,2443,3.009,2444,3.009]],["title/classes/RoomDto.html",[0,0.261,708,1.881]],["body/classes/RoomDto.html",[0,0.412,2,0.766,3,0.078,4,0.069,5,0.061,7,0.418,8,0.833,12,0.81,13,0.008,14,1.384,15,1.719,16,2.544,21,0.819,27,0.18,28,1.778,29,0.686,30,2.56,31,2.619,32,2.135,33,2.089,34,1.845,35,2.044,36,0.927,37,2.153,38,1.779,39,1.381,40,0.069,53,1.807,55,2.052,66,2.638,80,2.472,85,1.637,132,1.92,134,0.824,177,0.005,178,0.005,216,2.217,465,5.157,511,3.668,558,3.032,707,2.891,708,2.611,808,4.198,815,4.746,829,3.953,894,4.805,943,5.072,946,4.805,947,4.576,948,4.576,952,5.394,1114,2.278,1121,5.393,1122,5.393,1123,5.393,1124,5.393,1125,5.393,1126,5.393,1127,5.393,1128,5.795,1129,3.729,1146,5.573,1148,4.507,1207,5.694,1209,3.489,1212,3.199,1217,4.098,1503,6.334,1505,6.334,1664,3.553,1666,3.892,1786,5.1,1819,4.912,2364,5.1,2445,4.098,2446,7.151,2447,6.797,2448,4.627,2449,4.627,2450,5.573,2451,4.627,2452,4.627,2453,4.627,2454,4.627,2455,4.627,2456,4.627,2457,4.627,2458,4.627,2459,4.627,2460,4.627,2461,4.627,2462,6.293,2463,4.627,2464,4.627,2465,4.627,2466,4.627,2467,4.627,2468,4.627,2469,4.627,2470,4.627,2471,4.627,2472,4.627]],["title/classes/RoomEntity.html",[0,0.261,2473,3.673]],["body/classes/RoomEntity.html",[0,0.316,2,0.909,3,0.092,4,0.082,5,0.072,7,0.496,8,0.933,12,0.808,13,0.008,14,1.271,15,1.726,21,0.822,27,0.175,28,1.837,29,0.814,37,2.277,38,2.11,40,0.082,53,1.659,80,2.671,134,0.813,177,0.006,178,0.006,511,3.781,558,2.01,707,3.146,894,5.229,943,5.519,946,5.229,947,4.98,948,4.98,952,5.229,1114,4.181,1121,5.869,1122,5.869,1123,5.869,1124,5.869,1125,5.869,1126,5.869,1127,5.869,1654,4.317,1666,4.235,2473,5.711,2474,4.863,2475,5.49,2476,5.49,2477,5.49,2478,5.49,2479,5.49,2480,5.49,2481,5.49,2482,5.49,2483,5.49,2484,5.49,2485,5.49,2486,5.49,2487,5.49,2488,5.49,2489,5.49,2490,5.49,2491,5.49]],["title/modules/RoomQueueModule.html",[306,0.817,1797,2.773]],["body/modules/RoomQueueModule.html",[0,0.356,3,0.104,4,0.093,5,0.081,13,0.008,27,0.207,40,0.093,177,0.006,178,0.006,224,0.856,306,1.481,308,1.968,309,2.013,310,2.156,311,2.156,312,2.059,313,2.802,314,2.802,321,4.148,322,4.407,326,3.527,333,5.053,334,5.253,337,2.649,338,2.156,339,2.013,341,2.845,346,2.78,351,2.433,352,3.485,354,2.373,355,3.244,358,4.655,361,5.002,372,5.72,373,4.147,542,5.476,843,3.485,1195,3.244,1797,5.835,1816,5.996,2492,5.467,2493,6.172,2494,5.467,2495,5.467,2496,6.172,2497,6.172,2498,6.172]],["title/classes/RoomSongDto.html",[0,0.261,1819,2.773]],["body/classes/RoomSongDto.html",[0,0.44,2,1.032,3,0.105,4,0.094,5,0.082,7,0.776,8,1.01,12,0.782,13,0.008,14,1.692,15,1.689,21,0.805,27,0.171,28,1.745,29,0.924,32,2.711,34,1.795,36,1.248,40,0.094,134,0.754,177,0.007,178,0.007,216,2.21,497,2.165,829,4.06,1129,3.435,1212,4.368,1819,4.668,1891,6.218,2325,7.302,2499,5.519,2500,8.244,2501,8.244,2502,8.244,2503,8.244,2504,6.231,2505,6.231,2506,7.628,2507,6.231,2508,6.231,2509,6.231,2510,6.231,2511,6.231,2512,6.231]],["title/modules/RoomUsersModule.html",[306,0.817,1798,2.9]],["body/modules/RoomUsersModule.html",[0,0.37,3,0.108,4,0.096,5,0.085,13,0.008,27,0.203,40,0.096,177,0.007,178,0.007,224,0.891,306,1.507,308,2.05,309,2.096,310,2.245,311,2.245,312,2.144,313,2.852,314,2.852,321,4.188,322,4.45,326,3.561,337,2.715,338,2.245,339,2.096,341,2.916,346,2.895,350,3.934,351,2.534,352,3.63,353,3.774,354,2.471,355,3.379,726,5.304,1228,5.21,1798,6.078,1938,5.763,2513,5.694,2514,6.428,2515,5.694,2516,5.694,2517,6.428,2518,6.428]],["title/injectables/RoomUsersService.html",[406,0.8,1938,2.773]],["body/injectables/RoomUsersService.html",[0,0.213,3,0.062,4,0.055,5,0.049,7,0.334,8,0.711,12,0.708,13,0.008,21,0.74,27,0.173,37,2.066,40,0.055,42,0.893,109,1.675,131,1.864,134,0.828,168,1.712,177,0.005,178,0.005,183,1.752,185,2.227,193,2.779,214,2.647,215,2.227,216,2.135,224,0.512,243,1.569,244,2.511,245,1.931,289,2.417,298,2.945,301,2.425,303,2.066,350,2.261,351,1.456,353,2.169,354,1.42,406,0.948,407,1.386,483,3.798,487,2.881,497,2.023,558,3.241,583,1.494,584,1.833,588,1.603,617,1.456,618,1.494,619,1.618,652,1.353,673,3.116,685,2.639,707,3.718,757,2.261,758,1.82,797,1.942,842,3.129,844,1.942,852,3.873,976,1.42,1014,3.153,1043,2.364,1047,4.05,1192,2.961,1196,2.011,1230,4.773,1231,4.773,1234,4.758,1238,4.758,1239,4.758,1242,3.273,1245,2.924,1246,3.273,1249,6.36,1250,2.995,1255,4.051,1264,4.051,1266,4.051,1274,2.621,1281,4.773,1282,2.621,1283,2.011,1284,4.928,1285,2.787,1287,6.049,1288,2.787,1289,5.808,1290,2.787,1292,4.051,1293,2.621,1294,2.621,1295,2.787,1296,5.994,1297,2.787,1298,5.808,1299,2.787,1300,2.787,1301,2.787,1302,5.567,1304,2.787,1938,3.287,2519,2.995,2520,5.372,2521,5.372,2522,4.758,2523,5.372,2524,3.695,2525,3.695,2526,3.695,2527,4.773,2528,4.758,2529,3.695,2530,4.758,2531,3.695,2532,3.695,2533,4.758,2534,3.695,2535,3.695,2536,4.758,2537,3.695,2538,3.695,2539,5.129,2540,5.129,2541,7.212,2542,4.758,2543,5.605,2544,3.273,2545,3.273]],["title/classes/RoomsData.html",[0,0.261,1656,2.66]],["body/classes/RoomsData.html",[0,0.506,2,0.785,3,0.08,4,0.071,5,0.063,7,0.428,8,0.847,12,0.811,13,0.008,14,1.504,15,1.179,21,0.562,27,0.174,28,1.817,29,0.704,30,3.011,32,2.49,33,2.594,34,1.965,35,2.597,36,0.95,37,2.08,39,1.416,40,0.128,42,1.146,47,2.844,51,2.288,53,1.894,54,2.719,55,2.087,64,1.582,66,1.416,85,1.849,100,2.139,101,2.288,104,1.657,105,1.737,132,1.447,134,0.812,168,1.49,177,0.005,178,0.005,462,1.619,484,3.254,497,1.246,511,2.656,707,1.918,708,3.005,829,3.987,831,3.916,905,2.493,1050,3.567,1051,3.056,1065,2.582,1079,2.678,1114,2.336,1148,3.942,1156,2.493,1212,2.412,1391,2.678,1393,2.678,1395,3.614,1397,2.678,1398,2.678,1399,2.678,1400,2.678,1401,2.903,1579,2.903,1649,5.158,1650,2.903,1654,4.335,1655,2.903,1656,5.09,1657,4.552,1658,4.552,1659,3.035,1660,4.552,1661,2.785,1662,3.035,1663,3.035,1664,3.614,1665,3.035,1666,2.582,1667,3.035,1668,3.035,1669,4.635,1670,2.785,1671,3.035,1672,3.757,1673,3.035,1674,3.035,1675,3.035,1676,3.035,1677,3.035,1707,4.201,2546,4.743,2547,4.743]],["title/modules/RoomsModule.html",[306,0.817,329,2.773]],["body/modules/RoomsModule.html",[0,0.336,3,0.098,4,0.088,5,0.077,13,0.008,27,0.209,40,0.088,177,0.006,178,0.006,181,3.038,224,0.808,306,1.443,308,1.859,309,1.901,310,2.036,311,2.036,312,1.945,313,2.731,314,2.731,318,4.803,321,4.09,322,4.345,326,3.478,327,5.18,329,5.862,333,4.982,337,2.557,338,2.036,339,1.901,341,2.746,346,2.626,348,4.136,351,2.298,352,3.292,354,2.241,355,3.065,358,4.397,375,4.725,843,3.292,1195,3.065,1220,5.399,1797,5.399,1941,6.035,1944,6.25,1981,6.598,2548,5.164,2549,5.831,2550,5.164,2551,5.164,2552,5.831,2553,5.831,2554,5.831,2555,5.831,2556,5.831,2557,5.831]],["title/modules/S3Module.html",[306,0.817,330,2.9]],["body/modules/S3Module.html",[0,0.399,3,0.117,4,0.104,5,0.091,13,0.008,27,0.182,40,0.104,177,0.007,178,0.007,224,0.96,236,5.814,306,1.556,308,2.209,309,2.259,310,2.419,311,2.419,312,2.31,313,2.944,314,2.944,330,5.937,337,2.839,338,2.419,339,2.259,2558,6.136,2559,6.136,2560,6.136,2561,6.927,2562,6.927]],["title/injectables/S3Service.html",[236,2.773,406,0.8]],["body/injectables/S3Service.html",[0,0.299,3,0.087,4,0.078,5,0.11,7,0.468,8,0.898,12,0.754,13,0.008,21,0.803,27,0.192,40,0.078,109,1.304,134,0.798,177,0.006,178,0.006,183,2.213,185,2.294,186,6.704,193,2.316,194,4.59,195,6.704,197,6.704,198,4.915,199,6.9,200,3.316,201,5.501,206,4.2,214,2.413,215,2.03,216,1.947,224,0.718,236,4.153,243,1.514,244,3.025,268,2.334,289,2.474,296,4.59,297,4.59,298,2.912,301,2.388,303,1.45,344,2.552,406,1.198,407,1.944,448,2.635,481,3.171,516,3.482,568,6.182,571,6.182,581,4.2,582,4.349,588,2.397,614,4.343,637,3.676,639,4.814,640,2.926,641,3.482,642,4.814,649,5.857,654,4.844,685,2.871,2227,3.171,2368,4.59,2563,4.59,2564,8.716,2565,6.787,2566,6.787,2567,6.787,2568,5.182,2569,5.182,2570,5.182,2571,5.182,2572,5.182,2573,5.182,2574,5.182,2575,4.59,2576,4.59,2577,4.59,2578,5.182,2579,5.182,2580,5.182,2581,5.182,2582,8.031,2583,5.182,2584,5.182,2585,5.182,2586,5.182,2587,6.787,2588,6.787,2589,5.182,2590,5.182,2591,5.182,2592,5.182,2593,5.182,2594,6.787,2595,4.2,2596,5.182,2597,5.182,2598,5.182,2599,5.182,2600,5.182]],["title/classes/SearchHistoryDto.html",[0,0.261,840,3.214]],["body/classes/SearchHistoryDto.html",[0,0.465,2,1.132,3,0.115,4,0.103,5,0.09,7,0.617,8,1.068,12,0.731,13,0.008,15,1.581,21,0.753,27,0.181,28,1.703,29,1.014,31,2.753,34,1.868,36,1.37,40,0.103,80,2.408,134,0.778,177,0.007,178,0.007,205,4.51,840,5.721,889,6.954,1010,6.954,1129,3.633,1209,5.157,2601,6.056,2602,6.837,2603,6.837,2604,6.837]],["title/modules/SearchModule.html",[306,0.817,331,2.9]],["body/modules/SearchModule.html",[0,0.366,3,0.107,4,0.095,5,0.084,13,0.008,27,0.205,40,0.095,177,0.007,178,0.007,181,3.205,224,0.881,306,1.5,308,2.027,309,2.073,310,2.221,311,2.221,312,2.121,313,2.839,314,2.839,318,4.905,321,4.178,322,4.438,326,3.552,331,6.071,337,2.697,338,2.221,339,2.073,341,2.897,346,2.864,348,4.51,351,2.506,352,3.59,354,2.444,355,3.342,843,3.59,851,6.019,1195,3.342,1946,6.274,2605,5.632,2606,6.359,2607,5.632,2608,5.632,2609,6.359,2610,6.359,2611,6.359]],["title/classes/SessionDataPerDayDto.html",[0,0.261,84,1.985]],["body/classes/SessionDataPerDayDto.html",[0,0.506,1,2.499,2,0.514,3,0.052,4,0.047,5,0.041,6,1.397,7,0.28,8,1.127,9,2.955,10,2.955,11,2.955,12,0.812,13,0.008,14,1.715,15,1.051,17,2.645,18,3.179,19,3.377,21,0.501,23,2.066,25,2.187,27,0.143,28,1.809,29,0.46,30,2.865,31,1.61,32,2.635,33,2.51,34,1.027,35,2.523,36,0.622,37,1.531,38,1.193,39,0.926,40,0.13,41,1.359,42,2.107,43,2.645,44,2.194,45,2.645,46,2.645,47,2.695,48,3.673,49,2.57,50,2.645,51,3.072,52,1.438,53,1.987,54,1.82,55,2.079,56,1.438,57,2.187,58,1.438,59,1.397,60,2.187,61,1.438,62,2.792,63,3.484,64,2.74,65,1.438,66,2.542,67,1.438,68,2.645,69,2.187,70,2.079,71,1.438,72,1.322,73,1.438,74,2.792,75,2.187,76,1.322,77,3.089,78,1.397,79,1.322,80,2.309,81,1.438,82,3.843,83,2.955,84,2.066,85,1.752,86,2.499,87,2.499,88,2.645,89,2.645,90,2.792,91,2.645,92,1.359,93,1.438,94,2.57,95,2.955,96,1.538,97,2.955,98,2.955,99,1.438,100,1.163,101,2.28,102,1.438,103,1.438,104,1.647,105,1.727,106,1.438,107,1.438,108,1.322,109,0.906,110,1.438,111,1.438,112,2.187,113,2.187,114,1.438,115,1.438,116,1.438,117,1.223,118,1.397,119,1.438,120,2.499,121,2.792,122,2.578,123,2.368,124,2.187,125,1.438,126,1.438,127,1.397,128,1.438,129,3.539,130,1.538,131,1.71,132,2.36,133,1.359,134,0.414,135,1.397,136,1.322,137,2.066,138,1.438,139,3.179,140,2.124,141,3.179,142,3.179,143,1.397,144,1.438,145,1.438,146,1.438,147,2.792,148,1.438,149,1.438,150,2.187,151,2.187,152,2.187,153,2.124,154,2.187,155,2.187,156,1.438,157,1.438,158,1.438,159,2.792,160,1.438,161,1.438,162,2.187,163,1.438,164,1.438,165,2.792,166,1.438,167,2.645,168,0.906,169,2.187,170,2.187,171,1.438,172,1.359,173,3.348,174,2.187,175,2.124,176,2.187,177,0.004,178,0.004,1114,2.81,2428,4.304,2612,3.103,2613,3.103,2614,3.103]],["title/classes/SessionDurationPerDayDto.html",[0,0.261,82,1.985]],["body/classes/SessionDurationPerDayDto.html",[0,0.507,1,2.515,2,0.519,3,0.053,4,0.047,5,0.041,6,1.412,7,0.283,8,1.129,9,2.203,10,2.203,11,2.203,12,0.812,13,0.008,14,1.717,15,0.876,17,2.662,18,3.193,19,3.509,21,0.417,23,2.082,25,2.203,27,0.144,28,1.81,29,0.465,30,2.784,31,1.622,32,2.638,33,2.514,34,1.035,35,2.527,36,0.628,37,1.54,38,1.205,39,0.936,40,0.13,41,1.373,42,2.11,43,2.662,44,2.207,45,2.662,46,2.662,47,2.702,48,3.683,49,2.586,50,2.662,51,3.077,52,1.453,53,1.988,54,1.831,55,2.09,56,1.453,57,2.203,58,1.453,59,1.412,60,2.203,61,1.453,62,2.807,63,3.495,64,2.746,65,1.453,66,2.547,67,1.453,68,2.662,69,2.203,70,2.09,71,1.453,72,1.336,73,1.453,74,2.807,75,2.203,76,1.336,77,3.102,78,1.412,79,1.336,80,2.418,81,1.453,82,3.698,83,3.361,84,1.373,85,1.756,86,2.515,87,2.515,88,2.662,89,2.662,90,2.807,91,2.662,92,1.373,93,1.453,94,2.586,95,2.971,96,1.55,97,2.971,98,2.971,99,1.453,100,1.172,101,2.291,102,1.453,103,1.453,104,1.66,105,1.74,106,1.453,107,1.453,108,1.336,109,0.913,110,1.453,111,1.453,112,2.203,113,2.203,114,1.453,115,1.453,116,1.453,117,1.235,118,1.412,119,1.453,120,2.515,121,2.807,122,2.591,123,2.383,124,2.203,125,1.453,126,1.453,127,1.412,128,1.453,129,3.548,130,1.55,131,1.719,132,2.367,133,1.373,134,0.417,135,1.412,136,1.336,137,2.082,138,1.453,139,3.193,140,2.141,141,3.193,142,3.193,143,1.412,144,1.453,145,1.453,146,1.453,147,2.807,148,1.453,149,1.453,150,2.203,151,2.203,152,2.203,153,2.141,154,2.203,155,2.203,156,1.453,157,1.453,158,1.453,159,2.807,160,1.453,161,1.453,162,2.203,163,1.453,164,1.453,165,2.807,166,1.453,167,2.662,168,0.913,169,2.203,170,2.203,171,1.453,172,1.373,173,3.361,174,2.203,175,2.141,176,2.203,177,0.004,178,0.004,1114,2.341,2615,3.134,2616,3.134]],["title/classes/SongAnalyticsDto.html",[0,0.261,129,1.985]],["body/classes/SongAnalyticsDto.html",[0,0.503,1,2.449,2,0.497,3,0.051,4,0.045,5,0.04,6,1.352,7,0.271,8,1.12,9,2.132,10,2.132,11,2.132,12,0.812,13,0.008,14,1.718,15,1.367,16,3,17,2.592,18,3.132,19,3.345,21,0.651,23,2.014,25,2.132,27,0.141,28,1.806,29,0.445,30,2.757,31,1.57,32,2.621,33,2.494,34,1.002,35,2.511,36,0.601,37,1.5,38,1.154,39,0.896,40,0.129,41,1.315,42,2.095,43,2.592,44,2.15,45,2.592,46,2.592,47,2.672,48,3.638,49,2.518,50,2.592,51,3.053,52,1.391,53,1.981,54,1.783,55,2.044,56,1.391,57,2.132,58,1.391,59,1.352,60,2.132,61,1.391,62,2.745,63,3.448,64,2.718,65,1.391,66,2.525,67,1.391,68,2.905,69,2.132,70,2.044,71,1.391,72,1.279,73,1.391,74,2.745,75,2.132,76,1.279,77,3.043,78,1.352,79,1.279,80,2.285,81,1.391,82,3.62,83,2.905,84,1.315,85,1.738,86,2.449,87,2.449,88,2.592,89,2.592,90,2.745,91,2.592,92,1.315,93,1.391,94,2.518,95,2.905,96,1.5,97,2.905,98,2.905,99,1.391,100,1.134,101,2.241,102,1.391,103,1.391,104,1.606,105,1.684,106,1.391,107,1.391,108,1.279,109,0.884,110,1.391,111,1.391,112,2.132,113,2.132,114,1.391,115,1.391,116,1.391,117,1.183,118,1.352,119,1.391,120,2.449,121,2.745,122,2.534,123,2.32,124,2.132,125,1.391,126,1.391,127,1.352,128,1.391,129,3.568,130,1.823,131,1.912,132,2.581,133,2.449,134,0.55,135,2.072,136,2.383,137,2.014,138,2.592,139,3.549,140,2.072,141,3.549,142,3.638,143,2.072,144,1.391,145,2.132,146,2.592,147,2.745,148,1.391,149,1.391,150,2.132,151,2.132,152,2.132,153,2.072,154,2.132,155,2.132,156,1.391,157,1.391,158,1.391,159,2.745,160,1.391,161,1.391,162,2.132,163,1.391,164,1.391,165,2.745,166,1.391,167,2.592,168,0.884,169,2.132,170,2.132,171,1.391,172,1.315,173,3.305,174,2.132,175,2.072,176,2.132,177,0.004,178,0.004,2617,4.6,2618,3.002,2619,3.002,2620,3.002,2621,3.002,2622,3.002,2623,3.002,2624,3.002,2625,3.002,2626,3.002,2627,3.002,2628,3.002]],["title/classes/SongInfoDto.html",[0,0.261,1654,2.304]],["body/classes/SongInfoDto.html",[0,0.416,2,0.942,3,0.096,4,0.085,5,0.075,7,0.514,8,0.954,12,0.781,13,0.008,14,1.3,15,1.641,19,3.546,21,0.782,27,0.162,28,1.649,29,0.844,30,2.775,31,2.46,32,2.152,34,1.869,36,1.14,40,0.085,51,2.829,53,1.688,80,2.484,85,1.538,96,2.351,132,2.538,133,3.644,134,0.814,136,3.073,177,0.006,178,0.006,215,1.527,216,2.255,487,2.64,517,2.718,685,2.035,758,3.551,788,5.438,815,4.293,826,5.843,829,4.097,860,6.089,976,2.188,1114,2.803,1129,3.247,1149,7.369,1212,2.894,1326,4.037,1414,4.293,1423,5.318,1427,6.414,1483,4.293,1602,4.613,1654,3.666,1670,3.341,2450,6.386,2629,5.041,2630,7.009,2631,6.386,2632,5.692,2633,5.692,2634,7.21,2635,5.692,2636,5.692,2637,5.692,2638,5.692,2639,5.692,2640,5.692,2641,5.692,2642,5.692,2643,5.692,2644,8.908,2645,8.908,2646,8.908,2647,5.692,2648,5.692,2649,5.692,2650,5.692,2651,5.692,2652,5.692,2653,5.692]],["title/classes/SongInfoEntity.html",[0,0.261,2654,3.673]],["body/classes/SongInfoEntity.html",[0,0.388,2,1.116,3,0.114,4,0.101,5,0.089,7,0.609,8,1.059,12,0.779,13,0.008,15,1.625,21,0.774,27,0.151,28,1.773,29,1,40,0.101,51,3.049,80,2.633,134,0.81,177,0.007,178,0.007,558,2.468,860,6.05,1114,3.939,1427,6.912,2630,7.554,2654,6.483,2655,5.971,2656,6.741,2657,6.741,2658,6.741,2659,6.741]],["title/classes/SongInfosWithCount.html",[0,0.261,1657,2.66]],["body/classes/SongInfosWithCount.html",[0,0.506,2,0.785,3,0.08,4,0.071,5,0.063,7,0.428,8,0.847,12,0.811,13,0.008,14,1.504,15,1.178,21,0.561,27,0.174,28,1.817,29,0.703,30,3.01,32,2.489,33,2.594,34,1.965,35,2.597,36,0.949,37,2.079,39,1.415,40,0.128,42,1.145,47,2.843,51,2.287,53,1.894,54,2.718,55,2.086,64,1.581,66,1.415,85,1.818,100,2.138,101,2.287,104,1.655,105,1.735,132,1.446,134,0.805,168,1.489,177,0.005,178,0.005,462,1.617,484,3.252,497,1.245,511,2.654,707,1.916,708,3.004,829,3.985,831,3.914,905,2.491,1050,3.565,1051,3.054,1065,2.579,1079,2.676,1114,2.334,1148,3.94,1156,2.491,1212,2.409,1391,2.676,1393,2.676,1395,3.611,1397,2.676,1398,2.676,1399,2.676,1400,2.676,1401,2.9,1579,2.9,1649,5.157,1650,2.9,1652,4.197,1654,4.466,1655,2.9,1656,5.004,1657,4.751,1658,4.55,1659,3.033,1660,4.55,1661,2.782,1662,3.033,1663,3.033,1664,3.611,1665,3.033,1666,2.579,1667,3.033,1668,3.033,1669,4.633,1670,2.782,1671,3.033,1672,3.755,1673,3.033,1674,3.033,1675,3.033,1676,3.033,1677,3.033,2660,4.739,2661,4.739]],["title/controllers/SongsController.html",[179,1.985,1970,3.045]],["body/controllers/SongsController.html",[0,0.387,3,0.113,4,0.101,5,0.089,12,0.572,13,0.008,27,0.191,29,0.996,40,0.101,53,1.432,64,2.24,76,2.862,85,1.432,109,1.29,130,2.602,131,2.284,132,2.435,134,0.7,177,0.007,178,0.007,179,2.941,181,2.787,185,1.801,215,1.801,224,0.931,230,6.019,231,5.362,245,2.049,246,4.512,303,1.879,412,4.763,433,5.442,478,4.763,481,4.109,487,2.24,588,2.005,1423,5.362,1968,5.211,1970,5.362,2178,7.069,2662,5.948,2663,5.948,2664,6.715,2665,6.715,2666,6.715,2667,6.715,2668,6.715]],["title/modules/SongsModule.html",[306,0.817,332,2.9]],["body/modules/SongsModule.html",[0,0.38,3,0.111,4,0.099,5,0.087,13,0.008,27,0.201,40,0.099,177,0.007,178,0.007,181,3.277,224,0.915,306,1.524,308,2.104,309,2.151,310,2.304,311,2.304,312,2.2,313,2.884,314,2.884,318,4.948,326,3.583,332,6.024,337,2.758,338,2.304,339,2.151,341,2.962,346,2.971,348,4.68,1968,5.781,1970,5.679,2663,5.844,2669,5.844,2670,5.844,2671,6.598,2672,5.844,2673,6.598,2674,6.598]],["title/injectables/SongsService.html",[406,0.8,1968,2.773]],["body/injectables/SongsService.html",[0,0.379,3,0.111,4,0.099,5,0.087,7,0.594,12,0.672,13,0.008,21,0.692,27,0.189,40,0.099,109,1.515,131,2.115,132,2.406,134,0.741,136,2.805,177,0.007,178,0.007,183,2.571,185,2.265,193,2.246,214,2.514,215,2.115,216,2.028,224,0.912,243,1.922,245,2.008,301,1.803,303,1.842,406,1.392,407,2.468,481,4.027,487,2.63,583,3.188,584,2.987,588,2.354,617,2.594,618,2.661,619,2.882,1355,4.963,1423,5.298,1968,4.825,2675,5.829,2676,7.885,2677,6.581,2678,7.885,2679,6.581,2680,5.334,2681,6.581,2682,7.885]],["title/controllers/SpotifyAuthController.html",[179,1.985,546,3.045]],["body/controllers/SpotifyAuthController.html",[0,0.219,3,0.064,4,0.057,5,0.05,7,0.343,12,0.758,13,0.008,15,1.185,21,0.564,27,0.174,29,0.564,40,0.057,44,2.472,53,1.985,54,2.617,85,1.659,109,1.494,130,3,134,0.796,168,1.669,177,0.005,178,0.005,179,1.665,181,1.578,183,1.788,185,2.276,190,6.497,193,2.736,205,1.998,214,2.051,215,2.242,216,1.654,222,3.081,224,0.527,227,5.213,231,5.016,232,3.367,240,2.554,242,3.081,243,1.111,244,1.788,245,1.673,246,4.731,254,4.857,255,4.444,256,4.857,257,4.777,258,4.857,259,3.676,260,3.096,268,3.765,286,4.308,287,5.31,289,2.176,293,3.832,301,2.401,303,2.296,390,4.136,402,5.554,412,2.697,414,4.506,422,3.676,423,4.857,427,4.562,431,5.83,433,6.303,436,6.236,437,3.889,440,4.857,441,4.857,465,3.685,473,2.542,475,3.071,476,2.147,477,7.268,478,2.697,480,6.236,483,2.897,484,4.076,546,3.685,588,2.321,618,1.537,619,1.665,634,2.147,670,3.096,692,1.933,712,3.58,779,4.444,810,2.147,939,2.867,994,2.147,1079,3.096,1740,4.857,1839,3.367,1871,5.259,1934,2.882,2187,4.444,2188,4.444,2191,4.444,2683,3.367,2684,3.802,2685,6.432,2686,6.432,2687,6.432,2688,3.802,2689,5.775,2690,3.802,2691,5.483,2692,5.483,2693,5.483,2694,5.483,2695,3.802,2696,6.432,2697,6.303,2698,6.432,2699,7.777,2700,3.802,2701,6.432,2702,6.432,2703,6.432,2704,6.432,2705,3.802,2706,5.483,2707,3.802,2708,3.802,2709,3.802,2710,3.802,2711,7.041,2712,3.802,2713,3.802,2714,4.731,2715,3.802,2716,3.802,2717,3.802,2718,3.802,2719,3.802,2720,3.802,2721,3.936,2722,4.391,2723,4.308,2724,3.367,2725,7.465,2726,3.802,2727,3.802,2728,3.802,2729,5.13,2730,5.483,2731,5.483,2732,4.731,2733,3.802,2734,3.802,2735,3.802,2736,5.483,2737,5.483,2738,5.483,2739,3.802,2740,2.554,2741,2.554,2742,3.802,2743,3.685,2744,2.554,2745,3.802,2746,3.802,2747,3.802,2748,3.802,2749,3.802,2750,5.483,2751,3.685,2752,4.857,2753,3.802,2754,5.483,2755,3.802,2756,3.802,2757,3.802,2758,3.802,2759,2.554,2760,3.802,2761,3.367,2762,3.802,2763,3.802,2764,3.802,2765,3.802,2766,3.802,2767,6.432,2768,3.802,2769,2.326,2770,3.802,2771,3.802]],["title/modules/SpotifyAuthModule.html",[306,0.817,542,2.773]],["body/modules/SpotifyAuthModule.html",[0,0.374,3,0.109,4,0.097,5,0.086,13,0.008,27,0.203,40,0.097,177,0.007,178,0.007,181,2.691,224,0.899,306,1.513,308,2.067,309,2.114,310,2.264,311,2.264,312,2.163,313,2.863,314,2.863,321,4.197,326,3.568,334,5.315,337,2.729,338,2.264,339,2.114,341,2.931,346,2.92,353,3.806,354,2.492,355,3.408,359,5.543,360,3.529,361,5.255,542,5.787,1934,4.955,2724,5.743,2772,5.743,2773,5.743,2774,6.484,2775,5.743,2776,6.484]],["title/injectables/SpotifyAuthService.html",[406,0.8,1934,2.382]],["body/injectables/SpotifyAuthService.html",[0,0.416,3,0.047,4,0.042,5,0.037,7,0.252,8,0.575,12,0.735,13,0.008,14,0.962,21,0.713,27,0.189,28,1.6,29,0.413,32,1.798,33,1.558,34,1.671,35,1.525,36,0.558,39,0.832,40,0.098,42,0.673,44,1.669,85,0.594,96,0.908,100,1.316,109,1.388,117,1.098,130,1.74,131,0.747,134,0.805,168,1.536,177,0.004,178,0.004,183,1.416,185,2.354,193,2.549,205,2.282,214,2.448,215,2.059,216,1.974,218,1.464,220,1.635,224,0.386,243,1.268,244,2.769,245,1.992,257,2.778,259,3.865,260,1.573,268,2.403,289,2.456,298,3.049,301,2.446,302,2.013,303,2.091,344,1.372,360,1.516,394,1.516,406,0.767,407,1.045,414,2.778,422,3.215,431,4.179,448,2.207,449,1.516,461,1.516,462,1.821,463,2.804,475,2.073,476,1.573,487,2.009,488,2.452,497,1.817,501,1.516,503,2.657,517,2.073,524,3.027,531,2.792,558,2.391,559,3.554,563,1.416,565,3.432,569,4.061,573,3.08,575,3.846,581,2.258,582,3.517,583,2.435,584,2.056,588,2.424,617,1.098,618,1.755,619,1.22,620,1.573,628,3.132,634,3.401,635,1.635,640,1.573,647,2.549,652,1.59,662,2.452,667,2.659,670,3.906,674,1.635,675,2.792,676,3.536,678,1.635,679,2.549,680,3.636,681,2.549,682,3.833,683,1.635,684,1.635,685,0.996,686,1.635,692,2.712,700,1.464,712,2.207,717,3.536,810,3.401,976,2.659,994,3.012,1026,1.705,1192,1.187,1245,1.516,1283,1.516,1319,1.573,1394,1.872,1402,1.872,1404,1.783,1601,2.917,1722,1.705,1727,1.872,1728,1.783,1828,1.783,1869,1.872,1871,4.233,1934,2.282,1962,3.797,2107,3.132,2132,3.414,2227,4.42,2229,1.872,2241,2.917,2274,1.573,2689,5.158,2714,1.872,2721,1.705,2722,4.514,2723,4.892,2729,4.912,2732,3.585,2740,1.872,2741,3.585,2743,4.854,2744,1.872,2751,1.872,2759,1.872,2761,3.846,2769,3.996,2777,1.872,2778,3.784,2779,4.906,2780,3.784,2781,4.342,2782,4.342,2783,3.784,2784,4.342,2785,5.123,2786,4.342,2787,3.08,2788,2.786,2789,2.786,2790,2.786,2791,3.08,2792,2.786,2793,3.08,2794,2.786,2795,3.08,2796,2.786,2797,3.08,2798,2.786,2799,2.786,2800,2.786,2801,3.08,2802,2.786,2803,2.786,2804,2.786,2805,1.635,2806,1.635,2807,1.635,2808,3.784,2809,1.872,2810,3.784,2811,1.872,2812,1.976,2813,3.784,2814,3.784,2815,3.784,2816,4.273,2817,3.414,2818,1.976,2819,1.872,2820,1.976,2821,1.872,2822,2.917,2823,3.08,2824,1.976,2825,2.917,2826,1.976,2827,3.784,2828,1.976,2829,1.976,2830,1.976,2831,1.976,2832,1.976,2833,1.976,2834,1.976,2835,1.976,2836,1.976,2837,3.08,2838,3.08,2839,1.976,2840,1.976,2841,3.08,2842,1.976,2843,1.976,2844,1.976,2845,1.976,2846,1.976,2847,3.08,2848,1.976,2849,1.976,2850,3.784,2851,3.784,2852,1.976,2853,1.976,2854,4.273,2855,1.783,2856,1.976,2857,3.08,2858,3.08,2859,3.08,2860,1.976,2861,1.976,2862,1.976,2863,3.784,2864,3.08,2865,3.08,2866,3.08,2867,3.08,2868,3.08,2869,1.976,2870,1.976,2871,1.872,2872,1.783,2873,3.08,2874,1.976,2875,1.976,2876,1.976,2877,1.976,2878,4.273,2879,3.08,2880,2.917,2881,3.08,2882,3.08,2883,1.976,2884,1.976,2885,1.976,2886,1.976,2887,3.08,2888,3.08,2889,2.917,2890,3.08,2891,1.976,2892,3.08,2893,1.976,2894,1.976,2895,1.976,2896,1.976,2897,3.08,2898,1.976,2899,4.906,2900,1.976,2901,4.273,2902,3.08,2903,1.976,2904,1.976,2905,1.976,2906,1.976,2907,1.976,2908,1.976,2909,1.976,2910,1.976,2911,3.08,2912,1.976,2913,1.872,2914,1.976,2915,1.976,2916,1.976]],["title/classes/SpotifyCallbackResponse.html",[0,0.261,2721,2.773]],["body/classes/SpotifyCallbackResponse.html",[0,0.432,2,0.511,3,0.052,4,0.046,5,0.041,7,0.278,8,0.622,12,0.639,13,0.008,14,1.026,15,0.865,21,0.412,27,0.193,28,1.634,29,0.458,32,1.897,33,1.661,34,1.722,35,1.626,36,0.618,39,0.921,40,0.103,42,0.745,44,1.805,85,0.658,96,1.006,100,1.403,109,1.439,117,1.216,130,1.854,131,0.827,134,0.788,168,1.55,177,0.004,178,0.004,185,2.009,205,2.468,218,1.621,220,1.811,224,0.428,243,0.901,244,2.631,245,2.087,257,3.005,259,4.039,260,1.742,268,2.561,289,2.492,298,3.096,301,2.477,302,2.177,303,2.161,344,1.519,360,1.679,394,1.679,406,0.829,414,3.005,422,3.368,431,4.377,448,2.388,449,1.679,461,1.679,462,1.94,463,2.989,475,2.242,476,1.742,487,2.12,488,2.652,497,1.493,501,1.679,503,2.874,517,2.242,524,3.171,531,2.946,558,2.504,559,3.723,563,1.568,565,3.596,569,3.732,582,2.891,583,1.899,584,1.603,588,2.151,617,1.216,618,1.899,619,1.351,620,1.742,628,3.338,634,3.589,635,1.811,640,1.742,647,2.757,652,1.719,662,2.652,667,2.77,670,4.069,674,1.811,675,2.946,676,3.732,678,1.811,679,2.757,680,3.788,681,2.757,682,4.015,683,1.811,684,1.811,685,1.103,686,1.811,692,1.568,700,1.621,712,2.388,717,3.732,810,3.589,976,2.77,994,3.211,1026,1.888,1129,1.389,1192,1.315,1245,1.679,1283,1.679,1319,1.742,1394,2.073,1402,2.073,1404,1.974,1601,3.155,1722,1.888,1727,2.073,1728,1.974,1828,1.974,1869,2.073,1871,4.186,1934,1.621,1962,2.989,2107,3.338,2132,3.639,2227,4.584,2229,2.073,2241,3.155,2689,4.842,2714,2.073,2721,2.874,2722,4.36,2723,4.584,2729,5.062,2732,3.821,2740,2.073,2741,3.821,2743,5.034,2744,2.073,2751,2.073,2759,3.821,2769,2.874,2777,2.073,2778,2.188,2779,4.509,2780,2.188,2783,2.188,2785,4.033,2787,2.188,2791,2.188,2793,2.188,2795,2.188,2797,2.188,2801,2.188,2805,1.811,2806,1.811,2807,1.811,2808,4.033,2809,2.073,2810,4.033,2811,2.073,2812,2.188,2813,4.033,2814,4.033,2815,4.033,2816,4.509,2817,3.639,2818,2.188,2819,2.073,2820,2.188,2821,2.073,2822,3.155,2823,3.331,2824,2.188,2825,3.155,2826,2.188,2827,4.033,2828,2.188,2829,2.188,2830,2.188,2831,2.188,2832,2.188,2833,2.188,2834,2.188,2835,2.188,2836,2.188,2837,3.331,2838,3.331,2839,2.188,2840,2.188,2841,3.331,2842,2.188,2843,2.188,2844,2.188,2845,2.188,2846,2.188,2847,3.331,2848,2.188,2849,2.188,2850,4.033,2851,4.033,2852,2.188,2853,2.188,2854,4.509,2855,1.974,2856,2.188,2857,3.331,2858,3.331,2859,3.331,2860,2.188,2861,2.188,2862,2.188,2863,4.033,2864,3.331,2865,3.331,2866,3.331,2867,3.331,2868,3.331,2869,2.188,2870,2.188,2871,2.073,2872,1.974,2873,3.331,2874,2.188,2875,2.188,2876,2.188,2877,2.188,2878,4.509,2879,3.331,2880,3.155,2881,3.331,2882,3.331,2883,2.188,2884,2.188,2885,2.188,2886,2.188,2887,3.331,2888,3.331,2889,3.155,2890,3.331,2891,2.188,2892,3.331,2893,2.188,2894,2.188,2895,2.188,2896,2.188,2897,3.331,2898,2.188,2899,5.111,2900,2.188,2901,4.509,2902,3.331,2903,2.188,2904,2.188,2905,2.188,2906,2.188,2907,2.188,2908,2.188,2909,2.188,2910,2.188,2911,3.331,2912,2.188,2913,2.073,2914,2.188,2915,2.188,2916,2.188,2917,3.085,2918,3.085,2919,3.085]],["title/modules/SpotifyModule.html",[306,0.817,333,2.559]],["body/modules/SpotifyModule.html",[0,0.372,3,0.109,4,0.097,5,0.085,13,0.008,27,0.205,40,0.097,177,0.007,178,0.007,181,2.677,224,0.894,306,1.51,308,2.057,309,2.104,310,2.253,311,2.253,312,2.152,313,2.857,314,2.857,324,6.077,326,3.564,328,5.787,333,5.337,337,2.721,338,2.253,339,2.104,341,2.923,346,2.906,359,5.527,360,3.512,372,5.877,373,4.335,376,5.715,377,5.715,1957,6.029,2920,5.715,2921,6.452,2922,5.715,2923,5.715,2924,6.452,2925,6.452]],["title/classes/SpotifyTokenPair.html",[0,0.261,2722,2.559]],["body/classes/SpotifyTokenPair.html",[0,0.432,2,0.511,3,0.052,4,0.046,5,0.041,7,0.278,8,0.622,12,0.639,13,0.008,14,1.146,15,0.865,21,0.412,27,0.193,28,1.634,29,0.458,32,1.897,33,1.661,34,1.722,35,1.626,36,0.618,39,0.921,40,0.103,42,0.745,44,1.805,85,0.658,96,1.006,100,1.403,109,1.439,117,1.216,130,1.854,131,0.827,134,0.785,168,1.55,177,0.004,178,0.004,185,2.009,205,2.468,218,1.621,220,1.811,224,0.428,243,0.901,244,2.631,245,2.087,257,3.005,259,3.895,260,1.742,268,2.561,289,2.492,298,3.096,301,2.477,302,2.177,303,2.161,344,1.519,360,1.679,394,1.679,406,0.829,414,3.005,422,3.368,431,4.794,448,2.388,449,1.679,461,1.679,462,1.94,463,2.989,475,2.242,476,1.742,487,2.12,488,2.652,497,1.493,501,1.679,503,2.874,517,2.242,524,3.171,531,2.946,558,2.504,559,3.723,563,1.568,565,3.596,569,3.732,582,2.891,583,1.899,584,1.603,588,2.151,617,1.216,618,1.899,619,1.351,620,1.742,628,3.338,634,3.589,635,1.811,640,1.742,647,2.757,652,1.719,662,2.652,667,2.77,670,4.069,674,1.811,675,2.946,676,3.732,678,1.811,679,2.757,680,3.788,681,2.757,682,4.015,683,1.811,684,1.811,685,1.103,686,1.811,692,1.568,700,1.621,712,2.388,717,3.732,810,3.589,976,2.77,994,3.211,1026,1.888,1192,1.315,1212,1.568,1245,1.679,1283,1.679,1319,1.742,1394,2.073,1402,2.073,1404,1.974,1601,3.155,1722,1.888,1727,2.073,1728,1.974,1791,2.732,1828,1.974,1869,2.073,1871,4.186,1934,1.621,1962,2.989,2107,3.338,2132,3.639,2227,4.584,2229,2.073,2241,3.155,2689,4.842,2714,2.073,2721,1.888,2722,4.36,2723,4.725,2729,5.062,2732,3.821,2740,2.073,2741,3.821,2743,5.034,2744,2.073,2751,3.821,2759,2.073,2769,2.874,2777,2.073,2778,2.188,2779,4.509,2780,2.188,2783,2.188,2785,4.033,2787,2.188,2791,2.188,2793,2.188,2795,2.188,2797,2.188,2801,2.188,2805,1.811,2806,1.811,2807,1.811,2808,4.033,2809,2.073,2810,4.033,2811,2.073,2812,2.188,2813,4.033,2814,4.033,2815,4.033,2816,4.509,2817,3.639,2818,2.188,2819,2.073,2820,2.188,2821,2.073,2822,3.155,2823,3.331,2824,2.188,2825,3.155,2826,2.188,2827,4.033,2828,2.188,2829,2.188,2830,2.188,2831,2.188,2832,2.188,2833,2.188,2834,2.188,2835,2.188,2836,2.188,2837,3.331,2838,3.331,2839,2.188,2840,2.188,2841,3.331,2842,2.188,2843,2.188,2844,2.188,2845,2.188,2846,2.188,2847,3.331,2848,2.188,2849,2.188,2850,4.033,2851,4.033,2852,2.188,2853,2.188,2854,4.509,2855,1.974,2856,2.188,2857,3.331,2858,3.331,2859,3.331,2860,2.188,2861,2.188,2862,2.188,2863,4.033,2864,3.331,2865,3.331,2866,3.331,2867,3.331,2868,3.331,2869,2.188,2870,2.188,2871,2.073,2872,1.974,2873,3.331,2874,2.188,2875,2.188,2876,2.188,2877,2.188,2878,4.509,2879,3.331,2880,3.155,2881,3.331,2882,3.331,2883,2.188,2884,2.188,2885,2.188,2886,2.188,2887,3.331,2888,3.331,2889,3.155,2890,3.331,2891,2.188,2892,3.331,2893,2.188,2894,2.188,2895,2.188,2896,2.188,2897,3.331,2898,2.188,2899,5.111,2900,2.188,2901,4.509,2902,3.331,2903,2.188,2904,2.188,2905,2.188,2906,2.188,2907,2.188,2908,2.188,2909,2.188,2910,2.188,2911,3.331,2912,2.188,2913,2.073,2914,2.188,2915,2.188,2916,2.188,2926,3.085,2927,3.085]],["title/classes/SpotifyTokenRefreshResponse.html",[0,0.261,2817,2.9]],["body/classes/SpotifyTokenRefreshResponse.html",[0,0.43,2,0.505,3,0.051,4,0.046,5,0.04,7,0.275,8,0.616,12,0.672,13,0.008,14,1.14,15,1.164,21,0.554,27,0.192,28,1.63,29,0.452,32,1.886,33,1.649,34,1.717,35,1.614,36,0.611,39,0.91,40,0.102,42,0.736,44,1.789,85,0.65,96,0.994,100,1.392,109,1.434,117,1.202,130,1.841,131,0.818,134,0.792,168,1.545,177,0.004,178,0.004,185,2.001,205,2.447,218,1.603,220,1.79,224,0.423,243,0.891,244,2.623,245,2.076,257,2.979,259,3.882,260,1.722,268,2.543,289,2.488,298,3.09,301,2.474,302,2.158,303,2.153,344,1.501,360,1.659,394,1.659,406,0.822,414,2.979,422,3.351,431,4.355,448,2.366,449,1.659,461,1.659,462,1.927,463,2.968,475,2.223,476,1.722,487,2.107,488,2.628,497,1.483,501,1.659,503,2.848,517,2.223,524,3.154,531,2.929,558,2.491,559,3.704,563,1.55,565,3.577,569,3.709,582,2.87,583,1.882,584,1.588,588,2.141,617,1.202,618,1.882,619,1.335,620,1.722,628,3.995,634,3.568,635,1.79,640,1.722,647,2.732,652,1.704,662,2.628,667,2.757,670,4.05,674,1.79,675,2.929,676,3.709,678,1.79,679,2.732,680,3.77,681,2.732,682,3.995,683,1.79,684,1.79,685,1.09,686,1.79,692,1.55,700,1.603,712,2.366,717,3.709,810,3.568,976,2.757,994,3.188,1026,1.866,1129,2.543,1192,1.299,1212,1.55,1245,1.659,1283,1.659,1319,1.722,1394,2.049,1402,2.049,1404,1.951,1601,3.128,1722,1.866,1727,2.049,1728,1.951,1828,1.951,1869,2.049,1871,4.164,1934,1.603,1962,2.968,2107,3.314,2132,3.613,2227,4.566,2229,2.049,2241,3.128,2689,4.82,2714,2.049,2721,1.866,2722,4.213,2723,4.566,2729,5.045,2732,3.794,2740,2.049,2741,3.794,2743,5.014,2744,2.049,2751,2.049,2759,2.049,2769,2.848,2777,2.049,2778,2.163,2779,4.482,2780,2.163,2783,2.163,2785,4.005,2787,2.163,2791,2.163,2793,2.163,2795,2.163,2797,2.163,2801,2.163,2805,1.79,2806,1.79,2807,1.79,2808,4.005,2809,2.049,2810,4.005,2811,2.049,2812,2.163,2813,4.827,2814,4.827,2815,4.827,2816,4.482,2817,4.043,2818,2.163,2819,2.049,2820,2.163,2821,2.049,2822,3.128,2823,3.302,2824,2.163,2825,3.128,2826,2.163,2827,4.005,2828,2.163,2829,2.163,2830,2.163,2831,2.163,2832,2.163,2833,2.163,2834,2.163,2835,2.163,2836,2.163,2837,3.302,2838,3.302,2839,2.163,2840,2.163,2841,3.302,2842,2.163,2843,2.163,2844,2.163,2845,2.163,2846,2.163,2847,3.302,2848,2.163,2849,2.163,2850,4.005,2851,4.005,2852,2.163,2853,2.163,2854,4.482,2855,1.951,2856,2.163,2857,3.302,2858,3.302,2859,3.302,2860,2.163,2861,2.163,2862,2.163,2863,4.005,2864,3.302,2865,3.302,2866,3.302,2867,3.302,2868,3.302,2869,2.163,2870,2.163,2871,2.049,2872,1.951,2873,3.302,2874,2.163,2875,2.163,2876,2.163,2877,2.163,2878,4.482,2879,3.302,2880,3.128,2881,3.302,2882,3.302,2883,2.163,2884,2.163,2885,2.163,2886,2.163,2887,3.302,2888,3.302,2889,3.128,2890,3.302,2891,2.163,2892,3.302,2893,2.163,2894,2.163,2895,2.163,2896,2.163,2897,3.302,2898,2.163,2899,5.088,2900,2.163,2901,4.482,2902,3.302,2903,2.163,2904,2.163,2905,2.163,2906,2.163,2907,2.163,2908,2.163,2909,2.163,2910,2.163,2911,3.302,2912,2.163,2913,2.049,2914,2.163,2915,2.163,2916,2.163,2928,3.049,2929,3.049,2930,3.049,2931,3.049]],["title/classes/SpotifyTokenResponse.html",[0,0.261,2723,2.773]],["body/classes/SpotifyTokenResponse.html",[0,0.429,2,0.502,3,0.051,4,0.045,5,0.04,7,0.274,8,0.613,12,0.685,13,0.008,14,1.136,15,1.25,21,0.596,27,0.192,28,1.628,29,0.45,32,1.88,33,1.643,34,1.714,35,1.608,36,0.607,39,0.905,40,0.102,42,0.732,44,1.781,85,0.646,96,0.988,100,1.388,109,1.431,117,1.195,130,1.834,131,0.813,134,0.794,168,1.543,177,0.004,178,0.004,185,1.997,205,2.436,218,1.593,220,1.78,224,0.42,243,0.885,244,2.619,245,2.071,257,2.965,259,3.876,260,1.712,268,2.534,289,2.486,298,3.088,301,2.472,302,2.148,303,2.149,344,1.493,360,1.65,394,1.65,406,0.818,414,2.965,422,3.342,431,4.343,448,2.356,449,1.65,461,1.65,462,1.92,463,2.957,475,2.213,476,1.712,487,2.101,488,2.617,497,1.477,501,1.65,503,2.836,517,2.213,524,3.146,531,2.92,558,2.485,559,3.694,563,1.541,565,3.568,569,3.698,582,2.86,583,1.874,584,1.581,588,2.136,617,1.195,618,1.874,619,1.328,620,1.712,628,3.984,634,3.557,635,1.78,640,1.712,647,2.72,652,1.697,662,2.617,667,2.751,670,4.041,674,1.78,675,2.92,676,3.698,678,1.78,679,2.72,680,3.762,681,2.72,682,3.984,683,1.78,684,1.78,685,1.084,686,1.78,692,1.541,700,1.593,712,2.356,717,3.698,810,3.557,976,2.751,994,3.176,1026,1.855,1129,2.837,1192,1.292,1212,1.541,1245,1.65,1283,1.65,1319,1.712,1394,2.037,1402,2.037,1404,1.94,1601,3.114,1722,1.855,1727,2.037,1728,1.94,1828,1.94,1869,2.037,1871,4.153,1934,1.593,1962,2.957,2107,3.302,2132,3.6,2227,4.557,2229,2.037,2241,3.114,2689,4.809,2714,2.037,2721,1.855,2722,4.205,2723,4.699,2729,5.037,2732,3.78,2740,2.037,2741,3.78,2743,5.004,2744,2.037,2751,2.037,2759,2.037,2769,2.836,2777,2.037,2778,2.15,2779,4.468,2780,2.15,2783,2.15,2785,3.99,2787,2.15,2791,2.15,2793,2.15,2795,2.15,2797,2.15,2801,2.15,2805,1.78,2806,1.78,2807,1.78,2808,3.99,2809,2.037,2810,3.99,2811,2.037,2812,2.15,2813,4.814,2814,4.814,2815,4.814,2816,5.076,2817,3.6,2818,2.15,2819,2.037,2820,2.15,2821,2.037,2822,3.114,2823,3.287,2824,2.15,2825,3.114,2826,2.15,2827,3.99,2828,2.15,2829,2.15,2830,2.15,2831,2.15,2832,2.15,2833,2.15,2834,2.15,2835,2.15,2836,2.15,2837,3.287,2838,3.287,2839,2.15,2840,2.15,2841,3.287,2842,2.15,2843,2.15,2844,2.15,2845,2.15,2846,2.15,2847,3.287,2848,2.15,2849,2.15,2850,3.99,2851,3.99,2852,2.15,2853,2.15,2854,4.468,2855,1.94,2856,2.15,2857,3.287,2858,3.287,2859,3.287,2860,2.15,2861,2.15,2862,2.15,2863,3.99,2864,3.287,2865,3.287,2866,3.287,2867,3.287,2868,3.287,2869,2.15,2870,2.15,2871,2.037,2872,1.94,2873,3.287,2874,2.15,2875,2.15,2876,2.15,2877,2.15,2878,4.468,2879,3.287,2880,3.114,2881,3.287,2882,3.287,2883,2.15,2884,2.15,2885,2.15,2886,2.15,2887,3.287,2888,3.287,2889,3.114,2890,3.287,2891,2.15,2892,3.287,2893,2.15,2894,2.15,2895,2.15,2896,2.15,2897,3.287,2898,2.15,2899,5.076,2900,2.15,2901,4.468,2902,3.287,2903,2.15,2904,2.15,2905,2.15,2906,2.15,2907,2.15,2908,2.15,2909,2.15,2910,2.15,2911,3.287,2912,2.15,2913,2.037,2914,2.15,2915,2.15,2916,2.15,2932,3.031,2933,3.031,2934,3.031,2935,3.031,2936,3.031]],["title/classes/SpotifyUser.html",[0,0.261,2937,3.673]],["body/classes/SpotifyUser.html",[0,0.318,2,0.915,3,0.093,4,0.083,5,0.073,7,0.499,8,0.936,12,0.811,13,0.008,14,1.408,21,0.814,40,0.128,63,2.488,100,1.363,130,1.801,131,2.207,134,0.839,177,0.006,178,0.006,205,2.904,214,1.762,215,1.482,216,2.361,243,1.614,463,4.325,511,2.936,1051,4.278,1722,5.035,2274,3.995,2855,5.266,2937,5.734,2938,4.477,2939,8.229,2940,8.229,2941,8.229,2942,8.229,2943,8.507,2944,8.229,2945,8.229,2946,7.075,2947,7.075,2948,5.525,2949,5.525,2950,5.525,2951,7.288,2952,5.525,2953,7.288,2954,5.525,2955,5.525,2956,5.525,2957,5.525,2958,5.525,2959,5.525,2960,5.525,2961,5.525,2962,5.525,2963,5.525,2964,5.525,2965,5.525,2966,5.525,2967,5.525,2968,5.525,2969,5.525,2970,5.525,2971,5.525,2972,5.525,2973,5.525,2974,5.525,2975,5.525,2976,5.525,2977,5.525,2978,5.525,2979,5.525,2980,5.525,2981,5.525,2982,5.525,2983,5.525,2984,5.525,2985,5.525,2986,5.525,2987,5.525,2988,5.525]],["title/modules/TasksModule.html",[306,0.817,334,2.66]],["body/modules/TasksModule.html",[0,0.366,3,0.107,4,0.095,5,0.084,13,0.008,27,0.206,40,0.095,70,2.068,177,0.007,178,0.007,215,1.701,224,0.879,306,1.499,308,2.023,309,2.068,310,2.215,311,2.215,312,2.116,313,2.836,314,2.836,319,5.512,326,3.55,333,5.086,334,5.538,337,2.693,338,2.215,339,2.068,341,2.893,346,2.857,358,4.784,362,3.882,365,4.059,366,4.784,372,5.816,373,4.262,741,5.141,742,4.059,744,5.618,745,4.499,1960,5.182,1962,4.942,2989,5.618,2990,6.343,2991,5.618,2992,5.618,2993,6.343,2994,6.343,2995,6.343,2996,6.343]],["title/classes/TasksProcessor.html",[0,0.261,1960,3.045]],["body/classes/TasksProcessor.html",[0,0.227,2,0.653,3,0.133,4,0.059,5,0.052,7,0.356,12,0.61,13,0.008,14,0.711,15,1.209,21,0.628,27,0.189,40,0.059,53,1.201,54,1.795,64,2.813,66,2.26,70,1.286,72,3.594,100,1.766,109,1.082,130,2.567,134,0.494,168,1.376,177,0.005,178,0.005,183,1.836,185,2.295,193,2.24,204,4.987,214,2.283,215,2.112,216,1.841,243,1.645,244,2.141,245,2.003,289,2.517,298,1.377,301,2.515,303,2.447,362,2.413,373,2.65,426,3.993,447,3.493,461,3.064,497,1.989,558,2.061,583,2.895,584,2.443,617,1.554,618,2.276,619,1.727,673,2.772,675,3.043,742,2.524,745,5.079,785,5.088,788,4.952,975,3.993,976,2.164,1015,2.798,1096,2.798,1195,3.98,1627,3.493,1648,3.196,1817,2.798,1840,7.87,1847,4.987,1858,6.25,1860,4.987,1957,5.039,1960,3.783,2001,2.798,2127,4.563,2262,7.178,2358,3.493,2680,3.196,2722,3.179,2752,3.493,2769,2.413,2805,2.315,2806,2.315,2807,2.315,2819,2.65,2889,2.65,2997,3.493,2998,4.987,2999,5.63,3000,5.63,3001,3.944,3002,3.944,3003,5.63,3004,8.006,3005,3.944,3006,3.944,3007,5.63,3008,3.944,3009,3.944,3010,5.63,3011,3.944,3012,5.815,3013,3.944,3014,3.944,3015,3.493,3016,3.493,3017,6.565,3018,3.944,3019,3.944,3020,3.944,3021,5.63,3022,3.493,3023,3.196,3024,3.944,3025,6.565,3026,3.944,3027,3.944,3028,3.944,3029,3.944,3030,3.944,3031,6.565,3032,3.944,3033,8.105,3034,6.565,3035,3.944,3036,3.944,3037,3.944,3038,5.63,3039,7.874,3040,3.944,3041,5.63,3042,3.944,3043,3.944,3044,3.944,3045,3.944,3046,3.944,3047,6.565,3048,3.944,3049,3.944,3050,5.63,3051,5.63,3052,5.63,3053,5.63,3054,5.63,3055,5.63,3056,3.944,3057,5.63,3058,5.63,3059,5.63,3060,3.944,3061,3.944,3062,3.944,3063,3.944,3064,6.565,3065,5.63,3066,3.944,3067,3.944,3068,3.944,3069,3.944,3070,3.944,3071,5.63,3072,3.944,3073,5.63,3074,3.944,3075,3.944,3076,3.944,3077,3.944,3078,3.944,3079,3.944,3080,3.944,3081,3.944,3082,3.944,3083,5.63,3084,5.63,3085,5.63,3086,3.944,3087,5.63,3088,5.63,3089,5.63,3090,3.944,3091,3.944,3092,3.944,3093,3.944,3094,3.944,3095,4.246,3096,5.63,3097,3.944,3098,5.63,3099,5.63,3100,3.944,3101,3.944,3102,5.63,3103,3.944,3104,3.944,3105,3.944]],["title/injectables/TasksService.html",[406,0.8,1962,2.382]],["body/injectables/TasksService.html",[0,0.336,3,0.135,4,0.088,5,0.077,7,0.526,12,0.682,13,0.008,15,1.074,21,0.736,27,0.201,40,0.088,66,2.389,70,2.877,77,2.626,130,2.609,134,0.702,143,2.626,177,0.006,178,0.006,183,2.387,185,2.468,193,2.731,214,2.552,215,2.146,216,2.058,224,0.808,243,1.703,244,1.901,245,1.779,259,2.871,303,2.349,362,3.568,370,4.397,406,1.293,407,2.187,461,3.174,497,2.204,588,2.185,675,2.703,742,3.731,745,5.676,753,5.164,755,6.484,765,5.164,770,5.164,976,2.814,1293,4.136,1811,6.484,1817,5.193,1818,5.164,1833,5.164,1834,4.725,1962,3.848,2722,4.739,2769,4.897,2805,3.423,2806,3.423,2807,3.423,2998,7.815,3004,5.164,3012,5.164,3015,5.164,3106,5.164,3107,8.002,3108,7.32,3109,5.831,3110,5.831,3111,5.831,3112,7.32,3113,5.831,3114,7.32,3115,5.831,3116,5.831,3117,5.831,3118,5.831,3119,5.831,3120,5.831,3121,5.831,3122,5.831]],["title/classes/UpdateRoomDto.html",[0,0.261,3123,3.418]],["body/classes/UpdateRoomDto.html",[0,0.418,2,1.201,3,0.122,4,0.109,5,0.096,13,0.008,27,0.187,29,1.076,40,0.109,177,0.007,178,0.007,1119,6.296,1750,4.543,3123,6.296,3124,6.423,3125,8.347,3126,5.144]],["title/classes/UpdateUserDto.html",[0,0.261,3127,2.9]],["body/classes/UpdateUserDto.html",[0,0.417,2,1.197,3,0.122,4,0.109,5,0.095,13,0.008,27,0.187,29,1.073,40,0.109,177,0.007,178,0.007,517,3.453,1152,4.859,1154,5.861,1750,4.536,3126,5.13,3127,5.333,3128,6.405,3129,8.334,3130,5.861]],["title/classes/UpdateUserDto-1.html",[0,0.218,652,1.382,3127,2.416]],["body/classes/UpdateUserDto-1.html",[0,0.413,2,1.188,3,0.121,4,0.108,5,0.095,13,0.008,21,0.629,27,0.186,29,1.064,37,1.924,40,0.108,134,0.728,177,0.007,178,0.007,685,2.966,1750,4.515,3126,5.088,3127,5.308,3130,5.813,3131,6.353,3132,7.347,3133,5.813,3134,7.173]],["title/classes/UpdateUserDto-2.html",[0,0.218,1319,2.132,3127,2.416]],["body/classes/UpdateUserDto-2.html",[0,0.413,2,1.188,3,0.121,4,0.108,5,0.095,13,0.008,21,0.629,27,0.186,29,1.064,37,1.924,40,0.108,134,0.728,177,0.007,178,0.007,685,2.966,1750,4.515,3126,5.088,3127,5.308,3130,5.813,3132,7.347,3133,5.813,3135,6.353,3136,7.173]],["title/classes/UpdateUserProfileDto.html",[0,0.261,2160,3.214]],["body/classes/UpdateUserProfileDto.html",[0,0.413,2,1.188,3,0.121,4,0.108,5,0.095,13,0.008,21,0.629,27,0.186,29,1.064,40,0.108,134,0.728,177,0.007,178,0.007,685,2.966,1750,4.515,2156,4.59,2160,5.884,3126,5.088,3133,5.813,3137,6.353,3138,8.295,3139,7.173,3140,7.173]],["title/classes/UserActionDto.html",[0,0.261,3141,3.673]],["body/classes/UserActionDto.html",[0,0.188,2,0.231,3,0.066,4,0.021,5,0.032,7,0.295,8,0.324,12,0.278,13,0.008,14,1.011,15,0.257,16,0.565,21,0.123,27,0.173,28,0.47,29,0.207,34,0.533,36,0.28,37,1.051,38,0.537,40,0.037,42,0.337,47,0.816,53,0.298,55,2.133,64,1.486,66,2.732,70,1.064,79,1.043,80,1.33,85,1.816,100,1.694,109,1.642,118,1.765,122,1.584,127,1.102,130,0.456,131,1.703,132,0.996,134,0.8,136,1.391,168,1.624,177,0.002,178,0.003,185,2.208,215,0.375,217,3.972,218,3.87,219,0.894,224,0.194,243,0.408,244,1.598,245,1.495,268,0.629,270,1.566,286,0.855,289,2.504,293,2.424,298,3.12,300,3.972,301,2.5,302,2.447,303,2.554,339,0.456,351,0.551,354,0.537,406,0.432,427,1.735,437,0.991,448,0.71,461,0.76,466,2.315,475,0.667,487,2.698,497,2.063,511,0.58,517,2.521,520,1.237,524,3.032,531,3.032,532,1.054,535,1.237,536,2.315,558,2.696,583,0.989,584,0.835,588,2.443,617,0.551,618,0.989,619,0.612,652,1.195,667,3.109,673,3.516,675,3.834,677,0.939,692,0.71,696,1.735,706,0.991,707,3.345,708,2.325,712,0.71,769,1.843,774,4.226,777,1.054,807,2.193,808,0.82,809,2.81,814,2.193,835,0.991,842,1.102,843,0.789,844,0.734,852,0.855,857,2.645,875,1.054,894,0.939,899,1.132,902,3.765,904,1.845,905,2.06,906,6.207,912,1.054,919,1.054,920,1.054,923,1.054,936,1.132,939,1.054,947,1.566,948,1.566,966,2.779,969,2.779,972,2.633,976,2.903,994,0.789,1001,1.132,1005,1.132,1014,1.916,1017,1.054,1027,0.991,1042,1.845,1043,1.566,1047,0.894,1051,1.168,1060,1.054,1065,0.76,1157,1.054,1163,2.645,1192,1.043,1195,1.286,1196,0.76,1197,2.089,1205,3.176,1206,3.982,1225,1.916,1241,1.132,1245,0.76,1276,0.939,1282,3.476,1283,0.76,1284,5.267,1287,2.633,1303,1.983,1319,1.381,1326,0.991,1331,1.132,1365,2.645,1370,2.891,1375,3.61,1387,1.237,1388,1.237,1403,3.945,1404,3.586,1414,3.359,1416,1.237,1423,1.644,1424,1.237,1439,1.237,1447,1.237,1472,1.132,1476,2.891,1477,3.61,1479,1.237,1483,1.845,1486,2.167,1488,1.237,1493,1.237,1510,1.237,1517,2.167,1519,4.341,1537,2.167,1543,1.237,1544,1.237,1546,2.891,1568,1.983,1589,2.645,1602,1.132,1635,3.972,1728,0.894,1816,2.089,1817,1.735,1819,3.429,1831,1.237,1850,1.237,1884,2.891,1944,0.939,1957,2.089,2127,4.279,2162,3.61,2187,1.132,2188,1.132,2191,1.132,2227,0.855,2242,3.61,2284,2.167,2307,1.237,2447,1.237,2539,4.279,2540,2.645,2631,2.167,2680,1.132,2697,1.983,2805,0.82,2806,0.82,2807,0.82,2872,1.566,2913,0.939,3016,1.237,3023,4.769,3095,1.054,3123,1.054,3141,1.983,3142,1.237,3143,2.447,3144,2.447,3145,2.447,3146,2.447,3147,2.447,3148,2.447,3149,1.397,3150,1.397,3151,1.397,3152,1.397,3153,1.397,3154,1.397,3155,1.397,3156,2.167,3157,2.167,3158,3.264,3159,1.397,3160,1.397,3161,1.397,3162,1.397,3163,1.397,3164,1.397,3165,1.397,3166,1.397,3167,2.447,3168,3.264,3169,2.447,3170,2.447,3171,1.397,3172,1.397,3173,1.397,3174,1.397,3175,2.447,3176,1.397,3177,8.036,3178,1.397,3179,1.397,3180,6.87,3181,6.542,3182,2.447,3183,4.901,3184,2.447,3185,1.397,3186,2.447,3187,1.397,3188,2.447,3189,1.397,3190,2.447,3191,1.397,3192,2.447,3193,1.397,3194,2.447,3195,1.397,3196,2.447,3197,1.397,3198,2.447,3199,1.397,3200,2.447,3201,1.397,3202,2.447,3203,1.397,3204,2.447,3205,2.447,3206,2.447,3207,2.891,3208,2.447,3209,2.447,3210,2.447,3211,1.397,3212,2.447,3213,2.447,3214,1.397,3215,1.397,3216,4.454,3217,1.397,3218,1.397,3219,3.264,3220,1.397,3221,1.397,3222,1.397,3223,1.397,3224,1.397,3225,3.918,3226,3.264,3227,3.471,3228,2.447,3229,1.397,3230,1.397,3231,1.397,3232,2.447,3233,1.397,3234,1.397,3235,2.447,3236,1.397,3237,1.397,3238,2.167,3239,1.397,3240,1.397,3241,1.397,3242,5.885,3243,1.397,3244,2.447,3245,1.397,3246,1.397,3247,1.397,3248,1.397,3249,3.264,3250,1.397,3251,1.397,3252,1.397,3253,1.397,3254,2.447,3255,2.447,3256,1.397,3257,1.397,3258,1.397,3259,1.397,3260,2.447,3261,1.397,3262,1.397,3263,1.397,3264,1.397,3265,1.397,3266,1.397,3267,2.447,3268,2.447,3269,2.447,3270,1.397,3271,1.397,3272,1.397,3273,2.447,3274,1.397,3275,1.397,3276,1.397,3277,1.397,3278,1.397,3279,1.132,3280,1.237,3281,1.397,3282,1.397,3283,1.397,3284,1.397,3285,1.397,3286,2.447,3287,3.264,3288,3.264,3289,2.447,3290,1.397,3291,1.397,3292,3.264,3293,2.447,3294,1.397,3295,4.901,3296,2.447,3297,1.397,3298,1.397,3299,1.397,3300,1.397,3301,3.918,3302,3.264,3303,2.447,3304,1.397,3305,1.397,3306,2.447,3307,1.397,3308,2.447,3309,1.397,3310,1.397,3311,1.397,3312,1.397,3313,1.397,3314,1.397,3315,1.397,3316,1.397,3317,2.447,3318,1.397,3319,1.397,3320,2.447,3321,1.397,3322,1.397,3323,5.279,3324,1.397,3325,1.397,3326,3.918,3327,2.447,3328,3.918,3329,2.447,3330,4.901,3331,2.447,3332,2.447,3333,1.397,3334,2.447,3335,1.397,3336,3.264,3337,1.397,3338,1.397,3339,1.397,3340,2.447,3341,1.397,3342,2.447,3343,1.397,3344,4.454,3345,2.447,3346,2.447,3347,1.397,3348,1.397,3349,2.447,3350,1.397,3351,1.397,3352,1.397,3353,1.397,3354,1.397,3355,3.918,3356,1.397,3357,1.397,3358,1.397,3359,1.397,3360,3.264,3361,4.341,3362,3.918,3363,3.264,3364,2.447,3365,2.447,3366,2.447,3367,2.447,3368,1.397,3369,3.918,3370,3.264,3371,2.447,3372,2.447,3373,1.397,3374,2.447,3375,2.447,3376,2.447,3377,2.447,3378,2.447,3379,2.447,3380,2.447,3381,2.447,3382,2.447,3383,2.447,3384,2.447,3385,2.447,3386,2.447,3387,2.447,3388,2.447,3389,2.447,3390,2.447,3391,3.918,3392,2.447,3393,2.447,3394,2.447,3395,2.447,3396,2.447,3397,2.447,3398,2.447,3399,2.447,3400,2.447,3401,2.447,3402,1.397,3403,1.397,3404,2.447,3405,2.447,3406,2.447,3407,2.447,3408,2.447,3409,1.397,3410,2.447,3411,2.447,3412,3.264,3413,1.397,3414,2.447,3415,3.264,3416,2.447,3417,2.447,3418,1.397,3419,1.397,3420,1.397,3421,1.397,3422,2.447,3423,1.397,3424,1.397,3425,1.397,3426,1.397,3427,1.397,3428,1.397,3429,1.397,3430,1.397,3431,1.397,3432,1.397,3433,1.397,3434,1.397,3435,1.397,3436,1.397,3437,1.397,3438,2.447,3439,1.397,3440,3.264,3441,1.397,3442,1.397,3443,1.397,3444,1.397,3445,1.397,3446,1.397,3447,1.397,3448,1.397,3449,3.264,3450,1.397,3451,1.397,3452,1.397,3453,1.397,3454,1.397,3455,1.397,3456,4.454,3457,1.397,3458,1.397,3459,1.397,3460,1.397,3461,1.397,3462,1.397,3463,1.397,3464,1.397,3465,1.397,3466,1.397,3467,1.397,3468,2.447,3469,1.397,3470,1.397,3471,1.397,3472,1.397,3473,1.397,3474,1.397,3475,1.397,3476,1.397,3477,1.397,3478,1.397,3479,2.447,3480,1.397,3481,1.397,3482,1.397,3483,1.132]],["title/classes/UserDto.html",[0,0.261,37,1.216]],["body/classes/UserDto.html",[0,0.487,2,0.66,3,0.067,4,0.06,5,0.053,7,0.36,8,0.751,12,0.816,13,0.008,14,1.371,15,1.659,16,3.287,21,0.79,27,0.161,28,1.792,29,0.591,30,2.894,32,2.359,33,2.505,34,1.908,35,2.526,36,0.799,37,2.039,39,1.19,40,0.122,42,0.963,47,2.536,51,2.572,53,1.829,54,2.838,55,2.346,64,1.892,66,1.693,85,1.734,100,1.949,101,2.028,104,1.392,105,1.459,132,1.731,134,0.806,168,1.597,177,0.005,178,0.005,216,2.032,462,2.254,484,3.358,497,1.734,511,2.74,707,2.293,708,2.74,815,4.981,829,3.744,831,4.041,905,2.982,1050,4.003,1051,3.63,1065,3.087,1079,2.251,1129,3.24,1148,3.594,1156,3.471,1207,2.827,1391,3.729,1393,3.729,1395,4.293,1397,3.729,1398,3.729,1399,3.729,1400,3.729,1401,4.041,1579,3.471,1649,5.187,1650,2.439,1654,4.225,1655,2.439,1656,4.963,1657,4.463,1658,4.463,1659,2.551,1660,4.463,1661,2.34,1662,2.551,1663,2.551,1664,4.062,1665,3.63,1666,3.594,1667,3.63,1668,4.226,1669,5.056,1670,3.33,1671,3.63,1672,4.463,1673,3.63,1674,3.63,1675,3.63,1676,3.63,1677,3.63,2060,3.53,3484,3.986,3485,3.986,3486,3.986,3487,3.986,3488,3.986,3489,3.986,3490,3.986,3491,5.672,3492,3.986,3493,3.986,3494,3.986,3495,5.672,3496,3.986,3497,3.986,3498,3.986,3499,3.986,3500,3.986,3501,3.986,3502,3.986,3503,3.986,3504,3.986,3505,3.986,3506,3.986,3507,3.986]],["title/classes/UserEntity.html",[0,0.261,3508,3.673]],["body/classes/UserEntity.html",[0,0.32,2,0.92,3,0.094,4,0.083,5,0.073,7,0.502,8,0.94,12,0.807,13,0.008,14,1.598,15,1.71,21,0.815,27,0.185,28,1.837,29,0.825,40,0.083,47,2.955,100,2.185,134,0.811,177,0.006,178,0.006,462,2.671,497,2.056,708,3.248,839,4.193,1050,3.855,1051,3.738,1156,4.115,1391,4.42,1393,4.42,1395,4.42,1397,4.42,1398,4.42,1399,4.42,1400,4.42,1654,4.194,1655,3.402,1666,4.261,2156,5.009,2179,4.506,2274,5.003,3508,5.757,3509,4.924,3510,5.56,3511,5.56,3512,5.56,3513,5.56,3514,5.56,3515,5.56,3516,5.56,3517,5.56,3518,5.56,3519,5.56,3520,5.56,3521,5.56,3522,5.56]],["title/classes/UserError.html",[0,0.261,3523,3.418]],["body/classes/UserError.html",[0,0.411,2,1.18,3,0.12,4,0.107,5,0.094,12,0.607,13,0.008,21,0.625,40,0.107,134,0.766,177,0.007,178,0.007,214,2.272,215,1.911,216,1.832,243,2.081,667,3.176,809,3.402,1749,5.774,1750,4.497,1751,7.318,1752,6.31,1753,6.31,1754,6.31,3523,6.582,3524,7.318]],["title/classes/UserFriendship.html",[0,0.261,1661,2.66]],["body/classes/UserFriendship.html",[0,0.506,2,0.781,3,0.079,4,0.071,5,0.062,7,0.426,8,0.844,12,0.811,13,0.008,14,1.458,15,1.331,21,0.634,27,0.174,28,1.816,29,0.7,30,2.985,32,2.486,33,2.591,34,1.964,35,2.595,36,0.945,37,2.075,39,1.408,40,0.128,42,1.14,47,2.695,51,2.28,53,1.892,54,2.715,55,2.079,64,1.574,66,1.408,85,1.816,100,2.054,101,2.28,104,1.648,105,1.727,132,1.439,134,0.811,168,1.486,177,0.005,178,0.005,462,1.61,484,3.933,497,1.239,511,2.997,707,1.907,708,2.997,829,3.979,831,3.902,905,2.48,1050,3.557,1051,3.045,1065,2.568,1079,2.664,1129,2.872,1148,3.931,1156,2.48,1207,3.346,1391,2.664,1393,2.664,1395,3.6,1397,2.664,1398,2.664,1399,2.664,1400,2.664,1401,2.887,1579,2.887,1649,5.152,1650,2.887,1654,4.329,1655,2.887,1656,4.998,1657,4.542,1658,4.542,1659,3.019,1660,4.542,1661,3.743,1662,4.622,1663,4.622,1664,3.6,1665,3.019,1666,2.568,1667,3.019,1668,3.019,1669,4.622,1670,2.77,1671,3.019,1672,3.743,1673,3.019,1674,3.019,1675,3.019,1676,3.019,1677,3.019,3525,4.718,3526,4.718,3527,4.718]],["title/classes/UserProfileDto.html",[0,0.261,2156,2.9]],["body/classes/UserProfileDto.html",[0,0.4,2,0.887,3,0.09,4,0.08,5,0.071,7,0.484,8,0.918,12,0.804,13,0.008,14,1.584,15,1.702,21,0.811,27,0.194,28,1.783,29,0.795,33,2.628,34,1.879,35,2.572,36,1.073,40,0.08,47,2.93,100,2.167,134,0.807,177,0.006,178,0.006,462,2.624,497,2.02,708,3.375,1050,3.787,1051,3.672,1129,3.794,1156,4.042,1391,4.342,1393,4.342,1395,4.342,1397,4.342,1398,4.342,1399,4.342,1400,4.342,1654,4.283,1666,4.186,2156,5.205,2252,7.886,2274,4.96,3528,4.744,3529,5.356,3530,5.356,3531,5.356,3532,5.356,3533,5.356,3534,5.356,3535,5.356,3536,5.356,3537,5.356,3538,5.356,3539,5.356,3540,5.356,3541,5.356,3542,5.356,3543,5.356,3544,5.356,3545,5.356]],["title/modules/UsersModule.html",[306,0.817,335,2.559]],["body/modules/UsersModule.html",[0,0.351,3,0.103,4,0.091,5,0.08,13,0.008,27,0.207,40,0.091,168,1.169,177,0.006,178,0.006,181,3.12,224,0.844,306,1.472,308,1.941,309,1.985,310,2.126,311,2.126,312,2.03,313,2.784,314,2.784,318,4.854,321,4.134,322,4.392,326,3.515,327,5.235,335,5.358,337,2.626,338,2.126,339,1.985,341,2.82,346,2.741,348,4.317,351,2.399,352,3.437,354,2.34,355,3.199,375,4.933,378,4.591,379,3.437,396,4.591,397,4.591,398,4.09,399,5.391,400,4.09,401,5.391,402,3.725,403,5.391,404,4.591,405,5.391,843,3.437,1195,3.199,1243,5.724,1950,5.787,3546,5.391,3547,5.391,3548,5.391,3549,6.087,3550,6.087,3551,6.087,3552,6.087,3553,6.087]],["title/classes/VoteDto.html",[0,0.261,3554,3.673]],["body/classes/VoteDto.html",[0,0.46,2,1.11,3,0.113,4,0.101,5,0.088,7,0.606,8,1.056,12,0.751,13,0.008,14,1.438,15,1.622,21,0.773,27,0.179,28,1.728,29,0.995,31,2.721,34,1.853,36,1.344,40,0.101,134,0.773,177,0.007,178,0.007,497,2.235,511,3.309,1129,3.591,1148,4.341,1207,4.757,1209,5.058,1891,6.419,2249,7.538,3554,6.463,3555,5.94,3556,8.511,3557,6.707,3558,6.707,3559,6.707,3560,6.707]],["title/classes/WsExceptionFilter.html",[0,0.261,3561,3.673]],["body/classes/WsExceptionFilter.html",[0,0.375,2,1.076,3,0.109,4,0.098,5,0.086,7,0.587,12,0.554,13,0.008,21,0.57,27,0.196,40,0.098,49,2.927,78,2.927,135,2.927,177,0.007,178,0.007,183,2.552,193,2.218,214,2.073,215,1.743,216,1.672,224,0.901,301,1.781,398,5.643,531,4.04,667,3.482,757,3.977,766,5.903,769,3.67,809,4.162,1276,4.367,1286,5.268,2123,5.268,2385,5.757,2595,6.343,2872,4.159,2880,4.367,3523,6.334,3561,6.343,3562,6.932,3563,5.757,3564,8.398,3565,7.826,3566,8.716,3567,6.5,3568,7.826,3569,7.826,3570,5.757,3571,6.5,3572,6.5,3573,6.5,3574,6.5,3575,6.5,3576,6.5,3577,6.5,3578,6.5,3579,6.5]],["title/coverage.html",[3580,4.679]],["body/coverage.html",[0,0.549,1,1.39,5,0.042,6,3.915,12,0.271,13,0.008,37,0.851,41,1.39,62,1.39,74,1.39,82,1.39,84,1.39,86,1.39,87,1.39,90,1.39,120,1.39,121,1.39,129,1.39,147,1.39,159,1.39,165,1.39,172,1.39,177,0.004,178,0.004,179,3.492,180,2.031,182,2.811,225,1.863,236,1.942,240,2.133,289,0.888,306,0.572,312,1.059,336,2.031,351,1.251,354,1.22,365,2.031,406,1.623,408,2.811,410,2.133,411,2.811,417,2.031,445,2.031,459,2.031,473,1.471,543,2.251,544,2.251,545,2.572,546,2.133,556,3.225,567,4.334,584,1.083,708,1.317,730,2.031,733,2.811,738,2.031,739,2.133,749,2.811,797,3.39,798,2.251,800,4.364,801,2.251,807,2.133,811,2.572,812,2.811,814,2.133,832,2.394,833,4.689,840,2.251,842,1.429,846,2.394,851,2.031,976,3.727,1119,2.394,1120,2.811,1152,3.225,1153,2.811,1154,3.889,1180,2.811,1192,1.353,1193,2.031,1197,2.031,1198,2.811,1225,1.863,1229,3.889,1243,1.942,1257,2.394,1277,2.251,1342,2.031,1344,2.811,1483,2.394,1610,2.031,1611,3.619,1621,2.572,1629,5.787,1649,1.863,1650,4.63,1654,1.614,1656,1.863,1657,1.863,1658,1.863,1660,1.863,1661,1.863,1678,2.133,1679,2.811,1689,1.942,1699,2.811,1712,2.251,1715,2.811,1747,2.572,1748,2.811,1749,3.889,1759,2.572,1760,2.811,1763,2.811,1785,2.811,1799,2.251,1800,2.031,1809,2.811,1814,2.394,1816,2.031,1817,2.251,1819,1.942,1904,2.811,1918,6.392,1919,6.519,1923,2.394,1924,2.394,1925,2.394,1934,1.668,1938,1.942,1941,2.394,1944,2.133,1946,2.394,1950,2.251,1957,2.031,1960,2.133,1962,1.668,1968,1.942,1970,2.133,1978,2.031,1981,2.251,1984,2.394,1990,2.394,1994,2.394,1995,2.394,1996,2.394,2002,2.394,2003,2.394,2004,2.394,2005,2.394,2006,2.394,2007,2.394,2008,2.394,2009,2.394,2010,2.394,2011,2.394,2012,2.394,2013,2.394,2014,2.394,2015,2.394,2016,2.394,2017,2.394,2018,2.394,2021,2.811,2058,2.811,2078,3.889,2082,2.133,2089,4.364,2130,2.394,2131,2.811,2156,2.031,2160,2.251,2180,2.133,2206,2.811,2247,2.572,2248,2.811,2259,2.811,2345,3.619,2445,2.811,2473,2.572,2474,2.811,2499,2.811,2519,3.889,2527,2.394,2563,2.811,2601,2.811,2629,2.811,2654,2.572,2655,2.811,2662,2.811,2675,2.811,2683,2.811,2721,1.942,2722,1.792,2723,1.942,2777,4.654,2817,2.031,2937,2.572,2938,2.572,2997,2.811,3106,2.811,3123,2.394,3124,2.811,3127,3.703,3128,2.811,3131,2.811,3135,2.811,3137,2.811,3141,2.572,3142,4.25,3508,2.572,3509,2.811,3523,2.394,3524,2.811,3528,2.811,3554,2.572,3555,2.811,3561,2.572,3562,2.811,3563,2.811,3580,2.394,3581,2.811,3582,3.174,3583,3.174,3584,9.445,3585,7.286,3586,7.286,3587,4.799,3588,7.974,3589,4.799,3590,8.855,3591,6.701,3592,2.811,3593,2.811,3594,2.811,3595,2.811,3596,8.9,3597,8.37,3598,8.552,3599,3.174,3600,6.45,3601,3.174,3602,2.811,3603,2.811,3604,2.811,3605,3.174,3606,3.174,3607,5.786,3608,3.174,3609,3.174,3610,3.174,3611,3.889,3612,2.811,3613,3.174,3614,3.174,3615,3.174,3616,5.786,3617,3.174,3618,5.614,3619,3.174,3620,3.174,3621,2.811,3622,3.174,3623,3.174,3624,2.811,3625,2.811,3626,3.174,3627,3.174,3628,3.174,3629,4.799,3630,3.174,3631,3.174,3632,3.174,3633,3.174,3634,4.799,3635,3.174,3636,3.174,3637,3.174,3638,3.174,3639,5.713,3640,3.174,3641,2.811,3642,2.811,3643,3.174]],["title/dependencies.html",[309,1.779,3644,3.059]],["body/dependencies.html",[0,0.421,13,0.008,29,0.861,36,1.463,39,1.733,70,1.893,80,1.733,177,0.006,178,0.006,185,1.557,198,5.284,199,4.378,200,3.715,224,0.805,234,5.178,235,4.905,239,4.117,268,2.614,309,1.893,344,2.858,360,3.16,362,5.128,370,4.378,373,3.9,379,3.278,380,4.378,421,3.552,422,3.595,461,3.16,549,3.715,551,4.378,614,4.672,615,3.9,616,3.9,618,2.347,620,3.278,622,4.117,742,3.715,760,5.141,764,5.141,794,5.141,845,4.704,1276,4.905,1732,5.141,1771,6.472,1909,5.141,1997,4.117,2048,5.141,2109,5.506,2575,5.141,2576,5.141,2577,5.141,2805,3.408,2806,3.408,2807,3.408,2809,3.9,2811,3.9,3156,5.141,3157,5.141,3570,5.141,3580,4.378,3645,8.38,3646,7.986,3647,5.805,3648,5.805,3649,7.3,3650,5.805,3651,5.805,3652,5.805,3653,5.805,3654,5.805,3655,7.3,3656,8.635,3657,5.805,3658,5.805,3659,5.805,3660,7.3,3661,5.805,3662,5.805,3663,5.805,3664,5.805,3665,7.3,3666,5.805,3667,5.805,3668,5.805,3669,5.805,3670,5.805,3671,5.805,3672,5.805,3673,5.141,3674,5.805,3675,5.805,3676,5.805,3677,5.805,3678,5.805,3679,5.805,3680,5.805,3681,5.805,3682,5.141,3683,5.805,3684,5.805,3685,5.805,3686,5.805,3687,5.805,3688,5.805,3689,5.805,3690,5.805,3691,5.805,3692,5.805,3693,5.805,3694,5.805,3695,5.805,3696,5.805,3697,5.805,3698,5.805,3699,5.141,3700,5.805,3701,5.805,3702,5.805,3703,5.805,3704,5.805,3705,5.805,3706,5.805]],["title/interfaces/dmUser.html",[797,2.382,1257,3.418]],["body/interfaces/dmUser.html",[0,0.193,3,0.056,4,0.05,5,0.044,7,0.302,8,0.661,12,0.565,13,0.008,27,0.178,37,2.243,40,0.05,42,1.712,79,3.803,109,1.696,122,1.353,131,2.123,134,0.801,168,1.802,177,0.004,178,0.004,185,1.603,224,0.464,243,0.978,244,2.16,245,1.823,289,2.538,298,3.156,301,2.52,303,2.215,350,2.048,351,1.319,353,1.965,354,1.287,406,0.882,426,2.374,483,2.983,487,3.067,497,1.861,536,2.374,558,3.188,588,1.491,652,1.226,667,1.92,673,1.648,685,2.136,700,1.759,769,2.82,774,3.767,797,1.759,799,2.374,842,2.249,844,1.759,852,2.048,976,1.92,1014,1.965,1027,2.374,1043,3.196,1047,3.823,1096,2.374,1192,2.128,1196,1.822,1197,3.196,1225,1.965,1229,2.713,1230,2.525,1231,2.525,1241,2.713,1243,3.656,1245,1.822,1247,7.011,1249,4.996,1251,2.965,1253,2.965,1255,2.525,1257,4.996,1258,2.965,1260,2.965,1262,2.965,1264,2.525,1266,2.525,1268,2.965,1272,2.965,1274,2.374,1275,2.965,1276,2.249,1277,2.374,1278,2.713,1279,2.965,1280,7.863,1281,5.809,1282,2.374,1283,1.822,1284,5.476,1285,2.525,1286,2.713,1287,6.241,1288,2.525,1289,6.73,1290,2.525,1291,4.424,1292,2.525,1293,2.374,1294,2.374,1295,2.525,1296,5.345,1297,2.525,1298,3.767,1299,2.525,1300,2.525,1301,2.525,1302,5.345,1303,2.713,1304,5.345,1305,2.965,1306,2.713,1307,6.277,1308,4.424,1309,2.965,1310,5.867,1311,7.296,1312,2.965,1313,2.965,1314,2.965,1315,5.292,1316,4.424,1317,2.965,1318,2.965,1319,1.89,1320,5.292,1321,6.277,1322,4.424,1323,5.292,1324,2.965,1325,2.713,1326,2.374,1327,4.424,1328,4.424,1329,2.965,1330,2.965,1331,2.713,1332,2.965,1333,2.965,1334,5.292,1335,5.292,1336,2.965,1337,2.965]],["title/miscellaneous/functions.html",[3707,2.537,3708,4.421]],["body/miscellaneous/functions.html",[7,0.525,12,0.495,13,0.008,14,1.318,70,1.895,177,0.006,178,0.006,193,3.253,214,2.329,215,1.959,216,1.879,312,2.665,588,2.842,1829,5.147,1918,4.122,1919,6.762,1990,6.026,1994,6.026,1995,6.026,1996,6.026,2002,6.026,2003,6.026,2004,6.026,2005,6.026,2006,6.026,2007,6.026,2008,6.026,2009,6.026,2010,6.026,2011,6.026,2012,6.026,2013,6.026,2014,6.026,2015,6.026,2016,6.026,2017,6.026,2018,6.026,3603,5.147,3604,6.47,3611,4.71,3618,4.71,3621,5.147,3624,6.47,3707,3.905,3708,4.71,3709,5.147,3710,8.432,3711,5.811,3712,5.147,3713,5.811,3714,5.811]],["title/index.html",[7,0.341,788,2.847,3095,2.847]],["body/index.html",[0,0.394,4,0.089,5,0.078,13,0.008,21,0.52,40,0.064,55,1.382,59,1.909,70,1.382,76,1.807,94,3.076,100,1.684,101,1.516,104,1.481,108,1.807,117,1.671,130,1.932,168,0.815,175,1.909,177,0.005,178,0.005,179,1.857,180,2.713,181,3.605,199,3.197,200,2.713,206,3.436,210,5.247,220,2.489,225,2.489,259,2.088,260,2.394,265,3.755,291,7.777,306,1.61,307,2.713,308,2.735,309,2.227,313,2.823,314,2.331,326,1.671,335,2.394,339,1.382,341,2.773,362,4.525,379,4.393,402,2.594,413,3.755,426,4.202,461,3.717,465,2.849,466,3.007,473,1.965,576,3.755,583,1.714,584,2.022,652,1.552,653,5.519,690,2.849,691,2.594,704,5.245,747,4.202,758,2.088,769,3.856,775,3.755,777,3.197,779,5.992,810,4.175,835,4.202,842,1.909,902,2.849,965,3.436,975,3.007,1015,3.007,1192,1.807,1243,3.625,1389,3.197,1623,3.755,1648,5.535,1672,2.489,1834,6.533,1837,3.755,1841,3.755,1858,3.197,1871,4.179,1920,4.468,1950,3.007,1997,3.007,2001,4.202,2107,2.489,2233,3.755,2286,5.247,2359,3.436,2364,5.535,2383,3.755,2697,5.992,3022,3.755,3023,5.535,3279,4.801,3361,5.247,3483,4.801,3580,4.468,3581,6.049,3644,4.801,3673,3.755,3682,5.247,3699,3.755,3715,6.829,3716,4.239,3717,4.239,3718,4.239,3719,4.239,3720,4.239,3721,4.239,3722,5.924,3723,4.239,3724,4.239,3725,8.576,3726,4.239,3727,5.924,3728,4.239,3729,4.239,3730,4.239,3731,4.239,3732,5.924,3733,7.394,3734,4.239,3735,4.239,3736,4.239,3737,4.239,3738,5.924,3739,7.78,3740,4.239,3741,4.239,3742,3.755,3743,4.239,3744,4.239,3745,4.239,3746,4.239,3747,4.239,3748,4.239,3749,5.924,3750,4.239,3751,4.239,3752,5.924,3753,5.247,3754,4.239,3755,4.239,3756,4.239,3757,5.924,3758,4.239,3759,4.239,3760,5.924,3761,4.239,3762,4.239,3763,4.239,3764,4.239,3765,4.239,3766,4.239,3767,5.924,3768,4.239,3769,4.239,3770,4.239,3771,4.239,3772,4.239,3773,4.239,3774,4.239,3775,4.239,3776,5.924,3777,4.239,3778,4.239,3779,4.239,3780,4.239,3781,4.239,3782,5.924,3783,4.239,3784,4.239,3785,4.239,3786,4.239,3787,4.239,3788,4.239,3789,8.274,3790,4.239,3791,4.239,3792,4.239,3793,8.78,3794,4.239,3795,4.239,3796,4.239,3797,4.239,3798,4.239,3799,4.239,3800,4.239,3801,5.924,3802,4.239,3803,5.924,3804,5.924,3805,4.239,3806,3.755,3807,4.239,3808,4.239,3809,4.239,3810,4.239,3811,4.239,3812,4.239,3813,4.239,3814,5.924,3815,4.239,3816,5.924,3817,5.924,3818,4.239,3819,4.239,3820,4.239,3821,4.239,3822,5.924,3823,4.239,3824,4.239,3825,4.239,3826,4.239,3827,4.239,3828,4.239,3829,4.239,3830,4.239,3831,4.239,3832,4.239,3833,4.239,3834,4.239,3835,5.924,3836,4.239,3837,8.78,3838,4.239,3839,4.239,3840,4.239,3841,4.239,3842,4.239,3843,4.239,3844,4.239,3845,4.239,3846,4.239,3847,4.239,3848,4.239,3849,4.239,3850,4.239,3851,6.829,3852,5.924,3853,5.924,3854,4.239,3855,4.239,3856,5.924,3857,4.239,3858,4.239,3859,4.239,3860,5.924,3861,5.924,3862,4.239,3863,4.239,3864,4.239,3865,4.239,3866,6.829,3867,5.924,3868,6.829,3869,4.239,3870,4.239,3871,4.239,3872,5.924,3873,4.239,3874,4.239,3875,4.239,3876,4.239,3877,4.239,3878,4.239,3879,4.239,3880,4.239,3881,4.239,3882,4.239,3883,4.239,3884,5.924,3885,4.239,3886,4.239,3887,4.239,3888,4.239,3889,4.239,3890,4.239,3891,4.239,3892,4.239,3893,6.829,3894,4.239,3895,4.239,3896,4.239,3897,4.239,3898,4.239,3899,5.924,3900,4.239,3901,4.239,3902,4.239,3903,4.239,3904,4.239,3905,4.239,3906,4.239,3907,4.239,3908,4.239,3909,6.829,3910,4.239,3911,4.239,3912,4.239,3913,4.239,3914,4.239,3915,4.239,3916,4.239,3917,4.239,3918,4.239,3919,4.239,3920,4.239,3921,4.239,3922,4.239,3923,4.239]],["title/interfaces/liveChatUser.html",[797,2.382,2527,3.418]],["body/interfaces/liveChatUser.html",[0,0.239,3,0.07,4,0.062,5,0.055,7,0.374,8,0.772,12,0.575,13,0.008,27,0.18,37,2.205,40,0.062,42,1.001,109,1.709,131,1.964,134,0.805,168,1.762,177,0.005,178,0.005,185,1.81,224,0.575,243,1.211,244,2.388,245,2.059,289,2.447,298,3.02,301,2.468,303,2.159,350,2.537,351,1.634,353,2.434,354,1.594,406,1.03,483,3.843,487,2.846,497,1.923,558,3.331,583,1.676,584,1.99,588,1.238,617,1.634,618,1.676,619,1.816,652,1.518,673,3.323,685,2.759,707,3.742,797,2.179,799,2.941,842,2.627,844,2.179,852,2.537,976,1.594,1014,2.434,1043,2.653,1047,4.318,1192,2.486,1196,2.257,1230,3.127,1231,3.127,1245,2.257,1249,5.089,1255,3.127,1264,3.127,1266,3.127,1274,2.941,1281,6.036,1282,2.941,1283,2.257,1284,5.122,1285,3.127,1287,6.14,1288,3.127,1289,6.036,1290,3.127,1292,4.399,1293,2.941,1294,2.941,1295,3.127,1296,6.201,1297,3.127,1298,6.036,1299,3.127,1300,3.127,1301,3.127,1302,5.82,1304,3.127,1938,2.537,2519,3.36,2527,5.089,2528,3.672,2530,3.672,2533,3.672,2536,3.672,2539,5.469,2540,5.469,2541,7.435,2542,5.166,2543,5.977,2544,3.672,2545,3.672]],["title/modules.html",[308,1.978]],["body/modules.html",[13,0.007,177,0.007,178,0.007,307,4.025,308,2.006,318,3.424,319,3.849,320,3.849,321,2.916,322,3.097,323,4.025,324,4.227,325,4.025,326,2.479,327,3.693,328,4.025,329,3.849,330,4.025,331,4.025,332,4.025,333,3.552,334,3.693,335,3.552,542,3.849,726,3.693,1220,3.849,1797,3.849,1798,4.025,1915,4.462,1989,4.462,2199,4.744,2359,5.098,3742,8.525,3924,9.625,3925,9.625,3926,9.632,3927,6.29]],["title/overview.html",[3928,5.495]],["body/overview.html",[2,0.577,13,0.008,177,0.004,178,0.004,181,1.445,225,3.59,236,4.774,306,0.628,307,6.031,308,1.11,309,1.136,310,1.216,311,1.216,312,1.161,313,1.188,314,1.188,315,3.084,316,3.084,317,3.084,318,4.86,319,5.003,320,4.133,321,4.116,322,4.373,323,4.992,324,5.242,325,5.88,326,3.579,327,4.701,328,5.124,329,5.623,330,4.826,331,5.567,332,5.322,333,4.951,334,5.107,335,5.042,336,3.914,337,1.796,338,1.216,339,1.136,407,1.306,473,3.712,538,3.084,539,3.084,540,3.084,541,3.084,542,5.277,543,4.338,544,4.338,582,3.434,584,2.838,726,4.701,727,3.084,728,3.084,729,3.084,730,4.992,734,3.084,735,3.084,737,3.084,738,4.992,799,2.47,842,3.606,851,4.992,1188,3.084,1190,3.084,1191,3.084,1192,3.413,1220,5.49,1221,3.084,1223,3.084,1224,3.084,1225,4.579,1243,4.774,1338,3.084,1339,3.084,1340,3.084,1610,3.914,1689,3.742,1694,3.084,1696,3.084,1709,3.084,1710,3.084,1711,3.084,1712,5.533,1793,3.084,1794,3.084,1795,3.084,1796,3.084,1797,5.49,1798,5.714,1799,4.791,1800,3.914,1816,4.992,1915,4.338,1916,3.084,1917,3.084,1934,4.1,1938,4.774,1944,5.242,1957,4.992,1962,4.1,1968,4.774,1978,4.992,1981,5.533,1989,4.338,2019,3.084,2020,3.084,2071,3.084,2072,3.084,2082,5.242,2180,5.242,2199,6.612,2200,3.084,2201,3.084,2203,3.084,2254,3.084,2255,3.084,2256,3.084,2340,3.084,2341,3.084,2342,3.084,2492,3.084,2494,3.084,2495,3.084,2513,3.084,2515,3.084,2516,3.084,2548,3.084,2550,3.084,2551,3.084,2558,3.084,2559,3.084,2560,3.084,2605,3.084,2607,3.084,2608,3.084,2669,3.084,2670,3.084,2672,3.084,2772,3.084,2773,3.084,2775,3.084,2920,3.084,2922,3.084,2923,3.084,2989,3.084,2991,3.084,2992,3.084,3546,3.084,3547,3.084,3548,3.084,3928,3.084,3929,3.482,3930,3.482,3931,3.482,3932,3.482,3933,3.482]],["title/properties.html",[8,0.722,3644,3.059]],["body/properties.html",[8,0.977,13,0.008,53,1.575,177,0.007,178,0.007,3753,6.54,3934,7.384,3935,7.384,3936,7.384,3937,7.384]],["title/miscellaneous/typealiases.html",[3707,2.537,3938,5.456]],["body/miscellaneous/typealiases.html",[7,0.606,12,0.807,13,0.007,42,1.622,177,0.007,178,0.007,287,5.065,354,2.581,474,5.362,475,3.811,484,4.058,567,4.512,703,4.512,747,4.763,1051,3.811,1193,4.297,1358,7.069,1375,6.468,1611,5.065,1616,7.069,1629,5.449,1722,4.884,2087,6.468,2105,5.442,2107,3.942,2109,6.019,2274,5.248,2345,5.065,2348,7.542,2349,7.069,2938,5.442,2951,7.069,2953,7.069,3612,7.542,3707,4.512,3939,6.715,3940,7.981,3941,8.811,3942,7.981,3943,7.542,3944,5.948]],["title/miscellaneous/variables.html",[561,4.421,3707,2.537]],["body/miscellaneous/variables.html",[7,0.246,8,0.788,12,0.727,13,0.008,14,1.236,42,1.791,66,0.813,70,1.391,72,1.161,96,0.888,109,1.593,122,1.101,130,1.715,131,1.596,132,0.831,134,0.461,168,0.523,177,0.004,178,0.004,183,1.94,201,2.208,260,1.538,283,1.83,306,0.769,390,2.054,392,1.743,421,2.611,422,2.101,449,1.483,483,3.868,487,1.423,490,2.867,517,4.252,536,1.932,545,2.208,556,4.341,557,2.208,561,2.208,563,2.674,638,1.932,641,1.83,643,1.932,646,1.932,649,1.83,652,0.997,667,1.64,673,1.341,685,1.88,758,4.257,769,1.538,809,1.301,905,1.432,966,1.932,969,1.932,972,1.83,997,2.208,1061,2.208,1157,2.054,1163,2.208,1277,3.026,1294,3.026,1350,2.413,1352,2.413,1413,2.413,1414,2.054,1452,2.413,1477,2.208,1516,2.413,1578,2.413,1611,2.054,1621,3.457,1918,1.932,1919,5.637,1920,6.176,1923,3.218,1924,3.218,1925,3.218,1984,3.966,1985,2.208,1997,4.221,2000,5.236,2001,1.932,2078,2.208,2089,5.168,2162,7.216,2207,2.413,2242,7.216,2264,2.413,2265,2.413,2266,2.413,2267,2.413,2345,2.054,2522,2.413,2595,4.262,2729,1.743,2821,1.83,2822,1.83,2825,1.83,2855,1.743,2871,1.83,3095,2.054,3207,7.886,3227,2.413,3238,2.413,3279,3.457,3280,2.413,3483,2.208,3591,2.413,3592,3.779,3593,3.779,3594,3.779,3595,3.779,3602,2.413,3611,2.208,3618,2.208,3625,3.779,3639,2.413,3641,3.779,3642,3.779,3707,1.83,3708,2.208,3709,2.413,3710,3.779,3712,2.413,3806,2.413,3943,2.413,3944,2.413,3945,2.724,3946,5.259,3947,7.163,3948,2.724,3949,2.724,3950,2.724,3951,2.724,3952,2.724,3953,2.724,3954,8.189,3955,2.724,3956,2.724,3957,2.724,3958,2.724,3959,2.724,3960,2.724,3961,4.266,3962,2.724,3963,9.76,3964,2.724,3965,2.724,3966,2.724,3967,2.724,3968,2.724,3969,2.724,3970,2.724,3971,2.724,3972,2.724,3973,2.724,3974,2.724,3975,2.724,3976,8.904,3977,8.904,3978,8.904,3979,8.904,3980,8.904,3981,8.904,3982,8.904,3983,8.904,3984,8.904,3985,2.724,3986,2.724,3987,2.724,3988,2.724,3989,2.724,3990,2.724,3991,2.724,3992,2.724,3993,2.724,3994,2.724,3995,2.724,3996,2.724,3997,2.724,3998,2.724,3999,2.724,4000,4.266,4001,2.724,4002,2.724,4003,2.724,4004,2.724,4005,2.724,4006,2.724,4007,2.724,4008,2.724,4009,2.724,4010,2.724,4011,2.724,4012,2.724,4013,2.724,4014,4.266,4015,2.724,4016,2.724,4017,2.724,4018,2.724,4019,2.724,4020,2.724,4021,2.724,4022,2.724,4023,2.724,4024,2.724,4025,2.724,4026,2.724,4027,2.724,4028,2.724,4029,2.724,4030,2.724,4031,2.724,4032,2.724,4033,2.724,4034,2.724,4035,2.724,4036,2.724,4037,2.724,4038,2.724,4039,2.724,4040,2.724,4041,2.724,4042,2.724,4043,2.724,4044,2.724,4045,2.724,4046,2.724,4047,2.724,4048,2.724,4049,2.724,4050,2.724,4051,2.724,4052,2.724,4053,2.724,4054,2.724,4055,2.724,4056,2.724,4057,2.724,4058,2.724,4059,2.724,4060,2.724,4061,2.724,4062,2.724,4063,2.724,4064,2.724,4065,2.724,4066,2.724,4067,2.724,4068,4.266,4069,2.724,4070,2.724,4071,2.724,4072,2.724,4073,2.724,4074,2.724,4075,2.724,4076,2.724,4077,2.724,4078,2.724,4079,2.724,4080,2.724,4081,2.724,4082,2.724,4083,2.724,4084,2.724,4085,2.724,4086,2.724,4087,2.724,4088,2.724,4089,2.724,4090,2.724,4091,2.724,4092,2.724,4093,2.724,4094,2.724,4095,2.724,4096,2.724]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/AutoModerationModule.html":{},"injectables/AutoModerationService.html":{},"modules/BullBoardModule.html":{},"injectables/BullBoardService.html":{},"modules/BullConfigModule.html":{},"interfaces/Category.html":{},"classes/ChatEventDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"modules/DbUtilsModule.html":{},"classes/DirectMessageDto.html":{},"modules/DmUsersModule.html":{},"injectables/DmUsersService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"injectables/EventQueueService.html":{},"classes/FollowersAndFollowing.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"classes/GenresWithCount.html":{},"modules/ImageModule.html":{},"injectables/ImageService.html":{},"classes/InternalError.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LinksWithCount.html":{},"classes/LiveChatMessageDto.html":{},"modules/LiveModule.html":{},"injectables/LiveService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"classes/MessagesPerHour.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"injectables/MyLogger.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/PlaybackEventDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/QueueEventDto.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"modules/RetryModule.html":{},"injectables/RetryService.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"modules/RoomQueueModule.html":{},"classes/RoomSongDto.html":{},"modules/RoomUsersModule.html":{},"injectables/RoomUsersService.html":{},"classes/RoomsData.html":{},"modules/RoomsModule.html":{},"modules/S3Module.html":{},"injectables/S3Service.html":{},"classes/SearchHistoryDto.html":{},"modules/SearchModule.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/SongInfosWithCount.html":{},"controllers/SongsController.html":{},"modules/SongsModule.html":{},"injectables/SongsService.html":{},"controllers/SpotifyAuthController.html":{},"modules/SpotifyAuthModule.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"modules/SpotifyModule.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/SpotifyUser.html":{},"modules/TasksModule.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserDto-1.html":{},"classes/UpdateUserDto-2.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserError.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{},"modules/UsersModule.html":{},"classes/VoteDto.html":{},"classes/WsExceptionFilter.html":{},"coverage.html":{},"dependencies.html":{},"interfaces/dmUser.html":{},"miscellaneous/functions.html":{},"index.html":{},"interfaces/liveChatUser.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":976,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"injectables/GenresService.html":{},"injectables/ImageService.html":{},"injectables/LiveService.html":{},"injectables/PrismaService.html":{},"injectables/RecommendationsService.html":{},"injectables/RetryService.html":{},"injectables/RoomUsersService.html":{},"classes/SongInfoDto.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/UserActionDto.html":{},"coverage.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["0.0.1",{"_index":3934,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":3671,"title":{},"body":{"dependencies.html":{}}}],["0.2",{"_index":883,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["0.2.2",{"_index":3700,"title":{},"body":{"dependencies.html":{}}}],["0.3",{"_index":864,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["0.33.5",{"_index":3702,"title":{},"body":{"dependencies.html":{}}}],["0.4",{"_index":858,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["0.5",{"_index":2284,"title":{},"body":{"injectables/RecommendationsService.html":{},"classes/UserActionDto.html":{}}}],["0.5.1",{"_index":3670,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":3695,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":3584,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":3632,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":3610,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":3614,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":3601,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":3585,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":3599,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":3589,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":3587,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":3623,"title":{},"body":{"coverage.html":{}}}],["0/19",{"_index":3631,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":3597,"title":{},"body":{"coverage.html":{}}}],["0/22",{"_index":3615,"title":{},"body":{"coverage.html":{}}}],["0/23",{"_index":3622,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":3596,"title":{},"body":{"coverage.html":{}}}],["0/30",{"_index":3640,"title":{},"body":{"coverage.html":{}}}],["0/32",{"_index":3613,"title":{},"body":{"coverage.html":{}}}],["0/34",{"_index":3609,"title":{},"body":{"coverage.html":{}}}],["0/39",{"_index":3629,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":3598,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":3588,"title":{},"body":{"coverage.html":{}}}],["0/57",{"_index":3636,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":3600,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":3586,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":3607,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":3616,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":652,"title":{"classes/CreateUserDto-1.html":{},"classes/UpdateUserDto-1.html":{}},"body":{"injectables/AuthService.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DmUsersService.html":{},"injectables/EventQueueService.html":{},"injectables/LiveService.html":{},"classes/LoginBody.html":{},"injectables/PrismaService.html":{},"injectables/RecommendationsService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RetryService.html":{},"injectables/RoomUsersService.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UserActionDto.html":{},"interfaces/dmUser.html":{},"index.html":{},"interfaces/liveChatUser.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":3696,"title":{},"body":{"dependencies.html":{}}}],["1.10.0",{"_index":3690,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":3663,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":3691,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":3666,"title":{},"body":{"dependencies.html":{}}}],["1/3",{"_index":3638,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":392,"title":{},"body":{"modules/AppModule.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/ImageService.html":{},"injectables/PrismaService.html":{},"injectables/RetryService.html":{},"miscellaneous/variables.html":{}}}],["10.0.3",{"_index":3659,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":3655,"title":{},"body":{"dependencies.html":{}}}],["10.4.1",{"_index":3656,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":3392,"title":{},"body":{"classes/UserActionDto.html":{}}}],["1000",{"_index":390,"title":{},"body":{"modules/AppModule.html":{},"injectables/RetryService.html":{},"controllers/SpotifyAuthController.html":{},"miscellaneous/variables.html":{}}}],["1024",{"_index":284,"title":{},"body":{"controllers/AppController.html":{}}}],["1234",{"_index":1992,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["123e4567",{"_index":3144,"title":{},"body":{"classes/UserActionDto.html":{}}}],["12d3",{"_index":3146,"title":{},"body":{"classes/UserActionDto.html":{}}}],["13",{"_index":3627,"title":{},"body":{"coverage.html":{}}}],["13.12.0",{"_index":3705,"title":{},"body":{"dependencies.html":{}}}],["16.4.5",{"_index":3678,"title":{},"body":{"dependencies.html":{}}}],["17",{"_index":3619,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":1319,"title":{"classes/UpdateUserDto-2.html":{}},"body":{"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UserActionDto.html":{},"interfaces/dmUser.html":{}}}],["2.0.0",{"_index":3674,"title":{},"body":{"dependencies.html":{}}}],["2.0.2",{"_index":3653,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":3704,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":3606,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":3397,"title":{},"body":{"classes/UserActionDto.html":{}}}],["200",{"_index":436,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SpotifyAuthController.html":{}}}],["20000",{"_index":3992,"title":{},"body":{"miscellaneous/variables.html":{}}}],["201",{"_index":2706,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["24",{"_index":154,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["256",{"_index":3950,"title":{},"body":{"miscellaneous/variables.html":{}}}],["256kb",{"_index":1743,"title":{},"body":{"injectables/ImageService.html":{}}}],["27",{"_index":3929,"title":{},"body":{"overview.html":{}}}],["2^index",{"_index":2117,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/RetryService.html":{}}}],["2h",{"_index":566,"title":{},"body":{"modules/AuthModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["3",{"_index":2871,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"miscellaneous/variables.html":{}}}],["3.0.3",{"_index":3654,"title":{},"body":{"dependencies.html":{}}}],["3.0.7",{"_index":3684,"title":{},"body":{"dependencies.html":{}}}],["3.14.2",{"_index":3706,"title":{},"body":{"dependencies.html":{}}}],["3.2.3",{"_index":3657,"title":{},"body":{"dependencies.html":{}}}],["3.2.6",{"_index":3664,"title":{},"body":{"dependencies.html":{}}}],["3.6.0",{"_index":3676,"title":{},"body":{"dependencies.html":{}}}],["3.635.0",{"_index":3645,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":3931,"title":{},"body":{"overview.html":{}}}],["300",{"_index":2754,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["30000",{"_index":3951,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3001",{"_index":783,"title":{},"body":{"injectables/BullBoardService.html":{}}}],["302",{"_index":2734,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["33",{"_index":3637,"title":{},"body":{"coverage.html":{}}}],["34ffs29kd09",{"_index":2704,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["4",{"_index":3933,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":3693,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":3665,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":3660,"title":{},"body":{"dependencies.html":{}}}],["4.16.0",{"_index":3669,"title":{},"body":{"dependencies.html":{}}}],["4.19.2",{"_index":3679,"title":{},"body":{"dependencies.html":{}}}],["4.7.0",{"_index":3697,"title":{},"body":{"dependencies.html":{}}}],["4.7.5",{"_index":3703,"title":{},"body":{"dependencies.html":{}}}],["4/30",{"_index":3628,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":452,"title":{},"body":{"controllers/AuthController.html":{}}}],["401",{"_index":454,"title":{},"body":{"controllers/AuthController.html":{}}}],["403",{"_index":440,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SpotifyAuthController.html":{}}}],["404",{"_index":2714,"title":{},"body":{"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["426614174000",{"_index":3148,"title":{},"body":{"classes/UserActionDto.html":{}}}],["429",{"_index":2386,"title":{},"body":{"injectables/RetryService.html":{}}}],["5",{"_index":283,"title":{},"body":{"controllers/AppController.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/LiveService.html":{},"injectables/RetryService.html":{},"miscellaneous/variables.html":{}}}],["5.1.1",{"_index":3668,"title":{},"body":{"dependencies.html":{}}}],["5.18.0",{"_index":3662,"title":{},"body":{"dependencies.html":{}}}],["5.21.4",{"_index":3646,"title":{},"body":{"dependencies.html":{}}}],["5.4.1",{"_index":3681,"title":{},"body":{"dependencies.html":{}}}],["5/28",{"_index":3620,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1508,"title":{},"body":{"injectables/DtoGenService.html":{},"injectables/PrismaService.html":{}}}],["500",{"_index":2401,"title":{},"body":{"injectables/RetryService.html":{}}}],["5000",{"_index":1869,"title":{},"body":{"injectables/LiveService.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["500ms",{"_index":2402,"title":{},"body":{"injectables/RetryService.html":{}}}],["50ms",{"_index":2116,"title":{},"body":{"injectables/PrismaService.html":{}}}],["5mb",{"_index":279,"title":{},"body":{"controllers/AppController.html":{}}}],["6.0.0",{"_index":3688,"title":{},"body":{"dependencies.html":{}}}],["6.2.0",{"_index":3649,"title":{},"body":{"dependencies.html":{}}}],["6.3.1",{"_index":3652,"title":{},"body":{"dependencies.html":{}}}],["6379",{"_index":796,"title":{},"body":{"modules/BullConfigModule.html":{}}}],["65",{"_index":3932,"title":{},"body":{"overview.html":{}}}],["66",{"_index":3605,"title":{},"body":{"coverage.html":{}}}],["7.4.0",{"_index":3661,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":3701,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":2846,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["9",{"_index":3930,"title":{},"body":{"overview.html":{}}}],["9.0.2",{"_index":3687,"title":{},"body":{"dependencies.html":{}}}],["_",{"_index":1303,"title":{},"body":{"injectables/DmUsersService.html":{},"classes/UserActionDto.html":{},"interfaces/dmUser.html":{}}}],["_room",{"_index":3226,"title":{},"body":{"classes/UserActionDto.html":{}}}],["_room.banned.find((banned",{"_index":3231,"title":{},"body":{"classes/UserActionDto.html":{}}}],["_room.participate.length",{"_index":3229,"title":{},"body":{"classes/UserActionDto.html":{}}}],["_room.room_creator",{"_index":3234,"title":{},"body":{"classes/UserActionDto.html":{}}}],["_room_id",{"_index":3225,"title":{},"body":{"classes/UserActionDto.html":{}}}],["_where",{"_index":3255,"title":{},"body":{"classes/UserActionDto.html":{}}}],["a.message.date_sent.gettime",{"_index":1590,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["a.score",{"_index":2331,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["a456",{"_index":3147,"title":{},"body":{"classes/UserActionDto.html":{}}}],["acc",{"_index":3073,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["accept_url",{"_index":1662,"title":{},"body":{"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{}}}],["access",{"_index":490,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"miscellaneous/variables.html":{}}}],["access_token",{"_index":2813,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["accessible",{"_index":3852,"title":{},"body":{"index.html":{}}}],["accesskeyid",{"_index":568,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/S3Service.html":{}}}],["accompanying",{"_index":3906,"title":{},"body":{"index.html":{}}}],["according",{"_index":2353,"title":{},"body":{"injectables/RetryService.html":{}}}],["account",{"_index":2693,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["accountfollowedid",{"_index":2210,"title":{},"body":{"injectables/ProfileService.html":{}}}],["accountunfollowedid",{"_index":2217,"title":{},"body":{"injectables/ProfileService.html":{}}}],["acousticness",{"_index":2288,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["action",{"_index":3143,"title":{},"body":{"classes/UserActionDto.html":{}}}],["activeroom",{"_index":1817,"title":{},"body":{"injectables/LiveService.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/UserActionDto.html":{},"coverage.html":{}}}],["activeroom.updatequeue",{"_index":1876,"title":{},"body":{"injectables/LiveService.html":{}}}],["activity",{"_index":1155,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{}}}],["activity_id",{"_index":3251,"title":{},"body":{"classes/UserActionDto.html":{}}}],["add",{"_index":536,"title":{},"body":{"controllers/AuthController.html":{},"injectables/DmUsersService.html":{},"classes/UserActionDto.html":{},"interfaces/dmUser.html":{},"miscellaneous/variables.html":{}}}],["addconnecteduser",{"_index":1231,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/RoomUsersService.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["addconnecteduser(socketid",{"_index":1246,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/RoomUsersService.html":{}}}],["added",{"_index":1648,"title":{},"body":{"injectables/EventQueueService.html":{},"classes/TasksProcessor.html":{},"index.html":{}}}],["addimportlibrarytask",{"_index":3107,"title":{},"body":{"injectables/TasksService.html":{}}}],["addimportlibrarytask(tk",{"_index":3110,"title":{},"body":{"injectables/TasksService.html":{}}}],["additionalproperties",{"_index":1659,"title":{},"body":{"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{}}}],["addons",{"_index":3787,"title":{},"body":{"index.html":{}}}],["address",{"_index":634,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["address'})@isstring",{"_index":2334,"title":{},"body":{"classes/RegisterBody.html":{}}}],["addtask",{"_index":3108,"title":{},"body":{"injectables/TasksService.html":{}}}],["addtask(taskdata",{"_index":3112,"title":{},"body":{"injectables/TasksService.html":{}}}],["addtoqueue",{"_index":1613,"title":{},"body":{"injectables/EventQueueService.html":{}}}],["addtoqueue(event",{"_index":1615,"title":{},"body":{"injectables/EventQueueService.html":{}}}],["adjust",{"_index":1739,"title":{},"body":{"injectables/ImageService.html":{}}}],["admin_no_srp_auth",{"_index":656,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["admininitiateauthcommandinput",{"_index":610,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["advancedroomsearchquerybuilder(params",{"_index":940,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["advancedsearchrooms",{"_index":987,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["advancedsearchusers",{"_index":1071,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["advancedusersearchquerybuilder(params",{"_index":1049,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["af",{"_index":650,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["again",{"_index":714,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["aliases",{"_index":3939,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["all_time",{"_index":98,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["allow",{"_index":3892,"title":{},"body":{"index.html":{}}}],["allowed",{"_index":292,"title":{},"body":{"controllers/AppController.html":{}}}],["allowemptyvalue",{"_index":2699,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["allows",{"_index":3916,"title":{},"body":{"index.html":{}}}],["alltimesessiondatadto",{"_index":1,"title":{"classes/AllTimeSessionDataDto.html":{}},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"coverage.html":{}}}],["already",{"_index":774,"title":{},"body":{"injectables/BullBoardService.html":{},"injectables/DmUsersService.html":{},"classes/UserActionDto.html":{},"interfaces/dmUser.html":{}}}],["amazon",{"_index":3838,"title":{},"body":{"index.html":{}}}],["analytics",{"_index":173,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["announcement",{"_index":1895,"title":{},"body":{"injectables/LiveService.html":{}}}],["another",{"_index":2364,"title":{},"body":{"injectables/RetryService.html":{},"classes/RoomDto.html":{},"index.html":{}}}],["answers/collection/t38ia1u/upload",{"_index":267,"title":{},"body":{"controllers/AppController.html":{}}}],["any(string_to_array(name",{"_index":866,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["anything",{"_index":3904,"title":{},"body":{"index.html":{}}}],["api",{"_index":461,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/UserActionDto.html":{},"dependencies.html":{},"index.html":{}}}],["api_schema.mdcontains",{"_index":3746,"title":{},"body":{"index.html":{}}}],["apibadrequestresponse",{"_index":272,"title":{},"body":{"controllers/AppController.html":{},"controllers/GenresController.html":{},"controllers/ProfileController.html":{}}}],["apibearerauth",{"_index":227,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{},"controllers/SpotifyAuthController.html":{}}}],["apibearerauth()@apisecurity('bearer')@useguards(jwtauthguard)@get('refresh')@apitags('auth')@apioperation({summary",{"_index":2710,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["apibearerauth()@apisecurity('bearer')@useguards(jwtauthguard)@get('tokens')@apitags('auth')@apioperation({summary",{"_index":2717,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["apibearerauth()@apisecurity('bearer')@useguards(jwtauthguard)@post('upload')@apioperation({summary",{"_index":196,"title":{},"body":{"controllers/AppController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@post(':username/follow')@apitags('profile')@apioperation({summary",{"_index":2140,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@post(':username/unfollow')@apitags('profile')@apioperation({summary",{"_index":2171,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apibody",{"_index":228,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["apiconsumes",{"_index":229,"title":{},"body":{"controllers/AppController.html":{}}}],["apiconsumes(\"multipart/form",{"_index":269,"title":{},"body":{"controllers/AppController.html":{}}}],["apiheader",{"_index":256,"title":{},"body":{"controllers/AppController.html":{},"controllers/SpotifyAuthController.html":{}}}],["apiokresponse",{"_index":230,"title":{},"body":{"controllers/AppController.html":{},"controllers/GenresController.html":{},"controllers/ProfileController.html":{},"controllers/SongsController.html":{}}}],["apioperation",{"_index":231,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/GenresController.html":{},"controllers/ProfileController.html":{},"controllers/SongsController.html":{},"controllers/SpotifyAuthController.html":{}}}],["apiparam",{"_index":2178,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/SongsController.html":{}}}],["apipayloadtoolargeresponse",{"_index":276,"title":{},"body":{"controllers/AppController.html":{}}}],["apiproperty",{"_index":28,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"classes/ChatEventDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/DirectMessageDto.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/LinksWithCount.html":{},"classes/LiveChatMessageDto.html":{},"classes/LoginBody.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/PlaybackEventDto.html":{},"classes/QueueEventDto.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/RoomSongDto.html":{},"classes/RoomsData.html":{},"classes/SearchHistoryDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/SongInfosWithCount.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{},"classes/VoteDto.html":{}}}],["apiproperty()@isboolean",{"_index":1207,"title":{},"body":{"classes/DirectMessageDto.html":{},"classes/RoomDto.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{},"classes/VoteDto.html":{}}}],["apiproperty()@isdate",{"_index":1209,"title":{},"body":{"classes/DirectMessageDto.html":{},"classes/RoomDto.html":{},"classes/SearchHistoryDto.html":{},"classes/VoteDto.html":{}}}],["apiproperty()@isnumber",{"_index":1212,"title":{},"body":{"classes/DirectMessageDto.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/QueueEventDto.html":{},"classes/RoomDto.html":{},"classes/RoomSongDto.html":{},"classes/RoomsData.html":{},"classes/SongInfoDto.html":{},"classes/SongInfosWithCount.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["apiproperty()@isobject",{"_index":2063,"title":{},"body":{"classes/PlaybackEventDto.html":{}}}],["apiproperty()@isobject()@type(undefined)@validatenested",{"_index":2917,"title":{},"body":{"classes/SpotifyCallbackResponse.html":{}}}],["apiproperty()@isobject()@validatenested",{"_index":2252,"title":{},"body":{"classes/QueueEventDto.html":{},"classes/UserProfileDto.html":{}}}],["apiproperty()@isobject()@validatenested()@type(undefined",{"_index":1791,"title":{},"body":{"classes/LiveChatMessageDto.html":{},"classes/SpotifyTokenPair.html":{}}}],["apiproperty()@isstring",{"_index":1129,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/DirectMessageDto.html":{},"classes/LiveChatMessageDto.html":{},"classes/PlaybackEventDto.html":{},"classes/QueueEventDto.html":{},"classes/RoomDto.html":{},"classes/RoomSongDto.html":{},"classes/SearchHistoryDto.html":{},"classes/SongInfoDto.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{},"classes/VoteDto.html":{}}}],["apiproperty({description",{"_index":16,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/ChatEventDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CreateRoomDto.html":{},"classes/DirectMessageDto.html":{},"classes/EmojiReactionDto.html":{},"classes/LoginBody.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/PlaybackEventDto.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{}}}],["apiproperty({title",{"_index":2404,"title":{},"body":{"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsSongsDto.html":{}}}],["apiproperty({type",{"_index":1114,"title":{},"body":{"classes/CombinedSearchResults.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/JoinsCount.html":{},"classes/LinksWithCount.html":{},"classes/MessagesPerHour.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/RoomsData.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/SongInfosWithCount.html":{}}}],["apipropertyoptional",{"_index":829,"title":{},"body":{"classes/ChatEventDto.html":{},"classes/CreateRoomDto.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/LiveChatMessageDto.html":{},"classes/PlaybackEventDto.html":{},"classes/RoomDto.html":{},"classes/RoomSongDto.html":{},"classes/RoomsData.html":{},"classes/SongInfoDto.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{}}}],["apipropertyoptional()@isboolean()@isoptional",{"_index":1133,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["apipropertyoptional()@isdate",{"_index":1786,"title":{},"body":{"classes/LiveChatMessageDto.html":{},"classes/PlaybackEventDto.html":{},"classes/RoomDto.html":{}}}],["apipropertyoptional()@isdate()@isoptional()@transform",{"_index":1131,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["apipropertyoptional()@isnumber",{"_index":2506,"title":{},"body":{"classes/RoomSongDto.html":{}}}],["apipropertyoptional()@isnumber()@isoptional",{"_index":1143,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["apipropertyoptional()@isoptional()@isstring",{"_index":2634,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["apipropertyoptional()@isstring",{"_index":2060,"title":{},"body":{"classes/PlaybackEventDto.html":{},"classes/UserDto.html":{}}}],["apipropertyoptional()@isstring()@isoptional",{"_index":1139,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["apipropertyoptional({description",{"_index":815,"title":{},"body":{"classes/ChatEventDto.html":{},"classes/RoomDto.html":{},"classes/SongInfoDto.html":{},"classes/UserDto.html":{}}}],["apiquery",{"_index":2725,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["apiresponse",{"_index":477,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SpotifyAuthController.html":{}}}],["apisecurity",{"_index":232,"title":{},"body":{"controllers/AppController.html":{},"controllers/SpotifyAuthController.html":{}}}],["apisecurity(\"bearer",{"_index":254,"title":{},"body":{"controllers/AppController.html":{},"controllers/SpotifyAuthController.html":{}}}],["apitags",{"_index":478,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GenresController.html":{},"controllers/ProfileController.html":{},"controllers/SongsController.html":{},"controllers/SpotifyAuthController.html":{}}}],["apitags(\"auth",{"_index":480,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SpotifyAuthController.html":{}}}],["apitags(\"genres",{"_index":1692,"title":{},"body":{"controllers/GenresController.html":{}}}],["apitags(\"profile",{"_index":2185,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apitags(\"songs",{"_index":2666,"title":{},"body":{"controllers/SongsController.html":{}}}],["app",{"_index":779,"title":{},"body":{"injectables/BullBoardService.html":{},"controllers/SpotifyAuthController.html":{},"index.html":{}}}],["app.controller",{"_index":345,"title":{},"body":{"modules/AppModule.html":{}}}],["app.controller.spec.tsunit",{"_index":3799,"title":{},"body":{"index.html":{}}}],["app.controller.tsthe",{"_index":3802,"title":{},"body":{"index.html":{}}}],["app.module.tsmain",{"_index":3807,"title":{},"body":{"index.html":{}}}],["app.service",{"_index":226,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.service.tscontains",{"_index":3800,"title":{},"body":{"index.html":{}}}],["app.use(\"/admin/queues",{"_index":781,"title":{},"body":{"injectables/BullBoardService.html":{}}}],["appcontroller",{"_index":180,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"index.html":{}}}],["applicable",{"_index":831,"title":{},"body":{"classes/ChatEventDto.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{}}}],["applicable'})@isstring",{"_index":821,"title":{},"body":{"classes/ChatEventDto.html":{}}}],["applicable'})@isstring()@validatenested",{"_index":3485,"title":{},"body":{"classes/UserDto.html":{}}}],["application",{"_index":3793,"title":{},"body":{"index.html":{}}}],["application/x",{"_index":2864,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["applications",{"_index":3723,"title":{},"body":{"index.html":{}}}],["apply",{"_index":3386,"title":{},"body":{"classes/UserActionDto.html":{}}}],["appmodule",{"_index":307,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":225,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["architecture",{"_index":3847,"title":{},"body":{"index.html":{}}}],["archive/.../user.ts",{"_index":3941,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["archive/modules/profile/dto/updateuserprofile.dto.ts",{"_index":3137,"title":{},"body":{"classes/UpdateUserProfileDto.html":{},"coverage.html":{}}}],["archive/modules/profile/dto/updateuserprofile.dto.ts:4",{"_index":3139,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["archive/modules/profile/dto/userprofile.dto.ts",{"_index":3528,"title":{},"body":{"classes/UserProfileDto.html":{},"coverage.html":{}}}],["archive/modules/profile/dto/userprofile.dto.ts:11",{"_index":3537,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["archive/modules/profile/dto/userprofile.dto.ts:15",{"_index":3540,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["archive/modules/profile/dto/userprofile.dto.ts:19",{"_index":3541,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["archive/modules/profile/dto/userprofile.dto.ts:23",{"_index":3538,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["archive/modules/profile/dto/userprofile.dto.ts:28",{"_index":3534,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["archive/modules/profile/dto/userprofile.dto.ts:36",{"_index":3535,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["archive/modules/profile/dto/userprofile.dto.ts:44",{"_index":3536,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["archive/modules/profile/dto/userprofile.dto.ts:51",{"_index":3529,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["archive/modules/profile/dto/userprofile.dto.ts:56",{"_index":3530,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["archive/modules/profile/dto/userprofile.dto.ts:61",{"_index":3531,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["archive/modules/profile/dto/userprofile.dto.ts:69",{"_index":3533,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["archive/modules/profile/dto/userprofile.dto.ts:77",{"_index":3532,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["archive/modules/profile/dto/userprofile.dto.ts:85",{"_index":3539,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["archive/modules/profile/entities/userprofile.entity.ts",{"_index":3509,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["archive/modules/profile/entities/userprofile.entity.ts:11",{"_index":3521,"title":{},"body":{"classes/UserEntity.html":{}}}],["archive/modules/profile/entities/userprofile.entity.ts:14",{"_index":3522,"title":{},"body":{"classes/UserEntity.html":{}}}],["archive/modules/profile/entities/userprofile.entity.ts:17",{"_index":3519,"title":{},"body":{"classes/UserEntity.html":{}}}],["archive/modules/profile/entities/userprofile.entity.ts:20",{"_index":3515,"title":{},"body":{"classes/UserEntity.html":{}}}],["archive/modules/profile/entities/userprofile.entity.ts:26",{"_index":3516,"title":{},"body":{"classes/UserEntity.html":{}}}],["archive/modules/profile/entities/userprofile.entity.ts:32",{"_index":3517,"title":{},"body":{"classes/UserEntity.html":{}}}],["archive/modules/profile/entities/userprofile.entity.ts:38",{"_index":3510,"title":{},"body":{"classes/UserEntity.html":{}}}],["archive/modules/profile/entities/userprofile.entity.ts:41",{"_index":3511,"title":{},"body":{"classes/UserEntity.html":{}}}],["archive/modules/profile/entities/userprofile.entity.ts:44",{"_index":3512,"title":{},"body":{"classes/UserEntity.html":{}}}],["archive/modules/profile/entities/userprofile.entity.ts:50",{"_index":3514,"title":{},"body":{"classes/UserEntity.html":{}}}],["archive/modules/profile/entities/userprofile.entity.ts:56",{"_index":3513,"title":{},"body":{"classes/UserEntity.html":{}}}],["archive/modules/profile/entities/userprofile.entity.ts:62",{"_index":3520,"title":{},"body":{"classes/UserEntity.html":{}}}],["archive/modules/profile/entities/userprofile.entity.ts:8",{"_index":3518,"title":{},"body":{"classes/UserEntity.html":{}}}],["archive/modules/profile/profile.controller.ts",{"_index":2131,"title":{},"body":{"controllers/ProfileController.html":{},"coverage.html":{}}}],["archive/modules/profile/profile.controller.ts:105",{"_index":2157,"title":{},"body":{"controllers/ProfileController.html":{}}}],["archive/modules/profile/profile.controller.ts:125",{"_index":2146,"title":{},"body":{"controllers/ProfileController.html":{}}}],["archive/modules/profile/profile.controller.ts:147",{"_index":2175,"title":{},"body":{"controllers/ProfileController.html":{}}}],["archive/modules/profile/profile.controller.ts:44",{"_index":2151,"title":{},"body":{"controllers/ProfileController.html":{}}}],["archive/modules/profile/profile.controller.ts:60",{"_index":2169,"title":{},"body":{"controllers/ProfileController.html":{}}}],["archive/modules/profile/profile.controller.ts:82",{"_index":2166,"title":{},"body":{"controllers/ProfileController.html":{}}}],["archive/modules/profile/profile.module.ts",{"_index":2204,"title":{},"body":{"modules/ProfileModule.html":{}}}],["archive/modules/profile/profile.service.ts",{"_index":2206,"title":{},"body":{"injectables/ProfileService.html":{},"coverage.html":{}}}],["archive/modules/profile/profile.service.ts:11",{"_index":2208,"title":{},"body":{"injectables/ProfileService.html":{}}}],["archive/modules/profile/profile.service.ts:111",{"_index":2218,"title":{},"body":{"injectables/ProfileService.html":{}}}],["archive/modules/profile/profile.service.ts:18",{"_index":2213,"title":{},"body":{"injectables/ProfileService.html":{}}}],["archive/modules/profile/profile.service.ts:23",{"_index":2220,"title":{},"body":{"injectables/ProfileService.html":{}}}],["archive/modules/profile/profile.service.ts:53",{"_index":2215,"title":{},"body":{"injectables/ProfileService.html":{}}}],["archive/modules/profile/profile.service.ts:74",{"_index":2211,"title":{},"body":{"injectables/ProfileService.html":{}}}],["archive/modules/rooms/entities/room.entity.ts",{"_index":2474,"title":{},"body":{"classes/RoomEntity.html":{},"coverage.html":{}}}],["archive/modules/rooms/entities/room.entity.ts:10",{"_index":2488,"title":{},"body":{"classes/RoomEntity.html":{}}}],["archive/modules/rooms/entities/room.entity.ts:13",{"_index":2485,"title":{},"body":{"classes/RoomEntity.html":{}}}],["archive/modules/rooms/entities/room.entity.ts:16",{"_index":2487,"title":{},"body":{"classes/RoomEntity.html":{}}}],["archive/modules/rooms/entities/room.entity.ts:19",{"_index":2477,"title":{},"body":{"classes/RoomEntity.html":{}}}],["archive/modules/rooms/entities/room.entity.ts:22",{"_index":2483,"title":{},"body":{"classes/RoomEntity.html":{}}}],["archive/modules/rooms/entities/room.entity.ts:25",{"_index":2481,"title":{},"body":{"classes/RoomEntity.html":{}}}],["archive/modules/rooms/entities/room.entity.ts:28",{"_index":2482,"title":{},"body":{"classes/RoomEntity.html":{}}}],["archive/modules/rooms/entities/room.entity.ts:31",{"_index":2489,"title":{},"body":{"classes/RoomEntity.html":{}}}],["archive/modules/rooms/entities/room.entity.ts:34",{"_index":2478,"title":{},"body":{"classes/RoomEntity.html":{}}}],["archive/modules/rooms/entities/room.entity.ts:37",{"_index":2484,"title":{},"body":{"classes/RoomEntity.html":{}}}],["archive/modules/rooms/entities/room.entity.ts:40",{"_index":2479,"title":{},"body":{"classes/RoomEntity.html":{}}}],["archive/modules/rooms/entities/room.entity.ts:43",{"_index":2480,"title":{},"body":{"classes/RoomEntity.html":{}}}],["archive/modules/rooms/entities/room.entity.ts:46",{"_index":2486,"title":{},"body":{"classes/RoomEntity.html":{}}}],["archive/modules/rooms/entities/room.entity.ts:49",{"_index":2476,"title":{},"body":{"classes/RoomEntity.html":{}}}],["archive/modules/rooms/entities/room.entity.ts:52",{"_index":2490,"title":{},"body":{"classes/RoomEntity.html":{}}}],["archive/modules/rooms/entities/room.entity.ts:7",{"_index":2475,"title":{},"body":{"classes/RoomEntity.html":{}}}],["archive/modules/rooms/entities/songinfo.entity.ts",{"_index":2655,"title":{},"body":{"classes/SongInfoEntity.html":{},"coverage.html":{}}}],["archive/modules/rooms/entities/songinfo.entity.ts:11",{"_index":2657,"title":{},"body":{"classes/SongInfoEntity.html":{}}}],["archive/modules/rooms/entities/songinfo.entity.ts:14",{"_index":2658,"title":{},"body":{"classes/SongInfoEntity.html":{}}}],["archive/modules/rooms/entities/songinfo.entity.ts:5",{"_index":2659,"title":{},"body":{"classes/SongInfoEntity.html":{}}}],["archive/modules/rooms/entities/songinfo.entity.ts:8",{"_index":2656,"title":{},"body":{"classes/SongInfoEntity.html":{}}}],["archive/modules/users/dto/create",{"_index":1153,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["archive/modules/users/dto/update",{"_index":3128,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["archive/modules/users/dto/updateuser.dto.ts",{"_index":3131,"title":{},"body":{"classes/UpdateUserDto-1.html":{},"coverage.html":{}}}],["archive/modules/users/dto/updateuser.dto.ts:4",{"_index":3134,"title":{},"body":{"classes/UpdateUserDto-1.html":{}}}],["archive/modules/users/entities/user.entity.ts",{"_index":1180,"title":{},"body":{"classes/CreateUserDto-1.html":{},"coverage.html":{}}}],["archive/modules/users/entities/user.entity.ts:12",{"_index":1183,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["archive/modules/users/entities/user.entity.ts:15",{"_index":1185,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["archive/modules/users/entities/user.entity.ts:18",{"_index":1182,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["archive/modules/users/entities/user.entity.ts:21",{"_index":1184,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["archive/modules/users/entities/user.entity.ts:6",{"_index":1186,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["archive/modules/users/entities/user.entity.ts:9",{"_index":1187,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["archive/spotify/models/user.ts",{"_index":2938,"title":{},"body":{"classes/SpotifyUser.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["archive/spotify/models/user.ts:54",{"_index":2948,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["archive/spotify/models/user.ts:55",{"_index":2949,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["archive/spotify/models/user.ts:56",{"_index":2950,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["archive/spotify/models/user.ts:57",{"_index":2952,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["archive/spotify/models/user.ts:58",{"_index":2954,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["archive/spotify/models/user.ts:59",{"_index":2955,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["archive/spotify/models/user.ts:60",{"_index":2956,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["archive/spotify/models/user.ts:61",{"_index":2957,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["archive/spotify/models/user.ts:62",{"_index":2958,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["archive/spotify/models/user.ts:63",{"_index":2959,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["archive/spotify/models/user.ts:64",{"_index":2960,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["archive/spotify/models/user.ts:65",{"_index":2947,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["archivearchived",{"_index":3777,"title":{},"body":{"index.html":{}}}],["aren't",{"_index":1451,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["argumentshost",{"_index":3566,"title":{},"body":{"classes/WsExceptionFilter.html":{}}}],["array",{"_index":104,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/LinksWithCount.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomsData.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{},"index.html":{}}}],["array'})@validatenested({each",{"_index":1116,"title":{},"body":{"classes/CombinedSearchResults.html":{}}}],["array.from",{"_index":1029,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["array.from(this.connectedusers.values",{"_index":1317,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["array.isarray(result",{"_index":911,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["array[${sqlstring.escape(tag",{"_index":980,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["artist",{"_index":2647,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["artists",{"_index":860,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{}}}],["artwork_url",{"_index":2650,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["asc",{"_index":874,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["assuming",{"_index":1802,"title":{},"body":{"modules/LiveModule.html":{}}}],["async",{"_index":185,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"injectables/EventQueueService.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"injectables/ImageService.html":{},"injectables/JwtStrategy.html":{},"injectables/LiveService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RetryService.html":{},"injectables/RoomUsersService.html":{},"injectables/S3Service.html":{},"controllers/SongsController.html":{},"injectables/SongsService.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/UserActionDto.html":{},"dependencies.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["async.queue(async",{"_index":1633,"title":{},"body":{"injectables/EventQueueService.html":{}}}],["async.queueobject",{"_index":1619,"title":{},"body":{"injectables/EventQueueService.html":{}}}],["attacks",{"_index":2703,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["attempt",{"_index":2101,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/RetryService.html":{}}}],["attempting",{"_index":2121,"title":{},"body":{"injectables/PrismaService.html":{}}}],["attempts",{"_index":2888,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["attributes",{"_index":665,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["attributetype",{"_index":611,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["audio",{"_index":3360,"title":{},"body":{"classes/UserActionDto.html":{}}}],["audiofeatures",{"_index":3369,"title":{},"body":{"classes/UserActionDto.html":{}}}],["audiofeatures.filter",{"_index":3399,"title":{},"body":{"classes/UserActionDto.html":{}}}],["audiofeatures.length",{"_index":3372,"title":{},"body":{"classes/UserActionDto.html":{}}}],["audiofeatures.map((song",{"_index":3374,"title":{},"body":{"classes/UserActionDto.html":{}}}],["auth",{"_index":402,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"controllers/ProfileController.html":{},"controllers/SpotifyAuthController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["auth.controller",{"_index":547,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":242,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{},"controllers/SpotifyAuthController.html":{}}}],["auth.guard.ts",{"_index":1760,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":476,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["auth/auth.module",{"_index":348,"title":{},"body":{"modules/AppModule.html":{},"modules/RoomsModule.html":{},"modules/SearchModule.html":{},"modules/SongsModule.html":{},"modules/UsersModule.html":{}}}],["auth/auth.service",{"_index":2183,"title":{},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{}}}],["auth/callback?code={code}&state={state",{"_index":2747,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["auth/jwt",{"_index":241,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{}}}],["auth/redirect?code={code}&state={state",{"_index":2739,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["auth/spotify",{"_index":2684,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["auth/spotify/spotifyauth.module",{"_index":2498,"title":{},"body":{"modules/RoomQueueModule.html":{}}}],["auth/spotify/spotifyauth.service",{"_index":3015,"title":{},"body":{"classes/TasksProcessor.html":{},"injectables/TasksService.html":{}}}],["auth_time",{"_index":629,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["authcontroller",{"_index":410,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{}}}],["authcontrollerloginerror01",{"_index":491,"title":{},"body":{"controllers/AuthController.html":{}}}],["authcontrollerrefresherror01",{"_index":523,"title":{},"body":{"controllers/AuthController.html":{}}}],["authcontrollerrefresherror02",{"_index":534,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticate",{"_index":419,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticates",{"_index":2694,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["authentication",{"_index":260,"title":{},"body":{"controllers/AppController.html":{},"injectables/DtoGenService.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["authenticationresult",{"_index":666,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["authenticationresulttype",{"_index":612,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["authflow",{"_index":655,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["authguard",{"_index":1762,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard(\"jwt",{"_index":1761,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authhandles",{"_index":3813,"title":{},"body":{"index.html":{}}}],["authheader",{"_index":2778,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["authinfo",{"_index":495,"title":{},"body":{"controllers/AuthController.html":{}}}],["authinfo.username",{"_index":498,"title":{},"body":{"controllers/AuthController.html":{}}}],["authmodule",{"_index":318,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/RoomsModule.html":{},"modules/SearchModule.html":{},"modules/SongsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":3937,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":257,"title":{},"body":{"controllers/AppController.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["authorization_code",{"_index":2860,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["authparameters",{"_index":657,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["authregistererror01",{"_index":518,"title":{},"body":{"controllers/AuthController.html":{}}}],["authresponse",{"_index":658,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["authresponse.authenticationresult",{"_index":660,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["authservice",{"_index":473,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"controllers/SpotifyAuthController.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["automod.service",{"_index":732,"title":{},"body":{"modules/AutoModerationModule.html":{}}}],["automod/automod.module",{"_index":1228,"title":{},"body":{"modules/DmUsersModule.html":{},"modules/LiveModule.html":{},"modules/RoomUsersModule.html":{}}}],["automoderationmodule",{"_index":726,"title":{"modules/AutoModerationModule.html":{}},"body":{"modules/AutoModerationModule.html":{},"modules/DmUsersModule.html":{},"modules/LiveModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/RoomUsersModule.html":{},"modules.html":{},"overview.html":{}}}],["automoderationservice",{"_index":730,"title":{"injectables/AutoModerationService.html":{}},"body":{"modules/AutoModerationModule.html":{},"injectables/AutoModerationService.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":2359,"title":{},"body":{"injectables/RetryService.html":{},"index.html":{},"modules.html":{}}}],["average",{"_index":17,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["average_session_duration",{"_index":60,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["averagesessionduration",{"_index":61,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["averagesimilarity",{"_index":2322,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["avg_duration",{"_index":9,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["await",{"_index":303,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"injectables/EventQueueService.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"injectables/ImageService.html":{},"injectables/LiveService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RetryService.html":{},"injectables/RoomUsersService.html":{},"injectables/S3Service.html":{},"controllers/SongsController.html":{},"injectables/SongsService.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/UserActionDto.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["aws",{"_index":198,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/S3Service.html":{},"dependencies.html":{}}}],["aws_access_key_id",{"_index":638,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"miscellaneous/variables.html":{}}}],["aws_cognito_client_id",{"_index":646,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"miscellaneous/variables.html":{}}}],["aws_cognito_user_pool_id",{"_index":643,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"miscellaneous/variables.html":{}}}],["aws_s3_bucket_name",{"_index":3955,"title":{},"body":{"miscellaneous/variables.html":{}}}],["aws_s3_endpoint",{"_index":3957,"title":{},"body":{"miscellaneous/variables.html":{}}}],["aws_s3_region",{"_index":3956,"title":{},"body":{"miscellaneous/variables.html":{}}}],["aws_secret_access_key",{"_index":641,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/S3Service.html":{},"miscellaneous/variables.html":{}}}],["awss3",{"_index":2579,"title":{},"body":{"injectables/S3Service.html":{}}}],["axios",{"_index":2811,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"dependencies.html":{}}}],["axioserror",{"_index":2810,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["b",{"_index":1589,"title":{},"body":{"injectables/DtoGenService.html":{},"injectables/RecommendationsService.html":{},"classes/UserActionDto.html":{}}}],["b.blockee",{"_index":1408,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["b.blocker",{"_index":1407,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["b.message.date_sent.gettime",{"_index":1591,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["b.score",{"_index":2330,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["b64",{"_index":2841,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["backend",{"_index":3738,"title":{},"body":{"index.html":{}}}],["background",{"_index":3022,"title":{},"body":{"classes/TasksProcessor.html":{},"index.html":{}}}],["backoff",{"_index":2113,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/RetryService.html":{}}}],["bad",{"_index":273,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{}}}],["badges",{"_index":3672,"title":{},"body":{"dependencies.html":{}}}],["ban",{"_index":3345,"title":{},"body":{"classes/UserActionDto.html":{}}}],["banned",{"_index":3227,"title":{},"body":{"classes/UserActionDto.html":{},"miscellaneous/variables.html":{}}}],["banned.user_id",{"_index":3232,"title":{},"body":{"classes/UserActionDto.html":{}}}],["banneduserdtos",{"_index":3342,"title":{},"body":{"classes/UserActionDto.html":{}}}],["banneduserid",{"_index":3344,"title":{},"body":{"classes/UserActionDto.html":{}}}],["banneduserids",{"_index":3340,"title":{},"body":{"classes/UserActionDto.html":{}}}],["bannedusers",{"_index":3338,"title":{},"body":{"classes/UserActionDto.html":{}}}],["bannedusers.map((banned",{"_index":3341,"title":{},"body":{"classes/UserActionDto.html":{}}}],["banuser",{"_index":3343,"title":{},"body":{"classes/UserActionDto.html":{}}}],["base64",{"_index":1731,"title":{},"body":{"injectables/ImageService.html":{}}}],["base64\").tostring(\"utf",{"_index":2845,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["based",{"_index":143,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"injectables/TasksService.html":{}}}],["basic",{"_index":2868,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["bcrypt",{"_index":3667,"title":{},"body":{"dependencies.html":{}}}],["bearer",{"_index":258,"title":{},"body":{"controllers/AppController.html":{},"controllers/SpotifyAuthController.html":{}}}],["before",{"_index":2120,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/RetryService.html":{}}}],["being",{"_index":2233,"title":{},"body":{"injectables/ProfileService.html":{},"index.html":{}}}],["best",{"_index":3856,"title":{},"body":{"index.html":{}}}],["between",{"_index":1579,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{}}}],["binary",{"_index":271,"title":{},"body":{"controllers/AppController.html":{}}}],["bio",{"_index":1156,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/DtoGenService.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{}}}],["blobpart",{"_index":3356,"title":{},"body":{"classes/UserActionDto.html":{}}}],["blocked",{"_index":905,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{},"miscellaneous/variables.html":{}}}],["blocked.map((b",{"_index":1406,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["blocked_blocked_blockertousers",{"_index":993,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["blocked_id",{"_index":1410,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["blocked_ids",{"_index":1405,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["blocked_ids.filter((id",{"_index":1411,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["blocked_rooms",{"_index":921,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["blocked_rooms.map((room",{"_index":928,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["blockee",{"_index":920,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{}}}],["blocker",{"_index":919,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{}}}],["blocks",{"_index":3875,"title":{},"body":{"index.html":{}}}],["board",{"_index":773,"title":{},"body":{"injectables/BullBoardService.html":{}}}],["board.module",{"_index":366,"title":{},"body":{"modules/AppModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/TasksModule.html":{}}}],["board.module.ts",{"_index":740,"title":{},"body":{"modules/BullBoardModule.html":{}}}],["board.service",{"_index":743,"title":{},"body":{"modules/BullBoardModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["board.service.ts",{"_index":749,"title":{},"body":{"injectables/BullBoardService.html":{},"coverage.html":{}}}],["board.service.ts:11",{"_index":754,"title":{},"body":{"injectables/BullBoardService.html":{}}}],["board.service.ts:15",{"_index":756,"title":{},"body":{"injectables/BullBoardService.html":{}}}],["board/api",{"_index":760,"title":{},"body":{"injectables/BullBoardService.html":{},"dependencies.html":{}}}],["board/api/bulladapter",{"_index":762,"title":{},"body":{"injectables/BullBoardService.html":{}}}],["board/bull",{"_index":365,"title":{},"body":{"modules/AppModule.html":{},"modules/BullBoardModule.html":{},"injectables/BullBoardService.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["board/express",{"_index":764,"title":{},"body":{"injectables/BullBoardService.html":{},"dependencies.html":{}}}],["board/ui",{"_index":3647,"title":{},"body":{"dependencies.html":{}}}],["boardprovides",{"_index":3818,"title":{},"body":{"index.html":{}}}],["body",{"_index":448,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Category.html":{},"classes/ChatEventDto.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"controllers/ProfileController.html":{},"injectables/S3Service.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UserActionDto.html":{}}}],["body'})@isstring",{"_index":1604,"title":{},"body":{"classes/EmojiReactionDto.html":{}}}],["bodyisroomid",{"_index":1199,"title":{},"body":{"classes/DirectMessageDto.html":{},"injectables/DtoGenService.html":{}}}],["bookmark",{"_index":1157,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{},"miscellaneous/variables.html":{}}}],["bookmarked",{"_index":127,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/UserActionDto.html":{}}}],["bookmarked'})@isnumber",{"_index":2419,"title":{},"body":{"classes/RoomAnalyticsInteractionsDto.html":{}}}],["bookmarked_count",{"_index":128,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["bookmarkedrooms",{"_index":1438,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["bookmarkedrooms.length",{"_index":1445,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["bookmarkedrooms.map((r",{"_index":1446,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["bookmarkroom(roomid",{"_index":3300,"title":{},"body":{"classes/UserActionDto.html":{}}}],["boolean",{"_index":511,"title":{},"body":{"controllers/AuthController.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateRoomDto.html":{},"classes/DirectMessageDto.html":{},"injectables/DtoGenService.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"injectables/LiveService.html":{},"controllers/ProfileController.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/SpotifyUser.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{},"classes/VoteDto.html":{}}}],["boolean})@apibadrequestresponse({description",{"_index":2145,"title":{},"body":{"controllers/ProfileController.html":{}}}],["bootstrap",{"_index":312,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AutoModerationModule.html":{},"modules/BullBoardModule.html":{},"modules/DbUtilsModule.html":{},"modules/DmUsersModule.html":{},"modules/DtoGenModule.html":{},"modules/GenresModule.html":{},"modules/ImageModule.html":{},"modules/LiveModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RecommendationsModule.html":{},"modules/RetryModule.html":{},"modules/RoomQueueModule.html":{},"modules/RoomUsersModule.html":{},"modules/RoomsModule.html":{},"modules/S3Module.html":{},"modules/SearchModule.html":{},"modules/SongsModule.html":{},"modules/SpotifyAuthModule.html":{},"modules/SpotifyModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["bootstrapping",{"_index":3812,"title":{},"body":{"index.html":{}}}],["both",{"_index":49,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/WsExceptionFilter.html":{}}}],["box",{"_index":3848,"title":{},"body":{"index.html":{}}}],["browse",{"_index":3926,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":3924,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":201,"title":{},"body":{"controllers/AppController.html":{},"injectables/S3Service.html":{},"miscellaneous/variables.html":{}}}],["bucketname",{"_index":2564,"title":{},"body":{"injectables/S3Service.html":{}}}],["buffer",{"_index":1719,"title":{},"body":{"injectables/ImageService.html":{},"injectables/LiveService.html":{}}}],["buffer.from",{"_index":2828,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["buffer.from(state",{"_index":2844,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["build",{"_index":3770,"title":{},"body":{"index.html":{}}}],["building",{"_index":3719,"title":{},"body":{"index.html":{}}}],["built",{"_index":3845,"title":{},"body":{"index.html":{}}}],["bull",{"_index":362,"title":{},"body":{"modules/AppModule.html":{},"modules/BullBoardModule.html":{},"injectables/BullBoardService.html":{},"modules/TasksModule.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"dependencies.html":{},"index.html":{}}}],["bull.config.ts",{"_index":792,"title":{},"body":{"modules/BullConfigModule.html":{}}}],["bulladapter",{"_index":761,"title":{},"body":{"injectables/BullBoardService.html":{}}}],["bulladapter(this.taskqueue",{"_index":778,"title":{},"body":{"injectables/BullBoardService.html":{}}}],["bullboardmodule",{"_index":319,"title":{"modules/BullBoardModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BullBoardModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["bullboardservice",{"_index":738,"title":{"injectables/BullBoardService.html":{}},"body":{"modules/BullBoardModule.html":{},"injectables/BullBoardService.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"overview.html":{}}}],["bullboardservice.serverstarted",{"_index":771,"title":{},"body":{"injectables/BullBoardService.html":{}}}],["bullconfigmodule",{"_index":320,"title":{"modules/BullConfigModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BullBoardModule.html":{},"modules/BullConfigModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules.html":{},"overview.html":{}}}],["bullmodule",{"_index":741,"title":{},"body":{"modules/BullBoardModule.html":{},"modules/BullConfigModule.html":{},"modules/TasksModule.html":{}}}],["bullmodule.forroot",{"_index":793,"title":{},"body":{"modules/BullConfigModule.html":{}}}],["bullmodule.registerqueue",{"_index":744,"title":{},"body":{"modules/BullBoardModule.html":{},"modules/TasksModule.html":{}}}],["bullqueue_task",{"_index":1998,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["business",{"_index":3801,"title":{},"body":{"index.html":{}}}],["bytes",{"_index":1728,"title":{},"body":{"injectables/ImageService.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UserActionDto.html":{}}}],["c",{"_index":2375,"title":{},"body":{"injectables/RetryService.html":{}}}],["cadinsky",{"_index":865,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["calculateactivity",{"_index":3990,"title":{},"body":{"miscellaneous/variables.html":{}}}],["calculategenresimilarity",{"_index":3991,"title":{},"body":{"miscellaneous/variables.html":{}}}],["calculatemutualfriends",{"_index":3988,"title":{},"body":{"miscellaneous/variables.html":{}}}],["calculatepopularity",{"_index":3989,"title":{},"body":{"miscellaneous/variables.html":{}}}],["calendar",{"_index":3354,"title":{},"body":{"classes/UserActionDto.html":{}}}],["calendar.ics",{"_index":3358,"title":{},"body":{"classes/UserActionDto.html":{}}}],["call",{"_index":2104,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/RetryService.html":{}}}],["callback",{"_index":287,"title":{},"body":{"controllers/AppController.html":{},"injectables/RetryService.html":{},"controllers/SpotifyAuthController.html":{},"miscellaneous/typealiases.html":{}}}],["callback(null",{"_index":294,"title":{},"body":{"controllers/AppController.html":{}}}],["called",{"_index":43,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["calls",{"_index":2360,"title":{},"body":{"injectables/RetryService.html":{}}}],["cansplit",{"_index":3398,"title":{},"body":{"classes/UserActionDto.html":{}}}],["cansplitroom(roomid",{"_index":3421,"title":{},"body":{"classes/UserActionDto.html":{}}}],["capacity",{"_index":3228,"title":{},"body":{"classes/UserActionDto.html":{}}}],["captured",{"_index":1600,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["case",{"_index":3954,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catch",{"_index":531,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EventQueueService.html":{},"classes/LoginBody.html":{},"injectables/PrismaService.html":{},"injectables/ProfileService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RetryService.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UserActionDto.html":{},"classes/WsExceptionFilter.html":{}}}],["catch(error",{"_index":3572,"title":{},"body":{"classes/WsExceptionFilter.html":{}}}],["catch(exception",{"_index":3565,"title":{},"body":{"classes/WsExceptionFilter.html":{}}}],["category",{"_index":798,"title":{"interfaces/Category.html":{}},"body":{"interfaces/Category.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"coverage.html":{}}}],["change",{"_index":152,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["chat",{"_index":3279,"title":{},"body":{"classes/UserActionDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["chat_modified",{"_index":4093,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chat_reactions",{"_index":3985,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chateventdto",{"_index":811,"title":{"classes/ChatEventDto.html":{}},"body":{"classes/ChatEventDto.html":{},"coverage.html":{}}}],["chatid",{"_index":1280,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["chatids",{"_index":1315,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["chatids.length",{"_index":1318,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["chatids[0",{"_index":1320,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["chatids[1",{"_index":1321,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["chatids[i][0",{"_index":1334,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["chatids[i][1",{"_index":1335,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["chatmanages",{"_index":3821,"title":{},"body":{"index.html":{}}}],["chatmodified",{"_index":4094,"title":{},"body":{"miscellaneous/variables.html":{}}}],["check",{"_index":902,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/ImageService.html":{},"injectables/RecommendationsService.html":{},"classes/UserActionDto.html":{},"index.html":{}}}],["checking",{"_index":1841,"title":{},"body":{"injectables/LiveService.html":{},"index.html":{}}}],["checkroomqueues",{"_index":1836,"title":{},"body":{"injectables/LiveService.html":{}}}],["child",{"_index":3362,"title":{},"body":{"classes/UserActionDto.html":{}}}],["child.room_id",{"_index":1515,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["child_room_child_room_parent_room_idtoroom",{"_index":1476,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{}}}],["childgenres",{"_index":3404,"title":{},"body":{"classes/UserActionDto.html":{}}}],["childgenres.length",{"_index":3409,"title":{},"body":{"classes/UserActionDto.html":{}}}],["childrenroom",{"_index":3422,"title":{},"body":{"classes/UserActionDto.html":{}}}],["childrenroom.length",{"_index":3423,"title":{},"body":{"classes/UserActionDto.html":{}}}],["childrenroomids",{"_index":1505,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/RoomDto.html":{}}}],["childrenrooms",{"_index":1484,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["childrenrooms.map((child",{"_index":1514,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["childroom0.room_id",{"_index":3410,"title":{},"body":{"classes/UserActionDto.html":{}}}],["childroom0songs",{"_index":3415,"title":{},"body":{"classes/UserActionDto.html":{}}}],["childroom1.room_id",{"_index":3414,"title":{},"body":{"classes/UserActionDto.html":{}}}],["childroom1songs",{"_index":3412,"title":{},"body":{"classes/UserActionDto.html":{}}}],["childrooms",{"_index":3363,"title":{},"body":{"classes/UserActionDto.html":{}}}],["childrooms.length",{"_index":3368,"title":{},"body":{"classes/UserActionDto.html":{}}}],["class",{"_index":0,"title":{"classes/AllTimeSessionDataDto.html":{},"classes/ChatEventDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/DirectMessageDto.html":{},"classes/EmojiReactionDto.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/InternalError.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/LinksWithCount.html":{},"classes/LiveChatMessageDto.html":{},"classes/LoginBody.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/PlaybackEventDto.html":{},"classes/QueueEventDto.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/RoomSongDto.html":{},"classes/RoomsData.html":{},"classes/SearchHistoryDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/SongInfosWithCount.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/SpotifyUser.html":{},"classes/TasksProcessor.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserDto-1.html":{},"classes/UpdateUserDto-2.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserError.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{},"classes/VoteDto.html":{},"classes/WsExceptionFilter.html":{}},"body":{"classes/AllTimeSessionDataDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/AutoModerationModule.html":{},"injectables/AutoModerationService.html":{},"modules/BullBoardModule.html":{},"injectables/BullBoardService.html":{},"modules/BullConfigModule.html":{},"interfaces/Category.html":{},"classes/ChatEventDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"modules/DbUtilsModule.html":{},"classes/DirectMessageDto.html":{},"modules/DmUsersModule.html":{},"injectables/DmUsersService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"injectables/EventQueueService.html":{},"classes/FollowersAndFollowing.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"classes/GenresWithCount.html":{},"modules/ImageModule.html":{},"injectables/ImageService.html":{},"classes/InternalError.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LinksWithCount.html":{},"classes/LiveChatMessageDto.html":{},"modules/LiveModule.html":{},"injectables/LiveService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"classes/MessagesPerHour.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"injectables/MyLogger.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/PlaybackEventDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/QueueEventDto.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"modules/RetryModule.html":{},"injectables/RetryService.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"modules/RoomQueueModule.html":{},"classes/RoomSongDto.html":{},"modules/RoomUsersModule.html":{},"injectables/RoomUsersService.html":{},"classes/RoomsData.html":{},"modules/RoomsModule.html":{},"modules/S3Module.html":{},"injectables/S3Service.html":{},"classes/SearchHistoryDto.html":{},"modules/SearchModule.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/SongInfosWithCount.html":{},"controllers/SongsController.html":{},"modules/SongsModule.html":{},"injectables/SongsService.html":{},"controllers/SpotifyAuthController.html":{},"modules/SpotifyAuthModule.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"modules/SpotifyModule.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/SpotifyUser.html":{},"modules/TasksModule.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserDto-1.html":{},"classes/UpdateUserDto-2.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserError.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{},"modules/UsersModule.html":{},"classes/VoteDto.html":{},"classes/WsExceptionFilter.html":{},"coverage.html":{},"dependencies.html":{},"interfaces/dmUser.html":{},"index.html":{},"interfaces/liveChatUser.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/ChatEventDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/DirectMessageDto.html":{},"classes/EmojiReactionDto.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/InternalError.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/LinksWithCount.html":{},"classes/LiveChatMessageDto.html":{},"classes/LoginBody.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/PlaybackEventDto.html":{},"classes/QueueEventDto.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/RoomSongDto.html":{},"classes/RoomsData.html":{},"classes/SearchHistoryDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/SongInfosWithCount.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/SpotifyUser.html":{},"classes/TasksProcessor.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserDto-1.html":{},"classes/UpdateUserDto-2.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserError.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{},"classes/VoteDto.html":{},"classes/WsExceptionFilter.html":{},"overview.html":{}}}],["clear_queue",{"_index":4043,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clearqueue",{"_index":4044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clearroomshistory(userid",{"_index":1112,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["clearsearchhistory(userid",{"_index":1110,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["clearusershistory(userid",{"_index":1113,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["cli",{"_index":3673,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["cli.jsonconfiguration",{"_index":3758,"title":{},"body":{"index.html":{}}}],["client",{"_index":2595,"title":{},"body":{"injectables/S3Service.html":{},"classes/WsExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["client.emit(\"error",{"_index":3579,"title":{},"body":{"classes/WsExceptionFilter.html":{}}}],["client_id",{"_index":624,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["clientid",{"_index":569,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["clientsecret",{"_index":2779,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["closely",{"_index":3871,"title":{},"body":{"index.html":{}}}],["closest",{"_index":869,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["closing",{"_index":2094,"title":{},"body":{"injectables/PrismaService.html":{}}}],["cluster",{"_index":3401,"title":{},"body":{"classes/UserActionDto.html":{}}}],["cluster.foreach((genre",{"_index":3439,"title":{},"body":{"classes/UserActionDto.html":{}}}],["cluster_appmodule",{"_index":315,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":316,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":317,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":538,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":541,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":540,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":539,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_automoderationmodule",{"_index":727,"title":{},"body":{"modules/AutoModerationModule.html":{},"overview.html":{}}}],["cluster_automoderationmodule_exports",{"_index":729,"title":{},"body":{"modules/AutoModerationModule.html":{},"overview.html":{}}}],["cluster_automoderationmodule_providers",{"_index":728,"title":{},"body":{"modules/AutoModerationModule.html":{},"overview.html":{}}}],["cluster_bullboardmodule",{"_index":734,"title":{},"body":{"modules/BullBoardModule.html":{},"overview.html":{}}}],["cluster_bullboardmodule_exports",{"_index":735,"title":{},"body":{"modules/BullBoardModule.html":{},"overview.html":{}}}],["cluster_bullboardmodule_imports",{"_index":736,"title":{},"body":{"modules/BullBoardModule.html":{}}}],["cluster_bullboardmodule_providers",{"_index":737,"title":{},"body":{"modules/BullBoardModule.html":{},"overview.html":{}}}],["cluster_dbutilsmodule",{"_index":1188,"title":{},"body":{"modules/DbUtilsModule.html":{},"overview.html":{}}}],["cluster_dbutilsmodule_exports",{"_index":1191,"title":{},"body":{"modules/DbUtilsModule.html":{},"overview.html":{}}}],["cluster_dbutilsmodule_imports",{"_index":1189,"title":{},"body":{"modules/DbUtilsModule.html":{}}}],["cluster_dbutilsmodule_providers",{"_index":1190,"title":{},"body":{"modules/DbUtilsModule.html":{},"overview.html":{}}}],["cluster_dmusersmodule",{"_index":1221,"title":{},"body":{"modules/DmUsersModule.html":{},"overview.html":{}}}],["cluster_dmusersmodule_exports",{"_index":1224,"title":{},"body":{"modules/DmUsersModule.html":{},"overview.html":{}}}],["cluster_dmusersmodule_imports",{"_index":1222,"title":{},"body":{"modules/DmUsersModule.html":{}}}],["cluster_dmusersmodule_providers",{"_index":1223,"title":{},"body":{"modules/DmUsersModule.html":{},"overview.html":{}}}],["cluster_dtogenmodule",{"_index":1338,"title":{},"body":{"modules/DtoGenModule.html":{},"overview.html":{}}}],["cluster_dtogenmodule_exports",{"_index":1339,"title":{},"body":{"modules/DtoGenModule.html":{},"overview.html":{}}}],["cluster_dtogenmodule_imports",{"_index":1341,"title":{},"body":{"modules/DtoGenModule.html":{}}}],["cluster_dtogenmodule_providers",{"_index":1340,"title":{},"body":{"modules/DtoGenModule.html":{},"overview.html":{}}}],["cluster_genresmodule",{"_index":1694,"title":{},"body":{"modules/GenresModule.html":{},"overview.html":{}}}],["cluster_genresmodule_imports",{"_index":1695,"title":{},"body":{"modules/GenresModule.html":{}}}],["cluster_genresmodule_providers",{"_index":1696,"title":{},"body":{"modules/GenresModule.html":{},"overview.html":{}}}],["cluster_imagemodule",{"_index":1709,"title":{},"body":{"modules/ImageModule.html":{},"overview.html":{}}}],["cluster_imagemodule_exports",{"_index":1711,"title":{},"body":{"modules/ImageModule.html":{},"overview.html":{}}}],["cluster_imagemodule_providers",{"_index":1710,"title":{},"body":{"modules/ImageModule.html":{},"overview.html":{}}}],["cluster_livemodule",{"_index":1793,"title":{},"body":{"modules/LiveModule.html":{},"overview.html":{}}}],["cluster_livemodule_exports",{"_index":1796,"title":{},"body":{"modules/LiveModule.html":{},"overview.html":{}}}],["cluster_livemodule_imports",{"_index":1795,"title":{},"body":{"modules/LiveModule.html":{},"overview.html":{}}}],["cluster_livemodule_providers",{"_index":1794,"title":{},"body":{"modules/LiveModule.html":{},"overview.html":{}}}],["cluster_mockconfigmodule",{"_index":1916,"title":{},"body":{"modules/MockConfigModule.html":{},"overview.html":{}}}],["cluster_mockconfigmodule_exports",{"_index":1917,"title":{},"body":{"modules/MockConfigModule.html":{},"overview.html":{}}}],["cluster_mockprismamodule",{"_index":2019,"title":{},"body":{"modules/MockPrismaModule.html":{},"overview.html":{}}}],["cluster_mockprismamodule_exports",{"_index":2020,"title":{},"body":{"modules/MockPrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":2071,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":2074,"title":{},"body":{"modules/PrismaModule.html":{}}}],["cluster_prismamodule_imports",{"_index":2073,"title":{},"body":{"modules/PrismaModule.html":{}}}],["cluster_prismamodule_providers",{"_index":2072,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_profilemodule",{"_index":2200,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_profilemodule_exports",{"_index":2203,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_profilemodule_imports",{"_index":2202,"title":{},"body":{"modules/ProfileModule.html":{}}}],["cluster_profilemodule_providers",{"_index":2201,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_recommendationsmodule",{"_index":2254,"title":{},"body":{"modules/RecommendationsModule.html":{},"overview.html":{}}}],["cluster_recommendationsmodule_exports",{"_index":2255,"title":{},"body":{"modules/RecommendationsModule.html":{},"overview.html":{}}}],["cluster_recommendationsmodule_providers",{"_index":2256,"title":{},"body":{"modules/RecommendationsModule.html":{},"overview.html":{}}}],["cluster_retrymodule",{"_index":2340,"title":{},"body":{"modules/RetryModule.html":{},"overview.html":{}}}],["cluster_retrymodule_exports",{"_index":2341,"title":{},"body":{"modules/RetryModule.html":{},"overview.html":{}}}],["cluster_retrymodule_providers",{"_index":2342,"title":{},"body":{"modules/RetryModule.html":{},"overview.html":{}}}],["cluster_roomqueuemodule",{"_index":2492,"title":{},"body":{"modules/RoomQueueModule.html":{},"overview.html":{}}}],["cluster_roomqueuemodule_exports",{"_index":2495,"title":{},"body":{"modules/RoomQueueModule.html":{},"overview.html":{}}}],["cluster_roomqueuemodule_imports",{"_index":2493,"title":{},"body":{"modules/RoomQueueModule.html":{}}}],["cluster_roomqueuemodule_providers",{"_index":2494,"title":{},"body":{"modules/RoomQueueModule.html":{},"overview.html":{}}}],["cluster_roomsmodule",{"_index":2548,"title":{},"body":{"modules/RoomsModule.html":{},"overview.html":{}}}],["cluster_roomsmodule_exports",{"_index":2550,"title":{},"body":{"modules/RoomsModule.html":{},"overview.html":{}}}],["cluster_roomsmodule_imports",{"_index":2549,"title":{},"body":{"modules/RoomsModule.html":{}}}],["cluster_roomsmodule_providers",{"_index":2551,"title":{},"body":{"modules/RoomsModule.html":{},"overview.html":{}}}],["cluster_roomusersmodule",{"_index":2513,"title":{},"body":{"modules/RoomUsersModule.html":{},"overview.html":{}}}],["cluster_roomusersmodule_exports",{"_index":2516,"title":{},"body":{"modules/RoomUsersModule.html":{},"overview.html":{}}}],["cluster_roomusersmodule_imports",{"_index":2514,"title":{},"body":{"modules/RoomUsersModule.html":{}}}],["cluster_roomusersmodule_providers",{"_index":2515,"title":{},"body":{"modules/RoomUsersModule.html":{},"overview.html":{}}}],["cluster_s3module",{"_index":2558,"title":{},"body":{"modules/S3Module.html":{},"overview.html":{}}}],["cluster_s3module_exports",{"_index":2559,"title":{},"body":{"modules/S3Module.html":{},"overview.html":{}}}],["cluster_s3module_providers",{"_index":2560,"title":{},"body":{"modules/S3Module.html":{},"overview.html":{}}}],["cluster_searchmodule",{"_index":2605,"title":{},"body":{"modules/SearchModule.html":{},"overview.html":{}}}],["cluster_searchmodule_exports",{"_index":2607,"title":{},"body":{"modules/SearchModule.html":{},"overview.html":{}}}],["cluster_searchmodule_imports",{"_index":2606,"title":{},"body":{"modules/SearchModule.html":{}}}],["cluster_searchmodule_providers",{"_index":2608,"title":{},"body":{"modules/SearchModule.html":{},"overview.html":{}}}],["cluster_songsmodule",{"_index":2669,"title":{},"body":{"modules/SongsModule.html":{},"overview.html":{}}}],["cluster_songsmodule_exports",{"_index":2670,"title":{},"body":{"modules/SongsModule.html":{},"overview.html":{}}}],["cluster_songsmodule_imports",{"_index":2671,"title":{},"body":{"modules/SongsModule.html":{}}}],["cluster_songsmodule_providers",{"_index":2672,"title":{},"body":{"modules/SongsModule.html":{},"overview.html":{}}}],["cluster_spotifyauthmodule",{"_index":2772,"title":{},"body":{"modules/SpotifyAuthModule.html":{},"overview.html":{}}}],["cluster_spotifyauthmodule_exports",{"_index":2775,"title":{},"body":{"modules/SpotifyAuthModule.html":{},"overview.html":{}}}],["cluster_spotifyauthmodule_imports",{"_index":2774,"title":{},"body":{"modules/SpotifyAuthModule.html":{}}}],["cluster_spotifyauthmodule_providers",{"_index":2773,"title":{},"body":{"modules/SpotifyAuthModule.html":{},"overview.html":{}}}],["cluster_spotifymodule",{"_index":2920,"title":{},"body":{"modules/SpotifyModule.html":{},"overview.html":{}}}],["cluster_spotifymodule_exports",{"_index":2922,"title":{},"body":{"modules/SpotifyModule.html":{},"overview.html":{}}}],["cluster_spotifymodule_imports",{"_index":2921,"title":{},"body":{"modules/SpotifyModule.html":{}}}],["cluster_spotifymodule_providers",{"_index":2923,"title":{},"body":{"modules/SpotifyModule.html":{},"overview.html":{}}}],["cluster_tasksmodule",{"_index":2989,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_tasksmodule_exports",{"_index":2992,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_tasksmodule_imports",{"_index":2990,"title":{},"body":{"modules/TasksModule.html":{}}}],["cluster_tasksmodule_providers",{"_index":2991,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":3546,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":3548,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":3549,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":3547,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["clustering",{"_index":3389,"title":{},"body":{"classes/UserActionDto.html":{}}}],["clusters",{"_index":3395,"title":{},"body":{"classes/UserActionDto.html":{}}}],["clusters.clusters[index",{"_index":3400,"title":{},"body":{"classes/UserActionDto.html":{}}}],["coalesce(f1.num_followers",{"_index":1055,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["coalesce(f2.num_following",{"_index":1058,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["code",{"_index":1871,"title":{},"body":{"injectables/LiveService.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"index.html":{}}}],["codebase",{"_index":3881,"title":{},"body":{"index.html":{}}}],["coding",{"_index":3921,"title":{},"body":{"index.html":{}}}],["cognito",{"_index":421,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["cognitoaccesstoken",{"_index":493,"title":{},"body":{"controllers/AuthController.html":{}}}],["cognitodecodedtoken",{"_index":474,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"miscellaneous/typealiases.html":{}}}],["cognitoidentityprovider",{"_index":605,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["cognitoidentityserviceprovider",{"_index":570,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["cognitojwtverifier",{"_index":621,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["cognitojwtverifier.create",{"_index":720,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["cohesive",{"_index":3874,"title":{},"body":{"index.html":{}}}],["collate",{"_index":2645,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["combined.log",{"_index":2044,"title":{},"body":{"injectables/MyLogger.html":{}}}],["combinedsearch",{"_index":892,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["combinedsearchhistory",{"_index":832,"title":{"classes/CombinedSearchHistory.html":{}},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"coverage.html":{}}}],["combinedsearchresults",{"_index":846,"title":{"classes/CombinedSearchResults.html":{}},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"coverage.html":{}}}],["combo",{"_index":1104,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["combo.rooms",{"_index":1106,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["combo.users].flat",{"_index":1107,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["common.js/p",{"_index":3648,"title":{},"body":{"dependencies.html":{}}}],["common/constants",{"_index":1278,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/LiveService.html":{},"interfaces/dmUser.html":{}}}],["commoncontains",{"_index":3824,"title":{},"body":{"index.html":{}}}],["compile",{"_index":1993,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["compiler",{"_index":3764,"title":{},"body":{"index.html":{}}}],["completed",{"_index":1646,"title":{},"body":{"injectables/EventQueueService.html":{}}}],["complex",{"_index":3861,"title":{},"body":{"index.html":{}}}],["components",{"_index":3835,"title":{},"body":{"index.html":{}}}],["components/schemas/roomdto",{"_index":849,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["components/schemas/userdto",{"_index":850,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["compress",{"_index":1734,"title":{},"body":{"injectables/ImageService.html":{}}}],["compressimage",{"_index":1716,"title":{},"body":{"injectables/ImageService.html":{}}}],["compressimage(imagebuffer",{"_index":1718,"title":{},"body":{"injectables/ImageService.html":{}}}],["compressing",{"_index":1725,"title":{},"body":{"injectables/ImageService.html":{}}}],["concerned",{"_index":3918,"title":{},"body":{"index.html":{}}}],["concurrency",{"_index":1625,"title":{},"body":{"injectables/EventQueueService.html":{}}}],["concurrent",{"_index":1622,"title":{},"body":{"injectables/EventQueueService.html":{}}}],["config.module",{"_index":364,"title":{},"body":{"modules/AppModule.html":{},"modules/BullBoardModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["config.module.ts",{"_index":791,"title":{},"body":{"modules/BullConfigModule.html":{}}}],["config/bull",{"_index":363,"title":{},"body":{"modules/AppModule.html":{},"modules/BullBoardModule.html":{},"modules/BullConfigModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["configconfiguration",{"_index":3817,"title":{},"body":{"index.html":{}}}],["configmodule",{"_index":343,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":381,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":582,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/S3Service.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"overview.html":{}}}],["configuration",{"_index":653,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"index.html":{}}}],["configurations",{"_index":3791,"title":{},"body":{"index.html":{}}}],["configures",{"_index":3808,"title":{},"body":{"index.html":{}}}],["connect",{"_index":2127,"title":{},"body":{"injectables/PrismaService.html":{},"classes/TasksProcessor.html":{},"classes/UserActionDto.html":{}}}],["connect_user",{"_index":3993,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connected",{"_index":1294,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/RoomUsersService.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{},"miscellaneous/variables.html":{}}}],["connectedusers",{"_index":1230,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/RoomUsersService.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["connection",{"_index":2095,"title":{},"body":{"injectables/PrismaService.html":{}}}],["connectuser",{"_index":3994,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consent",{"_index":2696,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["consistent",{"_index":3752,"title":{},"body":{"index.html":{}}}],["console.error",{"_index":2123,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/RetryService.html":{},"classes/WsExceptionFilter.html":{}}}],["console.error(\"error",{"_index":3216,"title":{},"body":{"classes/UserActionDto.html":{}}}],["console.error(\"unexpected",{"_index":938,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["console.error(`error",{"_index":2387,"title":{},"body":{"injectables/RetryService.html":{}}}],["console.error(e",{"_index":533,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.error(err",{"_index":790,"title":{},"body":{"injectables/BullBoardService.html":{}}}],["console.error(error",{"_index":2125,"title":{},"body":{"injectables/PrismaService.html":{}}}],["console.error(exception",{"_index":3578,"title":{},"body":{"classes/WsExceptionFilter.html":{}}}],["console.error(json.stringify(e",{"_index":2390,"title":{},"body":{"injectables/RetryService.html":{}}}],["console.log",{"_index":785,"title":{},"body":{"injectables/BullBoardService.html":{},"injectables/DtoGenService.html":{},"injectables/LiveService.html":{},"injectables/PrismaService.html":{},"injectables/RetryService.html":{},"classes/TasksProcessor.html":{}}}],["console.log(\"\\nimage",{"_index":2905,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["console.log(\"added",{"_index":1293,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/RoomUsersService.html":{},"injectables/TasksService.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["console.log(\"audio",{"_index":3373,"title":{},"body":{"classes/UserActionDto.html":{}}}],["console.log(\"authinfo",{"_index":499,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(\"bull",{"_index":772,"title":{},"body":{"injectables/BullBoardService.html":{}}}],["console.log(\"called",{"_index":1035,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["console.log(\"child",{"_index":3367,"title":{},"body":{"classes/UserActionDto.html":{}}}],["console.log(\"cognito",{"_index":723,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["console.log(\"cognitoaccesstoken",{"_index":494,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(\"connected",{"_index":1295,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/RoomUsersService.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["console.log(\"decoded",{"_index":689,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["console.log(\"deleting",{"_index":3222,"title":{},"body":{"classes/UserActionDto.html":{}}}],["console.log(\"dm",{"_index":1547,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["console.log(\"file",{"_index":296,"title":{},"body":{"controllers/AppController.html":{},"injectables/S3Service.html":{}}}],["console.log(\"getting",{"_index":3167,"title":{},"body":{"classes/UserActionDto.html":{}}}],["console.log(\"insertion",{"_index":891,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["console.log(\"new",{"_index":3460,"title":{},"body":{"classes/UserActionDto.html":{}}}],["console.log(\"nonfriends",{"_index":1459,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["console.log(\"payload",{"_index":502,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(\"playlistname",{"_index":2299,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["console.log(\"priv",{"_index":962,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["console.log(\"processing",{"_index":3020,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["console.log(\"query",{"_index":1070,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["console.log(\"rb",{"_index":525,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(\"request",{"_index":2870,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["console.log(\"result",{"_index":1006,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{}}}],["console.log(\"rooms",{"_index":898,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["console.log(\"running",{"_index":3121,"title":{},"body":{"injectables/TasksService.html":{}}}],["console.log(\"songs",{"_index":3432,"title":{},"body":{"classes/UserActionDto.html":{}}}],["console.log(\"spotifyuser",{"_index":2904,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["console.log(\"sub",{"_index":3402,"title":{},"body":{"classes/UserActionDto.html":{}}}],["console.log(\"token",{"_index":505,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(\"uploading",{"_index":2589,"title":{},"body":{"injectables/S3Service.html":{}}}],["console.log(\"user",{"_index":696,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"classes/UserActionDto.html":{}}}],["console.log(\"users",{"_index":899,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/UserActionDto.html":{}}}],["console.log(`${job.name",{"_index":3025,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["console.log(`${roomid",{"_index":1894,"title":{},"body":{"injectables/LiveService.html":{}}}],["console.log(`added",{"_index":3046,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["console.log(`adding",{"_index":3077,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["console.log(`checking",{"_index":1846,"title":{},"body":{"injectables/LiveService.html":{}}}],["console.log(`creating",{"_index":3079,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["console.log(`finished",{"_index":3060,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["console.log(`flushing",{"_index":1857,"title":{},"body":{"injectables/LiveService.html":{}}}],["console.log(`getting",{"_index":3034,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["console.log(`got",{"_index":3038,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["console.log(`importing",{"_index":3029,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["console.log(`retrying",{"_index":2100,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/RetryService.html":{}}}],["console.log(`spotify",{"_index":2382,"title":{},"body":{"injectables/RetryService.html":{}}}],["console.log(`waiting",{"_index":2403,"title":{},"body":{"injectables/RetryService.html":{}}}],["console.log(banneduserid",{"_index":3346,"title":{},"body":{"classes/UserActionDto.html":{}}}],["console.log(childgenres",{"_index":3408,"title":{},"body":{"classes/UserActionDto.html":{}}}],["console.log(delbookmark",{"_index":3314,"title":{},"body":{"classes/UserActionDto.html":{}}}],["console.log(dms",{"_index":1582,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["console.log(err",{"_index":681,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["console.log(err.response?.data",{"_index":2881,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["console.log(error",{"_index":725,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["console.log(file",{"_index":297,"title":{},"body":{"controllers/AppController.html":{},"injectables/S3Service.html":{}}}],["console.log(initiatorid",{"_index":3328,"title":{},"body":{"classes/UserActionDto.html":{}}}],["console.log(isdeleted",{"_index":3223,"title":{},"body":{"classes/UserActionDto.html":{}}}],["console.log(kickeduserid",{"_index":3329,"title":{},"body":{"classes/UserActionDto.html":{}}}],["console.log(m",{"_index":3461,"title":{},"body":{"classes/UserActionDto.html":{}}}],["console.log(params",{"_index":895,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["console.log(params.q",{"_index":1052,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["console.log(point1",{"_index":3429,"title":{},"body":{"classes/UserActionDto.html":{}}}],["console.log(q",{"_index":1033,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["console.log(query",{"_index":986,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["console.log(rb",{"_index":526,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(response",{"_index":679,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["console.log(result",{"_index":711,"title":{},"body":{"injectables/AuthService.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["console.log(roomdtos",{"_index":932,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["console.log(roomid",{"_index":3323,"title":{},"body":{"classes/UserActionDto.html":{}}}],["console.log(socketid",{"_index":1329,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["console.log(tokens",{"_index":2755,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["console.log(typeof",{"_index":527,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(userdtos",{"_index":1044,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["console.log(userid",{"_index":996,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["console.log(va",{"_index":2598,"title":{},"body":{"injectables/S3Service.html":{}}}],["console.warn",{"_index":1887,"title":{},"body":{"injectables/LiveService.html":{}}}],["console.warn(`cancelled",{"_index":1903,"title":{},"body":{"injectables/LiveService.html":{}}}],["const",{"_index":301,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BullBoardService.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"injectables/EventQueueService.html":{},"injectables/GenresService.html":{},"injectables/JwtStrategy.html":{},"injectables/LiveService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/RecommendationsService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RetryService.html":{},"injectables/RoomUsersService.html":{},"injectables/S3Service.html":{},"injectables/SongsService.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/TasksProcessor.html":{},"classes/UserActionDto.html":{},"classes/WsExceptionFilter.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["constraint",{"_index":2651,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["constructed",{"_index":2833,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["constructor",{"_index":243,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/BullBoardService.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"injectables/EventQueueService.html":{},"injectables/GenresService.html":{},"classes/InternalError.html":{},"injectables/JwtStrategy.html":{},"injectables/LiveService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RoomUsersService.html":{},"injectables/S3Service.html":{},"injectables/SongsService.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/SpotifyUser.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/UserActionDto.html":{},"classes/UserError.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["constructor(@injectqueue(\"task",{"_index":770,"title":{},"body":{"injectables/BullBoardService.html":{},"injectables/TasksService.html":{}}}],["constructor(authservice",{"_index":1905,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(configservice",{"_index":581,"title":{},"body":{"injectables/AuthService.html":{},"injectables/S3Service.html":{},"injectables/SpotifyAuthService.html":{}}}],["constructor(data",{"_index":2946,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["constructor(dbutils",{"_index":1242,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/RoomUsersService.html":{}}}],["constructor(message",{"_index":1751,"title":{},"body":{"classes/InternalError.html":{},"classes/UserError.html":{}}}],["constructor(prisma",{"_index":1355,"title":{},"body":{"injectables/DtoGenService.html":{},"injectables/GenresService.html":{},"injectables/ProfileService.html":{},"injectables/SongsService.html":{}}}],["constructor(private",{"_index":481,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/S3Service.html":{},"controllers/SongsController.html":{},"injectables/SongsService.html":{}}}],["constructor(retryservice",{"_index":2081,"title":{},"body":{"injectables/PrismaService.html":{}}}],["constructor(spotifyservice",{"_index":3001,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["constructor(taskqueue",{"_index":753,"title":{},"body":{"injectables/BullBoardService.html":{},"injectables/TasksService.html":{}}}],["contain",{"_index":2851,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["content",{"_index":1601,"title":{},"body":{"injectables/DtoGenService.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["contents",{"_index":3295,"title":{},"body":{"classes/UserActionDto.html":{}}}],["contenttype",{"_index":2592,"title":{},"body":{"injectables/S3Service.html":{}}}],["context",{"_index":877,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["continue",{"_index":1854,"title":{},"body":{"injectables/LiveService.html":{}}}],["contributors",{"_index":167,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["controller",{"_index":179,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/GenresController.html":{},"controllers/ProfileController.html":{},"controllers/SongsController.html":{},"controllers/SpotifyAuthController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/GenresController.html":{},"classes/LoginBody.html":{},"controllers/ProfileController.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"controllers/SongsController.html":{},"controllers/SpotifyAuthController.html":{},"coverage.html":{},"index.html":{}}}],["controller(\"auth",{"_index":479,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller(\"auth/spotify",{"_index":2726,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["controller(\"genres",{"_index":1691,"title":{},"body":{"controllers/GenresController.html":{}}}],["controller(\"profile",{"_index":2184,"title":{},"body":{"controllers/ProfileController.html":{}}}],["controller(\"songs",{"_index":2664,"title":{},"body":{"controllers/SongsController.html":{}}}],["controllers",{"_index":181,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"modules/RoomsModule.html":{},"modules/SearchModule.html":{},"controllers/SongsController.html":{},"modules/SongsModule.html":{},"controllers/SpotifyAuthController.html":{},"modules/SpotifyAuthModule.html":{},"modules/SpotifyModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["convergence",{"_index":3390,"title":{},"body":{"classes/UserActionDto.html":{}}}],["convert",{"_index":1026,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/ImageService.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["converting",{"_index":1723,"title":{},"body":{"injectables/ImageService.html":{}}}],["core",{"_index":3833,"title":{},"body":{"index.html":{}}}],["correct",{"_index":3751,"title":{},"body":{"index.html":{}}}],["corrupted",{"_index":3281,"title":{},"body":{"classes/UserActionDto.html":{}}}],["cosinesimilarityweighted",{"_index":2263,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["cosinesimilarityweighted(favoritesongs",{"_index":2268,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["count",{"_index":47,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/LinksWithCount.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomsData.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfosWithCount.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{}}}],["count(participate.room_id",{"_index":985,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["country",{"_index":2939,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["coupling",{"_index":3912,"title":{},"body":{"index.html":{}}}],["cover",{"_index":1427,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{}}}],["coverage",{"_index":3580,"title":{"coverage.html":{}},"body":{"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["coveragecontains",{"_index":3779,"title":{},"body":{"index.html":{}}}],["create",{"_index":517,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DtoGenService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"classes/SongInfoDto.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UpdateUserDto.html":{},"classes/UserActionDto.html":{},"miscellaneous/variables.html":{}}}],["createapptestingmodule",{"_index":1990,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createauthtestingmodule",{"_index":1994,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createautomoderationtestingmodule",{"_index":2017,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createbullboard",{"_index":759,"title":{},"body":{"injectables/BullBoardService.html":{}}}],["createbullboardtestingmodule",{"_index":1996,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["created",{"_index":465,"title":{},"body":{"controllers/AuthController.html":{},"classes/ChatEventDto.html":{},"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"controllers/SpotifyAuthController.html":{},"index.html":{}}}],["created'})@isdate",{"_index":819,"title":{},"body":{"classes/ChatEventDto.html":{}}}],["createdat",{"_index":2249,"title":{},"body":{"classes/QueueEventDto.html":{},"classes/VoteDto.html":{}}}],["createdbutilstestingmodule",{"_index":2005,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createdmuserstestingmodule",{"_index":2004,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createdtogentestingmodule",{"_index":2006,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["creategenrestestingmodule",{"_index":2014,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createlivechatmessage",{"_index":3290,"title":{},"body":{"classes/UserActionDto.html":{}}}],["createlivetestingmodule",{"_index":2002,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createlogger",{"_index":2036,"title":{},"body":{"injectables/MyLogger.html":{}}}],["createmany",{"_index":3976,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createmanyandreturn",{"_index":3977,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createmessage(message",{"_index":3285,"title":{},"body":{"classes/UserActionDto.html":{}}}],["createrecommendationstestingmodule",{"_index":2018,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createroomdto",{"_index":1119,"title":{"classes/CreateRoomDto.html":{}},"body":{"classes/CreateRoomDto.html":{},"classes/UpdateRoomDto.html":{},"coverage.html":{}}}],["createroomqueuetestingmodule",{"_index":2016,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createroomstestingmodule",{"_index":2007,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createroomuserstestingmodule",{"_index":2003,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["creates",{"_index":2692,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["creates3testingmodule",{"_index":2011,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createsearchtestingmodule",{"_index":2008,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createsongstestingmodule",{"_index":2015,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createspotifyauthtestingmodule",{"_index":1995,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createspotifytestingmodule",{"_index":2012,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createtaskstestingmodule",{"_index":2013,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createuser",{"_index":573,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/SpotifyAuthService.html":{}}}],["createuser(tk",{"_index":2787,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["createuser(username",{"_index":586,"title":{},"body":{"injectables/AuthService.html":{}}}],["createuserdto",{"_index":1152,"title":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["createuserstestingmodule",{"_index":2009,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createusersupdatetestingmodule",{"_index":2010,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["creating",{"_index":3091,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["creator",{"_index":894,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/UserActionDto.html":{}}}],["creator=${params.creator",{"_index":887,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["creator_name",{"_index":942,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["creator_username",{"_index":941,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["credentials",{"_index":516,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/S3Service.html":{}}}],["criteria",{"_index":144,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["criteria'})@isnumber",{"_index":2623,"title":{},"body":{"classes/SongAnalyticsDto.html":{}}}],["cron",{"_index":1811,"title":{},"body":{"injectables/LiveService.html":{},"injectables/TasksService.html":{}}}],["cron(\"0",{"_index":1833,"title":{},"body":{"injectables/LiveService.html":{},"injectables/TasksService.html":{}}}],["cron('0",{"_index":3115,"title":{},"body":{"injectables/TasksService.html":{}}}],["cronjob",{"_index":1813,"title":{},"body":{"injectables/LiveService.html":{}}}],["csrf",{"_index":2702,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["ctx.prisma.$queryraw",{"_index":878,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["ctx.prisma.$queryrawunsafe",{"_index":989,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["curl",{"_index":248,"title":{},"body":{"controllers/AppController.html":{}}}],["current",{"_index":1664,"title":{},"body":{"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"injectables/LiveService.html":{},"controllers/ProfileController.html":{},"classes/RoomDto.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{}}}],["current_media",{"_index":4037,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current_room_id",{"_index":1668,"title":{},"body":{"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{}}}],["current_song",{"_index":1666,"title":{},"body":{"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{}}}],["currently",{"_index":1667,"title":{},"body":{"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{}}}],["currentmedia",{"_index":4038,"title":{},"body":{"miscellaneous/variables.html":{}}}],["currentroom",{"_index":1437,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["currentroom.length",{"_index":1441,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["currentroom[0].room_id",{"_index":1443,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["currentsong",{"_index":1884,"title":{},"body":{"injectables/LiveService.html":{},"classes/UserActionDto.html":{}}}],["currentsong.spotifyid",{"_index":1892,"title":{},"body":{"injectables/LiveService.html":{}}}],["currentsong.starttime",{"_index":1886,"title":{},"body":{"injectables/LiveService.html":{}}}],["currentsongevent",{"_index":1890,"title":{},"body":{"injectables/LiveService.html":{}}}],["currentsongs",{"_index":3178,"title":{},"body":{"classes/UserActionDto.html":{}}}],["currenttokens",{"_index":2765,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["custom",{"_index":1628,"title":{},"body":{"injectables/EventQueueService.html":{}}}],["d)).then(c",{"_index":2381,"title":{},"body":{"injectables/RetryService.html":{}}}],["daily",{"_index":150,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["daily_percentage_change_in_downvotes",{"_index":157,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["daily_percentage_change_in_upvotes",{"_index":156,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["danceability",{"_index":2282,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["data",{"_index":100,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/LinksWithCount.html":{},"classes/LoginBody.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"injectables/ProfileService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomsData.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfosWithCount.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/SpotifyUser.html":{},"classes/TasksProcessor.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{},"index.html":{}}}],["data')@apibody({description",{"_index":209,"title":{},"body":{"controllers/AppController.html":{}}}],["data.country",{"_index":2966,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["data.display_name",{"_index":2968,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["data.email",{"_index":2970,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["data.explicit_content",{"_index":2972,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["data.external_urls",{"_index":2974,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["data.followers",{"_index":2976,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["data.href",{"_index":2978,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["data.id",{"_index":2980,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["data.images",{"_index":2982,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["data.product",{"_index":2984,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["data.type",{"_index":2986,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["data.uri",{"_index":2988,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["database",{"_index":466,"title":{},"body":{"controllers/AuthController.html":{},"injectables/DtoGenService.html":{},"injectables/PrismaService.html":{},"classes/UserActionDto.html":{},"index.html":{}}}],["datastructures",{"_index":3650,"title":{},"body":{"dependencies.html":{}}}],["date",{"_index":80,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"controllers/AuthController.html":{},"interfaces/Category.html":{},"classes/ChatEventDto.html":{},"classes/CreateRoomDto.html":{},"classes/DirectMessageDto.html":{},"injectables/DtoGenService.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/LiveChatMessageDto.html":{},"injectables/LiveService.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/PlaybackEventDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/SearchHistoryDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UserActionDto.html":{},"dependencies.html":{}}}],["date().gettime",{"_index":2752,"title":{},"body":{"controllers/SpotifyAuthController.html":{},"classes/TasksProcessor.html":{}}}],["date().toisostring",{"_index":1842,"title":{},"body":{"injectables/LiveService.html":{}}}],["date().valueof",{"_index":1840,"title":{},"body":{"injectables/LiveService.html":{},"classes/TasksProcessor.html":{}}}],["date(0",{"_index":1557,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["date(value",{"_index":1151,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["date.now",{"_index":2368,"title":{},"body":{"injectables/RetryService.html":{},"injectables/S3Service.html":{}}}],["date_created",{"_index":808,"title":{},"body":{"interfaces/Category.html":{},"classes/ChatEventDto.html":{},"injectables/DtoGenService.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"injectables/LiveService.html":{},"classes/PlaybackEventDto.html":{},"classes/RoomDto.html":{},"classes/UserActionDto.html":{}}}],["date_sent",{"_index":3456,"title":{},"body":{"classes/UserActionDto.html":{}}}],["datecreated",{"_index":1526,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/LiveChatMessageDto.html":{}}}],["dateread",{"_index":1200,"title":{},"body":{"classes/DirectMessageDto.html":{},"injectables/DtoGenService.html":{}}}],["datesent",{"_index":1201,"title":{},"body":{"classes/DirectMessageDto.html":{},"injectables/DtoGenService.html":{}}}],["date})@isdate",{"_index":2056,"title":{},"body":{"classes/ParticipantsPerHourDto.html":{}}}],["day",{"_index":83,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["db",{"_index":1195,"title":{},"body":{"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"injectables/LiveService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/RoomQueueModule.html":{},"modules/RoomsModule.html":{},"modules/SearchModule.html":{},"classes/TasksProcessor.html":{},"classes/UserActionDto.html":{},"modules/UsersModule.html":{}}}],["dbutils",{"_index":1245,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"injectables/RoomUsersService.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UserActionDto.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["dbutilsmodule",{"_index":321,"title":{"modules/DbUtilsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DbUtilsModule.html":{},"modules/DmUsersModule.html":{},"modules/DtoGenModule.html":{},"modules/LiveModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/RoomQueueModule.html":{},"modules/RoomUsersModule.html":{},"modules/RoomsModule.html":{},"modules/SearchModule.html":{},"modules/SpotifyAuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["dbutilsservice",{"_index":1192,"title":{},"body":{"modules/DbUtilsModule.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"injectables/RoomUsersService.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UserActionDto.html":{},"coverage.html":{},"interfaces/dmUser.html":{},"index.html":{},"interfaces/liveChatUser.html":{},"overview.html":{}}}],["debug",{"_index":2022,"title":{},"body":{"injectables/MyLogger.html":{}}}],["debug(message",{"_index":2025,"title":{},"body":{"injectables/MyLogger.html":{}}}],["declarations",{"_index":311,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AutoModerationModule.html":{},"modules/BullBoardModule.html":{},"modules/DbUtilsModule.html":{},"modules/DmUsersModule.html":{},"modules/DtoGenModule.html":{},"modules/GenresModule.html":{},"modules/ImageModule.html":{},"modules/LiveModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RecommendationsModule.html":{},"modules/RetryModule.html":{},"modules/RoomQueueModule.html":{},"modules/RoomUsersModule.html":{},"modules/RoomsModule.html":{},"modules/S3Module.html":{},"modules/SearchModule.html":{},"modules/SongsModule.html":{},"modules/SpotifyAuthModule.html":{},"modules/SpotifyModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decodeandverifycognitojwt",{"_index":574,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["decodeandverifycognitojwt(jwt_token",{"_index":589,"title":{},"body":{"injectables/AuthService.html":{}}}],["decoded",{"_index":424,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["decoded.email",{"_index":694,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["decoded.id",{"_index":693,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["decoded.sub",{"_index":699,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["decoded.username",{"_index":695,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["decodedstate",{"_index":2843,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["decodeuricomponent(redirecturi",{"_index":2862,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["decodeuricomponent(value",{"_index":1093,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["decorators",{"_index":15,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ChatEventDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/DirectMessageDto.html":{},"classes/EmojiReactionDto.html":{},"classes/FollowersAndFollowing.html":{},"controllers/GenresController.html":{},"classes/GenresWithCount.html":{},"classes/JoinsCount.html":{},"classes/LinksWithCount.html":{},"classes/LiveChatMessageDto.html":{},"classes/LoginBody.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/PlaybackEventDto.html":{},"controllers/ProfileController.html":{},"classes/QueueEventDto.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/RoomSongDto.html":{},"classes/RoomsData.html":{},"classes/SearchHistoryDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/SongInfosWithCount.html":{},"controllers/SpotifyAuthController.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{},"classes/VoteDto.html":{}}}],["default",{"_index":758,"title":{},"body":{"injectables/BullBoardService.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"injectables/EventQueueService.html":{},"injectables/MyLogger.html":{},"injectables/PrismaService.html":{},"injectables/RecommendationsService.html":{},"injectables/RetryService.html":{},"injectables/RoomUsersService.html":{},"classes/SongInfoDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":3394,"title":{},"body":{"classes/UserActionDto.html":{}}}],["defined",{"_index":21,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BullBoardService.html":{},"classes/ChatEventDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/DirectMessageDto.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"classes/EmojiReactionDto.html":{},"injectables/EventQueueService.html":{},"classes/FollowersAndFollowing.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"classes/GenresWithCount.html":{},"injectables/ImageService.html":{},"classes/InternalError.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"injectables/JwtStrategy.html":{},"classes/LinksWithCount.html":{},"classes/LiveChatMessageDto.html":{},"injectables/LiveService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"classes/MessagesPerHour.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"injectables/MyLogger.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/PlaybackEventDto.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/QueueEventDto.html":{},"injectables/RecommendationsService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RetryService.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/RoomSongDto.html":{},"injectables/RoomUsersService.html":{},"classes/RoomsData.html":{},"injectables/S3Service.html":{},"classes/SearchHistoryDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/SongInfosWithCount.html":{},"injectables/SongsService.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/SpotifyUser.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/UpdateUserDto-1.html":{},"classes/UpdateUserDto-2.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserError.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{},"classes/VoteDto.html":{},"classes/WsExceptionFilter.html":{},"index.html":{}}}],["defining",{"_index":3895,"title":{},"body":{"index.html":{}}}],["definition",{"_index":3896,"title":{},"body":{"index.html":{}}}],["delay",{"_index":2110,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/RetryService.html":{}}}],["delays",{"_index":2365,"title":{},"body":{"injectables/RetryService.html":{}}}],["delay}ms",{"_index":2119,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/RetryService.html":{}}}],["delbookmark",{"_index":3311,"title":{},"body":{"classes/UserActionDto.html":{}}}],["delete",{"_index":2242,"title":{},"body":{"injectables/ProfileService.html":{},"classes/UserActionDto.html":{},"miscellaneous/variables.html":{}}}],["deletemany",{"_index":3978,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deleteroom(room_id",{"_index":3218,"title":{},"body":{"classes/UserActionDto.html":{}}}],["demosearch(ctx",{"_index":876,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["depend",{"_index":3902,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":309,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AutoModerationModule.html":{},"modules/BullBoardModule.html":{},"modules/DbUtilsModule.html":{},"modules/DmUsersModule.html":{},"modules/DtoGenModule.html":{},"modules/GenresModule.html":{},"modules/ImageModule.html":{},"modules/LiveModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RecommendationsModule.html":{},"modules/RetryModule.html":{},"modules/RoomQueueModule.html":{},"modules/RoomUsersModule.html":{},"modules/RoomsModule.html":{},"modules/S3Module.html":{},"modules/SearchModule.html":{},"modules/SongsModule.html":{},"modules/SpotifyAuthModule.html":{},"modules/SpotifyModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dequeue_song",{"_index":4056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dequeuesong",{"_index":4057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["desc",{"_index":1001,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/UserActionDto.html":{}}}],["desc_distance",{"_index":961,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["describe",{"_index":1146,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/RoomDto.html":{}}}],["description",{"_index":53,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"classes/ChatEventDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateRoomDto.html":{},"classes/DirectMessageDto.html":{},"injectables/DtoGenService.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"classes/FollowersAndFollowing.html":{},"controllers/GenresController.html":{},"classes/GenresWithCount.html":{},"injectables/ImageService.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/LinksWithCount.html":{},"classes/LoginBody.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/PlaybackEventDto.html":{},"controllers/ProfileController.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/RoomsData.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{},"classes/SongInfosWithCount.html":{},"controllers/SongsController.html":{},"controllers/SpotifyAuthController.html":{},"classes/TasksProcessor.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{},"properties.html":{}}}],["dest",{"_index":384,"title":{},"body":{"modules/AppModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["details",{"_index":158,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["development",{"_index":3727,"title":{},"body":{"index.html":{}}}],["different",{"_index":3830,"title":{},"body":{"index.html":{}}}],["direct",{"_index":1578,"title":{},"body":{"injectables/DtoGenService.html":{},"miscellaneous/variables.html":{}}}],["direct_message",{"_index":4010,"title":{},"body":{"miscellaneous/variables.html":{}}}],["directmessage",{"_index":4011,"title":{},"body":{"miscellaneous/variables.html":{}}}],["directmessagedto",{"_index":1197,"title":{"classes/DirectMessageDto.html":{}},"body":{"classes/DirectMessageDto.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{},"coverage.html":{},"interfaces/dmUser.html":{}}}],["directories",{"_index":3776,"title":{},"body":{"index.html":{}}}],["disable",{"_index":2370,"title":{},"body":{"injectables/RetryService.html":{}}}],["disconnect",{"_index":1312,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["disconnect_user",{"_index":3995,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disconnectchat",{"_index":1232,"title":{},"body":{"injectables/DmUsersService.html":{}}}],["disconnectchat(socketid",{"_index":1251,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["disconnected",{"_index":4068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disconnectuser",{"_index":3996,"title":{},"body":{"miscellaneous/variables.html":{}}}],["display_name",{"_index":2940,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["distance",{"_index":881,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["distances",{"_index":868,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["distcompiled",{"_index":3781,"title":{},"body":{"index.html":{}}}],["distinctgenres",{"_index":3424,"title":{},"body":{"classes/UserActionDto.html":{}}}],["distinctgenres.length",{"_index":3426,"title":{},"body":{"classes/UserActionDto.html":{}}}],["distinctivenessthreshold",{"_index":3393,"title":{},"body":{"classes/UserActionDto.html":{}}}],["dm",{"_index":1543,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{}}}],["dm.message.contents",{"_index":1555,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["dm.message.date_sent",{"_index":1556,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["dm.message.sender",{"_index":1550,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["dm.p_message_id",{"_index":1558,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["dm.recipient",{"_index":1551,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["dm_history",{"_index":4095,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dmhistory",{"_index":4096,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dms",{"_index":1368,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["dms.length",{"_index":1583,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["dms.sort((a",{"_index":1588,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["dmuser",{"_index":1257,"title":{"interfaces/dmUser.html":{}},"body":{"injectables/DmUsersService.html":{},"coverage.html":{},"interfaces/dmUser.html":{}}}],["dmusers.service",{"_index":1227,"title":{},"body":{"modules/DmUsersModule.html":{}}}],["dmusers/dmusers.module",{"_index":1808,"title":{},"body":{"modules/LiveModule.html":{}}}],["dmusersmodule",{"_index":1220,"title":{"modules/DmUsersModule.html":{}},"body":{"modules/DmUsersModule.html":{},"modules/LiveModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/RoomsModule.html":{},"modules.html":{},"overview.html":{}}}],["dmusersservice",{"_index":1225,"title":{"injectables/DmUsersService.html":{}},"body":{"modules/DmUsersModule.html":{},"injectables/DmUsersService.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"classes/UserActionDto.html":{},"coverage.html":{},"interfaces/dmUser.html":{},"overview.html":{}}}],["documentation",{"_index":3581,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documentationauto",{"_index":3784,"title":{},"body":{"index.html":{}}}],["done",{"_index":2596,"title":{},"body":{"injectables/S3Service.html":{}}}],["dotenv",{"_index":3677,"title":{},"body":{"dependencies.html":{}}}],["dotproduct",{"_index":2305,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["downvote_song",{"_index":4048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["downvotes",{"_index":141,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["downvotesong",{"_index":4049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dto",{"_index":843,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"modules/DtoGenModule.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/RoomQueueModule.html":{},"modules/RoomsModule.html":{},"modules/SearchModule.html":{},"classes/UserActionDto.html":{},"modules/UsersModule.html":{}}}],["dto/playbackevent.dto",{"_index":1815,"title":{},"body":{"injectables/LiveService.html":{}}}],["dto/room.dto",{"_index":3151,"title":{},"body":{"classes/UserActionDto.html":{}}}],["dto/roomsong.dto",{"_index":3155,"title":{},"body":{"classes/UserActionDto.html":{}}}],["dto/searchhistorydto",{"_index":841,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["dto/songinfo.dto",{"_index":2491,"title":{},"body":{"classes/RoomEntity.html":{}}}],["dto/updateroomdto",{"_index":3152,"title":{},"body":{"classes/UserActionDto.html":{}}}],["dto/updateuserprofile.dto",{"_index":2182,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["dto/userprofile.dto",{"_index":2179,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/UserEntity.html":{}}}],["dtogen",{"_index":852,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DmUsersService.html":{},"injectables/ProfileService.html":{},"injectables/RoomUsersService.html":{},"classes/UserActionDto.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["dtogenmodule",{"_index":322,"title":{"modules/DtoGenModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DmUsersModule.html":{},"modules/DtoGenModule.html":{},"modules/LiveModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/RoomQueueModule.html":{},"modules/RoomUsersModule.html":{},"modules/RoomsModule.html":{},"modules/SearchModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["dtogenservice",{"_index":842,"title":{"injectables/DtoGenService.html":{}},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DmUsersService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"injectables/RoomUsersService.html":{},"classes/UserActionDto.html":{},"coverage.html":{},"interfaces/dmUser.html":{},"index.html":{},"interfaces/liveChatUser.html":{},"overview.html":{}}}],["dtogenservice.generatedirectmessagedto():error01",{"_index":1549,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["dtogenservice.generatelivechatmessagedto():error01",{"_index":1521,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["dtogenservice.getchatasdirectmessagedto():error01",{"_index":1569,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["dtogenservice.getchatasdirectmessagedto():error03",{"_index":1574,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["dtos",{"_index":1390,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["due",{"_index":1851,"title":{},"body":{"injectables/LiveService.html":{}}}],["dumbroomqueues",{"_index":3161,"title":{},"body":{"classes/UserActionDto.html":{}}}],["duplicates",{"_index":1018,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["duration",{"_index":19,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"injectables/DtoGenService.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"injectables/RetryService.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{}}}],["e",{"_index":532,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ProfileService.html":{},"injectables/RetryService.html":{},"classes/UserActionDto.html":{}}}],["e.headers[\"retry",{"_index":2392,"title":{},"body":{"injectables/RetryService.html":{}}}],["e.message",{"_index":2389,"title":{},"body":{"injectables/RetryService.html":{}}}],["e.statuscode",{"_index":2391,"title":{},"body":{"injectables/RetryService.html":{}}}],["e2e",{"_index":3734,"title":{},"body":{"index.html":{}}}],["e89b",{"_index":3145,"title":{},"body":{"classes/UserActionDto.html":{}}}],["each",{"_index":101,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/LinksWithCount.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomsData.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{},"index.html":{}}}],["efficient",{"_index":3720,"title":{},"body":{"index.html":{}}}],["eg",{"_index":704,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"index.html":{}}}],["elements",{"_index":3877,"title":{},"body":{"index.html":{}}}],["email",{"_index":463,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/SpotifyUser.html":{}}}],["emitted",{"_index":825,"title":{},"body":{"classes/ChatEventDto.html":{},"classes/PlaybackEventDto.html":{}}}],["emoji",{"_index":801,"title":{"interfaces/Emoji.html":{}},"body":{"interfaces/Category.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"coverage.html":{}}}],["emoji'})@isstring",{"_index":1608,"title":{},"body":{"classes/EmojiReactionDto.html":{}}}],["emoji_reaction",{"_index":4006,"title":{},"body":{"miscellaneous/variables.html":{}}}],["emojireaction",{"_index":4007,"title":{},"body":{"miscellaneous/variables.html":{}}}],["emojireactiondto",{"_index":807,"title":{"classes/EmojiReactionDto.html":{}},"body":{"interfaces/Category.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"classes/UserActionDto.html":{},"coverage.html":{}}}],["emojireactiondto.body",{"_index":3321,"title":{},"body":{"classes/UserActionDto.html":{}}}],["emojireactiondto.userid",{"_index":3316,"title":{},"body":{"classes/UserActionDto.html":{}}}],["empty",{"_index":3463,"title":{},"body":{"classes/UserActionDto.html":{}}}],["encapsulate",{"_index":3876,"title":{},"body":{"index.html":{}}}],["encoded",{"_index":2876,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["encountered",{"_index":1637,"title":{},"body":{"injectables/EventQueueService.html":{},"injectables/PrismaService.html":{},"injectables/RetryService.html":{}}}],["end",{"_index":3102,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["end_date",{"_index":948,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateRoomDto.html":{},"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/UserActionDto.html":{}}}],["endpoint",{"_index":3958,"title":{},"body":{"miscellaneous/variables.html":{}}}],["endpoints",{"_index":3851,"title":{},"body":{"index.html":{}}}],["endpoint}?q=${params.q",{"_index":885,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["energized",{"_index":960,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["energy",{"_index":2283,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["enforce",{"_index":3750,"title":{},"body":{"index.html":{}}}],["enqueue_song",{"_index":4054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enqueuesong",{"_index":4055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ensure",{"_index":690,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventQueueService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"index.html":{}}}],["ensuring",{"_index":3878,"title":{},"body":{"index.html":{}}}],["enter_dm",{"_index":4008,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enterdirectmessage",{"_index":4009,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entirely",{"_index":1889,"title":{},"body":{"injectables/LiveService.html":{}}}],["entry",{"_index":3810,"title":{},"body":{"index.html":{}}}],["environment",{"_index":560,"title":{},"body":{"modules/AuthModule.html":{}}}],["environments",{"_index":3831,"title":{},"body":{"index.html":{}}}],["epoch_expiry",{"_index":2751,"title":{},"body":{"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["err",{"_index":680,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BullBoardService.html":{},"injectables/EventQueueService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RetryService.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["error",{"_index":667,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChatEventDto.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"injectables/EventQueueService.html":{},"classes/InternalError.html":{},"classes/LoginBody.html":{},"injectables/MyLogger.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RetryService.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UserActionDto.html":{},"classes/UserError.html":{},"classes/WsExceptionFilter.html":{},"interfaces/dmUser.html":{},"miscellaneous/variables.html":{}}}],["error(\"aws_access_key_id",{"_index":2583,"title":{},"body":{"injectables/S3Service.html":{}}}],["error(\"aws_s3_bucket_name",{"_index":2581,"title":{},"body":{"injectables/S3Service.html":{}}}],["error(\"aws_s3_region",{"_index":2586,"title":{},"body":{"injectables/S3Service.html":{}}}],["error(\"aws_secret_access_key",{"_index":2584,"title":{},"body":{"injectables/S3Service.html":{}}}],["error(\"cannot",{"_index":2887,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["error(\"connected",{"_index":1289,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/RoomUsersService.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["error(\"failed",{"_index":2227,"title":{},"body":{"injectables/ProfileService.html":{},"injectables/S3Service.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UserActionDto.html":{}}}],["error(\"image",{"_index":1745,"title":{},"body":{"injectables/ImageService.html":{}}}],["error(\"invalid",{"_index":700,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DmUsersService.html":{},"classes/LoginBody.html":{},"injectables/RecommendationsService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"interfaces/dmUser.html":{}}}],["error(\"missing",{"_index":559,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["error(\"mock",{"_index":1986,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["error(\"only",{"_index":290,"title":{},"body":{"controllers/AppController.html":{}}}],["error(\"room",{"_index":2540,"title":{},"body":{"injectables/RoomUsersService.html":{},"classes/UserActionDto.html":{},"interfaces/liveChatUser.html":{}}}],["error(\"token",{"_index":3028,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["error(\"user",{"_index":1283,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/ProfileService.html":{},"injectables/RoomUsersService.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UserActionDto.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["error(\"you",{"_index":2234,"title":{},"body":{"injectables/ProfileService.html":{}}}],["error(message",{"_index":2027,"title":{},"body":{"injectables/MyLogger.html":{}}}],["error(s",{"_index":2377,"title":{},"body":{"injectables/RetryService.html":{}}}],["error.ts",{"_index":1749,"title":{},"body":{"classes/InternalError.html":{},"classes/UserError.html":{},"coverage.html":{}}}],["error.ts:1",{"_index":1752,"title":{},"body":{"classes/InternalError.html":{},"classes/UserError.html":{}}}],["errormessage",{"_index":813,"title":{},"body":{"classes/ChatEventDto.html":{},"classes/PlaybackEventDto.html":{}}}],["errors",{"_index":2385,"title":{},"body":{"injectables/RetryService.html":{},"classes/WsExceptionFilter.html":{}}}],["errors.log",{"_index":2045,"title":{},"body":{"injectables/MyLogger.html":{}}}],["eslint",{"_index":2369,"title":{},"body":{"injectables/RetryService.html":{}}}],["establishes",{"_index":3900,"title":{},"body":{"index.html":{}}}],["etc",{"_index":3867,"title":{},"body":{"index.html":{}}}],["euclideandistance(point1",{"_index":3427,"title":{},"body":{"classes/UserActionDto.html":{}}}],["event",{"_index":818,"title":{},"body":{"classes/ChatEventDto.html":{},"injectables/EventQueueService.html":{},"classes/PlaybackEventDto.html":{}}}],["event.song",{"_index":1896,"title":{},"body":{"injectables/LiveService.html":{}}}],["event.song.spotifyid",{"_index":1899,"title":{},"body":{"injectables/LiveService.html":{}}}],["event_id",{"_index":626,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["eventqueue/eventqueue.service",{"_index":1805,"title":{},"body":{"modules/LiveModule.html":{}}}],["eventqueueservice",{"_index":1610,"title":{"injectables/EventQueueService.html":{}},"body":{"injectables/EventQueueService.html":{},"modules/LiveModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"overview.html":{}}}],["events",{"_index":3355,"title":{},"body":{"classes/UserActionDto.html":{}}}],["exact",{"_index":3766,"title":{},"body":{"index.html":{}}}],["example",{"_index":2697,"title":{},"body":{"controllers/SpotifyAuthController.html":{},"classes/UserActionDto.html":{},"index.html":{}}}],["examples",{"_index":434,"title":{},"body":{"controllers/AuthController.html":{}}}],["exceeds",{"_index":1742,"title":{},"body":{"injectables/ImageService.html":{}}}],["exception",{"_index":3568,"title":{},"body":{"classes/WsExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":3563,"title":{},"body":{"classes/WsExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:8",{"_index":3567,"title":{},"body":{"classes/WsExceptionFilter.html":{}}}],["exception.message",{"_index":3577,"title":{},"body":{"classes/WsExceptionFilter.html":{}}}],["exceptionfilter",{"_index":3564,"title":{},"body":{"classes/WsExceptionFilter.html":{}}}],["exceptions",{"_index":3575,"title":{},"body":{"classes/WsExceptionFilter.html":{}}}],["exceptions/user",{"_index":3571,"title":{},"body":{"classes/WsExceptionFilter.html":{}}}],["exchange",{"_index":2879,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["exchangecodefortoken",{"_index":2780,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["exchangecodefortoken(code",{"_index":2789,"title":{},"body":{"injectables/SpotifyAuthService.html":{}}}],["exclude",{"_index":1409,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["excluding",{"_index":3841,"title":{},"body":{"index.html":{}}}],["executerequest",{"_index":2098,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/RetryService.html":{}}}],["executing",{"_index":1644,"title":{},"body":{"injectables/EventQueueService.html":{}}}],["exist",{"_index":1284,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"injectables/ProfileService.html":{},"injectables/RoomUsersService.html":{},"classes/UserActionDto.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["existingbookmark",{"_index":3301,"title":{},"body":{"classes/UserActionDto.html":{}}}],["existinguser",{"_index":676,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["exists",{"_index":1326,"title":{},"body":{"injectables/DmUsersService.html":{},"modules/LiveModule.html":{},"classes/SongInfoDto.html":{},"classes/UserActionDto.html":{},"interfaces/dmUser.html":{}}}],["exit_dm",{"_index":4019,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exitdirectmessage",{"_index":4020,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exiting",{"_index":2128,"title":{},"body":{"injectables/PrismaService.html":{}}}],["exp",{"_index":630,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["expected",{"_index":108,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"index.html":{}}}],["expected_return_count",{"_index":112,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["expectedendtime",{"_index":1867,"title":{},"body":{"injectables/LiveService.html":{}}}],["expecting",{"_index":2738,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["expiration",{"_index":449,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"miscellaneous/variables.html":{}}}],["expired",{"_index":447,"title":{},"body":{"controllers/AuthController.html":{},"classes/TasksProcessor.html":{}}}],["expires_in",{"_index":2815,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["expiresin",{"_index":565,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["explicit",{"_index":950,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["explicit_content",{"_index":2941,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["explicitcontentsettings",{"_index":2951,"title":{},"body":{"classes/SpotifyUser.html":{},"miscellaneous/typealiases.html":{}}}],["expo",{"_index":2732,"title":{},"body":{"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["exponential",{"_index":2112,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/RetryService.html":{}}}],["export",{"_index":40,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/AutoModerationModule.html":{},"injectables/AutoModerationService.html":{},"modules/BullBoardModule.html":{},"injectables/BullBoardService.html":{},"modules/BullConfigModule.html":{},"interfaces/Category.html":{},"classes/ChatEventDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"modules/DbUtilsModule.html":{},"classes/DirectMessageDto.html":{},"modules/DmUsersModule.html":{},"injectables/DmUsersService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"injectables/EventQueueService.html":{},"classes/FollowersAndFollowing.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"classes/GenresWithCount.html":{},"modules/ImageModule.html":{},"injectables/ImageService.html":{},"classes/InternalError.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LinksWithCount.html":{},"classes/LiveChatMessageDto.html":{},"modules/LiveModule.html":{},"injectables/LiveService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"classes/MessagesPerHour.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"injectables/MyLogger.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/PlaybackEventDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/QueueEventDto.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"modules/RetryModule.html":{},"injectables/RetryService.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"modules/RoomQueueModule.html":{},"classes/RoomSongDto.html":{},"modules/RoomUsersModule.html":{},"injectables/RoomUsersService.html":{},"classes/RoomsData.html":{},"modules/RoomsModule.html":{},"modules/S3Module.html":{},"injectables/S3Service.html":{},"classes/SearchHistoryDto.html":{},"modules/SearchModule.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/SongInfosWithCount.html":{},"controllers/SongsController.html":{},"modules/SongsModule.html":{},"injectables/SongsService.html":{},"controllers/SpotifyAuthController.html":{},"modules/SpotifyAuthModule.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"modules/SpotifyModule.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/SpotifyUser.html":{},"modules/TasksModule.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserDto-1.html":{},"classes/UpdateUserDto-2.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserError.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{},"modules/UsersModule.html":{},"classes/VoteDto.html":{},"classes/WsExceptionFilter.html":{},"interfaces/dmUser.html":{},"index.html":{},"interfaces/liveChatUser.html":{}}}],["exported",{"_index":71,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["exports",{"_index":314,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AutoModerationModule.html":{},"modules/BullBoardModule.html":{},"modules/DbUtilsModule.html":{},"modules/DmUsersModule.html":{},"modules/DtoGenModule.html":{},"modules/GenresModule.html":{},"modules/ImageModule.html":{},"modules/LiveModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RecommendationsModule.html":{},"modules/RetryModule.html":{},"modules/RoomQueueModule.html":{},"modules/RoomUsersModule.html":{},"modules/RoomsModule.html":{},"modules/S3Module.html":{},"modules/SearchModule.html":{},"modules/SongsModule.html":{},"modules/SpotifyAuthModule.html":{},"modules/SpotifyModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["express",{"_index":235,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/BullBoardService.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":195,"title":{},"body":{"controllers/AppController.html":{},"injectables/S3Service.html":{}}}],["expressadapter",{"_index":763,"title":{},"body":{"injectables/BullBoardService.html":{}}}],["extended",{"_index":3683,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":1750,"title":{},"body":{"classes/InternalError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserDto-1.html":{},"classes/UpdateUserDto-2.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserError.html":{}}}],["external",{"_index":3866,"title":{},"body":{"index.html":{}}}],["external_links",{"_index":2895,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["external_urls",{"_index":2942,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["externaldocs",{"_index":207,"title":{},"body":{"controllers/AppController.html":{}}}],["externalurls",{"_index":2953,"title":{},"body":{"classes/SpotifyUser.html":{},"miscellaneous/typealiases.html":{}}}],["extract",{"_index":1080,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["extractjwt",{"_index":1770,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1776,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["f",{"_index":252,"title":{},"body":{"controllers/AppController.html":{}}}],["f.friend1",{"_index":1463,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["f.friend2",{"_index":1464,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["f1",{"_index":1062,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["f1.followee",{"_index":1063,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["f1.num_followers",{"_index":1068,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["f2",{"_index":1066,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["f2.follower",{"_index":1067,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["f2.num_following",{"_index":1069,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["failed",{"_index":1635,"title":{},"body":{"injectables/EventQueueService.html":{},"injectables/PrismaService.html":{},"classes/UserActionDto.html":{}}}],["false",{"_index":293,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/BullBoardService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"controllers/SpotifyAuthController.html":{},"classes/UserActionDto.html":{}}}],["false})@apiquery({name",{"_index":2700,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["false})@apiresponse({status",{"_index":2705,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["farmer",{"_index":880,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["fav_genres",{"_index":1397,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{}}}],["fav_rooms",{"_index":1399,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{}}}],["fav_songs",{"_index":1398,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{}}}],["favorite",{"_index":1669,"title":{},"body":{"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{}}}],["favorite_genres",{"_index":1413,"title":{},"body":{"injectables/DtoGenService.html":{},"miscellaneous/variables.html":{}}}],["favorite_songs",{"_index":1415,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["favoritesongs",{"_index":2272,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["favoritesongs.length",{"_index":2315,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["feature",{"_index":1586,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["features",{"_index":3361,"title":{},"body":{"classes/UserActionDto.html":{},"index.html":{}}}],["featureweights",{"_index":2260,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["fetch",{"_index":1568,"title":{},"body":{"injectables/DtoGenService.html":{},"controllers/ProfileController.html":{},"classes/UserActionDto.html":{}}}],["fetching",{"_index":1686,"title":{},"body":{"controllers/GenresController.html":{}}}],["fifo",{"_index":1626,"title":{},"body":{"injectables/EventQueueService.html":{}}}],["fifo_concurrency",{"_index":1624,"title":{},"body":{"injectables/EventQueueService.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/AutoModerationModule.html":{},"injectables/AutoModerationService.html":{},"modules/BullBoardModule.html":{},"injectables/BullBoardService.html":{},"modules/BullConfigModule.html":{},"interfaces/Category.html":{},"classes/ChatEventDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"modules/DbUtilsModule.html":{},"classes/DirectMessageDto.html":{},"modules/DmUsersModule.html":{},"injectables/DmUsersService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"injectables/EventQueueService.html":{},"classes/FollowersAndFollowing.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"classes/GenresWithCount.html":{},"modules/ImageModule.html":{},"injectables/ImageService.html":{},"classes/InternalError.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LinksWithCount.html":{},"classes/LiveChatMessageDto.html":{},"modules/LiveModule.html":{},"injectables/LiveService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"classes/MessagesPerHour.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"injectables/MyLogger.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/PlaybackEventDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/QueueEventDto.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"modules/RetryModule.html":{},"injectables/RetryService.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"modules/RoomQueueModule.html":{},"classes/RoomSongDto.html":{},"modules/RoomUsersModule.html":{},"injectables/RoomUsersService.html":{},"classes/RoomsData.html":{},"modules/RoomsModule.html":{},"modules/S3Module.html":{},"injectables/S3Service.html":{},"classes/SearchHistoryDto.html":{},"modules/SearchModule.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/SongInfosWithCount.html":{},"controllers/SongsController.html":{},"modules/SongsModule.html":{},"injectables/SongsService.html":{},"controllers/SpotifyAuthController.html":{},"modules/SpotifyAuthModule.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"modules/SpotifyModule.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/SpotifyUser.html":{},"modules/TasksModule.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserDto-1.html":{},"classes/UpdateUserDto-2.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserError.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{},"modules/UsersModule.html":{},"classes/VoteDto.html":{},"classes/WsExceptionFilter.html":{},"coverage.html":{},"interfaces/dmUser.html":{},"index.html":{},"interfaces/liveChatUser.html":{}}}],["file(bytes",{"_index":3357,"title":{},"body":{"classes/UserActionDto.html":{}}}],["file.buffer",{"_index":2591,"title":{},"body":{"injectables/S3Service.html":{}}}],["file.mimetype",{"_index":2593,"title":{},"body":{"injectables/S3Service.html":{}}}],["file.originalname",{"_index":2590,"title":{},"body":{"injectables/S3Service.html":{}}}],["file.originalname.match(/\\.(jpg|png",{"_index":288,"title":{},"body":{"controllers/AppController.html":{}}}],["file=@/users/lesedikekana/downloads/f.jpg",{"_index":253,"title":{},"body":{"controllers/AppController.html":{}}}],["filefilter",{"_index":285,"title":{},"body":{"controllers/AppController.html":{}}}],["fileinterceptor",{"_index":233,"title":{},"body":{"controllers/AppController.html":{}}}],["fileinterceptor(\"file",{"_index":280,"title":{},"body":{"controllers/AppController.html":{}}}],["filename",{"_index":2043,"title":{},"body":{"injectables/MyLogger.html":{}}}],["files",{"_index":291,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["filesize",{"_index":282,"title":{},"body":{"controllers/AppController.html":{}}}],["filter",{"_index":1017,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{}}}],["filter((name",{"_index":1419,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["filter((r",{"_index":1469,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["filter((room",{"_index":937,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["filter((user",{"_index":1048,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["filter_enabled",{"_index":2961,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["filter_locked",{"_index":2962,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["find",{"_index":2241,"title":{},"body":{"injectables/ProfileService.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["findfirst",{"_index":3981,"title":{},"body":{"miscellaneous/variables.html":{}}}],["findfirstorthrow",{"_index":3982,"title":{},"body":{"miscellaneous/variables.html":{}}}],["findmany",{"_index":3983,"title":{},"body":{"miscellaneous/variables.html":{}}}],["findunique",{"_index":3979,"title":{},"body":{"miscellaneous/variables.html":{}}}],["finduniqueorthrow",{"_index":3980,"title":{},"body":{"miscellaneous/variables.html":{}}}],["finished",{"_index":1860,"title":{},"body":{"injectables/LiveService.html":{},"classes/TasksProcessor.html":{}}}],["firstvaluefrom",{"_index":2808,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["fixed",{"_index":2114,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/RetryService.html":{}}}],["fixspotifyinfo",{"_index":2998,"title":{},"body":{"classes/TasksProcessor.html":{},"injectables/TasksService.html":{}}}],["fixspotifyinfo(job",{"_index":3003,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["flows",{"_index":3858,"title":{},"body":{"index.html":{}}}],["flushing",{"_index":1861,"title":{},"body":{"injectables/LiveService.html":{}}}],["fns",{"_index":3675,"title":{},"body":{"dependencies.html":{}}}],["folders",{"_index":3778,"title":{},"body":{"index.html":{}}}],["follow",{"_index":2141,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["follow.follows_id",{"_index":2246,"title":{},"body":{"injectables/ProfileService.html":{}}}],["followdata",{"_index":1448,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["followed",{"_index":2144,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["followee",{"_index":1060,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/ProfileService.html":{},"classes/UserActionDto.html":{}}}],["follower",{"_index":1065,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"injectables/ProfileService.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{}}}],["followers",{"_index":1051,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/SpotifyUser.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{},"miscellaneous/typealiases.html":{}}}],["followersandfollowing",{"_index":1649,"title":{"classes/FollowersAndFollowing.html":{}},"body":{"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{},"coverage.html":{}}}],["followersandfollowing})@isobject()@validatenested()@type(undefined",{"_index":3495,"title":{},"body":{"classes/UserDto.html":{}}}],["following",{"_index":1050,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{}}}],["follows",{"_index":1061,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"miscellaneous/variables.html":{}}}],["follows_follows_followeetousers",{"_index":1158,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["follows_follows_followertousers",{"_index":1159,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["follows_id",{"_index":2245,"title":{},"body":{"injectables/ProfileService.html":{}}}],["followuser",{"_index":2133,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["followuser(req",{"_index":2139,"title":{},"body":{"controllers/ProfileController.html":{}}}],["followuser(userid",{"_index":2209,"title":{},"body":{"injectables/ProfileService.html":{}}}],["for.'})@apiokresponse({description",{"_index":2155,"title":{},"body":{"controllers/ProfileController.html":{}}}],["forbidden",{"_index":441,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SpotifyAuthController.html":{}}}],["form",{"_index":2866,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["format",{"_index":270,"title":{},"body":{"controllers/AppController.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{},"injectables/ImageService.html":{},"injectables/MyLogger.html":{},"classes/UserActionDto.html":{}}}],["format.combine(format.timestamp",{"_index":2038,"title":{},"body":{"injectables/MyLogger.html":{}}}],["format.json",{"_index":2039,"title":{},"body":{"injectables/MyLogger.html":{}}}],["found",{"_index":712,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DtoGenService.html":{},"classes/LoginBody.html":{},"injectables/ProfileService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UserActionDto.html":{}}}],["framework",{"_index":3718,"title":{},"body":{"index.html":{}}}],["freda",{"_index":872,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["friend",{"_index":1675,"title":{},"body":{"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{}}}],["friend1",{"_index":1456,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["friend2",{"_index":1458,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["friendids",{"_index":1461,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["friendids.includes(r.room.room_creator",{"_index":1470,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["friendids.push(userid",{"_index":1465,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["friends",{"_index":1452,"title":{},"body":{"injectables/DtoGenService.html":{},"miscellaneous/variables.html":{}}}],["friends_friends_friend1tousers",{"_index":1160,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["friends_friends_friend2tousers",{"_index":1161,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["frontend",{"_index":2834,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["full_name",{"_index":2893,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["fully_qualify",{"_index":1378,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["fullyqualifiedroom",{"_index":1375,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{},"miscellaneous/typealiases.html":{}}}],["func",{"_index":2352,"title":{},"body":{"injectables/RetryService.html":{}}}],["func(s()).catch((err",{"_index":2376,"title":{},"body":{"injectables/RetryService.html":{}}}],["funciton",{"_index":702,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["function",{"_index":1629,"title":{},"body":{"injectables/EventQueueService.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/RetryService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functionalities",{"_index":3822,"title":{},"body":{"index.html":{}}}],["functionality",{"_index":3814,"title":{},"body":{"index.html":{}}}],["functions",{"_index":3708,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["future",{"_index":1585,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["fuzzy",{"_index":853,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["gen.module",{"_index":352,"title":{},"body":{"modules/AppModule.html":{},"modules/DmUsersModule.html":{},"modules/LiveModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/RoomQueueModule.html":{},"modules/RoomUsersModule.html":{},"modules/RoomsModule.html":{},"modules/SearchModule.html":{},"modules/UsersModule.html":{}}}],["gen.module.ts",{"_index":1343,"title":{},"body":{"modules/DtoGenModule.html":{}}}],["gen.service",{"_index":844,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DmUsersService.html":{},"modules/DtoGenModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"injectables/RoomUsersService.html":{},"classes/UserActionDto.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["gen.service.ts",{"_index":1344,"title":{},"body":{"injectables/DtoGenService.html":{},"coverage.html":{}}}],["gen.service.ts:18",{"_index":1356,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["gen.service.ts:196",{"_index":1373,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["gen.service.ts:24",{"_index":1359,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["gen.service.ts:324",{"_index":1376,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["gen.service.ts:386",{"_index":1364,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["gen.service.ts:421",{"_index":1371,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["gen.service.ts:477",{"_index":1361,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["gen.service.ts:523",{"_index":1383,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["gen.service.ts:629",{"_index":1367,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["gen.service.ts:63",{"_index":1379,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["gen.service.ts:678",{"_index":1386,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["gen/dto",{"_index":351,"title":{},"body":{"modules/AppModule.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"modules/DmUsersModule.html":{},"injectables/DmUsersService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"modules/LiveModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/RoomQueueModule.html":{},"modules/RoomUsersModule.html":{},"injectables/RoomUsersService.html":{},"modules/RoomsModule.html":{},"modules/SearchModule.html":{},"classes/UserActionDto.html":{},"modules/UsersModule.html":{},"coverage.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["generate",{"_index":503,"title":{},"body":{"controllers/AuthController.html":{},"injectables/DtoGenService.html":{},"injectables/ProfileService.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["generatebriefuserdto",{"_index":1345,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generatebriefuserdto(user",{"_index":1357,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generated",{"_index":426,"title":{},"body":{"controllers/AuthController.html":{},"injectables/DmUsersService.html":{},"classes/TasksProcessor.html":{},"interfaces/dmUser.html":{},"index.html":{}}}],["generatedirectmessagedto",{"_index":1346,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generatedirectmessagedto(pmid",{"_index":1360,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generatejwt",{"_index":575,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SpotifyAuthService.html":{}}}],["generatejwt(payload",{"_index":592,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["generatejwt(user",{"_index":2791,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["generatelivechatmessagedto",{"_index":1347,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generatelivechatmessagedto(messageid",{"_index":1363,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generatemultipledirectmessagedto",{"_index":1348,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generatemultipledirectmessagedto(dms",{"_index":1366,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generatemultiplelivechatmessagedto",{"_index":1349,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generatemultiplelivechatmessagedto(messages",{"_index":1369,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generatemultipleroomdto",{"_index":1350,"title":{},"body":{"injectables/DtoGenService.html":{},"miscellaneous/variables.html":{}}}],["generatemultipleroomdto(roomids",{"_index":1372,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generatemultipleroomdtofromroom",{"_index":1351,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generatemultipleroomdtofromroom(rooms",{"_index":1374,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generatemultipleuserdto",{"_index":1352,"title":{},"body":{"injectables/DtoGenService.html":{},"miscellaneous/variables.html":{}}}],["generatemultipleuserdto(userids",{"_index":1377,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generaterandom(10",{"_index":2838,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["generic",{"_index":3573,"title":{},"body":{"classes/WsExceptionFilter.html":{}}}],["genre",{"_index":1414,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/SongInfoDto.html":{},"classes/UserActionDto.html":{},"miscellaneous/variables.html":{}}}],["genre.genre",{"_index":1705,"title":{},"body":{"injectables/GenresService.html":{}}}],["genre.genre?.genre",{"_index":1418,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["genre1",{"_index":3443,"title":{},"body":{"classes/UserActionDto.html":{}}}],["genre2",{"_index":3444,"title":{},"body":{"classes/UserActionDto.html":{}}}],["genrecounts",{"_index":3438,"title":{},"body":{"classes/UserActionDto.html":{}}}],["genrecounts[genre",{"_index":3440,"title":{},"body":{"classes/UserActionDto.html":{}}}],["genrecounts[genre1",{"_index":3446,"title":{},"body":{"classes/UserActionDto.html":{}}}],["genrecounts[genre2",{"_index":3445,"title":{},"body":{"classes/UserActionDto.html":{}}}],["genres",{"_index":1670,"title":{},"body":{"classes/FollowersAndFollowing.html":{},"controllers/GenresController.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfoDto.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{}}}],["genres.controller",{"_index":1698,"title":{},"body":{"modules/GenresModule.html":{}}}],["genres.service",{"_index":1690,"title":{},"body":{"controllers/GenresController.html":{},"modules/GenresModule.html":{}}}],["genres_only",{"_index":1703,"title":{},"body":{"injectables/GenresService.html":{}}}],["genrescontroller",{"_index":1678,"title":{"controllers/GenresController.html":{}},"body":{"controllers/GenresController.html":{},"modules/GenresModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{}}}],["genresfromcluster(cluster",{"_index":3437,"title":{},"body":{"classes/UserActionDto.html":{}}}],["genresmodule",{"_index":323,"title":{"modules/GenresModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GenresModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules.html":{},"overview.html":{}}}],["genresservice",{"_index":1689,"title":{"injectables/GenresService.html":{}},"body":{"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"overview.html":{}}}],["genreswithcount",{"_index":1660,"title":{"classes/GenresWithCount.html":{}},"body":{"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{},"coverage.html":{}}}],["genreswithcount})@isobject()@validatenested()@type(undefined",{"_index":3489,"title":{},"body":{"classes/UserDto.html":{}}}],["get(\":songid/spotify",{"_index":2665,"title":{},"body":{"controllers/SongsController.html":{}}}],["get(\":username",{"_index":2192,"title":{},"body":{"controllers/ProfileController.html":{}}}],["get(\"callback",{"_index":2745,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["get(\"redirect",{"_index":2728,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["get(\"refresh",{"_index":2763,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["get(\"tokens",{"_index":2760,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["get('callback')@apitags('auth')@apioperation({summary",{"_index":2690,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["get()@apiokresponse({description",{"_index":1681,"title":{},"body":{"controllers/GenresController.html":{}}}],["get()@apioperation({summary",{"_index":187,"title":{},"body":{"controllers/AppController.html":{}}}],["get_direct_message_history",{"_index":4012,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get_live_chat_history",{"_index":4004,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getallgenres",{"_index":1680,"title":{},"body":{"controllers/GenresController.html":{},"injectables/GenresService.html":{}}}],["getbannedusers",{"_index":3337,"title":{},"body":{"classes/UserActionDto.html":{}}}],["getcalendarfile(roomid",{"_index":3353,"title":{},"body":{"classes/UserActionDto.html":{}}}],["getchatasdirectmessagedto",{"_index":1353,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["getchatasdirectmessagedto(participant1",{"_index":1380,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["getchatid",{"_index":1233,"title":{},"body":{"injectables/DmUsersService.html":{}}}],["getchatid(socketid",{"_index":1253,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["getconnecteduser",{"_index":1234,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/RoomUsersService.html":{}}}],["getconnecteduser(socketid",{"_index":1255,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/RoomUsersService.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["getcurrentsong(roomid",{"_index":3266,"title":{},"body":{"classes/UserActionDto.html":{}}}],["getcurrentsongs(roomids",{"_index":3270,"title":{},"body":{"classes/UserActionDto.html":{}}}],["getdirectmessagehistory",{"_index":4013,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getfileurl",{"_index":2565,"title":{},"body":{"injectables/S3Service.html":{}}}],["getfileurl(key",{"_index":2567,"title":{},"body":{"injectables/S3Service.html":{}}}],["getfollowers",{"_index":3254,"title":{},"body":{"classes/UserActionDto.html":{}}}],["getfriendrequests",{"_index":3962,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gethello",{"_index":184,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gethello'})@apiokresponse({description",{"_index":191,"title":{},"body":{"controllers/AppController.html":{}}}],["getkickedusers(roomid",{"_index":3322,"title":{},"body":{"classes/UserActionDto.html":{}}}],["getlivechathistory",{"_index":4005,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getlivechathistory(roomid",{"_index":3272,"title":{},"body":{"classes/UserActionDto.html":{}}}],["getlivechathistorydto(roomid",{"_index":3282,"title":{},"body":{"classes/UserActionDto.html":{}}}],["getmultipleroominfo(roomids",{"_index":3173,"title":{},"body":{"classes/UserActionDto.html":{}}}],["getmutualfriends",{"_index":3973,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getnewrooms(limit",{"_index":3163,"title":{},"body":{"classes/UserActionDto.html":{}}}],["getnumfollowers",{"_index":3253,"title":{},"body":{"classes/UserActionDto.html":{}}}],["getobjectcommand",{"_index":2578,"title":{},"body":{"injectables/S3Service.html":{}}}],["getobjectcommand(params",{"_index":2600,"title":{},"body":{"injectables/S3Service.html":{}}}],["getparticipant",{"_index":1235,"title":{},"body":{"injectables/DmUsersService.html":{}}}],["getparticipant(socketid",{"_index":1258,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["getplaylistsimilarityscores",{"_index":2264,"title":{},"body":{"injectables/RecommendationsService.html":{},"miscellaneous/variables.html":{}}}],["getpotentialfriends",{"_index":3966,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getprofile",{"_index":2134,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["getprofile(@request",{"_index":2186,"title":{},"body":{"controllers/ProfileController.html":{}}}],["getprofile(req",{"_index":2147,"title":{},"body":{"controllers/ProfileController.html":{}}}],["getprofile(uid",{"_index":2212,"title":{},"body":{"injectables/ProfileService.html":{}}}],["getprofilebyusername",{"_index":2135,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["getprofilebyusername(username",{"_index":2152,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["getqueryparams(url",{"_index":1076,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["getroomid",{"_index":2520,"title":{},"body":{"injectables/RoomUsersService.html":{}}}],["getroomid(socketid",{"_index":2528,"title":{},"body":{"injectables/RoomUsersService.html":{},"interfaces/liveChatUser.html":{}}}],["getroominfo(@request",{"_index":705,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["getroominfo(roomid",{"_index":3166,"title":{},"body":{"classes/UserActionDto.html":{}}}],["getroomqueue(roomid",{"_index":3263,"title":{},"body":{"classes/UserActionDto.html":{}}}],["getroomsongs",{"_index":3968,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getroomspotifyinfo(job",{"_index":3093,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["getroomspotifyinfo(room",{"_index":3119,"title":{},"body":{"injectables/TasksService.html":{}}}],["getroomusercount(room_id",{"_index":3261,"title":{},"body":{"classes/UserActionDto.html":{}}}],["getroomusers",{"_index":2521,"title":{},"body":{"injectables/RoomUsersService.html":{}}}],["getroomusers(room_id",{"_index":3257,"title":{},"body":{"classes/UserActionDto.html":{}}}],["getroomusers(roomid",{"_index":2530,"title":{},"body":{"injectables/RoomUsersService.html":{},"interfaces/liveChatUser.html":{}}}],["getself",{"_index":2781,"title":{},"body":{"injectables/SpotifyAuthService.html":{}}}],["getself(token",{"_index":2793,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["getsignedurl",{"_index":2574,"title":{},"body":{"injectables/S3Service.html":{}}}],["getsignedurl(this.s3",{"_index":2599,"title":{},"body":{"injectables/S3Service.html":{}}}],["getsocketid",{"_index":1236,"title":{},"body":{"injectables/DmUsersService.html":{}}}],["getsocketid(userid",{"_index":1260,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["getspotifyid",{"_index":2676,"title":{},"body":{"injectables/SongsService.html":{}}}],["getspotifyid(@param(\"songid",{"_index":2667,"title":{},"body":{"controllers/SongsController.html":{}}}],["getspotifyid(songid",{"_index":2678,"title":{},"body":{"injectables/SongsService.html":{}}}],["getspotifytokens",{"_index":2761,"title":{},"body":{"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{}}}],["getspotifytokens'})@apiresponse({status",{"_index":2718,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["getspotifytokens(userid",{"_index":2795,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["getstateobject",{"_index":2782,"title":{},"body":{"injectables/SpotifyAuthService.html":{}}}],["getstateobject(state",{"_index":2797,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["getting",{"_index":3095,"title":{"index.html":{}},"body":{"classes/TasksProcessor.html":{},"classes/UserActionDto.html":{},"miscellaneous/variables.html":{}}}],["gettopplaylists",{"_index":2265,"title":{},"body":{"injectables/RecommendationsService.html":{},"miscellaneous/variables.html":{}}}],["gettopplaylists(topn",{"_index":2275,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["getuser",{"_index":1237,"title":{},"body":{"injectables/DmUsersService.html":{}}}],["getuser(socketid",{"_index":1262,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["getuserfavoritesongs",{"_index":3969,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getuserfollowers",{"_index":3972,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getuserfollowing",{"_index":3970,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getuserfriends",{"_index":3971,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getuserid",{"_index":1238,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/RoomUsersService.html":{}}}],["getuserid(socketid",{"_index":1264,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/RoomUsersService.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["getuserinfo",{"_index":576,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["getuserinfo(jwt_token",{"_index":697,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["getuserinfo(req",{"_index":594,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["getusernameandemail",{"_index":577,"title":{},"body":{"injectables/AuthService.html":{}}}],["getusernameandemail(userid",{"_index":596,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["getusernameandemailerror01",{"_index":716,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["getusernameandemailerror02",{"_index":718,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["getuserrooms",{"_index":3869,"title":{},"body":{"index.html":{}}}],["given",{"_index":76,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"controllers/ProfileController.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"controllers/SongsController.html":{},"index.html":{}}}],["global",{"_index":145,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["global_concurrency",{"_index":1621,"title":{},"body":{"injectables/EventQueueService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["global_rank",{"_index":146,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["good",{"_index":3743,"title":{},"body":{"index.html":{}}}],["grant_type",{"_index":2859,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["graph",{"_index":3927,"title":{},"body":{"modules.html":{}}}],["group",{"_index":981,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{}}}],["guards",{"_index":3826,"title":{},"body":{"index.html":{}}}],["handle",{"_index":975,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/RetryService.html":{},"classes/TasksProcessor.html":{},"index.html":{}}}],["handled",{"_index":2399,"title":{},"body":{"injectables/RetryService.html":{}}}],["handles",{"_index":2691,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["handlespotifyauthcallback",{"_index":2685,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["handlespotifyauthcallback(code",{"_index":2688,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["handlespotifyrefresh",{"_index":2686,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["handlespotifyrefresh(req",{"_index":2709,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["handlespotifytokens",{"_index":2687,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["handlespotifytokens(req",{"_index":2716,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["handletask",{"_index":2999,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["handletask(job",{"_index":3007,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["handling",{"_index":3804,"title":{},"body":{"index.html":{}}}],["has_explicit_content",{"_index":1121,"title":{},"body":{"classes/CreateRoomDto.html":{},"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{}}}],["has_nsfw_content",{"_index":1122,"title":{},"body":{"classes/CreateRoomDto.html":{},"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{}}}],["hasspotifyaccount",{"_index":1401,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{}}}],["hat",{"_index":823,"title":{},"body":{"classes/ChatEventDto.html":{}}}],["having",{"_index":984,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["head",{"_index":1863,"title":{},"body":{"injectables/LiveService.html":{}}}],["head.getplaybackstarttime",{"_index":1866,"title":{},"body":{"injectables/LiveService.html":{}}}],["head.songdurationms",{"_index":1868,"title":{},"body":{"injectables/LiveService.html":{}}}],["headers",{"_index":2863,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["height",{"_index":2963,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["hello",{"_index":188,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["here",{"_index":2001,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"classes/TasksProcessor.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["hierarchical",{"_index":3901,"title":{},"body":{"index.html":{}}}],["history",{"_index":3280,"title":{},"body":{"classes/UserActionDto.html":{},"miscellaneous/variables.html":{}}}],["hmr",{"_index":3775,"title":{},"body":{"index.html":{}}}],["hmr.config.jswebpack",{"_index":3772,"title":{},"body":{"index.html":{}}}],["host",{"_index":398,"title":{},"body":{"modules/AppModule.html":{},"modules/BullConfigModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/UsersModule.html":{},"classes/WsExceptionFilter.html":{}}}],["host.switchtows().getclient",{"_index":3576,"title":{},"body":{"classes/WsExceptionFilter.html":{}}}],["hot",{"_index":3773,"title":{},"body":{"index.html":{}}}],["hour",{"_index":77,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"injectables/TasksService.html":{}}}],["hour'})@isnumber",{"_index":2054,"title":{},"body":{"classes/ParticipantsPerHourDto.html":{}}}],["hours",{"_index":155,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["hours)'})@isnumber",{"_index":2439,"title":{},"body":{"classes/RoomAnalyticsVotesDto.html":{}}}],["href",{"_index":2943,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["http",{"_index":264,"title":{},"body":{"controllers/AppController.html":{}}}],["http://localhost:3000/auth/spotify/callback?code=${code}&state=${state",{"_index":2748,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["http://localhost:3000/upload",{"_index":251,"title":{},"body":{"controllers/AppController.html":{}}}],["httpexception",{"_index":218,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UserActionDto.html":{}}}],["httpexception(\"no",{"_index":299,"title":{},"body":{"controllers/AppController.html":{}}}],["httpexception(\"room",{"_index":3181,"title":{},"body":{"classes/UserActionDto.html":{}}}],["httpexception(\"successfully",{"_index":519,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception(\"user",{"_index":3180,"title":{},"body":{"classes/UserActionDto.html":{}}}],["httpexception(\"user's",{"_index":2915,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["httpexception(`room",{"_index":3482,"title":{},"body":{"classes/UserActionDto.html":{}}}],["httpmodule",{"_index":359,"title":{},"body":{"modules/AppModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/SpotifyAuthModule.html":{},"modules/SpotifyModule.html":{}}}],["https://accounts.spotify.com/api/token",{"_index":2858,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["https://example.com/default",{"_index":2906,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["https://github.com/woodybury/rn",{"_index":802,"title":{},"body":{"interfaces/Category.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{}}}],["https://jwt.io",{"_index":429,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://localhost:${port}/admin/queues",{"_index":786,"title":{},"body":{"injectables/BullBoardService.html":{}}}],["https://www.postman.com/postman/postman",{"_index":266,"title":{},"body":{"controllers/AppController.html":{}}}],["httpservice",{"_index":2785,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["httpstatus",{"_index":219,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"classes/UserActionDto.html":{}}}],["httpstatus.bad_request",{"_index":300,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/UserActionDto.html":{}}}],["httpstatus.conflict",{"_index":3304,"title":{},"body":{"classes/UserActionDto.html":{}}}],["httpstatus.created",{"_index":520,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserActionDto.html":{}}}],["httpstatus.forbidden",{"_index":3183,"title":{},"body":{"classes/UserActionDto.html":{}}}],["httpstatus.internal_server_error",{"_index":3420,"title":{},"body":{"classes/UserActionDto.html":{}}}],["httpstatus.not_found",{"_index":3177,"title":{},"body":{"classes/UserActionDto.html":{}}}],["httpstatus.ok",{"_index":3349,"title":{},"body":{"classes/UserActionDto.html":{}}}],["httpstatus.unauthorized",{"_index":492,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["i.e",{"_index":116,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["iat",{"_index":631,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["id",{"_index":131,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"injectables/JwtStrategy.html":{},"classes/LoginBody.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"injectables/RoomUsersService.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"controllers/SongsController.html":{},"injectables/SongsService.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/SpotifyUser.html":{},"classes/UserActionDto.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{},"miscellaneous/variables.html":{}}}],["id.params.pathsegment",{"_index":1099,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["id.params.queryparams.creator",{"_index":1100,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["id.params.queryparams.q",{"_index":1102,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["id.search_term",{"_index":1108,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["identifier",{"_index":3582,"title":{},"body":{"coverage.html":{}}}],["identity",{"_index":615,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"dependencies.html":{}}}],["ids",{"_index":1403,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{}}}],["ids.push(message.message_id",{"_index":3276,"title":{},"body":{"classes/UserActionDto.html":{}}}],["ignoreexpiration",{"_index":1777,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ignoreunlockfail",{"_index":395,"title":{},"body":{"modules/AppModule.html":{}}}],["image",{"_index":1722,"title":{},"body":{"injectables/ImageService.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/SpotifyUser.html":{},"miscellaneous/typealiases.html":{}}}],["image.service",{"_index":1714,"title":{},"body":{"modules/ImageModule.html":{}}}],["image/image.module",{"_index":376,"title":{},"body":{"modules/AppModule.html":{},"modules/SpotifyModule.html":{}}}],["imagebuffer",{"_index":1726,"title":{},"body":{"injectables/ImageService.html":{}}}],["imagebuffer.length",{"_index":1733,"title":{},"body":{"injectables/ImageService.html":{}}}],["imagebuffer.tostring(\"base64",{"_index":1746,"title":{},"body":{"injectables/ImageService.html":{}}}],["imagemodule",{"_index":324,"title":{"modules/ImageModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ImageModule.html":{},"modules/SpotifyModule.html":{},"modules.html":{},"overview.html":{}}}],["images",{"_index":2944,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["imageservice",{"_index":1712,"title":{"injectables/ImageService.html":{}},"body":{"modules/ImageModule.html":{},"injectables/ImageService.html":{},"coverage.html":{},"overview.html":{}}}],["imagetob64",{"_index":1717,"title":{},"body":{"injectables/ImageService.html":{}}}],["imagetob64(imagebuffer",{"_index":1729,"title":{},"body":{"injectables/ImageService.html":{}}}],["imageurl",{"_index":2901,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["implement",{"_index":3242,"title":{},"body":{"classes/UserActionDto.html":{}}}],["implements",{"_index":766,"title":{},"body":{"injectables/BullBoardService.html":{},"injectables/MyLogger.html":{},"injectables/PrismaService.html":{},"classes/WsExceptionFilter.html":{}}}],["import",{"_index":27,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/AutoModerationModule.html":{},"injectables/AutoModerationService.html":{},"modules/BullBoardModule.html":{},"injectables/BullBoardService.html":{},"modules/BullConfigModule.html":{},"interfaces/Category.html":{},"classes/ChatEventDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"modules/DbUtilsModule.html":{},"classes/DirectMessageDto.html":{},"modules/DmUsersModule.html":{},"injectables/DmUsersService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"injectables/EventQueueService.html":{},"classes/FollowersAndFollowing.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"classes/GenresWithCount.html":{},"modules/ImageModule.html":{},"injectables/ImageService.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LinksWithCount.html":{},"classes/LiveChatMessageDto.html":{},"modules/LiveModule.html":{},"injectables/LiveService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"classes/MessagesPerHour.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"injectables/MyLogger.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/PlaybackEventDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/QueueEventDto.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"modules/RetryModule.html":{},"injectables/RetryService.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"modules/RoomQueueModule.html":{},"classes/RoomSongDto.html":{},"modules/RoomUsersModule.html":{},"injectables/RoomUsersService.html":{},"classes/RoomsData.html":{},"modules/RoomsModule.html":{},"modules/S3Module.html":{},"injectables/S3Service.html":{},"classes/SearchHistoryDto.html":{},"modules/SearchModule.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/SongInfosWithCount.html":{},"controllers/SongsController.html":{},"modules/SongsModule.html":{},"injectables/SongsService.html":{},"controllers/SpotifyAuthController.html":{},"modules/SpotifyAuthModule.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"modules/SpotifyModule.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"modules/TasksModule.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserDto-1.html":{},"classes/UpdateUserDto-2.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{},"modules/UsersModule.html":{},"classes/VoteDto.html":{},"classes/WsExceptionFilter.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["imported",{"_index":3893,"title":{},"body":{"index.html":{}}}],["importing",{"_index":3061,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["imports",{"_index":341,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BullBoardModule.html":{},"modules/BullConfigModule.html":{},"modules/DbUtilsModule.html":{},"modules/DmUsersModule.html":{},"modules/DtoGenModule.html":{},"modules/GenresModule.html":{},"modules/LiveModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RecommendationsModule.html":{},"modules/RoomQueueModule.html":{},"modules/RoomUsersModule.html":{},"modules/RoomsModule.html":{},"modules/SearchModule.html":{},"modules/SongsModule.html":{},"modules/SpotifyAuthModule.html":{},"modules/SpotifyModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["importuserlibrary",{"_index":3000,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["importuserlibrary(job",{"_index":3010,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["inactive",{"_index":1850,"title":{},"body":{"injectables/LiveService.html":{},"classes/UserActionDto.html":{}}}],["inactivity",{"_index":1852,"title":{},"body":{"injectables/LiveService.html":{}}}],["include",{"_index":1404,"title":{},"body":{"injectables/DtoGenService.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UserActionDto.html":{}}}],["included",{"_index":3917,"title":{},"body":{"index.html":{}}}],["includes(id",{"_index":1041,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["including",{"_index":94,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"index.html":{}}}],["incoming",{"_index":3805,"title":{},"body":{"index.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/AllTimeSessionDataDto.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BullBoardService.html":{},"interfaces/Category.html":{},"classes/ChatEventDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/DirectMessageDto.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"injectables/EventQueueService.html":{},"classes/FollowersAndFollowing.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"classes/GenresWithCount.html":{},"injectables/ImageService.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"injectables/JwtStrategy.html":{},"classes/LinksWithCount.html":{},"classes/LiveChatMessageDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"classes/MessagesPerHour.html":{},"injectables/MyLogger.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/PlaybackEventDto.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/QueueEventDto.html":{},"injectables/RecommendationsService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RetryService.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/RoomSongDto.html":{},"injectables/RoomUsersService.html":{},"classes/RoomsData.html":{},"injectables/S3Service.html":{},"classes/SearchHistoryDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/SongInfosWithCount.html":{},"injectables/SongsService.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/SpotifyUser.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{},"classes/VoteDto.html":{},"classes/WsExceptionFilter.html":{},"interfaces/dmUser.html":{},"miscellaneous/functions.html":{},"interfaces/liveChatUser.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index=${event.song.index",{"_index":1898,"title":{},"body":{"injectables/LiveService.html":{}}}],["indexable",{"_index":3133,"title":{},"body":{"classes/UpdateUserDto-1.html":{},"classes/UpdateUserDto-2.html":{},"classes/UpdateUserProfileDto.html":{}}}],["indicate",{"_index":2362,"title":{},"body":{"injectables/RetryService.html":{}}}],["individual",{"_index":2296,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["infinite",{"_index":2361,"title":{},"body":{"injectables/RetryService.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/AutoModerationModule.html":{},"injectables/AutoModerationService.html":{},"modules/BullBoardModule.html":{},"injectables/BullBoardService.html":{},"modules/BullConfigModule.html":{},"interfaces/Category.html":{},"classes/ChatEventDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"modules/DbUtilsModule.html":{},"classes/DirectMessageDto.html":{},"modules/DmUsersModule.html":{},"injectables/DmUsersService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"injectables/EventQueueService.html":{},"classes/FollowersAndFollowing.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"classes/GenresWithCount.html":{},"modules/ImageModule.html":{},"injectables/ImageService.html":{},"classes/InternalError.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LinksWithCount.html":{},"classes/LiveChatMessageDto.html":{},"modules/LiveModule.html":{},"injectables/LiveService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"classes/MessagesPerHour.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"injectables/MyLogger.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/PlaybackEventDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/QueueEventDto.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"modules/RetryModule.html":{},"injectables/RetryService.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"modules/RoomQueueModule.html":{},"classes/RoomSongDto.html":{},"modules/RoomUsersModule.html":{},"injectables/RoomUsersService.html":{},"classes/RoomsData.html":{},"modules/RoomsModule.html":{},"modules/S3Module.html":{},"injectables/S3Service.html":{},"classes/SearchHistoryDto.html":{},"modules/SearchModule.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/SongInfosWithCount.html":{},"controllers/SongsController.html":{},"modules/SongsModule.html":{},"injectables/SongsService.html":{},"controllers/SpotifyAuthController.html":{},"modules/SpotifyAuthModule.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"modules/SpotifyModule.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/SpotifyUser.html":{},"modules/TasksModule.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserDto-1.html":{},"classes/UpdateUserDto-2.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserError.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{},"modules/UsersModule.html":{},"classes/VoteDto.html":{},"classes/WsExceptionFilter.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["info'})@apibody({type",{"_index":468,"title":{},"body":{"controllers/AuthController.html":{}}}],["info'})@apiokresponse({description",{"_index":2149,"title":{},"body":{"controllers/ProfileController.html":{}}}],["information",{"_index":430,"title":{},"body":{"controllers/AuthController.html":{}}}],["init_pause",{"_index":4027,"title":{},"body":{"miscellaneous/variables.html":{}}}],["init_play",{"_index":4025,"title":{},"body":{"miscellaneous/variables.html":{}}}],["init_prev",{"_index":4033,"title":{},"body":{"miscellaneous/variables.html":{}}}],["init_skip",{"_index":4031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["init_stop",{"_index":4029,"title":{},"body":{"miscellaneous/variables.html":{}}}],["initiator",{"_index":3334,"title":{},"body":{"classes/UserActionDto.html":{}}}],["initiatorid",{"_index":3326,"title":{},"body":{"classes/UserActionDto.html":{}}}],["initpause",{"_index":4028,"title":{},"body":{"miscellaneous/variables.html":{}}}],["initplay",{"_index":4026,"title":{},"body":{"miscellaneous/variables.html":{}}}],["initprev",{"_index":4034,"title":{},"body":{"miscellaneous/variables.html":{}}}],["initskip",{"_index":4032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["initstop",{"_index":4030,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectable",{"_index":406,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/AutoModerationService.html":{},"injectables/BullBoardService.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"injectables/EventQueueService.html":{},"injectables/GenresService.html":{},"injectables/ImageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LiveService.html":{},"injectables/LocalStrategy.html":{},"injectables/MyLogger.html":{},"injectables/PrismaService.html":{},"injectables/ProfileService.html":{},"injectables/RecommendationsService.html":{},"injectables/RetryService.html":{},"injectables/RoomUsersService.html":{},"injectables/S3Service.html":{},"injectables/SongsService.html":{},"injectables/SpotifyAuthService.html":{},"injectables/TasksService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/AutoModerationService.html":{},"injectables/BullBoardService.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"injectables/EventQueueService.html":{},"injectables/GenresService.html":{},"injectables/ImageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LiveService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"injectables/MyLogger.html":{},"injectables/PrismaService.html":{},"injectables/ProfileService.html":{},"injectables/RecommendationsService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RetryService.html":{},"injectables/RoomUsersService.html":{},"injectables/S3Service.html":{},"injectables/SongsService.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"injectables/TasksService.html":{},"classes/UserActionDto.html":{},"coverage.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["injectables",{"_index":407,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/AutoModerationService.html":{},"injectables/BullBoardService.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"injectables/EventQueueService.html":{},"injectables/GenresService.html":{},"injectables/ImageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LiveService.html":{},"injectables/LocalStrategy.html":{},"injectables/MyLogger.html":{},"injectables/PrismaService.html":{},"injectables/ProfileService.html":{},"injectables/RecommendationsService.html":{},"injectables/RetryService.html":{},"injectables/RoomUsersService.html":{},"injectables/S3Service.html":{},"injectables/SongsService.html":{},"injectables/SpotifyAuthService.html":{},"injectables/TasksService.html":{},"overview.html":{}}}],["injected",{"_index":3910,"title":{},"body":{"index.html":{}}}],["injectqueue",{"_index":765,"title":{},"body":{"injectables/BullBoardService.html":{},"injectables/TasksService.html":{}}}],["inner",{"_index":908,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["input",{"_index":3857,"title":{},"body":{"index.html":{}}}],["insert",{"_index":3308,"title":{},"body":{"classes/UserActionDto.html":{}}}],["insertsearchhistory(endpoint",{"_index":884,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["inserttime",{"_index":2500,"title":{},"body":{"classes/RoomSongDto.html":{}}}],["inspect",{"_index":2869,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["installation",{"_index":3724,"title":{},"body":{"index.html":{}}}],["installed",{"_index":3767,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":3726,"title":{},"body":{"index.html":{}}}],["installs",{"_index":3768,"title":{},"body":{"index.html":{}}}],["instance",{"_index":81,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["instanceof",{"_index":2880,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/WsExceptionFilter.html":{}}}],["instrumentalness",{"_index":2289,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["integer",{"_index":2649,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["integration",{"_index":3795,"title":{},"body":{"index.html":{}}}],["interactions",{"_index":175,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"index.html":{}}}],["interface",{"_index":797,"title":{"interfaces/Category.html":{},"interfaces/Emoji.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}},"body":{"interfaces/Category.html":{},"injectables/DmUsersService.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"injectables/RoomUsersService.html":{},"coverage.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["interfaces",{"_index":799,"title":{},"body":{"interfaces/Category.html":{},"interfaces/Emoji.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{},"overview.html":{}}}],["internal",{"_index":135,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/WsExceptionFilter.html":{}}}],["internalerror",{"_index":1747,"title":{"classes/InternalError.html":{}},"body":{"classes/InternalError.html":{},"coverage.html":{}}}],["internally",{"_index":3913,"title":{},"body":{"index.html":{}}}],["invalid",{"_index":488,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["ioredis",{"_index":3680,"title":{},"body":{"dependencies.html":{}}}],["ip",{"_index":2741,"title":{},"body":{"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["is_pending",{"_index":1457,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["is_priv",{"_index":945,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["is_private",{"_index":1123,"title":{},"body":{"classes/CreateRoomDto.html":{},"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{}}}],["is_scheduled",{"_index":946,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateRoomDto.html":{},"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{}}}],["is_temp",{"_index":944,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["is_temporary",{"_index":1124,"title":{},"body":{"classes/CreateRoomDto.html":{},"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{}}}],["isarray",{"_index":30,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateRoomDto.html":{},"classes/FollowersAndFollowing.html":{},"controllers/GenresController.html":{},"classes/GenresWithCount.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/LinksWithCount.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomsData.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{}}}],["isboolean",{"_index":1148,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/DirectMessageDto.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomDto.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{},"classes/VoteDto.html":{}}}],["isdate",{"_index":31,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"interfaces/Category.html":{},"classes/ChatEventDto.html":{},"classes/CreateRoomDto.html":{},"classes/DirectMessageDto.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/LiveChatMessageDto.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/PlaybackEventDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/SearchHistoryDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{},"classes/VoteDto.html":{}}}],["isdeleted",{"_index":3219,"title":{},"body":{"classes/UserActionDto.html":{}}}],["isfollowing",{"_index":3965,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isfriendsorpending",{"_index":3967,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isglobal",{"_index":382,"title":{},"body":{"modules/AppModule.html":{}}}],["isnumber",{"_index":32,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/CreateRoomDto.html":{},"classes/DirectMessageDto.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/LinksWithCount.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/QueueEventDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomSongDto.html":{},"classes/RoomsData.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{},"classes/SongInfosWithCount.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{}}}],["isobject",{"_index":33,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/ChatEventDto.html":{},"classes/DirectMessageDto.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/LinksWithCount.html":{},"classes/LiveChatMessageDto.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/PlaybackEventDto.html":{},"classes/QueueEventDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomsData.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfosWithCount.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{}}}],["isoptional",{"_index":1149,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/SongInfoDto.html":{}}}],["isread",{"_index":1202,"title":{},"body":{"classes/DirectMessageDto.html":{},"injectables/DtoGenService.html":{}}}],["iss",{"_index":623,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["isstring",{"_index":34,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"classes/ChatEventDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/DirectMessageDto.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/LinksWithCount.html":{},"classes/LiveChatMessageDto.html":{},"classes/LoginBody.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/PlaybackEventDto.html":{},"classes/QueueEventDto.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomSongDto.html":{},"classes/RoomsData.html":{},"classes/SearchHistoryDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{},"classes/SongInfosWithCount.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{},"classes/VoteDto.html":{}}}],["isupvote",{"_index":3556,"title":{},"body":{"classes/VoteDto.html":{}}}],["it's",{"_index":1630,"title":{},"body":{"injectables/EventQueueService.html":{}}}],["items",{"_index":105,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/LinksWithCount.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomsData.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{}}}],["jest",{"_index":3682,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["jest.fn",{"_index":3963,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn((key",{"_index":3952,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.setup.jsjest",{"_index":3755,"title":{},"body":{"index.html":{}}}],["jest_mocking/.../module",{"_index":3710,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["jest_mocking/.../service",{"_index":3947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest_mocking/module",{"_index":1918,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["jest_mocking/service",{"_index":3591,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["jest_mockingcontains",{"_index":3785,"title":{},"body":{"index.html":{}}}],["job",{"_index":3004,"title":{},"body":{"classes/TasksProcessor.html":{},"injectables/TasksService.html":{}}}],["job.data",{"_index":3021,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["job.data.token",{"_index":3026,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["job.data.user_id",{"_index":3027,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["job.stop",{"_index":1901,"title":{},"body":{"injectables/LiveService.html":{}}}],["jobs",{"_index":1837,"title":{},"body":{"injectables/LiveService.html":{},"index.html":{}}}],["john@example.com",{"_index":507,"title":{},"body":{"controllers/AuthController.html":{}}}],["join",{"_index":92,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["join_room",{"_index":3997,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joining",{"_index":118,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/UserActionDto.html":{}}}],["joining'})@isnumber",{"_index":2431,"title":{},"body":{"classes/RoomAnalyticsParticipationDto.html":{}}}],["joinroom",{"_index":3998,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joinroom(_room_id",{"_index":3224,"title":{},"body":{"classes/UserActionDto.html":{}}}],["joins",{"_index":91,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["joinsalltime",{"_index":99,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["joinscount",{"_index":86,"title":{"classes/JoinsCount.html":{}},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"coverage.html":{}}}],["joinsperday",{"_index":87,"title":{"classes/JoinsPerDay.html":{}},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"coverage.html":{}}}],["jpeg",{"_index":1724,"title":{},"body":{"injectables/ImageService.html":{}}}],["jpg",{"_index":275,"title":{},"body":{"controllers/AppController.html":{}}}],["js",{"_index":3685,"title":{},"body":{"dependencies.html":{}}}],["js/priority",{"_index":3651,"title":{},"body":{"dependencies.html":{}}}],["json.parse",{"_index":3434,"title":{},"body":{"classes/UserActionDto.html":{}}}],["json.parse(decodedstate",{"_index":2848,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["json.parse(tokens.token",{"_index":2916,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["json.stringify(dm",{"_index":1548,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["json.stringify(nonfriends",{"_index":1460,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["json.stringify(result",{"_index":1007,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{}}}],["json.stringify(tk",{"_index":2911,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["jsonwebtoken",{"_index":620,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"dependencies.html":{}}}],["jti",{"_index":632,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["jwt",{"_index":422,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwt.decode(jwt_token",{"_index":688,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["jwt.jwtpayload",{"_index":687,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["jwt.sign(payload",{"_index":686,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["jwt.strategy",{"_index":553,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt.verify(jwt_token",{"_index":698,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["jwt_expiration_time",{"_index":3960,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt_secret_key",{"_index":556,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwt_token",{"_index":591,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["jwtauthguard",{"_index":240,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/ProfileController.html":{},"controllers/SpotifyAuthController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":1775,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":550,"title":{},"body":{"modules/AuthModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["jwtmodule.register",{"_index":562,"title":{},"body":{"modules/AuthModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["jwtpayload",{"_index":475,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginBody.html":{},"controllers/ProfileController.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UserActionDto.html":{},"miscellaneous/typealiases.html":{}}}],["jwtsecret",{"_index":1773,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtstrategy",{"_index":543,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["k",{"_index":3387,"title":{},"body":{"classes/UserActionDto.html":{}}}],["kallo",{"_index":873,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["kept",{"_index":3862,"title":{},"body":{"index.html":{}}}],["key",{"_index":685,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Category.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DmUsersService.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"injectables/LiveService.html":{},"classes/LoginBody.html":{},"injectables/RecommendationsService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RoomUsersService.html":{},"injectables/S3Service.html":{},"classes/SongInfoDto.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UpdateUserDto-1.html":{},"classes/UpdateUserDto-2.html":{},"classes/UpdateUserProfileDto.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{},"miscellaneous/variables.html":{}}}],["key.startswith(`songannouncement",{"_index":1900,"title":{},"body":{"injectables/LiveService.html":{}}}],["keywords",{"_index":804,"title":{},"body":{"interfaces/Category.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{}}}],["kick",{"_index":3330,"title":{},"body":{"classes/UserActionDto.html":{}}}],["kicked",{"_index":3324,"title":{},"body":{"classes/UserActionDto.html":{}}}],["kickeduserid",{"_index":3327,"title":{},"body":{"classes/UserActionDto.html":{}}}],["kickuser",{"_index":3325,"title":{},"body":{"classes/UserActionDto.html":{}}}],["kmeans",{"_index":3156,"title":{},"body":{"classes/UserActionDto.html":{},"dependencies.html":{}}}],["kmeans(features",{"_index":3396,"title":{},"body":{"classes/UserActionDto.html":{}}}],["kmeans/lib/kmeansresult",{"_index":3159,"title":{},"body":{"classes/UserActionDto.html":{}}}],["kmeansresult",{"_index":3158,"title":{},"body":{"classes/UserActionDto.html":{}}}],["lang",{"_index":949,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["language",{"_index":1125,"title":{},"body":{"classes/CreateRoomDto.html":{},"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{}}}],["large",{"_index":277,"title":{},"body":{"controllers/AppController.html":{},"injectables/ImageService.html":{}}}],["largest",{"_index":2899,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["last",{"_index":153,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"injectables/RetryService.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["layers",{"_index":3850,"title":{},"body":{"index.html":{}}}],["leader",{"_index":2232,"title":{},"body":{"injectables/ProfileService.html":{}}}],["least(levenshtein(full_name",{"_index":1034,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["least(levenshtein(name",{"_index":907,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["least(levenshtein(username",{"_index":1053,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["leave",{"_index":3243,"title":{},"body":{"classes/UserActionDto.html":{}}}],["leave_room",{"_index":3999,"title":{},"body":{"miscellaneous/variables.html":{}}}],["leaveroom",{"_index":2522,"title":{},"body":{"injectables/RoomUsersService.html":{},"miscellaneous/variables.html":{}}}],["leaveroom(room_id",{"_index":3241,"title":{},"body":{"classes/UserActionDto.html":{}}}],["leaveroom(socketid",{"_index":2533,"title":{},"body":{"injectables/RoomUsersService.html":{},"interfaces/liveChatUser.html":{}}}],["leaving",{"_index":3244,"title":{},"body":{"classes/UserActionDto.html":{}}}],["left",{"_index":965,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"index.html":{}}}],["legend",{"_index":310,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AutoModerationModule.html":{},"modules/BullBoardModule.html":{},"modules/DbUtilsModule.html":{},"modules/DmUsersModule.html":{},"modules/DtoGenModule.html":{},"modules/GenresModule.html":{},"modules/ImageModule.html":{},"modules/LiveModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RecommendationsModule.html":{},"modules/RetryModule.html":{},"modules/RoomQueueModule.html":{},"modules/RoomUsersModule.html":{},"modules/RoomsModule.html":{},"modules/S3Module.html":{},"modules/SearchModule.html":{},"modules/SongsModule.html":{},"modules/SpotifyAuthModule.html":{},"modules/SpotifyModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["less",{"_index":278,"title":{},"body":{"controllers/AppController.html":{}}}],["level",{"_index":2037,"title":{},"body":{"injectables/MyLogger.html":{}}}],["levenshtein(description",{"_index":959,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["levenshtein(full_name",{"_index":957,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["levenshtein(name",{"_index":871,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["levenshtein(username",{"_index":879,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["levenstein",{"_index":867,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["library",{"_index":3012,"title":{},"body":{"classes/TasksProcessor.html":{},"injectables/TasksService.html":{}}}],["license",{"_index":3935,"title":{},"body":{"properties.html":{}}}],["liked",{"_index":3033,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["likedsongids",{"_index":3047,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["likedsongs",{"_index":3035,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["likedsongs.map((track",{"_index":3042,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["likedsongsdb",{"_index":3044,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["likedsongsdb.map((song",{"_index":3048,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["likedsongsplaylist",{"_index":3057,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["likedsongsplaylistindb",{"_index":3050,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["likedsongsplaylistindb.playlist_id",{"_index":3056,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["likedtracks",{"_index":3040,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["limit",{"_index":875,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/RetryService.html":{},"classes/UserActionDto.html":{}}}],["limited",{"_index":2395,"title":{},"body":{"injectables/RetryService.html":{}}}],["limits",{"_index":281,"title":{},"body":{"controllers/AppController.html":{}}}],["line",{"_index":2372,"title":{},"body":{"injectables/RetryService.html":{}}}],["link",{"_index":3883,"title":{},"body":{"index.html":{}}}],["linked",{"_index":3907,"title":{},"body":{"index.html":{}}}],["links",{"_index":1395,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{}}}],["linkswithcount",{"_index":1658,"title":{"classes/LinksWithCount.html":{}},"body":{"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{},"coverage.html":{}}}],["linkswithcount})@isobject()@validatenested()@type(undefined",{"_index":3499,"title":{},"body":{"classes/UserDto.html":{}}}],["list",{"_index":835,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"controllers/GenresController.html":{},"classes/UserActionDto.html":{},"index.html":{}}}],["listen(port",{"_index":784,"title":{},"body":{"injectables/BullBoardService.html":{}}}],["listening",{"_index":1665,"title":{},"body":{"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{}}}],["listing",{"_index":672,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["listusers",{"_index":578,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["listuserscommandoutput",{"_index":613,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["literal",{"_index":2274,"title":{},"body":{"injectables/RecommendationsService.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyUser.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"miscellaneous/typealiases.html":{}}}],["live",{"_index":4001,"title":{},"body":{"miscellaneous/variables.html":{}}}],["live.gateway",{"_index":1804,"title":{},"body":{"modules/LiveModule.html":{}}}],["live.service",{"_index":1806,"title":{},"body":{"modules/LiveModule.html":{}}}],["live/dmusers/dmusers.module",{"_index":2557,"title":{},"body":{"modules/RoomsModule.html":{}}}],["live/dmusers/dmusers.service",{"_index":3160,"title":{},"body":{"classes/UserActionDto.html":{}}}],["live/dto/emojireaction.dto",{"_index":3153,"title":{},"body":{"classes/UserActionDto.html":{}}}],["live/dto/livechatmessage.dto",{"_index":1387,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{}}}],["live/live.module",{"_index":356,"title":{},"body":{"modules/AppModule.html":{}}}],["live_chat_history",{"_index":4081,"title":{},"body":{"miscellaneous/variables.html":{}}}],["live_message",{"_index":4002,"title":{},"body":{"miscellaneous/variables.html":{}}}],["livechathistory",{"_index":4082,"title":{},"body":{"miscellaneous/variables.html":{}}}],["livechatmessage.dto",{"_index":830,"title":{},"body":{"classes/ChatEventDto.html":{}}}],["livechatmessagedto",{"_index":814,"title":{"classes/LiveChatMessageDto.html":{}},"body":{"classes/ChatEventDto.html":{},"injectables/DtoGenService.html":{},"classes/LiveChatMessageDto.html":{},"classes/UserActionDto.html":{},"coverage.html":{}}}],["livechatmessagedto})@isobject()@type(undefined)@validatenested",{"_index":816,"title":{},"body":{"classes/ChatEventDto.html":{}}}],["livechatuser",{"_index":2527,"title":{"interfaces/liveChatUser.html":{}},"body":{"injectables/RoomUsersService.html":{},"coverage.html":{},"interfaces/liveChatUser.html":{}}}],["livegateway",{"_index":1799,"title":{},"body":{"modules/LiveModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"overview.html":{}}}],["livemessage",{"_index":4003,"title":{},"body":{"miscellaneous/variables.html":{}}}],["livemodule",{"_index":325,"title":{"modules/LiveModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LiveModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules.html":{},"overview.html":{}}}],["liveness",{"_index":2290,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["liveservice",{"_index":1800,"title":{"injectables/LiveService.html":{}},"body":{"modules/LiveModule.html":{},"injectables/LiveService.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"overview.html":{}}}],["local",{"_index":1909,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":552,"title":{},"body":{"modules/AuthModule.html":{}}}],["localhost",{"_index":795,"title":{},"body":{"modules/BullConfigModule.html":{}}}],["localstrategy",{"_index":544,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["lock.jsonrecords",{"_index":3765,"title":{},"body":{"index.html":{}}}],["log",{"_index":394,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"injectables/MyLogger.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["log(message",{"_index":2030,"title":{},"body":{"injectables/MyLogger.html":{}}}],["logged",{"_index":438,"title":{},"body":{"controllers/AuthController.html":{}}}],["logger",{"_index":1612,"title":{},"body":{"injectables/EventQueueService.html":{},"injectables/MyLogger.html":{},"injectables/PrismaService.html":{}}}],["logger(eventqueueservice.name",{"_index":1618,"title":{},"body":{"injectables/EventQueueService.html":{}}}],["logger(prismaservice.name",{"_index":2086,"title":{},"body":{"injectables/PrismaService.html":{}}}],["logger/logger.service",{"_index":374,"title":{},"body":{"modules/AppModule.html":{}}}],["loggerservice",{"_index":2047,"title":{},"body":{"injectables/MyLogger.html":{}}}],["logic",{"_index":3023,"title":{},"body":{"classes/TasksProcessor.html":{},"classes/UserActionDto.html":{},"index.html":{}}}],["login",{"_index":413,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["login'})@apibody({type",{"_index":432,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@body",{"_index":485,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logininfo",{"_index":416,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginbody",{"_index":417,"title":{"classes/LoginBody.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"coverage.html":{}}}],["logininfo",{"_index":443,"title":{},"body":{"controllers/AuthController.html":{}}}],["logininfo.token",{"_index":486,"title":{},"body":{"controllers/AuthController.html":{}}}],["loglevel",{"_index":393,"title":{},"body":{"modules/AppModule.html":{}}}],["logout",{"_index":537,"title":{},"body":{"controllers/AuthController.html":{}}}],["looks",{"_index":3897,"title":{},"body":{"index.html":{}}}],["loose",{"_index":3911,"title":{},"body":{"index.html":{}}}],["lots",{"_index":3740,"title":{},"body":{"index.html":{}}}],["loudness",{"_index":2285,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["lts.1",{"_index":3692,"title":{},"body":{"dependencies.html":{}}}],["lyrics_url",{"_index":2648,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["m",{"_index":1331,"title":{},"body":{"injectables/DmUsersService.html":{},"classes/UserActionDto.html":{},"interfaces/dmUser.html":{}}}],["m.contents",{"_index":1538,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["m.date_sent",{"_index":1541,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["m.message_id",{"_index":1535,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["m.recipient.userid",{"_index":1333,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["m.sender",{"_index":1530,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["m.sender.userid",{"_index":1332,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["made",{"_index":2383,"title":{},"body":{"injectables/RetryService.html":{},"index.html":{}}}],["magnitude1",{"_index":2311,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["magnitude2",{"_index":2313,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["mailermodule",{"_index":378,"title":{},"body":{"modules/AppModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/UsersModule.html":{}}}],["mailermodule.forroot",{"_index":396,"title":{},"body":{"modules/AppModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/UsersModule.html":{}}}],["mailerservice",{"_index":1983,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["main",{"_index":3803,"title":{},"body":{"index.html":{}}}],["main.tsthe",{"_index":3809,"title":{},"body":{"index.html":{}}}],["maintainability",{"_index":3880,"title":{},"body":{"index.html":{}}}],["make",{"_index":3872,"title":{},"body":{"index.html":{}}}],["makes",{"_index":3908,"title":{},"body":{"index.html":{}}}],["makestatevariable",{"_index":2835,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["malformed",{"_index":2165,"title":{},"body":{"controllers/ProfileController.html":{}}}],["manage",{"_index":3888,"title":{},"body":{"index.html":{}}}],["management",{"_index":3816,"title":{},"body":{"index.html":{}}}],["managing",{"_index":3864,"title":{},"body":{"index.html":{}}}],["manually",{"_index":2711,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["map",{"_index":1014,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"injectables/LiveService.html":{},"injectables/RoomUsersService.html":{},"classes/UserActionDto.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["map(([playlist",{"_index":2328,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["map((id",{"_index":934,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["map((r",{"_index":1471,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["map((tag",{"_index":979,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["map((user",{"_index":1039,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["mark",{"_index":787,"title":{},"body":{"injectables/BullBoardService.html":{}}}],["marking",{"_index":1856,"title":{},"body":{"injectables/LiveService.html":{}}}],["match",{"_index":1597,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["matching",{"_index":178,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/AutoModerationModule.html":{},"injectables/AutoModerationService.html":{},"modules/BullBoardModule.html":{},"injectables/BullBoardService.html":{},"modules/BullConfigModule.html":{},"interfaces/Category.html":{},"classes/ChatEventDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"modules/DbUtilsModule.html":{},"classes/DirectMessageDto.html":{},"modules/DmUsersModule.html":{},"injectables/DmUsersService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"injectables/EventQueueService.html":{},"classes/FollowersAndFollowing.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"classes/GenresWithCount.html":{},"modules/ImageModule.html":{},"injectables/ImageService.html":{},"classes/InternalError.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LinksWithCount.html":{},"classes/LiveChatMessageDto.html":{},"modules/LiveModule.html":{},"injectables/LiveService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"classes/MessagesPerHour.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"injectables/MyLogger.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/PlaybackEventDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/QueueEventDto.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"modules/RetryModule.html":{},"injectables/RetryService.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"modules/RoomQueueModule.html":{},"classes/RoomSongDto.html":{},"modules/RoomUsersModule.html":{},"injectables/RoomUsersService.html":{},"classes/RoomsData.html":{},"modules/RoomsModule.html":{},"modules/S3Module.html":{},"injectables/S3Service.html":{},"classes/SearchHistoryDto.html":{},"modules/SearchModule.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/SongInfosWithCount.html":{},"controllers/SongsController.html":{},"modules/SongsModule.html":{},"injectables/SongsService.html":{},"controllers/SpotifyAuthController.html":{},"modules/SpotifyAuthModule.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"modules/SpotifyModule.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/SpotifyUser.html":{},"modules/TasksModule.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserDto-1.html":{},"classes/UpdateUserDto-2.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserError.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{},"modules/UsersModule.html":{},"classes/VoteDto.html":{},"classes/WsExceptionFilter.html":{},"coverage.html":{},"dependencies.html":{},"interfaces/dmUser.html":{},"miscellaneous/functions.html":{},"index.html":{},"interfaces/liveChatUser.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.pow(2",{"_index":2115,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/RetryService.html":{}}}],["math.sqrt",{"_index":2312,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["max_announcements_per_room",{"_index":1821,"title":{},"body":{"injectables/LiveService.html":{}}}],["max_bytes_per_image",{"_index":3641,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["max_duration",{"_index":10,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["maxattempts",{"_index":391,"title":{},"body":{"modules/AppModule.html":{}}}],["maximum",{"_index":23,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"injectables/ImageService.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"injectables/RetryService.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["maxiterations",{"_index":3391,"title":{},"body":{"classes/UserActionDto.html":{}}}],["maxsize",{"_index":1720,"title":{},"body":{"injectables/ImageService.html":{}}}],["means",{"_index":3388,"title":{},"body":{"classes/UserActionDto.html":{}}}],["media",{"_index":4023,"title":{},"body":{"miscellaneous/variables.html":{}}}],["media_sync",{"_index":4039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mediasync",{"_index":4040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memorystorage",{"_index":238,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["merges",{"_index":3849,"title":{},"body":{"index.html":{}}}],["message",{"_index":809,"title":{},"body":{"interfaces/Category.html":{},"classes/ChatEventDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateUserDto.html":{},"classes/DirectMessageDto.html":{},"injectables/DtoGenService.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"classes/InternalError.html":{},"injectables/MyLogger.html":{},"classes/UserActionDto.html":{},"classes/UserError.html":{},"classes/WsExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["message.contents",{"_index":1524,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["message.date_sent",{"_index":1527,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["message.datesent",{"_index":3457,"title":{},"body":{"classes/UserActionDto.html":{}}}],["message.messagebody",{"_index":3296,"title":{},"body":{"classes/UserActionDto.html":{}}}],["message.recipient.userid",{"_index":3459,"title":{},"body":{"classes/UserActionDto.html":{}}}],["message.room_message",{"_index":1520,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["message.room_message.room_id",{"_index":1525,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["message.roomid",{"_index":3292,"title":{},"body":{"classes/UserActionDto.html":{}}}],["message.sender",{"_index":1523,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["message.sender.userid",{"_index":3293,"title":{},"body":{"classes/UserActionDto.html":{}}}],["message.sender.username",{"_index":3294,"title":{},"body":{"classes/UserActionDto.html":{}}}],["message_id",{"_index":1519,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{}}}],["message_received",{"_index":4075,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message_sent",{"_index":4073,"title":{},"body":{"miscellaneous/variables.html":{}}}],["messagebody",{"_index":1203,"title":{},"body":{"classes/DirectMessageDto.html":{},"injectables/DtoGenService.html":{},"classes/LiveChatMessageDto.html":{}}}],["messagebody.match(regexpattern",{"_index":1598,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["messagebodyisroomid",{"_index":1354,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["messagebodyisroomid(messagebody",{"_index":1385,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["messageid",{"_index":1365,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/LiveChatMessageDto.html":{},"classes/UserActionDto.html":{}}}],["messagereceived",{"_index":4076,"title":{},"body":{"miscellaneous/variables.html":{}}}],["messages",{"_index":122,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/UserActionDto.html":{},"interfaces/dmUser.html":{},"miscellaneous/variables.html":{}}}],["messages.length",{"_index":3278,"title":{},"body":{"classes/UserActionDto.html":{}}}],["messages.map((m",{"_index":1529,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["messages.map(async",{"_index":1330,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["messages[i",{"_index":1337,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["messagesent",{"_index":4074,"title":{},"body":{"miscellaneous/variables.html":{}}}],["messagesperhour",{"_index":120,"title":{"classes/MessagesPerHour.html":{}},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"coverage.html":{}}}],["messaging",{"_index":3823,"title":{},"body":{"index.html":{}}}],["metadata",{"_index":3699,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["method",{"_index":423,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SpotifyAuthController.html":{}}}],["methods",{"_index":183,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BullBoardService.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"injectables/EventQueueService.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"injectables/ImageService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"injectables/MyLogger.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/RecommendationsService.html":{},"injectables/RetryService.html":{},"injectables/RoomUsersService.html":{},"injectables/S3Service.html":{},"injectables/SongsService.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/WsExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["migration",{"_index":3790,"title":{},"body":{"index.html":{}}}],["milliseconds",{"_index":2358,"title":{},"body":{"injectables/RetryService.html":{},"classes/TasksProcessor.html":{}}}],["milliseconds}ms",{"_index":3103,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["min_duration",{"_index":11,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["minimum",{"_index":25,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["minutes",{"_index":1835,"title":{},"body":{"injectables/LiveService.html":{}}}],["miscellaneous",{"_index":3707,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":489,"title":{},"body":{"controllers/AuthController.html":{}}}],["mixed",{"_index":834,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["ml",{"_index":3157,"title":{},"body":{"classes/UserActionDto.html":{},"dependencies.html":{}}}],["mock",{"_index":1997,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["mockauthservice",{"_index":3592,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockbullqueue",{"_index":1999,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["mockconfigmodule",{"_index":1915,"title":{"modules/MockConfigModule.html":{}},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules.html":{},"overview.html":{}}}],["mockconfigservice",{"_index":1923,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockconfigservice.get(\"jwt_secret_key",{"_index":1985,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"miscellaneous/variables.html":{}}}],["mockdbutilsservice",{"_index":3593,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockdtogenservice",{"_index":3594,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mocking",{"_index":1926,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["mocking.ts",{"_index":1919,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mockprismamodule",{"_index":1989,"title":{"modules/MockPrismaModule.html":{}},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules.html":{},"overview.html":{}}}],["mockprismaservice",{"_index":1924,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockrecommendationsservice",{"_index":3595,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mocksongs",{"_index":2261,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["mockusersservice",{"_index":1925,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":2286,"title":{},"body":{"injectables/RecommendationsService.html":{},"index.html":{}}}],["modify_dm",{"_index":4017,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modifydirectmessage",{"_index":4018,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modularity",{"_index":3879,"title":{},"body":{"index.html":{}}}],["module",{"_index":306,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AutoModerationModule.html":{},"modules/BullBoardModule.html":{},"modules/BullConfigModule.html":{},"modules/DbUtilsModule.html":{},"modules/DmUsersModule.html":{},"modules/DtoGenModule.html":{},"modules/GenresModule.html":{},"modules/ImageModule.html":{},"modules/LiveModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RecommendationsModule.html":{},"modules/RetryModule.html":{},"modules/RoomQueueModule.html":{},"modules/RoomUsersModule.html":{},"modules/RoomsModule.html":{},"modules/S3Module.html":{},"modules/SearchModule.html":{},"modules/SongsModule.html":{},"modules/SpotifyAuthModule.html":{},"modules/SpotifyModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AutoModerationModule.html":{},"modules/BullBoardModule.html":{},"modules/BullConfigModule.html":{},"modules/DbUtilsModule.html":{},"modules/DmUsersModule.html":{},"modules/DtoGenModule.html":{},"modules/GenresModule.html":{},"modules/ImageModule.html":{},"modules/LiveModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RecommendationsModule.html":{},"modules/RetryModule.html":{},"modules/RoomQueueModule.html":{},"modules/RoomUsersModule.html":{},"modules/RoomsModule.html":{},"modules/S3Module.html":{},"modules/SearchModule.html":{},"modules/SongsModule.html":{},"modules/SpotifyAuthModule.html":{},"modules/SpotifyModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["module's",{"_index":3899,"title":{},"body":{"index.html":{}}}],["modules",{"_index":308,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AutoModerationModule.html":{},"modules/BullBoardModule.html":{},"modules/BullConfigModule.html":{},"modules/DbUtilsModule.html":{},"modules/DmUsersModule.html":{},"modules/DtoGenModule.html":{},"modules/GenresModule.html":{},"modules/ImageModule.html":{},"modules/LiveModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RecommendationsModule.html":{},"modules/RetryModule.html":{},"modules/RoomQueueModule.html":{},"modules/RoomUsersModule.html":{},"modules/RoomsModule.html":{},"modules/S3Module.html":{},"modules/SearchModule.html":{},"modules/SongsModule.html":{},"modules/SpotifyAuthModule.html":{},"modules/SpotifyModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["modules/db",{"_index":353,"title":{},"body":{"modules/AppModule.html":{},"modules/DmUsersModule.html":{},"injectables/DmUsersService.html":{},"modules/LiveModule.html":{},"modules/RoomUsersModule.html":{},"injectables/RoomUsersService.html":{},"modules/SpotifyAuthModule.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["modules/dto",{"_index":350,"title":{},"body":{"modules/AppModule.html":{},"modules/DmUsersModule.html":{},"injectables/DmUsersService.html":{},"modules/LiveModule.html":{},"modules/RoomUsersModule.html":{},"injectables/RoomUsersService.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["modules/genres/genres.module",{"_index":368,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/mailer",{"_index":380,"title":{},"body":{"modules/AppModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"dependencies.html":{}}}],["modules/mailer/dist/mailer.module",{"_index":3553,"title":{},"body":{"modules/UsersModule.html":{}}}],["modules/rooms/dto/room.dto",{"_index":3544,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["modules/rooms/dto/roomsong.dto",{"_index":1820,"title":{},"body":{"injectables/LiveService.html":{},"classes/QueueEventDto.html":{}}}],["modules/rooms/dto/songinfo.dto",{"_index":3545,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["modules/rooms/roomqueue/roomqueue.module",{"_index":1807,"title":{},"body":{"modules/LiveModule.html":{}}}],["modules/rooms/roomqueue/roomqueue.service",{"_index":1818,"title":{},"body":{"injectables/LiveService.html":{},"injectables/TasksService.html":{}}}],["modules/rooms/rooms.module",{"_index":349,"title":{},"body":{"modules/AppModule.html":{},"modules/LiveModule.html":{}}}],["modules/search/search.module",{"_index":367,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/songs/songs.module",{"_index":371,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/users/dto/dm.dto",{"_index":1279,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["modules/users/dto/user.dto",{"_index":1274,"title":{},"body":{"injectables/DmUsersService.html":{},"classes/LiveChatMessageDto.html":{},"injectables/RoomUsersService.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["modules/users/users.module",{"_index":347,"title":{},"body":{"modules/AppModule.html":{},"modules/DmUsersModule.html":{},"modules/LiveModule.html":{}}}],["modules/users/users.service",{"_index":1275,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["modulescontains",{"_index":3832,"title":{},"body":{"index.html":{}}}],["monay",{"_index":862,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["monitoring",{"_index":3820,"title":{},"body":{"index.html":{}}}],["more",{"_index":262,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/EventQueueService.html":{}}}],["morgan",{"_index":3689,"title":{},"body":{"dependencies.html":{}}}],["most_played",{"_index":161,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["mostplayed",{"_index":160,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["ms",{"_index":1829,"title":{},"body":{"injectables/LiveService.html":{},"miscellaneous/functions.html":{}}}],["multer",{"_index":239,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"dependencies.html":{}}}],["multermodule",{"_index":342,"title":{},"body":{"modules/AppModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["multermodule.register",{"_index":383,"title":{},"body":{"modules/AppModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["murlock",{"_index":373,"title":{},"body":{"modules/AppModule.html":{},"modules/RoomQueueModule.html":{},"modules/SpotifyModule.html":{},"modules/TasksModule.html":{},"classes/TasksProcessor.html":{},"dependencies.html":{}}}],["murlockmodule",{"_index":372,"title":{},"body":{"modules/AppModule.html":{},"modules/RoomQueueModule.html":{},"modules/SpotifyModule.html":{},"modules/TasksModule.html":{}}}],["murlockmodule.forroot",{"_index":386,"title":{},"body":{"modules/AppModule.html":{}}}],["murlockservice",{"_index":3017,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["music",{"_index":3840,"title":{},"body":{"index.html":{}}}],["mutual",{"_index":1674,"title":{},"body":{"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{}}}],["mvc",{"_index":3846,"title":{},"body":{"index.html":{}}}],["mylogger",{"_index":336,"title":{"injectables/MyLogger.html":{}},"body":{"modules/AppModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"injectables/MyLogger.html":{},"coverage.html":{},"overview.html":{}}}],["n",{"_index":1417,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["name",{"_index":215,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/BullBoardModule.html":{},"injectables/BullBoardService.html":{},"interfaces/Category.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"injectables/EventQueueService.html":{},"injectables/GenresService.html":{},"injectables/ImageService.html":{},"classes/InternalError.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyLogger.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/RecommendationsService.html":{},"injectables/RetryService.html":{},"injectables/RoomUsersService.html":{},"injectables/S3Service.html":{},"classes/SongInfoDto.html":{},"controllers/SongsController.html":{},"injectables/SongsService.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyUser.html":{},"modules/TasksModule.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/UserActionDto.html":{},"classes/UserError.html":{},"classes/WsExceptionFilter.html":{},"miscellaneous/functions.html":{}}}],["napccg..bkwtq",{"_index":2698,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["navigating",{"_index":3745,"title":{},"body":{"index.html":{}}}],["necessary",{"_index":1740,"title":{},"body":{"injectables/ImageService.html":{},"controllers/SpotifyAuthController.html":{}}}],["need",{"_index":2363,"title":{},"body":{"injectables/RetryService.html":{}}}],["needed",{"_index":2000,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"miscellaneous/variables.html":{}}}],["nest",{"_index":3715,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":379,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/axios",{"_index":360,"title":{},"body":{"modules/AppModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/SpotifyAuthModule.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"modules/SpotifyModule.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"dependencies.html":{}}}],["nestjs/bull",{"_index":742,"title":{},"body":{"modules/BullBoardModule.html":{},"injectables/BullBoardService.html":{},"modules/BullConfigModule.html":{},"modules/TasksModule.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":224,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/AutoModerationModule.html":{},"injectables/AutoModerationService.html":{},"modules/BullBoardModule.html":{},"injectables/BullBoardService.html":{},"modules/BullConfigModule.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"modules/DbUtilsModule.html":{},"modules/DmUsersModule.html":{},"injectables/DmUsersService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"injectables/EventQueueService.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"modules/ImageModule.html":{},"injectables/ImageService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/LiveModule.html":{},"injectables/LiveService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"injectables/MyLogger.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"modules/RetryModule.html":{},"injectables/RetryService.html":{},"modules/RoomQueueModule.html":{},"modules/RoomUsersModule.html":{},"injectables/RoomUsersService.html":{},"modules/RoomsModule.html":{},"modules/S3Module.html":{},"injectables/S3Service.html":{},"modules/SearchModule.html":{},"controllers/SongsController.html":{},"modules/SongsModule.html":{},"injectables/SongsService.html":{},"controllers/SpotifyAuthController.html":{},"modules/SpotifyAuthModule.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"modules/SpotifyModule.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UserActionDto.html":{},"modules/UsersModule.html":{},"classes/WsExceptionFilter.html":{},"dependencies.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["nestjs/config",{"_index":344,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/S3Service.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":3658,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":551,"title":{},"body":{"modules/AuthModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":549,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":234,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"dependencies.html":{}}}],["nestjs/schedule",{"_index":370,"title":{},"body":{"modules/AppModule.html":{},"injectables/LiveService.html":{},"injectables/TasksService.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":29,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"classes/ChatEventDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/DirectMessageDto.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"classes/FollowersAndFollowing.html":{},"controllers/GenresController.html":{},"classes/GenresWithCount.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/LinksWithCount.html":{},"classes/LiveChatMessageDto.html":{},"classes/LoginBody.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/PlaybackEventDto.html":{},"controllers/ProfileController.html":{},"classes/QueueEventDto.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/RoomSongDto.html":{},"classes/RoomsData.html":{},"classes/SearchHistoryDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/SongInfosWithCount.html":{},"controllers/SongsController.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserDto-1.html":{},"classes/UpdateUserDto-2.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{},"classes/VoteDto.html":{},"dependencies.html":{}}}],["nestjs/testing",{"_index":1922,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["nestjs/websockets",{"_index":3570,"title":{},"body":{"classes/WsExceptionFilter.html":{},"dependencies.html":{}}}],["new",{"_index":289,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BullBoardService.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateRoomDto.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"injectables/EventQueueService.html":{},"injectables/ImageService.html":{},"injectables/JwtStrategy.html":{},"injectables/LiveService.html":{},"classes/LoginBody.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"injectables/MyLogger.html":{},"injectables/PrismaService.html":{},"injectables/ProfileService.html":{},"injectables/RecommendationsService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RetryService.html":{},"injectables/RoomUsersService.html":{},"injectables/S3Service.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/TasksProcessor.html":{},"classes/UserActionDto.html":{},"coverage.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["newbookmark",{"_index":3306,"title":{},"body":{"classes/UserActionDto.html":{}}}],["newmessage",{"_index":3287,"title":{},"body":{"classes/UserActionDto.html":{}}}],["newmessage.message_id",{"_index":3289,"title":{},"body":{"classes/UserActionDto.html":{}}}],["newplaylist",{"_index":3089,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["newreaction",{"_index":3317,"title":{},"body":{"classes/UserActionDto.html":{}}}],["newtoken",{"_index":530,"title":{},"body":{"controllers/AuthController.html":{}}}],["next",{"_index":2371,"title":{},"body":{"injectables/RetryService.html":{}}}],["node",{"_index":3761,"title":{},"body":{"index.html":{}}}],["node.js",{"_index":3717,"title":{},"body":{"index.html":{}}}],["node_modulesdependency",{"_index":3786,"title":{},"body":{"index.html":{}}}],["nodejs",{"_index":3754,"title":{},"body":{"index.html":{}}}],["none",{"_index":1677,"title":{},"body":{"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{}}}],["nonfriendprivateroomids",{"_index":1468,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["nonfriendprivateroomids.includes(id",{"_index":1475,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["nonfriendprivaterooms",{"_index":1466,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["nonfriends",{"_index":1453,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["nonfriends.map((f",{"_index":1462,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["nonprivateroomids",{"_index":1474,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["notifications",{"_index":2366,"title":{},"body":{"injectables/RetryService.html":{}}}],["notin",{"_index":1412,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["now",{"_index":1839,"title":{},"body":{"injectables/LiveService.html":{},"controllers/SpotifyAuthController.html":{}}}],["npm",{"_index":3725,"title":{},"body":{"index.html":{}}}],["nsfw",{"_index":951,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["null",{"_index":487,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChatEventDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"injectables/GenresService.html":{},"injectables/LiveService.html":{},"classes/LoginBody.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"classes/PlaybackEventDto.html":{},"injectables/RecommendationsService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RoomUsersService.html":{},"classes/SongInfoDto.html":{},"controllers/SongsController.html":{},"injectables/SongsService.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UserActionDto.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{},"miscellaneous/variables.html":{}}}],["nullable",{"_index":826,"title":{},"body":{"classes/ChatEventDto.html":{},"classes/PlaybackEventDto.html":{},"classes/SongInfoDto.html":{}}}],["num_followers",{"_index":1056,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["num_following",{"_index":1059,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["num_songs",{"_index":169,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["num_upvotes",{"_index":170,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["number",{"_index":14,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateRoomDto.html":{},"classes/DirectMessageDto.html":{},"injectables/DtoGenService.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"injectables/ImageService.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/LinksWithCount.html":{},"injectables/LiveService.html":{},"classes/LoginBody.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/PlaybackEventDto.html":{},"classes/QueueEventDto.html":{},"injectables/RecommendationsService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RetryService.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/RoomSongDto.html":{},"classes/RoomsData.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{},"classes/SongInfosWithCount.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/SpotifyUser.html":{},"classes/TasksProcessor.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{},"classes/VoteDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["number(_room.room_size",{"_index":3230,"title":{},"body":{"classes/UserActionDto.html":{}}}],["number(r.room_size",{"_index":1507,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["number.positive_infinity",{"_index":2374,"title":{},"body":{"injectables/RetryService.html":{}}}],["numbers",{"_index":50,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["oauth",{"_index":2730,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["obj",{"_index":2847,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["obj[\"expo",{"_index":2849,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["obj[\"ip",{"_index":2852,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["obj[\"redirect",{"_index":2853,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["object",{"_index":42,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DmUsersService.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/LinksWithCount.html":{},"classes/LoginBody.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"injectables/RecommendationsService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RetryService.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"injectables/RoomUsersService.html":{},"classes/RoomsData.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfosWithCount.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["object.entries(playlists",{"_index":2298,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["object.entries(playlistscores",{"_index":2327,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["object.entries(this.playlists",{"_index":2317,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["object.keys(genrecounts).sort",{"_index":3442,"title":{},"body":{"classes/UserActionDto.html":{}}}],["object.keys(song1).reduce((sum",{"_index":2306,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["object.keys(song2).reduce((sum",{"_index":2314,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["occurred",{"_index":1567,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["on(\"error",{"_index":789,"title":{},"body":{"injectables/BullBoardService.html":{}}}],["one",{"_index":3903,"title":{},"body":{"index.html":{}}}],["oneof",{"_index":847,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["onmoduledestroy",{"_index":2080,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":752,"title":{},"body":{"injectables/BullBoardService.html":{},"injectables/PrismaService.html":{}}}],["operation",{"_index":202,"title":{},"body":{"controllers/AppController.html":{},"injectables/RetryService.html":{}}}],["operationid",{"_index":190,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/SpotifyAuthController.html":{}}}],["operations",{"_index":3865,"title":{},"body":{"index.html":{}}}],["optional",{"_index":216,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BullBoardService.html":{},"interfaces/Category.html":{},"classes/ChatEventDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateRoomDto.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"injectables/EventQueueService.html":{},"injectables/GenresService.html":{},"injectables/ImageService.html":{},"classes/InternalError.html":{},"injectables/JwtStrategy.html":{},"classes/LiveChatMessageDto.html":{},"injectables/LocalStrategy.html":{},"injectables/MyLogger.html":{},"classes/PlaybackEventDto.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/QueueEventDto.html":{},"injectables/RecommendationsService.html":{},"injectables/RetryService.html":{},"classes/RoomDto.html":{},"classes/RoomSongDto.html":{},"injectables/RoomUsersService.html":{},"injectables/S3Service.html":{},"classes/SongInfoDto.html":{},"injectables/SongsService.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyUser.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/UserDto.html":{},"classes/UserError.html":{},"classes/WsExceptionFilter.html":{},"miscellaneous/functions.html":{}}}],["optionally",{"_index":2111,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/RetryService.html":{}}}],["options",{"_index":2107,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/RetryService.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["order",{"_index":805,"title":{},"body":{"interfaces/Category.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{}}}],["orderby",{"_index":1005,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/UserActionDto.html":{}}}],["organize",{"_index":3873,"title":{},"body":{"index.html":{}}}],["organizing",{"_index":3834,"title":{},"body":{"index.html":{}}}],["origin_jti",{"_index":625,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["otherwise",{"_index":3889,"title":{},"body":{"index.html":{}}}],["out",{"_index":339,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AutoModerationModule.html":{},"modules/BullBoardModule.html":{},"modules/DbUtilsModule.html":{},"modules/DmUsersModule.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"modules/GenresModule.html":{},"modules/ImageModule.html":{},"modules/LiveModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RecommendationsModule.html":{},"modules/RetryModule.html":{},"modules/RoomQueueModule.html":{},"modules/RoomUsersModule.html":{},"modules/RoomsModule.html":{},"modules/S3Module.html":{},"modules/SearchModule.html":{},"modules/SongsModule.html":{},"modules/SpotifyAuthModule.html":{},"modules/SpotifyModule.html":{},"modules/TasksModule.html":{},"classes/UserActionDto.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["output",{"_index":3782,"title":{},"body":{"index.html":{}}}],["outside",{"_index":748,"title":{},"body":{"modules/BullBoardModule.html":{}}}],["overall",{"_index":2357,"title":{},"body":{"injectables/RetryService.html":{}}}],["overview",{"_index":3928,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owned",{"_index":915,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["owner",{"_index":3182,"title":{},"body":{"classes/UserActionDto.html":{}}}],["p",{"_index":3694,"title":{},"body":{"dependencies.html":{}}}],["p_message_id",{"_index":1546,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{}}}],["package",{"_index":3644,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["package.jsonlists",{"_index":3759,"title":{},"body":{"index.html":{}}}],["padding",{"_index":2837,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["param",{"_index":1090,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/ImageService.html":{},"controllers/ProfileController.html":{}}}],["param(\"roomid",{"_index":706,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"classes/UserActionDto.html":{}}}],["param(\"username",{"_index":2193,"title":{},"body":{"controllers/ProfileController.html":{}}}],["param.split",{"_index":1091,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["parameter",{"_index":2850,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["parameters",{"_index":214,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BullBoardService.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"injectables/EventQueueService.html":{},"injectables/GenresService.html":{},"injectables/ImageService.html":{},"classes/InternalError.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyLogger.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/RecommendationsService.html":{},"injectables/RetryService.html":{},"injectables/RoomUsersService.html":{},"injectables/S3Service.html":{},"injectables/SongsService.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyUser.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/UserError.html":{},"classes/WsExceptionFilter.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":654,"title":{},"body":{"injectables/AuthService.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/S3Service.html":{}}}],["params.creator",{"_index":886,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["params.creator_name",{"_index":953,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["params.creator_username",{"_index":954,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["params.description",{"_index":958,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["params.followers",{"_index":1057,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["params.following",{"_index":1054,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["params.is_priv",{"_index":963,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["params.is_scheduled",{"_index":964,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["params.participant_count",{"_index":971,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["params.q",{"_index":890,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["params.tags.split",{"_index":977,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["params[key",{"_index":1092,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["paramsstring",{"_index":1086,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["parent",{"_index":2462,"title":{},"body":{"classes/RoomDto.html":{}}}],["parent_room_id",{"_index":3366,"title":{},"body":{"classes/UserActionDto.html":{}}}],["parentroomdto",{"_index":3417,"title":{},"body":{"classes/UserActionDto.html":{}}}],["parentroomdto.childrenroomids",{"_index":3419,"title":{},"body":{"classes/UserActionDto.html":{}}}],["parentroomid",{"_index":2446,"title":{},"body":{"classes/RoomDto.html":{}}}],["parseint(e.headers[\"retry",{"_index":2394,"title":{},"body":{"injectables/RetryService.html":{}}}],["part",{"_index":863,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["partialtype",{"_index":3126,"title":{},"body":{"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserDto-1.html":{},"classes/UpdateUserDto-2.html":{},"classes/UpdateUserProfileDto.html":{}}}],["partialtype(createroomdto",{"_index":3125,"title":{},"body":{"classes/UpdateRoomDto.html":{}}}],["partialtype(createuserdto",{"_index":3129,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(userdto",{"_index":3132,"title":{},"body":{"classes/UpdateUserDto-1.html":{},"classes/UpdateUserDto-2.html":{}}}],["partialtype(userprofiledto",{"_index":3138,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["participant",{"_index":79,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"injectables/DmUsersService.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/UserActionDto.html":{},"interfaces/dmUser.html":{}}}],["participant1",{"_index":1384,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["participant2",{"_index":1381,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["participant2]).then",{"_index":1565,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["participant_count",{"_index":943,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{}}}],["participantid",{"_index":1247,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["participants",{"_index":75,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["participants_per_hour",{"_index":102,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["participantsperhourdto",{"_index":74,"title":{"classes/ParticipantsPerHourDto.html":{}},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"coverage.html":{}}}],["participate",{"_index":972,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateUserDto.html":{},"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{},"miscellaneous/variables.html":{}}}],["participate.room_id",{"_index":973,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["participate_id",{"_index":3246,"title":{},"body":{"classes/UserActionDto.html":{}}}],["participation",{"_index":174,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["pass",{"_index":404,"title":{},"body":{"modules/AppModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/UsersModule.html":{}}}],["passed",{"_index":703,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RetryService.html":{},"miscellaneous/typealiases.html":{}}}],["passing",{"_index":2106,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/RetryService.html":{}}}],["passport",{"_index":1771,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":548,"title":{},"body":{"modules/AuthModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["passportstrategy",{"_index":1772,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1764,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":602,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["patch",{"_index":2177,"title":{},"body":{"controllers/ProfileController.html":{}}}],["patchprofile",{"_index":2136,"title":{},"body":{"controllers/ProfileController.html":{}}}],["patchprofile(req",{"_index":2158,"title":{},"body":{"controllers/ProfileController.html":{}}}],["path",{"_index":1081,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["pathandquery",{"_index":1083,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["pathandquery.split(\"/\").slice",{"_index":1085,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["paths",{"_index":3853,"title":{},"body":{"index.html":{}}}],["pathsegment",{"_index":1077,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["pause_media",{"_index":4085,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pausemedia",{"_index":4086,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pausetime",{"_index":2501,"title":{},"body":{"classes/RoomSongDto.html":{}}}],["payload",{"_index":501,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["payload.email",{"_index":1780,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.id",{"_index":1779,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":1781,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pending",{"_index":1676,"title":{},"body":{"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{}}}],["per",{"_index":95,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["per_day",{"_index":97,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["per_hour",{"_index":124,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["percentage",{"_index":151,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["percentage_change",{"_index":48,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["performed",{"_index":2631,"title":{},"body":{"classes/SongInfoDto.html":{},"classes/UserActionDto.html":{}}}],["performing",{"_index":2388,"title":{},"body":{"injectables/RetryService.html":{}}}],["performredirect",{"_index":2735,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["permission",{"_index":3331,"title":{},"body":{"classes/UserActionDto.html":{}}}],["person",{"_index":2231,"title":{},"body":{"injectables/ProfileService.html":{}}}],["pg_catalog.\"default",{"_index":2646,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["pg_trgm",{"_index":856,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["picker",{"_index":803,"title":{},"body":{"interfaces/Category.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{}}}],["picture",{"_index":2900,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["picture.png",{"_index":2907,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["pid",{"_index":1204,"title":{},"body":{"classes/DirectMessageDto.html":{},"injectables/DtoGenService.html":{}}}],["ping",{"_index":4000,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pipes",{"_index":3827,"title":{},"body":{"index.html":{}}}],["placed",{"_index":3914,"title":{},"body":{"index.html":{}}}],["play",{"_index":1897,"title":{},"body":{"injectables/LiveService.html":{}}}],["play_media",{"_index":4083,"title":{},"body":{"miscellaneous/variables.html":{}}}],["playback",{"_index":4024,"title":{},"body":{"miscellaneous/variables.html":{}}}],["playbackeventdto",{"_index":1814,"title":{"classes/PlaybackEventDto.html":{}},"body":{"injectables/LiveService.html":{},"classes/PlaybackEventDto.html":{},"coverage.html":{}}}],["played",{"_index":137,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"injectables/LiveService.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/PlaybackEventDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["played'})@isnumber",{"_index":2621,"title":{},"body":{"classes/SongAnalyticsDto.html":{}}}],["playing",{"_index":2450,"title":{},"body":{"classes/RoomDto.html":{},"classes/SongInfoDto.html":{}}}],["playlist",{"_index":72,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"injectables/RecommendationsService.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/TasksProcessor.html":{},"miscellaneous/variables.html":{}}}],["playlist'})@isnumber",{"_index":2434,"title":{},"body":{"classes/RoomAnalyticsQueueDto.html":{}}}],["playlist.description",{"_index":3087,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["playlist.id",{"_index":3068,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["playlist.name",{"_index":3084,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["playlist_id",{"_index":3055,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["playlistindex",{"_index":2502,"title":{},"body":{"classes/RoomSongDto.html":{}}}],["playlistname",{"_index":2297,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["playlists",{"_index":2262,"title":{},"body":{"injectables/RecommendationsService.html":{},"classes/TasksProcessor.html":{}}}],["playlists.length",{"_index":3076,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["playlists.map(async",{"_index":3066,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["playlistscores",{"_index":2316,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["playlistscores[playlistname",{"_index":2324,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["playlistscreationpromises",{"_index":3080,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["playlistscreationpromises.push",{"_index":3085,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["playlisttrackids",{"_index":3088,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["playlisttracks",{"_index":3069,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["playlisttrackspromises",{"_index":3065,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["playmedia",{"_index":4084,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plays",{"_index":138,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["please",{"_index":713,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["plugins",{"_index":3741,"title":{},"body":{"index.html":{}}}],["pmid",{"_index":1362,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["png",{"_index":274,"title":{},"body":{"controllers/AppController.html":{},"injectables/ImageService.html":{}}}],["point",{"_index":3811,"title":{},"body":{"index.html":{}}}],["point2",{"_index":3428,"title":{},"body":{"classes/UserActionDto.html":{}}}],["pool",{"_index":3959,"title":{},"body":{"miscellaneous/variables.html":{}}}],["port",{"_index":400,"title":{},"body":{"modules/AppModule.html":{},"injectables/BullBoardService.html":{},"modules/BullConfigModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/UsersModule.html":{}}}],["post",{"_index":220,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"index.html":{}}}],["post(\":username/follow",{"_index":2195,"title":{},"body":{"controllers/ProfileController.html":{}}}],["post(\":username/unfollow",{"_index":2197,"title":{},"body":{"controllers/ProfileController.html":{}}}],["post(\"login",{"_index":482,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"refresh",{"_index":521,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"register",{"_index":506,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"upload",{"_index":261,"title":{},"body":{"controllers/AppController.html":{}}}],["post('login')@apioperation({summary",{"_index":418,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh')@apioperation({summary",{"_index":446,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register')@apioperation({summary",{"_index":460,"title":{},"body":{"controllers/AuthController.html":{}}}],["pre",{"_index":2836,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["prefer",{"_index":2373,"title":{},"body":{"injectables/RetryService.html":{}}}],["preferences",{"_index":1162,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{}}}],["prefix",{"_index":412,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GenresController.html":{},"controllers/ProfileController.html":{},"controllers/SongsController.html":{},"controllers/SpotifyAuthController.html":{}}}],["presigner",{"_index":2576,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["prevent",{"_index":2701,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["previews",{"_index":115,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["primary",{"_index":2653,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["prisma",{"_index":583,"title":{},"body":{"injectables/AuthService.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateUserDto-1.html":{},"injectables/DtoGenService.html":{},"injectables/GenresService.html":{},"classes/LoginBody.html":{},"injectables/ProfileService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RoomUsersService.html":{},"injectables/SongsService.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/TasksProcessor.html":{},"classes/UserActionDto.html":{},"index.html":{},"interfaces/liveChatUser.html":{}}}],["prisma.batchpayload",{"_index":3312,"title":{},"body":{"classes/UserActionDto.html":{}}}],["prisma.bookmarkcreateinput",{"_index":3305,"title":{},"body":{"classes/UserActionDto.html":{}}}],["prisma.bookmarkdeletemanyargs",{"_index":3310,"title":{},"body":{"classes/UserActionDto.html":{}}}],["prisma.jsonvalue",{"_index":1181,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["prisma.messagecreateinput",{"_index":3286,"title":{},"body":{"classes/UserActionDto.html":{}}}],["prisma.playlistcreateinput",{"_index":3058,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["prisma.prismapromise",{"_index":3081,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["prisma.roomupdateinput",{"_index":3185,"title":{},"body":{"classes/UserActionDto.html":{}}}],["prisma.service",{"_index":2076,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma.userscreateinput",{"_index":674,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["prisma/.../prisma.service.ts",{"_index":3948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prisma/client",{"_index":618,"title":{},"body":{"injectables/AuthService.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateUserDto-1.html":{},"injectables/DtoGenService.html":{},"classes/LoginBody.html":{},"injectables/PrismaService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RoomUsersService.html":{},"injectables/SongsService.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/TasksProcessor.html":{},"classes/UserActionDto.html":{},"dependencies.html":{},"interfaces/liveChatUser.html":{}}}],["prisma/prisma.module",{"_index":346,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"modules/GenresModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RoomQueueModule.html":{},"modules/RoomUsersModule.html":{},"modules/RoomsModule.html":{},"modules/SearchModule.html":{},"modules/SongsModule.html":{},"modules/SpotifyAuthModule.html":{},"modules/SpotifyModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["prisma/prisma.module.ts",{"_index":2075,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/prisma.service",{"_index":617,"title":{},"body":{"injectables/AuthService.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{},"injectables/GenresService.html":{},"classes/LoginBody.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RoomUsersService.html":{},"injectables/SongsService.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/TasksProcessor.html":{},"classes/UserActionDto.html":{},"interfaces/liveChatUser.html":{}}}],["prisma/prisma.service.ts",{"_index":2078,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["prisma/prisma.service.ts:17",{"_index":2083,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prisma/prisma.service.ts:30",{"_index":2085,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prisma/prisma.service.ts:68",{"_index":2084,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaclient",{"_index":2079,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismacontains",{"_index":3788,"title":{},"body":{"index.html":{}}}],["prismamodule",{"_index":326,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"modules/GenresModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RoomQueueModule.html":{},"modules/RoomUsersModule.html":{},"modules/RoomsModule.html":{},"modules/SearchModule.html":{},"modules/SongsModule.html":{},"modules/SpotifyAuthModule.html":{},"modules/SpotifyModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":584,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AuthService.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{},"injectables/GenresService.html":{},"classes/LoginBody.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RoomUsersService.html":{},"injectables/SongsService.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/TasksProcessor.html":{},"classes/UserActionDto.html":{},"coverage.html":{},"index.html":{},"interfaces/liveChatUser.html":{},"overview.html":{}}}],["prismatypes",{"_index":619,"title":{},"body":{"injectables/AuthService.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RoomUsersService.html":{},"injectables/SongsService.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/TasksProcessor.html":{},"classes/UserActionDto.html":{},"interfaces/liveChatUser.html":{}}}],["prismatypes.blocked",{"_index":917,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{}}}],["prismatypes.bookmark",{"_index":3302,"title":{},"body":{"classes/UserActionDto.html":{}}}],["prismatypes.chat_reactions",{"_index":3318,"title":{},"body":{"classes/UserActionDto.html":{}}}],["prismatypes.child_room",{"_index":3364,"title":{},"body":{"classes/UserActionDto.html":{}}}],["prismatypes.friends",{"_index":1454,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["prismatypes.message",{"_index":1370,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{}}}],["prismatypes.playlist",{"_index":3031,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["prismatypes.private_message",{"_index":1544,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{}}}],["prismatypes.queue",{"_index":3430,"title":{},"body":{"classes/UserActionDto.html":{}}}],["prismatypes.room",{"_index":922,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{}}}],["prismatypes.room_message",{"_index":1517,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{}}}],["prismatypes.song",{"_index":2680,"title":{},"body":{"injectables/SongsService.html":{},"classes/TasksProcessor.html":{},"classes/UserActionDto.html":{}}}],["prismatypes.users",{"_index":692,"title":{},"body":{"injectables/AuthService.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UserActionDto.html":{}}}],["private",{"_index":244,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/BullBoardService.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"injectables/EventQueueService.html":{},"injectables/LiveService.html":{},"classes/LoginBody.html":{},"injectables/MyLogger.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/RecommendationsService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RoomUsersService.html":{},"injectables/S3Service.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/UserActionDto.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["private_message",{"_index":1163,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserActionDto.html":{},"miscellaneous/variables.html":{}}}],["private_room",{"_index":969,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{},"miscellaneous/variables.html":{}}}],["private_room.room_id",{"_index":970,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["probability",{"_index":111,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["probability_of_return",{"_index":113,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["process",{"_index":1015,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/ImageService.html":{},"classes/TasksProcessor.html":{},"index.html":{}}}],["process(\"fix",{"_index":3104,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["process(\"get",{"_index":3092,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["process(\"import",{"_index":3024,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["process(\"process",{"_index":3019,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["process('fix",{"_index":3005,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["process('import",{"_index":3011,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["process('process",{"_index":3008,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["process.env.email_host",{"_index":399,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["process.env.email_password",{"_index":405,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["process.env.email_port",{"_index":401,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["process.env.email_username",{"_index":403,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["process.env.jwt_secret_key",{"_index":557,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["process.exit(0",{"_index":2097,"title":{},"body":{"injectables/PrismaService.html":{}}}],["process.exit(1",{"_index":2129,"title":{},"body":{"injectables/PrismaService.html":{}}}],["process.on(\"sigint",{"_index":2090,"title":{},"body":{"injectables/PrismaService.html":{}}}],["processed",{"_index":1641,"title":{},"body":{"injectables/EventQueueService.html":{},"injectables/ImageService.html":{}}}],["processedimagebuffer",{"_index":1735,"title":{},"body":{"injectables/ImageService.html":{}}}],["processedimagebuffer.length",{"_index":1744,"title":{},"body":{"injectables/ImageService.html":{}}}],["processing",{"_index":1627,"title":{},"body":{"injectables/EventQueueService.html":{},"classes/TasksProcessor.html":{}}}],["processor",{"_index":3014,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["processor(\"task",{"_index":3018,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["product",{"_index":2945,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["production",{"_index":3730,"title":{},"body":{"index.html":{}}}],["profile",{"_index":2132,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["profile.controller",{"_index":2205,"title":{},"body":{"modules/ProfileModule.html":{}}}],["profile.service",{"_index":2181,"title":{},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{}}}],["profile_name",{"_index":1391,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{}}}],["profile_picture",{"_index":1164,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{}}}],["profile_picture_url",{"_index":1393,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{}}}],["profilecontroller",{"_index":2130,"title":{"controllers/ProfileController.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"coverage.html":{}}}],["profilemodule",{"_index":2199,"title":{"modules/ProfileModule.html":{}},"body":{"modules/ProfileModule.html":{},"modules.html":{},"overview.html":{}}}],["profileservice",{"_index":2180,"title":{"injectables/ProfileService.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"overview.html":{}}}],["programming",{"_index":3744,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":3716,"title":{},"body":{"index.html":{}}}],["project",{"_index":3739,"title":{},"body":{"index.html":{}}}],["project's",{"_index":3747,"title":{},"body":{"index.html":{}}}],["promise",{"_index":588,"title":{},"body":{"injectables/AuthService.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"injectables/EventQueueService.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"injectables/ImageService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RetryService.html":{},"injectables/RoomUsersService.html":{},"injectables/S3Service.html":{},"controllers/SongsController.html":{},"injectables/SongsService.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"injectables/TasksService.html":{},"classes/UserActionDto.html":{},"interfaces/dmUser.html":{},"miscellaneous/functions.html":{},"interfaces/liveChatUser.html":{}}}],["promise((a",{"_index":2379,"title":{},"body":{"injectables/RetryService.html":{}}}],["promise((resolve",{"_index":1827,"title":{},"body":{"injectables/LiveService.html":{},"injectables/RetryService.html":{}}}],["promise.all",{"_index":1096,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DmUsersService.html":{},"classes/TasksProcessor.html":{},"interfaces/dmUser.html":{}}}],["promise.all(playlistscreationpromises",{"_index":3090,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["proom",{"_index":1492,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"classes/AllTimeSessionDataDto.html":{},"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/BullBoardService.html":{},"interfaces/Category.html":{},"classes/ChatEventDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/DirectMessageDto.html":{},"injectables/DmUsersService.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"injectables/EventQueueService.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/LinksWithCount.html":{},"classes/LiveChatMessageDto.html":{},"classes/LoginBody.html":{},"classes/MessagesPerHour.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"injectables/MyLogger.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/PlaybackEventDto.html":{},"injectables/PrismaService.html":{},"classes/QueueEventDto.html":{},"injectables/RecommendationsService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/RoomSongDto.html":{},"injectables/RoomUsersService.html":{},"classes/RoomsData.html":{},"injectables/S3Service.html":{},"classes/SearchHistoryDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/SongInfosWithCount.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/SpotifyUser.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{},"classes/VoteDto.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["property",{"_index":767,"title":{},"body":{"injectables/BullBoardService.html":{}}}],["provide",{"_index":1987,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["provider",{"_index":616,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"dependencies.html":{}}}],["providers",{"_index":313,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AutoModerationModule.html":{},"modules/BullBoardModule.html":{},"modules/DbUtilsModule.html":{},"modules/DmUsersModule.html":{},"modules/DtoGenModule.html":{},"modules/GenresModule.html":{},"modules/ImageModule.html":{},"modules/LiveModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RecommendationsModule.html":{},"modules/RetryModule.html":{},"modules/RoomQueueModule.html":{},"modules/RoomUsersModule.html":{},"modules/RoomsModule.html":{},"modules/S3Module.html":{},"modules/SearchModule.html":{},"modules/SongsModule.html":{},"modules/SpotifyAuthModule.html":{},"modules/SpotifyModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["public",{"_index":3162,"title":{},"body":{"classes/UserActionDto.html":{}}}],["public.song",{"_index":2642,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["public_room",{"_index":1477,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{},"miscellaneous/variables.html":{}}}],["put",{"_index":2176,"title":{},"body":{"controllers/ProfileController.html":{}}}],["putprofile",{"_index":2137,"title":{},"body":{"controllers/ProfileController.html":{}}}],["putprofile(req",{"_index":2167,"title":{},"body":{"controllers/ProfileController.html":{}}}],["q",{"_index":893,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["quality",{"_index":1738,"title":{},"body":{"injectables/ImageService.html":{}}}],["query",{"_index":939,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"controllers/SpotifyAuthController.html":{},"classes/UserActionDto.html":{}}}],["query(\"code",{"_index":2736,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["query(\"state",{"_index":2737,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["queryparams",{"_index":1078,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["queryraw",{"_index":3974,"title":{},"body":{"miscellaneous/variables.html":{}}}],["queryrawunsafe",{"_index":3975,"title":{},"body":{"miscellaneous/variables.html":{}}}],["question",{"_index":1673,"title":{},"body":{"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{}}}],["queue",{"_index":70,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"modules/BullBoardModule.html":{},"injectables/BullBoardService.html":{},"injectables/EventQueueService.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"injectables/LiveService.html":{},"classes/MessagesPerHour.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"modules/TasksModule.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/UserActionDto.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["queue.length",{"_index":3268,"title":{},"body":{"classes/UserActionDto.html":{}}}],["queue[0",{"_index":3269,"title":{},"body":{"classes/UserActionDto.html":{}}}],["queue_lock_timeout",{"_index":3625,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["queue_state",{"_index":4064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["queueasroomsongdto",{"_index":1882,"title":{},"body":{"injectables/LiveService.html":{}}}],["queued",{"_index":65,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["queueeventdto",{"_index":2247,"title":{"classes/QueueEventDto.html":{}},"body":{"classes/QueueEventDto.html":{},"coverage.html":{}}}],["queues",{"_index":777,"title":{},"body":{"injectables/BullBoardService.html":{},"injectables/LiveService.html":{},"classes/UserActionDto.html":{},"index.html":{}}}],["queues.map((queue",{"_index":3271,"title":{},"body":{"classes/UserActionDto.html":{}}}],["queuestate",{"_index":4065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["r",{"_index":1486,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{}}}],["r.child_room_child_room_parent_room_idtoroom",{"_index":1511,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["r.child_room_child_room_parent_room_idtoroom.map",{"_index":1485,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["r.date_created",{"_index":1506,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["r.description",{"_index":1496,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["r.explicit",{"_index":1499,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["r.is_temporary",{"_index":1497,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["r.message_id",{"_index":1536,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["r.name",{"_index":1495,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["r.nsfw",{"_index":1500,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["r.participate.length",{"_index":1494,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["r.playlist_id",{"_index":1504,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["r.playlist_photo",{"_index":1501,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["r.private_room",{"_index":1493,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{}}}],["r.public_room",{"_index":3211,"title":{},"body":{"classes/UserActionDto.html":{}}}],["r.room_creator",{"_index":1479,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{}}}],["r.room_id",{"_index":1447,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{}}}],["r.room_language",{"_index":1498,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["r.scheduled_room",{"_index":1488,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{}}}],["r.scheduled_room.end_date",{"_index":1513,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["r.scheduled_room.start_date",{"_index":1512,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["r.tags",{"_index":1502,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["rank",{"_index":142,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["rate",{"_index":2384,"title":{},"body":{"injectables/RetryService.html":{}}}],["rb",{"_index":457,"title":{},"body":{"controllers/AuthController.html":{}}}],["rb.refreshtoken",{"_index":528,"title":{},"body":{"controllers/AuthController.html":{}}}],["reaction",{"_index":3320,"title":{},"body":{"classes/UserActionDto.html":{}}}],["reactions",{"_index":125,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["reactions_sent",{"_index":126,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["readme.mdoverview",{"_index":3762,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":245,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BullBoardService.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"injectables/EventQueueService.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"injectables/LiveService.html":{},"classes/LoginBody.html":{},"injectables/MyLogger.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RoomUsersService.html":{},"controllers/SongsController.html":{},"injectables/SongsService.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/UserActionDto.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["received",{"_index":140,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"injectables/PrismaService.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["received'})@isnumber",{"_index":2617,"title":{},"body":{"classes/SongAnalyticsDto.html":{}}}],["recent",{"_index":1671,"title":{},"body":{"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{}}}],["recent_rooms",{"_index":1400,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{}}}],["recent_rooms.count",{"_index":1435,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["recent_rooms.data",{"_index":1436,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["recipient",{"_index":1205,"title":{},"body":{"classes/DirectMessageDto.html":{},"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{}}}],["recipient.userid",{"_index":1554,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["recommendations.service",{"_index":2258,"title":{},"body":{"modules/RecommendationsModule.html":{}}}],["recommendations/recommendations.module",{"_index":375,"title":{},"body":{"modules/AppModule.html":{},"modules/RoomsModule.html":{},"modules/UsersModule.html":{}}}],["recommendationsmodule",{"_index":327,"title":{"modules/RecommendationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/RecommendationsModule.html":{},"modules/RoomsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["recommendationsservice",{"_index":1978,"title":{"injectables/RecommendationsService.html":{}},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"coverage.html":{},"overview.html":{}}}],["reconnect",{"_index":1313,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["reconnection",{"_index":2122,"title":{},"body":{"injectables/PrismaService.html":{}}}],["record",{"_index":1079,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"controllers/SpotifyAuthController.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{}}}],["record.search_term",{"_index":1022,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["record.search_term.trim",{"_index":1021,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["record.search_time",{"_index":1023,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["record.url",{"_index":1024,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["recorded",{"_index":2068,"title":{},"body":{"classes/PlaybackEventDto.html":{}}}],["records",{"_index":1016,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["redirect",{"_index":2729,"title":{},"body":{"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"miscellaneous/variables.html":{}}}],["redirect_uri",{"_index":2861,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["redirects",{"_index":2731,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["redirecturi",{"_index":2743,"title":{},"body":{"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["redis",{"_index":794,"title":{},"body":{"modules/BullConfigModule.html":{},"dependencies.html":{}}}],["redis://localhost:6379",{"_index":388,"title":{},"body":{"modules/AppModule.html":{}}}],["redisoptions",{"_index":387,"title":{},"body":{"modules/AppModule.html":{}}}],["reduce((params",{"_index":1089,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["ref",{"_index":848,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["reflect",{"_index":3698,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":414,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["refresh'})@apibody({type",{"_index":450,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh(@body",{"_index":522,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh(rb",{"_index":444,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh_token",{"_index":2816,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["refreshaccesstoken",{"_index":2783,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["refreshaccesstoken(tk",{"_index":2799,"title":{},"body":{"injectables/SpotifyAuthService.html":{}}}],["refreshbody",{"_index":445,"title":{"classes/RefreshBody.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"coverage.html":{}}}],["refreshed",{"_index":451,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["refreshed'})@isstring",{"_index":2332,"title":{},"body":{"classes/RefreshBody.html":{}}}],["refreshedtokens",{"_index":2767,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["refreshedtokens.expires_in",{"_index":2770,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["refreshjwt",{"_index":579,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshjwt(jwt_token",{"_index":599,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["refreshspotifytokens",{"_index":2764,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["refreshspotifytokens'})@apiresponse({status",{"_index":2712,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["refreshtoken",{"_index":635,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["refreshtoken.access_token",{"_index":2883,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["refreshtoken.expires_in",{"_index":2886,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["refreshtoken.scope",{"_index":2885,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["refreshtoken.token_type",{"_index":2884,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["regexpattern",{"_index":1596,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["region",{"_index":649,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/S3Service.html":{},"miscellaneous/variables.html":{}}}],["register",{"_index":415,"title":{},"body":{"controllers/AuthController.html":{}}}],["register'})@apibody({type",{"_index":467,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(@body",{"_index":509,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(registerinfo",{"_index":458,"title":{},"body":{"controllers/AuthController.html":{}}}],["registerbody",{"_index":459,"title":{"classes/RegisterBody.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"coverage.html":{}}}],["registerbody})@apiresponse({status",{"_index":470,"title":{},"body":{"controllers/AuthController.html":{}}}],["registered",{"_index":469,"title":{},"body":{"controllers/AuthController.html":{}}}],["registerinfo",{"_index":472,"title":{},"body":{"controllers/AuthController.html":{}}}],["registerinfo.email",{"_index":514,"title":{},"body":{"controllers/AuthController.html":{}}}],["registerinfo.usercognitosub",{"_index":515,"title":{},"body":{"controllers/AuthController.html":{}}}],["registerinfo.username",{"_index":513,"title":{},"body":{"controllers/AuthController.html":{}}}],["registration",{"_index":3815,"title":{},"body":{"index.html":{}}}],["reject_url",{"_index":1663,"title":{},"body":{"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{}}}],["related",{"_index":3789,"title":{},"body":{"index.html":{}}}],["relationship",{"_index":1672,"title":{},"body":{"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"injectables/ProfileService.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{},"index.html":{}}}],["remove",{"_index":1472,"title":{},"body":{"injectables/DtoGenService.html":{},"injectables/LiveService.html":{},"classes/UserActionDto.html":{}}}],["removeconnecteduser",{"_index":1239,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/RoomUsersService.html":{}}}],["removeconnecteduser(socketid",{"_index":1266,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/RoomUsersService.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["removed",{"_index":1875,"title":{},"body":{"injectables/LiveService.html":{}}}],["removing",{"_index":1872,"title":{},"body":{"injectables/LiveService.html":{}}}],["replacement",{"_index":3774,"title":{},"body":{"index.html":{}}}],["reports",{"_index":3780,"title":{},"body":{"index.html":{}}}],["req",{"_index":286,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"controllers/ProfileController.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"controllers/SpotifyAuthController.html":{},"classes/UserActionDto.html":{}}}],["req.user",{"_index":710,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["request",{"_index":268,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"controllers/ProfileController.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RetryService.html":{},"injectables/S3Service.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UserActionDto.html":{},"dependencies.html":{}}}],["request.'})@apiresponse({status",{"_index":453,"title":{},"body":{"controllers/AuthController.html":{}}}],["request_queue",{"_index":4041,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestoptions",{"_index":2857,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["requestoptions.headers",{"_index":2877,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["requestoptions.url",{"_index":2874,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["requestqueue",{"_index":4042,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requests",{"_index":265,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["required",{"_index":433,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SongsController.html":{},"controllers/SpotifyAuthController.html":{}}}],["reset",{"_index":338,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AutoModerationModule.html":{},"modules/BullBoardModule.html":{},"modules/DbUtilsModule.html":{},"modules/DmUsersModule.html":{},"modules/DtoGenModule.html":{},"modules/GenresModule.html":{},"modules/ImageModule.html":{},"modules/LiveModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RecommendationsModule.html":{},"modules/RetryModule.html":{},"modules/RoomQueueModule.html":{},"modules/RoomUsersModule.html":{},"modules/RoomsModule.html":{},"modules/S3Module.html":{},"modules/SearchModule.html":{},"modules/SongsModule.html":{},"modules/SpotifyAuthModule.html":{},"modules/SpotifyModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":670,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["response.data",{"_index":2878,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["response.user_id",{"_index":2909,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["responsepromise",{"_index":668,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["responses",{"_index":3806,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["rest",{"_index":3891,"title":{},"body":{"index.html":{}}}],["result",{"_index":302,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{},"injectables/GenresService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UserActionDto.html":{}}}],["result.current_song",{"_index":3172,"title":{},"body":{"classes/UserActionDto.html":{}}}],["result.id",{"_index":715,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["result.location",{"_index":305,"title":{},"body":{"controllers/AppController.html":{}}}],["result.map((row",{"_index":913,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["result.push(message",{"_index":1542,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["result.push(room",{"_index":1509,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["results",{"_index":177,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/AutoModerationModule.html":{},"injectables/AutoModerationService.html":{},"modules/BullBoardModule.html":{},"injectables/BullBoardService.html":{},"modules/BullConfigModule.html":{},"interfaces/Category.html":{},"classes/ChatEventDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"modules/DbUtilsModule.html":{},"classes/DirectMessageDto.html":{},"modules/DmUsersModule.html":{},"injectables/DmUsersService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"injectables/EventQueueService.html":{},"classes/FollowersAndFollowing.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"classes/GenresWithCount.html":{},"modules/ImageModule.html":{},"injectables/ImageService.html":{},"classes/InternalError.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LinksWithCount.html":{},"classes/LiveChatMessageDto.html":{},"modules/LiveModule.html":{},"injectables/LiveService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"classes/MessagesPerHour.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"injectables/MyLogger.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/PlaybackEventDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/QueueEventDto.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"modules/RetryModule.html":{},"injectables/RetryService.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"modules/RoomQueueModule.html":{},"classes/RoomSongDto.html":{},"modules/RoomUsersModule.html":{},"injectables/RoomUsersService.html":{},"classes/RoomsData.html":{},"modules/RoomsModule.html":{},"modules/S3Module.html":{},"injectables/S3Service.html":{},"classes/SearchHistoryDto.html":{},"modules/SearchModule.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/SongInfosWithCount.html":{},"controllers/SongsController.html":{},"modules/SongsModule.html":{},"injectables/SongsService.html":{},"controllers/SpotifyAuthController.html":{},"modules/SpotifyAuthModule.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"modules/SpotifyModule.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/SpotifyUser.html":{},"modules/TasksModule.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserDto-1.html":{},"classes/UpdateUserDto-2.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserError.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{},"modules/UsersModule.html":{},"classes/VoteDto.html":{},"classes/WsExceptionFilter.html":{},"coverage.html":{},"dependencies.html":{},"interfaces/dmUser.html":{},"miscellaneous/functions.html":{},"index.html":{},"interfaces/liveChatUser.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["rethrow",{"_index":2398,"title":{},"body":{"injectables/RetryService.html":{}}}],["retries",{"_index":2089,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/RetryService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["retry",{"_index":2109,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/RetryService.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{}}}],["retry(s",{"_index":2378,"title":{},"body":{"injectables/RetryService.html":{}}}],["retry.service",{"_index":2344,"title":{},"body":{"modules/RetryModule.html":{}}}],["retry/retry.module",{"_index":377,"title":{},"body":{"modules/AppModule.html":{},"modules/SpotifyModule.html":{}}}],["retryafter",{"_index":2393,"title":{},"body":{"injectables/RetryService.html":{}}}],["retryasync",{"_index":2105,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/RetryService.html":{},"miscellaneous/typealiases.html":{}}}],["retryasync(func",{"_index":2347,"title":{},"body":{"injectables/RetryService.html":{}}}],["retrycb",{"_index":2348,"title":{},"body":{"injectables/RetryService.html":{},"miscellaneous/typealiases.html":{}}}],["retrying",{"_index":2396,"title":{},"body":{"injectables/RetryService.html":{}}}],["retrymodule",{"_index":328,"title":{"modules/RetryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{},"modules/RetryModule.html":{},"modules/SpotifyModule.html":{},"modules.html":{},"overview.html":{}}}],["retryoptions",{"_index":2349,"title":{},"body":{"injectables/RetryService.html":{},"miscellaneous/typealiases.html":{}}}],["retryservice",{"_index":2082,"title":{"injectables/RetryService.html":{}},"body":{"injectables/PrismaService.html":{},"modules/RetryModule.html":{},"injectables/RetryService.html":{},"coverage.html":{},"overview.html":{}}}],["retrystatus",{"_index":2087,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/RetryService.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":109,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BullBoardService.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"controllers/GenresController.html":{},"injectables/ImageService.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"injectables/JwtStrategy.html":{},"injectables/LiveService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"classes/MessagesPerHour.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"classes/ParticipantsPerHourDto.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/RecommendationsService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RetryService.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"injectables/RoomUsersService.html":{},"injectables/S3Service.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"controllers/SongsController.html":{},"injectables/SongsService.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/TasksProcessor.html":{},"classes/UserActionDto.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{},"miscellaneous/variables.html":{}}}],["return_visits",{"_index":114,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["returned",{"_index":427,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"injectables/RetryService.html":{},"controllers/SpotifyAuthController.html":{},"classes/UserActionDto.html":{}}}],["returning",{"_index":59,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"index.html":{}}}],["returning_visitors",{"_index":57,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["returningvisitors",{"_index":58,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["returns",{"_index":193,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BullBoardService.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"injectables/EventQueueService.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"injectables/ImageService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyLogger.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/RecommendationsService.html":{},"injectables/RetryService.html":{},"injectables/RoomUsersService.html":{},"injectables/S3Service.html":{},"injectables/SongsService.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/WsExceptionFilter.html":{},"miscellaneous/functions.html":{}}}],["returnvisits",{"_index":107,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["room",{"_index":66,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"injectables/DtoGenService.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/LinksWithCount.html":{},"injectables/LiveService.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomsData.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfosWithCount.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{},"miscellaneous/variables.html":{}}}],["room's",{"_index":69,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["room'})@isnumber",{"_index":20,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsVotesDto.html":{}}}],["room.flushtodb",{"_index":3100,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["room.getspotifyinfo(api",{"_index":3097,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["room.inactive",{"_index":1848,"title":{},"body":{"injectables/LiveService.html":{}}}],["room.minutesinactive",{"_index":1849,"title":{},"body":{"injectables/LiveService.html":{}}}],["room.participate_id",{"_index":3247,"title":{},"body":{"classes/UserActionDto.html":{}}}],["room.queueasroomsongdto",{"_index":3265,"title":{},"body":{"classes/UserActionDto.html":{}}}],["room.room.room_name",{"_index":3096,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["room.room.roomid",{"_index":1847,"title":{},"body":{"injectables/LiveService.html":{},"classes/TasksProcessor.html":{}}}],["room.room_id",{"_index":967,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["room.room_id.tostring()).includes(id",{"_index":929,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["room.roomid",{"_index":936,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/UserActionDto.html":{}}}],["room.songs.length",{"_index":1855,"title":{},"body":{"injectables/LiveService.html":{}}}],["room.songs[0",{"_index":1864,"title":{},"body":{"injectables/LiveService.html":{}}}],["room.songs[0].getplaybackstarttime",{"_index":1878,"title":{},"body":{"injectables/LiveService.html":{}}}],["room.songs[0].setplaybackstarttime(new",{"_index":1879,"title":{},"body":{"injectables/LiveService.html":{}}}],["room_activity_timeout",{"_index":1822,"title":{},"body":{"injectables/LiveService.html":{}}}],["room_creator",{"_index":904,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{}}}],["room_id",{"_index":906,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{}}}],["room_ids",{"_index":1473,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["room_image",{"_index":1126,"title":{},"body":{"classes/CreateRoomDto.html":{},"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{}}}],["room_join_time",{"_index":3240,"title":{},"body":{"classes/UserActionDto.html":{}}}],["room_joined",{"_index":4069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["room_leave_time",{"_index":3249,"title":{},"body":{"classes/UserActionDto.html":{}}}],["room_left",{"_index":4071,"title":{},"body":{"miscellaneous/variables.html":{}}}],["room_message",{"_index":1516,"title":{},"body":{"injectables/DtoGenService.html":{},"miscellaneous/variables.html":{}}}],["room_name",{"_index":1127,"title":{},"body":{"classes/CreateRoomDto.html":{},"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{}}}],["room_previews",{"_index":119,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["room_settings_changed",{"_index":4066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["room_size",{"_index":1128,"title":{},"body":{"classes/CreateRoomDto.html":{},"injectables/DtoGenService.html":{},"classes/RoomDto.html":{}}}],["roomanalytics.service",{"_index":2556,"title":{},"body":{"modules/RoomsModule.html":{}}}],["roomanalyticscontributorsdto",{"_index":165,"title":{"classes/RoomAnalyticsContributorsDto.html":{}},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"coverage.html":{}}}],["roomanalyticscontributorsdto})@isobject()@validatenested()@type(undefined",{"_index":2407,"title":{},"body":{"classes/RoomAnalyticsDto.html":{}}}],["roomanalyticsdto",{"_index":172,"title":{"classes/RoomAnalyticsDto.html":{}},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"coverage.html":{}}}],["roomanalyticsinteractionsdto",{"_index":121,"title":{"classes/RoomAnalyticsInteractionsDto.html":{}},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"coverage.html":{}}}],["roomanalyticsinteractionsdto})@isobject()@validatenested()@type(undefined",{"_index":2409,"title":{},"body":{"classes/RoomAnalyticsDto.html":{}}}],["roomanalyticskeymetricsdto",{"_index":41,"title":{"classes/RoomAnalyticsKeyMetricsDto.html":{}},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"coverage.html":{}}}],["roomanalyticsparticipationdto",{"_index":90,"title":{"classes/RoomAnalyticsParticipationDto.html":{}},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"coverage.html":{}}}],["roomanalyticsparticipationdto})@isobject()@validatenested()@type(undefined",{"_index":2411,"title":{},"body":{"classes/RoomAnalyticsDto.html":{}}}],["roomanalyticsqueuedto",{"_index":62,"title":{"classes/RoomAnalyticsQueueDto.html":{}},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"coverage.html":{}}}],["roomanalyticsqueuedto})@isobject()@validatenested()@type(undefined",{"_index":2413,"title":{},"body":{"classes/RoomAnalyticsDto.html":{}}}],["roomanalyticsservice",{"_index":1981,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/RoomsModule.html":{},"coverage.html":{},"overview.html":{}}}],["roomanalyticssongsdto",{"_index":159,"title":{"classes/RoomAnalyticsSongsDto.html":{}},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"coverage.html":{}}}],["roomanalyticssongsdto})@isobject()@validatenested()@type(undefined",{"_index":2415,"title":{},"body":{"classes/RoomAnalyticsDto.html":{}}}],["roomanalyticsvotesdto",{"_index":147,"title":{"classes/RoomAnalyticsVotesDto.html":{}},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"coverage.html":{}}}],["roomanalyticsvotesdto})@isobject()@validatenested()@type(undefined",{"_index":2417,"title":{},"body":{"classes/RoomAnalyticsDto.html":{}}}],["roomdto",{"_index":708,"title":{"classes/RoomDto.html":{}},"body":{"injectables/AuthService.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"classes/RoomDto.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{},"coverage.html":{}}}],["roomdtos",{"_index":930,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["roomdtos.find((room",{"_index":935,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["roomentity",{"_index":2473,"title":{"classes/RoomEntity.html":{}},"body":{"classes/RoomEntity.html":{},"coverage.html":{}}}],["roomid",{"_index":707,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DtoGenService.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/LiveChatMessageDto.html":{},"injectables/LiveService.html":{},"classes/LoginBody.html":{},"classes/PlaybackEventDto.html":{},"classes/QueueEventDto.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"injectables/RoomUsersService.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{},"interfaces/liveChatUser.html":{}}}],["roomids",{"_index":912,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{}}}],["roomids.filter",{"_index":927,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{}}}],["roomids.length",{"_index":1450,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["roomids.map((roomid",{"_index":3175,"title":{},"body":{"classes/UserActionDto.html":{}}}],["roomjobs",{"_index":1823,"title":{},"body":{"injectables/LiveService.html":{}}}],["roomjoined",{"_index":4070,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roomleft",{"_index":4072,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roommessage",{"_index":1537,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{}}}],["roommessage.room_id",{"_index":1540,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["roommessages",{"_index":3273,"title":{},"body":{"classes/UserActionDto.html":{}}}],["roommessages.length",{"_index":3275,"title":{},"body":{"classes/UserActionDto.html":{}}}],["roomqueue",{"_index":1824,"title":{},"body":{"injectables/LiveService.html":{}}}],["roomqueue.service",{"_index":2497,"title":{},"body":{"modules/RoomQueueModule.html":{}}}],["roomqueue/roomqueue.module",{"_index":2555,"title":{},"body":{"modules/RoomsModule.html":{}}}],["roomqueue/roomqueue.service",{"_index":3154,"title":{},"body":{"classes/UserActionDto.html":{}}}],["roomqueuemodule",{"_index":1797,"title":{"modules/RoomQueueModule.html":{}},"body":{"modules/LiveModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/RoomQueueModule.html":{},"modules/RoomsModule.html":{},"modules.html":{},"overview.html":{}}}],["roomqueueservice",{"_index":1816,"title":{},"body":{"injectables/LiveService.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/RoomQueueModule.html":{},"classes/UserActionDto.html":{},"coverage.html":{},"overview.html":{}}}],["rooms",{"_index":55,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/LinksWithCount.html":{},"injectables/LiveService.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomsData.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfosWithCount.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{},"index.html":{}}}],["rooms'})@isnumber",{"_index":2619,"title":{},"body":{"classes/SongAnalyticsDto.html":{}}}],["rooms.controller",{"_index":2553,"title":{},"body":{"modules/RoomsModule.html":{}}}],["rooms.find((r",{"_index":3176,"title":{},"body":{"classes/UserActionDto.html":{}}}],["rooms.length",{"_index":1510,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{}}}],["rooms.map((r",{"_index":1478,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["rooms.service",{"_index":2554,"title":{},"body":{"modules/RoomsModule.html":{}}}],["rooms.splice(limit",{"_index":3164,"title":{},"body":{"classes/UserActionDto.html":{}}}],["rooms.values",{"_index":1845,"title":{},"body":{"injectables/LiveService.html":{}}}],["rooms/dto/room.dto",{"_index":839,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{},"classes/UserEntity.html":{}}}],["rooms/dto/songinfo.dto",{"_index":1655,"title":{},"body":{"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserFriendship.html":{}}}],["rooms[0",{"_index":3170,"title":{},"body":{"classes/UserActionDto.html":{}}}],["roomscontroller",{"_index":1941,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/RoomsModule.html":{},"coverage.html":{}}}],["roomsdata",{"_index":1656,"title":{"classes/RoomsData.html":{}},"body":{"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{},"coverage.html":{}}}],["roomsdata})@isobject()@validatenested()@type(undefined",{"_index":3491,"title":{},"body":{"classes/UserDto.html":{}}}],["roomsettingschanged",{"_index":4067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roomsharedms",{"_index":3479,"title":{},"body":{"classes/UserActionDto.html":{}}}],["roomsharemessages",{"_index":3469,"title":{},"body":{"classes/UserActionDto.html":{}}}],["roomsharemessages.push",{"_index":3472,"title":{},"body":{"classes/UserActionDto.html":{}}}],["roomshares",{"_index":3468,"title":{},"body":{"classes/UserActionDto.html":{}}}],["roomsmodule",{"_index":329,"title":{"modules/RoomsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LiveModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/RoomsModule.html":{},"modules.html":{},"overview.html":{}}}],["roomsong",{"_index":3621,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["roomsong.dto",{"_index":2472,"title":{},"body":{"classes/RoomDto.html":{}}}],["roomsongdto",{"_index":1819,"title":{"classes/RoomSongDto.html":{}},"body":{"injectables/LiveService.html":{},"classes/PlaybackEventDto.html":{},"classes/QueueEventDto.html":{},"classes/RoomDto.html":{},"classes/RoomSongDto.html":{},"classes/UserActionDto.html":{},"coverage.html":{}}}],["roomsongdto})@isobject()@validatenested()@type(undefined",{"_index":2451,"title":{},"body":{"classes/RoomDto.html":{}}}],["roomsservice",{"_index":1944,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/RoomsModule.html":{},"classes/UserActionDto.html":{},"coverage.html":{},"overview.html":{}}}],["roomstoremove",{"_index":1844,"title":{},"body":{"injectables/LiveService.html":{}}}],["roomstoremove.push(room.room.roomid",{"_index":1853,"title":{},"body":{"injectables/LiveService.html":{}}}],["roomuser.service",{"_index":2518,"title":{},"body":{"modules/RoomUsersModule.html":{}}}],["roomusers/roomuser.module",{"_index":1803,"title":{},"body":{"modules/LiveModule.html":{}}}],["roomusersmodule",{"_index":1798,"title":{"modules/RoomUsersModule.html":{}},"body":{"modules/LiveModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/RoomUsersModule.html":{},"modules.html":{},"overview.html":{}}}],["roomusersservice",{"_index":1938,"title":{"injectables/RoomUsersService.html":{}},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/RoomUsersModule.html":{},"injectables/RoomUsersService.html":{},"coverage.html":{},"interfaces/liveChatUser.html":{},"overview.html":{}}}],["row.room_id.tostring",{"_index":914,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["row.search_term",{"_index":1009,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["row.timestamp",{"_index":1011,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["row.url",{"_index":1012,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["row.user_id.tostring",{"_index":1037,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["rs",{"_index":3470,"title":{},"body":{"classes/UserActionDto.html":{}}}],["rs.contents",{"_index":3474,"title":{},"body":{"classes/UserActionDto.html":{}}}],["rs.date_sent",{"_index":3475,"title":{},"body":{"classes/UserActionDto.html":{}}}],["rs.message_id",{"_index":3473,"title":{},"body":{"classes/UserActionDto.html":{}}}],["rs.private_message",{"_index":3471,"title":{},"body":{"classes/UserActionDto.html":{}}}],["rs.private_message.p_message_id",{"_index":3477,"title":{},"body":{"classes/UserActionDto.html":{}}}],["rs.private_message.recipient",{"_index":3478,"title":{},"body":{"classes/UserActionDto.html":{}}}],["rs.sender",{"_index":3476,"title":{},"body":{"classes/UserActionDto.html":{}}}],["run",{"_index":1834,"title":{},"body":{"injectables/LiveService.html":{},"injectables/TasksService.html":{},"index.html":{}}}],["running",{"_index":775,"title":{},"body":{"injectables/BullBoardService.html":{},"index.html":{}}}],["rxjs",{"_index":2809,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"dependencies.html":{}}}],["s",{"_index":1539,"title":{},"body":{"injectables/DtoGenService.html":{},"injectables/RetryService.html":{}}}],["s3",{"_index":199,"title":{},"body":{"controllers/AppController.html":{},"injectables/S3Service.html":{},"dependencies.html":{},"index.html":{}}}],["s3.service",{"_index":2562,"title":{},"body":{"modules/S3Module.html":{}}}],["s3/s3.module",{"_index":357,"title":{},"body":{"modules/AppModule.html":{}}}],["s3/s3.service",{"_index":237,"title":{},"body":{"controllers/AppController.html":{}}}],["s3integrations",{"_index":3836,"title":{},"body":{"index.html":{}}}],["s3module",{"_index":330,"title":{"modules/S3Module.html":{}},"body":{"modules/AppModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/S3Module.html":{},"modules.html":{},"overview.html":{}}}],["s3service",{"_index":236,"title":{"injectables/S3Service.html":{}},"body":{"controllers/AppController.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/S3Module.html":{},"injectables/S3Service.html":{},"coverage.html":{},"overview.html":{}}}],["safe",{"_index":1631,"title":{},"body":{"injectables/EventQueueService.html":{}}}],["salt",{"_index":3961,"title":{},"body":{"miscellaneous/variables.html":{}}}],["save",{"_index":2913,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UserActionDto.html":{}}}],["savereaction",{"_index":3315,"title":{},"body":{"classes/UserActionDto.html":{}}}],["saveroomplaylist(roomid",{"_index":3448,"title":{},"body":{"classes/UserActionDto.html":{}}}],["saveuserspotifytokens",{"_index":2784,"title":{},"body":{"injectables/SpotifyAuthService.html":{}}}],["saveuserspotifytokens(tk",{"_index":2801,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["scalable",{"_index":3721,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":3205,"title":{},"body":{"classes/UserActionDto.html":{}}}],["scheduled_room",{"_index":966,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{},"miscellaneous/variables.html":{}}}],["scheduled_room.room_id",{"_index":968,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["scheduledroom",{"_index":1489,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["schedulemodule",{"_index":369,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":385,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulerregistry",{"_index":1812,"title":{},"body":{"injectables/LiveService.html":{}}}],["schema",{"_index":210,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["scope",{"_index":628,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["score",{"_index":2325,"title":{},"body":{"injectables/RecommendationsService.html":{},"classes/RoomSongDto.html":{}}}],["script",{"_index":3749,"title":{},"body":{"index.html":{}}}],["scripts",{"_index":3760,"title":{},"body":{"index.html":{}}}],["sdk",{"_index":2807,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/UserActionDto.html":{},"dependencies.html":{}}}],["sdk/client",{"_index":614,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/S3Service.html":{},"dependencies.html":{}}}],["sdk/lib",{"_index":2577,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["sdk/s3",{"_index":2575,"title":{},"body":{"injectables/S3Service.html":{},"dependencies.html":{}}}],["search",{"_index":854,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/GenresService.html":{}}}],["search.controller",{"_index":2610,"title":{},"body":{"modules/SearchModule.html":{}}}],["search.map((genre",{"_index":1704,"title":{},"body":{"injectables/GenresService.html":{}}}],["search.service",{"_index":2611,"title":{},"body":{"modules/SearchModule.html":{}}}],["search/rooms",{"_index":999,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["search/rooms?q",{"_index":1004,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["search/users?q",{"_index":1074,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["search_history",{"_index":997,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"miscellaneous/variables.html":{}}}],["search_suggestions",{"_index":3986,"title":{},"body":{"miscellaneous/variables.html":{}}}],["search_term",{"_index":889,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/SearchHistoryDto.html":{}}}],["search_time",{"_index":1010,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/SearchHistoryDto.html":{}}}],["searchcontroller",{"_index":1946,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/SearchModule.html":{},"coverage.html":{}}}],["searchhistory(userid",{"_index":1094,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["searchhistorydto",{"_index":840,"title":{"classes/SearchHistoryDto.html":{}},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/SearchHistoryDto.html":{},"coverage.html":{}}}],["searchids",{"_index":1008,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["searchids.foreach((record",{"_index":1019,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["searchids.map(async",{"_index":1097,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["searching",{"_index":901,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["searchmodule",{"_index":331,"title":{"modules/SearchModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/SearchModule.html":{},"modules.html":{},"overview.html":{}}}],["searchresult",{"_index":1098,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["searchresult].flat",{"_index":1109,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["searchrooms",{"_index":900,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["searchroomshistory(userid",{"_index":995,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["searchroomssuggestions(q",{"_index":1031,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["searchservice",{"_index":851,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/SearchModule.html":{},"coverage.html":{},"overview.html":{}}}],["searchusers(q",{"_index":1032,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["searchusershistory(userid",{"_index":1073,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["searchuserssuggestions(q",{"_index":1075,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["second",{"_index":2397,"title":{},"body":{"injectables/RetryService.html":{}}}],["seconds",{"_index":1870,"title":{},"body":{"injectables/LiveService.html":{},"injectables/RetryService.html":{}}}],["secret",{"_index":563,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"miscellaneous/variables.html":{}}}],["secretaccesskey",{"_index":571,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/S3Service.html":{}}}],["secretkey",{"_index":682,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["secretorkey",{"_index":1778,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["see",{"_index":428,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Category.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{}}}],["seek_media",{"_index":4035,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seekmedia",{"_index":4036,"title":{},"body":{"miscellaneous/variables.html":{}}}],["segment",{"_index":1082,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["select",{"_index":859,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["selfauthorisedapi",{"_index":2818,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["send",{"_index":2872,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UserActionDto.html":{},"classes/WsExceptionFilter.html":{}}}],["sender",{"_index":1206,"title":{},"body":{"classes/DirectMessageDto.html":{},"injectables/DtoGenService.html":{},"classes/LiveChatMessageDto.html":{},"classes/UserActionDto.html":{}}}],["sender.user_id",{"_index":3297,"title":{},"body":{"classes/UserActionDto.html":{}}}],["sender.userid",{"_index":1553,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["senderids",{"_index":1528,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["senders",{"_index":1533,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["sendmessage(message",{"_index":3455,"title":{},"body":{"classes/UserActionDto.html":{}}}],["sendusers",{"_index":1534,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["sent",{"_index":123,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"controllers/AuthController.html":{},"interfaces/Category.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["sent'})@isdate",{"_index":1606,"title":{},"body":{"classes/EmojiReactionDto.html":{}}}],["server",{"_index":769,"title":{},"body":{"injectables/BullBoardService.html":{},"classes/ChatEventDto.html":{},"injectables/DmUsersService.html":{},"injectables/LiveService.html":{},"classes/PlaybackEventDto.html":{},"classes/UserActionDto.html":{},"classes/WsExceptionFilter.html":{},"interfaces/dmUser.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["serveradapter",{"_index":776,"title":{},"body":{"injectables/BullBoardService.html":{}}}],["serveradapter.getrouter",{"_index":782,"title":{},"body":{"injectables/BullBoardService.html":{}}}],["serveradapter.setbasepath(\"/admin/queues",{"_index":780,"title":{},"body":{"injectables/BullBoardService.html":{}}}],["serverset",{"_index":1830,"title":{},"body":{"injectables/LiveService.html":{}}}],["serverstarted",{"_index":751,"title":{},"body":{"injectables/BullBoardService.html":{}}}],["service",{"_index":1389,"title":{},"body":{"injectables/DtoGenService.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"index.html":{}}}],["service's",{"_index":3919,"title":{},"body":{"index.html":{}}}],["services",{"_index":3837,"title":{},"body":{"index.html":{}}}],["services/controllers",{"_index":3894,"title":{},"body":{"index.html":{}}}],["services/providers",{"_index":3915,"title":{},"body":{"index.html":{}}}],["session",{"_index":18,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["session_data",{"_index":106,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["sessiondata",{"_index":103,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["sessiondataperdaydto",{"_index":84,"title":{"classes/SessionDataPerDayDto.html":{}},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"coverage.html":{}}}],["sessiondurationperdaydto",{"_index":82,"title":{"classes/SessionDurationPerDayDto.html":{}},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"coverage.html":{}}}],["set",{"_index":636,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DtoGenService.html":{},"injectables/EventQueueService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RetryService.html":{}}}],["set(childgenres",{"_index":3425,"title":{},"body":{"classes/UserActionDto.html":{}}}],["set(dms.map((dm",{"_index":1593,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["set(senderids",{"_index":1532,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["setchatinfo",{"_index":1240,"title":{},"body":{"injectables/DmUsersService.html":{}}}],["setchatinfo(socketid",{"_index":1268,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["setmocksongs",{"_index":2266,"title":{},"body":{"injectables/RecommendationsService.html":{},"miscellaneous/variables.html":{}}}],["setmocksongs(mocksongs",{"_index":2278,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["setplaylists",{"_index":2267,"title":{},"body":{"injectables/RecommendationsService.html":{},"miscellaneous/variables.html":{}}}],["setplaylists(playlists",{"_index":2280,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["setroomid",{"_index":2523,"title":{},"body":{"injectables/RoomUsersService.html":{}}}],["setroomid(socketid",{"_index":2536,"title":{},"body":{"injectables/RoomUsersService.html":{},"interfaces/liveChatUser.html":{}}}],["setserver(server",{"_index":1832,"title":{},"body":{"injectables/LiveService.html":{}}}],["settimeout(a",{"_index":2380,"title":{},"body":{"injectables/RetryService.html":{}}}],["settimeout(resolve",{"_index":1828,"title":{},"body":{"injectables/LiveService.html":{},"injectables/RetryService.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["settings",{"_index":3829,"title":{},"body":{"index.html":{}}}],["setup",{"_index":3756,"title":{},"body":{"index.html":{}}}],["shared",{"_index":3483,"title":{},"body":{"classes/UserActionDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["shareroom",{"_index":1241,"title":{},"body":{"injectables/DmUsersService.html":{},"classes/UserActionDto.html":{},"interfaces/dmUser.html":{}}}],["shareroom(@request",{"_index":3453,"title":{},"body":{"classes/UserActionDto.html":{}}}],["shareroom(socketserver",{"_index":1270,"title":{},"body":{"injectables/DmUsersService.html":{}}}],["sharp",{"_index":1732,"title":{},"body":{"injectables/ImageService.html":{},"dependencies.html":{}}}],["sharp(imagebuffer",{"_index":1736,"title":{},"body":{"injectables/ImageService.html":{}}}],["side",{"_index":3722,"title":{},"body":{"index.html":{}}}],["sigint",{"_index":2092,"title":{},"body":{"injectables/PrismaService.html":{}}}],["signal",{"_index":2093,"title":{},"body":{"injectables/PrismaService.html":{}}}],["signoptions",{"_index":564,"title":{},"body":{"modules/AuthModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["similarity(full_name",{"_index":974,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["similarity(name",{"_index":909,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["similarity(name,'claud",{"_index":861,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["similarity(username",{"_index":882,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["size",{"_index":1727,"title":{},"body":{"injectables/ImageService.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["skipping",{"_index":1888,"title":{},"body":{"injectables/LiveService.html":{}}}],["sleep",{"_index":3604,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["sleep(ms",{"_index":3713,"title":{},"body":{"miscellaneous/functions.html":{}}}],["slice(0",{"_index":1883,"title":{},"body":{"injectables/LiveService.html":{},"injectables/RecommendationsService.html":{}}}],["socket",{"_index":1286,"title":{},"body":{"injectables/DmUsersService.html":{},"classes/WsExceptionFilter.html":{},"interfaces/dmUser.html":{}}}],["socket.io",{"_index":1276,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/LiveService.html":{},"classes/UserActionDto.html":{},"classes/WsExceptionFilter.html":{},"dependencies.html":{},"interfaces/dmUser.html":{}}}],["socket_events",{"_index":1277,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/LiveService.html":{},"coverage.html":{},"interfaces/dmUser.html":{},"miscellaneous/variables.html":{}}}],["socketid",{"_index":1249,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/RoomUsersService.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["socketids",{"_index":1281,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/RoomUsersService.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["socketserver",{"_index":1272,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["socketserver.to(chatid).emit(socket_events.direct_message",{"_index":1336,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["something",{"_index":1683,"title":{},"body":{"controllers/GenresController.html":{}}}],["song",{"_index":132,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"injectables/DtoGenService.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/LinksWithCount.html":{},"injectables/LiveService.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/PlaybackEventDto.html":{},"injectables/RecommendationsService.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomsData.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{},"classes/SongInfosWithCount.html":{},"controllers/SongsController.html":{},"injectables/SongsService.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{},"miscellaneous/variables.html":{}}}],["song'})@isstring",{"_index":2626,"title":{},"body":{"classes/SongAnalyticsDto.html":{}}}],["song.acousticness",{"_index":3381,"title":{},"body":{"classes/UserActionDto.html":{}}}],["song.danceability",{"_index":3375,"title":{},"body":{"classes/UserActionDto.html":{}}}],["song.energy",{"_index":3376,"title":{},"body":{"classes/UserActionDto.html":{}}}],["song.genre",{"_index":3407,"title":{},"body":{"classes/UserActionDto.html":{}}}],["song.instrumentalness",{"_index":3382,"title":{},"body":{"classes/UserActionDto.html":{}}}],["song.key",{"_index":3377,"title":{},"body":{"classes/UserActionDto.html":{}}}],["song.liveness",{"_index":3383,"title":{},"body":{"classes/UserActionDto.html":{}}}],["song.loudness",{"_index":3378,"title":{},"body":{"classes/UserActionDto.html":{}}}],["song.mode",{"_index":3379,"title":{},"body":{"classes/UserActionDto.html":{}}}],["song.song.artists",{"_index":1426,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["song.song.artwork_url",{"_index":1428,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["song.song.audio_features",{"_index":3435,"title":{},"body":{"classes/UserActionDto.html":{}}}],["song.song.duration",{"_index":1430,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["song.song.genre",{"_index":3436,"title":{},"body":{"classes/UserActionDto.html":{}}}],["song.song.name",{"_index":1425,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["song.song.song_id",{"_index":1424,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{}}}],["song.song.spotify_id",{"_index":1429,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["song.song_id",{"_index":3049,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["song.songid",{"_index":3411,"title":{},"body":{"classes/UserActionDto.html":{}}}],["song.speechiness",{"_index":3380,"title":{},"body":{"classes/UserActionDto.html":{}}}],["song.spotify_id",{"_index":2682,"title":{},"body":{"injectables/SongsService.html":{}}}],["song.tempo",{"_index":3385,"title":{},"body":{"classes/UserActionDto.html":{}}}],["song.valence",{"_index":3384,"title":{},"body":{"classes/UserActionDto.html":{}}}],["song1",{"_index":2304,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["song1[key",{"_index":2308,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["song2",{"_index":2269,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["song2[key",{"_index":2309,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["song_added",{"_index":4058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["song_id",{"_index":136,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{},"injectables/SongsService.html":{},"classes/UserActionDto.html":{}}}],["song_pkey",{"_index":2652,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["song_removed",{"_index":4060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["songadded",{"_index":4059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["songanalyticsdto",{"_index":129,"title":{"classes/SongAnalyticsDto.html":{}},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"coverage.html":{}}}],["songid",{"_index":1423,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/PlaybackEventDto.html":{},"classes/SongInfoDto.html":{},"controllers/SongsController.html":{},"injectables/SongsService.html":{},"classes/UserActionDto.html":{}}}],["songinfodto",{"_index":1654,"title":{"classes/SongInfoDto.html":{}},"body":{"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomEntity.html":{},"classes/RoomsData.html":{},"classes/SongInfoDto.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{},"coverage.html":{}}}],["songinfodto})@isobject()@validatenested()@type(undefined",{"_index":3487,"title":{},"body":{"classes/UserDto.html":{}}}],["songinfoentity",{"_index":2654,"title":{"classes/SongInfoEntity.html":{}},"body":{"classes/SongInfoEntity.html":{},"coverage.html":{}}}],["songinfoswithcount",{"_index":1657,"title":{"classes/SongInfosWithCount.html":{}},"body":{"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{},"coverage.html":{}}}],["songinfoswithcount})@isobject()@validatenested()@type(undefined",{"_index":3493,"title":{},"body":{"classes/UserDto.html":{}}}],["songremoved",{"_index":4061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["songs",{"_index":64,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/LinksWithCount.html":{},"injectables/LiveService.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/QueueEventDto.html":{},"injectables/RecommendationsService.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomsData.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfosWithCount.html":{},"controllers/SongsController.html":{},"classes/TasksProcessor.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{}}}],["songs.controller",{"_index":2674,"title":{},"body":{"modules/SongsModule.html":{}}}],["songs.length",{"_index":2323,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["songs.map((song",{"_index":3433,"title":{},"body":{"classes/UserActionDto.html":{}}}],["songs.reduce((sum",{"_index":2319,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["songs.service",{"_index":2663,"title":{},"body":{"controllers/SongsController.html":{},"modules/SongsModule.html":{}}}],["songs.some((song",{"_index":2300,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["songsasroomsongdto",{"_index":1881,"title":{},"body":{"injectables/LiveService.html":{}}}],["songsasroomsongdto[0",{"_index":1885,"title":{},"body":{"injectables/LiveService.html":{}}}],["songscontroller",{"_index":1970,"title":{"controllers/SongsController.html":{}},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"controllers/SongsController.html":{},"modules/SongsModule.html":{},"coverage.html":{}}}],["songsmodule",{"_index":332,"title":{"modules/SongsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/SongsModule.html":{},"modules.html":{},"overview.html":{}}}],["songsservice",{"_index":1968,"title":{"injectables/SongsService.html":{}},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"controllers/SongsController.html":{},"modules/SongsModule.html":{},"injectables/SongsService.html":{},"coverage.html":{},"overview.html":{}}}],["sort",{"_index":1587,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["sort((a",{"_index":2329,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["sortedgenres",{"_index":3441,"title":{},"body":{"classes/UserActionDto.html":{}}}],["sortedgenres[0",{"_index":3447,"title":{},"body":{"classes/UserActionDto.html":{}}}],["sortedrooms",{"_index":933,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["sortedusers",{"_index":1045,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["sortroomsongs",{"_index":3624,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["sortroomsongs(queue",{"_index":3714,"title":{},"body":{"miscellaneous/functions.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/AutoModerationModule.html":{},"injectables/AutoModerationService.html":{},"modules/BullBoardModule.html":{},"injectables/BullBoardService.html":{},"modules/BullConfigModule.html":{},"interfaces/Category.html":{},"classes/ChatEventDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"modules/DbUtilsModule.html":{},"classes/DirectMessageDto.html":{},"modules/DmUsersModule.html":{},"injectables/DmUsersService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"injectables/EventQueueService.html":{},"classes/FollowersAndFollowing.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"classes/GenresWithCount.html":{},"modules/ImageModule.html":{},"injectables/ImageService.html":{},"classes/InternalError.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LinksWithCount.html":{},"classes/LiveChatMessageDto.html":{},"modules/LiveModule.html":{},"injectables/LiveService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"classes/MessagesPerHour.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"injectables/MyLogger.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/PlaybackEventDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/QueueEventDto.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"modules/RetryModule.html":{},"injectables/RetryService.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"modules/RoomQueueModule.html":{},"classes/RoomSongDto.html":{},"modules/RoomUsersModule.html":{},"injectables/RoomUsersService.html":{},"classes/RoomsData.html":{},"modules/RoomsModule.html":{},"modules/S3Module.html":{},"injectables/S3Service.html":{},"classes/SearchHistoryDto.html":{},"modules/SearchModule.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/SongInfosWithCount.html":{},"controllers/SongsController.html":{},"modules/SongsModule.html":{},"injectables/SongsService.html":{},"controllers/SpotifyAuthController.html":{},"modules/SpotifyAuthModule.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"modules/SpotifyModule.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/SpotifyUser.html":{},"modules/TasksModule.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserDto-1.html":{},"classes/UpdateUserDto-2.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserError.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{},"modules/UsersModule.html":{},"classes/VoteDto.html":{},"classes/WsExceptionFilter.html":{},"interfaces/dmUser.html":{},"index.html":{},"interfaces/liveChatUser.html":{}}}],["south",{"_index":651,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["specific",{"_index":78,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/WsExceptionFilter.html":{}}}],["speechiness",{"_index":2287,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["split",{"_index":1088,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["splitroom(roomid",{"_index":3359,"title":{},"body":{"classes/UserActionDto.html":{}}}],["splitting",{"_index":2447,"title":{},"body":{"classes/RoomDto.html":{},"classes/UserActionDto.html":{}}}],["spotify",{"_index":130,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"injectables/RetryService.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"controllers/SongsController.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/SpotifyUser.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/UserActionDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["spotify.audiofeatures",{"_index":3370,"title":{},"body":{"classes/UserActionDto.html":{}}}],["spotify.savedtrack",{"_index":3036,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["spotify.service",{"_index":2925,"title":{},"body":{"modules/SpotifyModule.html":{}}}],["spotify.simplifiedplaylist",{"_index":3062,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["spotify.spotifyapi",{"_index":2819,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/TasksProcessor.html":{}}}],["spotify.spotifyapi.withclientcredentials",{"_index":2832,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["spotify.track",{"_index":3041,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["spotify/spotify.module",{"_index":358,"title":{},"body":{"modules/AppModule.html":{},"modules/RoomQueueModule.html":{},"modules/RoomsModule.html":{},"modules/TasksModule.html":{}}}],["spotify/spotify.service",{"_index":3016,"title":{},"body":{"classes/TasksProcessor.html":{},"classes/UserActionDto.html":{}}}],["spotify/spotifyauth.controller",{"_index":554,"title":{},"body":{"modules/AuthModule.html":{}}}],["spotify/spotifyauth.module",{"_index":555,"title":{},"body":{"modules/AuthModule.html":{}}}],["spotify/web",{"_index":2805,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/UserActionDto.html":{},"dependencies.html":{}}}],["spotify_client_id",{"_index":2821,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"miscellaneous/variables.html":{}}}],["spotify_client_secret",{"_index":2822,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"miscellaneous/variables.html":{}}}],["spotify_id",{"_index":133,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"injectables/DtoGenService.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{}}}],["spotify_redirect_uri",{"_index":2825,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"miscellaneous/variables.html":{}}}],["spotifyauth",{"_index":2727,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["spotifyauth.service",{"_index":2724,"title":{},"body":{"controllers/SpotifyAuthController.html":{},"modules/SpotifyAuthModule.html":{}}}],["spotifyauthcontroller",{"_index":546,"title":{"controllers/SpotifyAuthController.html":{}},"body":{"modules/AuthModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"controllers/SpotifyAuthController.html":{},"coverage.html":{}}}],["spotifyauthmodule",{"_index":542,"title":{"modules/SpotifyAuthModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/RoomQueueModule.html":{},"modules/SpotifyAuthModule.html":{},"modules.html":{},"overview.html":{}}}],["spotifyauthservice",{"_index":1934,"title":{"injectables/SpotifyAuthService.html":{}},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"controllers/SpotifyAuthController.html":{},"modules/SpotifyAuthModule.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"coverage.html":{},"overview.html":{}}}],["spotifycallback",{"_index":2746,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["spotifycallback'})@apiquery({name",{"_index":2695,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["spotifycallbackresponse",{"_index":2721,"title":{"classes/SpotifyCallbackResponse.html":{}},"body":{"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"coverage.html":{}}}],["spotifycallbackresponse})@apiresponse({status",{"_index":2707,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["spotifyid",{"_index":1891,"title":{},"body":{"injectables/LiveService.html":{},"classes/PlaybackEventDto.html":{},"classes/RoomSongDto.html":{},"classes/VoteDto.html":{}}}],["spotifyintegration",{"_index":3839,"title":{},"body":{"index.html":{}}}],["spotifymodule",{"_index":333,"title":{"modules/SpotifyModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/RoomQueueModule.html":{},"modules/RoomsModule.html":{},"modules/SpotifyModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["spotifyplaylistid",{"_index":1503,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/RoomDto.html":{}}}],["spotifyredirect",{"_index":2733,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["spotifyrequestwithretries",{"_index":2346,"title":{},"body":{"injectables/RetryService.html":{}}}],["spotifyrequestwithretries(request",{"_index":2354,"title":{},"body":{"injectables/RetryService.html":{}}}],["spotifyservice",{"_index":1957,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/SpotifyModule.html":{},"classes/TasksProcessor.html":{},"classes/UserActionDto.html":{},"coverage.html":{},"overview.html":{}}}],["spotifytokenpair",{"_index":2722,"title":{"classes/SpotifyTokenPair.html":{}},"body":{"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["spotifytokenpair})@apiresponse({status",{"_index":2719,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["spotifytokenrefreshresponse",{"_index":2817,"title":{"classes/SpotifyTokenRefreshResponse.html":{}},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"coverage.html":{}}}],["spotifytokenresponse",{"_index":2723,"title":{"classes/SpotifyTokenResponse.html":{}},"body":{"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"coverage.html":{}}}],["spotifytokenresponse})@apiresponse({status",{"_index":2713,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["spotifytokens",{"_index":2759,"title":{},"body":{"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["spotifyuser",{"_index":2937,"title":{"classes/SpotifyUser.html":{}},"body":{"classes/SpotifyUser.html":{},"coverage.html":{}}}],["spotifyuser.display_name",{"_index":2894,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["spotifyuser.email",{"_index":2890,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["spotifyuser.external_urls.spotify",{"_index":2896,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["spotifyuser.id",{"_index":2892,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["spotifyuser.images",{"_index":2897,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["spotifyuser.images.length",{"_index":2898,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["spotifyuser.images[largest",{"_index":2902,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["spotifyuser.images[largest]?.url",{"_index":2903,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["sqlstring",{"_index":845,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"dependencies.html":{}}}],["sqlstring.escape",{"_index":956,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["sqlstring.escape(params.q",{"_index":955,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["sqlstring.format(query",{"_index":990,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["src/.../auth.module.ts",{"_index":3945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.service.ts",{"_index":3940,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../constants.ts",{"_index":3949,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../db",{"_index":3942,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../eventqueue.service.ts",{"_index":3944,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":3709,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../retry.service.ts",{"_index":3943,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../roomqueue.service.ts",{"_index":3712,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../spotify.service.ts",{"_index":3946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../utils.ts",{"_index":3711,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller",{"_index":1927,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/app.controller.ts",{"_index":182,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:107",{"_index":213,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:38",{"_index":192,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":340,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service",{"_index":1928,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/app.service.ts",{"_index":408,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":409,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller",{"_index":1929,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":411,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:107",{"_index":471,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:152",{"_index":456,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:46",{"_index":442,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1930,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/auth/auth.module.ts",{"_index":545,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.service",{"_index":1931,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{}}}],["src/auth/auth.service.ts",{"_index":567,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/auth.service.ts:121",{"_index":603,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:168",{"_index":598,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:183",{"_index":587,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:209",{"_index":593,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:225",{"_index":600,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:292",{"_index":595,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:308",{"_index":597,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:335",{"_index":590,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:47",{"_index":2339,"title":{},"body":{"classes/RegisterBody.html":{}}}],["src/auth/auth.service.ts:51",{"_index":2337,"title":{},"body":{"classes/RegisterBody.html":{}}}],["src/auth/auth.service.ts:55",{"_index":2335,"title":{},"body":{"classes/RegisterBody.html":{}}}],["src/auth/auth.service.ts:61",{"_index":1912,"title":{},"body":{"classes/LoginBody.html":{}}}],["src/auth/auth.service.ts:67",{"_index":2333,"title":{},"body":{"classes/RefreshBody.html":{}}}],["src/auth/auth.service.ts:72",{"_index":606,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:73",{"_index":604,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:74",{"_index":607,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:75",{"_index":608,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:76",{"_index":585,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/jwt",{"_index":1759,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/ProfileController.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":1763,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:21",{"_index":1768,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:7",{"_index":1766,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/local.strategy.ts",{"_index":1904,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts:11",{"_index":1906,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/local.strategy.ts:16",{"_index":1908,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/spotify/spotifyauth.controller",{"_index":1932,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/auth/spotify/spotifyauth.controller.ts",{"_index":2683,"title":{},"body":{"controllers/SpotifyAuthController.html":{},"coverage.html":{}}}],["src/auth/spotify/spotifyauth.controller.ts:107",{"_index":2708,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["src/auth/spotify/spotifyauth.controller.ts:153",{"_index":2720,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["src/auth/spotify/spotifyauth.controller.ts:186",{"_index":2715,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["src/auth/spotify/spotifyauth.module",{"_index":1933,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/auth/spotify/spotifyauth.module.ts",{"_index":2776,"title":{},"body":{"modules/SpotifyAuthModule.html":{}}}],["src/auth/spotify/spotifyauth.service",{"_index":1935,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/auth/spotify/spotifyauth.service.ts",{"_index":2777,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"coverage.html":{}}}],["src/auth/spotify/spotifyauth.service.ts:141",{"_index":2798,"title":{},"body":{"injectables/SpotifyAuthService.html":{}}}],["src/auth/spotify/spotifyauth.service.ts:164",{"_index":2790,"title":{},"body":{"injectables/SpotifyAuthService.html":{}}}],["src/auth/spotify/spotifyauth.service.ts:20",{"_index":2932,"title":{},"body":{"classes/SpotifyTokenResponse.html":{}}}],["src/auth/spotify/spotifyauth.service.ts:214",{"_index":2800,"title":{},"body":{"injectables/SpotifyAuthService.html":{}}}],["src/auth/spotify/spotifyauth.service.ts:24",{"_index":2936,"title":{},"body":{"classes/SpotifyTokenResponse.html":{}}}],["src/auth/spotify/spotifyauth.service.ts:256",{"_index":2792,"title":{},"body":{"injectables/SpotifyAuthService.html":{}}}],["src/auth/spotify/spotifyauth.service.ts:28",{"_index":2935,"title":{},"body":{"classes/SpotifyTokenResponse.html":{}}}],["src/auth/spotify/spotifyauth.service.ts:286",{"_index":2794,"title":{},"body":{"injectables/SpotifyAuthService.html":{}}}],["src/auth/spotify/spotifyauth.service.ts:307",{"_index":2788,"title":{},"body":{"injectables/SpotifyAuthService.html":{}}}],["src/auth/spotify/spotifyauth.service.ts:32",{"_index":2933,"title":{},"body":{"classes/SpotifyTokenResponse.html":{}}}],["src/auth/spotify/spotifyauth.service.ts:36",{"_index":2934,"title":{},"body":{"classes/SpotifyTokenResponse.html":{}}}],["src/auth/spotify/spotifyauth.service.ts:377",{"_index":2802,"title":{},"body":{"injectables/SpotifyAuthService.html":{}}}],["src/auth/spotify/spotifyauth.service.ts:409",{"_index":2796,"title":{},"body":{"injectables/SpotifyAuthService.html":{}}}],["src/auth/spotify/spotifyauth.service.ts:42",{"_index":2928,"title":{},"body":{"classes/SpotifyTokenRefreshResponse.html":{}}}],["src/auth/spotify/spotifyauth.service.ts:46",{"_index":2931,"title":{},"body":{"classes/SpotifyTokenRefreshResponse.html":{}}}],["src/auth/spotify/spotifyauth.service.ts:50",{"_index":2930,"title":{},"body":{"classes/SpotifyTokenRefreshResponse.html":{}}}],["src/auth/spotify/spotifyauth.service.ts:54",{"_index":2929,"title":{},"body":{"classes/SpotifyTokenRefreshResponse.html":{}}}],["src/auth/spotify/spotifyauth.service.ts:62",{"_index":2927,"title":{},"body":{"classes/SpotifyTokenPair.html":{}}}],["src/auth/spotify/spotifyauth.service.ts:66",{"_index":2926,"title":{},"body":{"classes/SpotifyTokenPair.html":{}}}],["src/auth/spotify/spotifyauth.service.ts:72",{"_index":2919,"title":{},"body":{"classes/SpotifyCallbackResponse.html":{}}}],["src/auth/spotify/spotifyauth.service.ts:78",{"_index":2918,"title":{},"body":{"classes/SpotifyCallbackResponse.html":{}}}],["src/auth/spotify/spotifyauth.service.ts:83",{"_index":2803,"title":{},"body":{"injectables/SpotifyAuthService.html":{}}}],["src/auth/spotify/spotifyauth.service.ts:84",{"_index":2804,"title":{},"body":{"injectables/SpotifyAuthService.html":{}}}],["src/auth/spotify/spotifyauth.service.ts:86",{"_index":2786,"title":{},"body":{"injectables/SpotifyAuthService.html":{}}}],["src/bull",{"_index":739,"title":{},"body":{"modules/BullBoardModule.html":{},"injectables/BullBoardService.html":{},"modules/BullConfigModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{}}}],["src/common/constants.ts",{"_index":3602,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/exceptions/internal",{"_index":1748,"title":{},"body":{"classes/InternalError.html":{},"coverage.html":{}}}],["src/common/exceptions/user",{"_index":3524,"title":{},"body":{"classes/UserError.html":{},"coverage.html":{}}}],["src/common/filter/ws",{"_index":3562,"title":{},"body":{"classes/WsExceptionFilter.html":{},"coverage.html":{}}}],["src/common/utils.ts",{"_index":3603,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/image/image.module.ts",{"_index":1713,"title":{},"body":{"modules/ImageModule.html":{}}}],["src/image/image.service.ts",{"_index":1715,"title":{},"body":{"injectables/ImageService.html":{},"coverage.html":{}}}],["src/image/image.service.ts:12",{"_index":1721,"title":{},"body":{"injectables/ImageService.html":{}}}],["src/image/image.service.ts:40",{"_index":1730,"title":{},"body":{"injectables/ImageService.html":{}}}],["src/live/automod/automod.module",{"_index":1977,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/live/automod/automod.module.ts",{"_index":731,"title":{},"body":{"modules/AutoModerationModule.html":{}}}],["src/live/automod/automod.service",{"_index":1976,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/live/automod/automod.service.ts",{"_index":733,"title":{},"body":{"injectables/AutoModerationService.html":{},"coverage.html":{}}}],["src/live/dmusers/dmusers.module",{"_index":1974,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/live/dmusers/dmusers.module.ts",{"_index":1226,"title":{},"body":{"modules/DmUsersModule.html":{}}}],["src/live/dmusers/dmusers.service",{"_index":1973,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/live/dmusers/dmusers.service.ts",{"_index":1229,"title":{},"body":{"injectables/DmUsersService.html":{},"coverage.html":{},"interfaces/dmUser.html":{}}}],["src/live/dmusers/dmusers.service.ts:113",{"_index":1263,"title":{},"body":{"injectables/DmUsersService.html":{}}}],["src/live/dmusers/dmusers.service.ts:130",{"_index":1261,"title":{},"body":{"injectables/DmUsersService.html":{}}}],["src/live/dmusers/dmusers.service.ts:145",{"_index":1259,"title":{},"body":{"injectables/DmUsersService.html":{}}}],["src/live/dmusers/dmusers.service.ts:166",{"_index":1254,"title":{},"body":{"injectables/DmUsersService.html":{}}}],["src/live/dmusers/dmusers.service.ts:179",{"_index":1269,"title":{},"body":{"injectables/DmUsersService.html":{}}}],["src/live/dmusers/dmusers.service.ts:18",{"_index":1244,"title":{},"body":{"injectables/DmUsersService.html":{}}}],["src/live/dmusers/dmusers.service.ts:235",{"_index":1252,"title":{},"body":{"injectables/DmUsersService.html":{}}}],["src/live/dmusers/dmusers.service.ts:249",{"_index":1271,"title":{},"body":{"injectables/DmUsersService.html":{}}}],["src/live/dmusers/dmusers.service.ts:25",{"_index":1273,"title":{},"body":{"injectables/DmUsersService.html":{}}}],["src/live/dmusers/dmusers.service.ts:27",{"_index":1248,"title":{},"body":{"injectables/DmUsersService.html":{}}}],["src/live/dmusers/dmusers.service.ts:67",{"_index":1267,"title":{},"body":{"injectables/DmUsersService.html":{}}}],["src/live/dmusers/dmusers.service.ts:79",{"_index":1256,"title":{},"body":{"injectables/DmUsersService.html":{}}}],["src/live/dmusers/dmusers.service.ts:93",{"_index":1265,"title":{},"body":{"injectables/DmUsersService.html":{}}}],["src/live/dto/chatevent.dto.ts",{"_index":812,"title":{},"body":{"classes/ChatEventDto.html":{},"coverage.html":{}}}],["src/live/dto/chatevent.dto.ts:14",{"_index":820,"title":{},"body":{"classes/ChatEventDto.html":{}}}],["src/live/dto/chatevent.dto.ts:23",{"_index":817,"title":{},"body":{"classes/ChatEventDto.html":{}}}],["src/live/dto/chatevent.dto.ts:32",{"_index":828,"title":{},"body":{"classes/ChatEventDto.html":{}}}],["src/live/dto/chatevent.dto.ts:38",{"_index":822,"title":{},"body":{"classes/ChatEventDto.html":{}}}],["src/live/dto/emojireaction.dto.ts",{"_index":800,"title":{},"body":{"interfaces/Category.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"coverage.html":{}}}],["src/live/dto/emojireaction.dto.ts:25",{"_index":1607,"title":{},"body":{"classes/EmojiReactionDto.html":{}}}],["src/live/dto/emojireaction.dto.ts:31",{"_index":1605,"title":{},"body":{"classes/EmojiReactionDto.html":{}}}],["src/live/dto/emojireaction.dto.ts:37",{"_index":1609,"title":{},"body":{"classes/EmojiReactionDto.html":{}}}],["src/live/dto/livechatmessage.dto.ts",{"_index":1785,"title":{},"body":{"classes/LiveChatMessageDto.html":{},"coverage.html":{}}}],["src/live/dto/livechatmessage.dto.ts:10",{"_index":1789,"title":{},"body":{"classes/LiveChatMessageDto.html":{}}}],["src/live/dto/livechatmessage.dto.ts:14",{"_index":1788,"title":{},"body":{"classes/LiveChatMessageDto.html":{}}}],["src/live/dto/livechatmessage.dto.ts:20",{"_index":1792,"title":{},"body":{"classes/LiveChatMessageDto.html":{}}}],["src/live/dto/livechatmessage.dto.ts:24",{"_index":1790,"title":{},"body":{"classes/LiveChatMessageDto.html":{}}}],["src/live/dto/livechatmessage.dto.ts:28",{"_index":1787,"title":{},"body":{"classes/LiveChatMessageDto.html":{}}}],["src/live/dto/playbackevent.dto.ts",{"_index":2058,"title":{},"body":{"classes/PlaybackEventDto.html":{},"coverage.html":{}}}],["src/live/dto/playbackevent.dto.ts:11",{"_index":2059,"title":{},"body":{"classes/PlaybackEventDto.html":{}}}],["src/live/dto/playbackevent.dto.ts:20",{"_index":2066,"title":{},"body":{"classes/PlaybackEventDto.html":{}}}],["src/live/dto/playbackevent.dto.ts:24",{"_index":2062,"title":{},"body":{"classes/PlaybackEventDto.html":{}}}],["src/live/dto/playbackevent.dto.ts:32",{"_index":2065,"title":{},"body":{"classes/PlaybackEventDto.html":{}}}],["src/live/dto/playbackevent.dto.ts:36",{"_index":2064,"title":{},"body":{"classes/PlaybackEventDto.html":{}}}],["src/live/dto/playbackevent.dto.ts:45",{"_index":2069,"title":{},"body":{"classes/PlaybackEventDto.html":{}}}],["src/live/dto/playbackevent.dto.ts:49",{"_index":2061,"title":{},"body":{"classes/PlaybackEventDto.html":{}}}],["src/live/dto/queueevent.dto.ts",{"_index":2248,"title":{},"body":{"classes/QueueEventDto.html":{},"coverage.html":{}}}],["src/live/dto/queueevent.dto.ts:13",{"_index":2251,"title":{},"body":{"classes/QueueEventDto.html":{}}}],["src/live/dto/queueevent.dto.ts:17",{"_index":2250,"title":{},"body":{"classes/QueueEventDto.html":{}}}],["src/live/dto/queueevent.dto.ts:9",{"_index":2253,"title":{},"body":{"classes/QueueEventDto.html":{}}}],["src/live/eventqueue/eventqueue.service",{"_index":1966,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/live/eventqueue/eventqueue.service.ts",{"_index":1611,"title":{},"body":{"injectables/EventQueueService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/live/eventqueue/eventqueue.service.ts:12",{"_index":1620,"title":{},"body":{"injectables/EventQueueService.html":{}}}],["src/live/eventqueue/eventqueue.service.ts:13",{"_index":1614,"title":{},"body":{"injectables/EventQueueService.html":{}}}],["src/live/eventqueue/eventqueue.service.ts:33",{"_index":1617,"title":{},"body":{"injectables/EventQueueService.html":{}}}],["src/live/live.gateway",{"_index":1936,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/live/live.gateway.ts",{"_index":3608,"title":{},"body":{"coverage.html":{}}}],["src/live/live.module",{"_index":1937,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/live/live.module.ts",{"_index":1801,"title":{},"body":{"modules/LiveModule.html":{}}}],["src/live/live.service",{"_index":1967,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/live/live.service.ts",{"_index":1809,"title":{},"body":{"injectables/LiveService.html":{},"coverage.html":{}}}],["src/live/live.service.ts:16",{"_index":1810,"title":{},"body":{"injectables/LiveService.html":{}}}],["src/live/roomusers/roomuser.module",{"_index":1940,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/live/roomusers/roomuser.module.ts",{"_index":2517,"title":{},"body":{"modules/RoomUsersModule.html":{}}}],["src/live/roomusers/roomuser.service",{"_index":1939,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/live/roomusers/roomuser.service.ts",{"_index":2519,"title":{},"body":{"injectables/RoomUsersService.html":{},"coverage.html":{},"interfaces/liveChatUser.html":{}}}],["src/live/roomusers/roomuser.service.ts:115",{"_index":2537,"title":{},"body":{"injectables/RoomUsersService.html":{}}}],["src/live/roomusers/roomuser.service.ts:131",{"_index":2534,"title":{},"body":{"injectables/RoomUsersService.html":{}}}],["src/live/roomusers/roomuser.service.ts:147",{"_index":2529,"title":{},"body":{"injectables/RoomUsersService.html":{}}}],["src/live/roomusers/roomuser.service.ts:15",{"_index":2524,"title":{},"body":{"injectables/RoomUsersService.html":{}}}],["src/live/roomusers/roomuser.service.ts:166",{"_index":2531,"title":{},"body":{"injectables/RoomUsersService.html":{}}}],["src/live/roomusers/roomuser.service.ts:21",{"_index":2538,"title":{},"body":{"injectables/RoomUsersService.html":{}}}],["src/live/roomusers/roomuser.service.ts:23",{"_index":2525,"title":{},"body":{"injectables/RoomUsersService.html":{}}}],["src/live/roomusers/roomuser.service.ts:68",{"_index":2535,"title":{},"body":{"injectables/RoomUsersService.html":{}}}],["src/live/roomusers/roomuser.service.ts:80",{"_index":2526,"title":{},"body":{"injectables/RoomUsersService.html":{}}}],["src/live/roomusers/roomuser.service.ts:94",{"_index":2532,"title":{},"body":{"injectables/RoomUsersService.html":{}}}],["src/logger/logger.service",{"_index":1975,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/logger/logger.service.ts",{"_index":2021,"title":{},"body":{"injectables/MyLogger.html":{},"coverage.html":{}}}],["src/logger/logger.service.ts:16",{"_index":2031,"title":{},"body":{"injectables/MyLogger.html":{}}}],["src/logger/logger.service.ts:20",{"_index":2029,"title":{},"body":{"injectables/MyLogger.html":{}}}],["src/logger/logger.service.ts:24",{"_index":2035,"title":{},"body":{"injectables/MyLogger.html":{}}}],["src/logger/logger.service.ts:28",{"_index":2026,"title":{},"body":{"injectables/MyLogger.html":{}}}],["src/logger/logger.service.ts:32",{"_index":2033,"title":{},"body":{"injectables/MyLogger.html":{}}}],["src/logger/logger.service.ts:6",{"_index":2046,"title":{},"body":{"injectables/MyLogger.html":{}}}],["src/main.ts",{"_index":3611,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/modules/db",{"_index":1193,"title":{},"body":{"modules/DbUtilsModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/modules/dto",{"_index":1342,"title":{},"body":{"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"coverage.html":{}}}],["src/modules/genres/genres.controller",{"_index":1965,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/modules/genres/genres.controller.ts",{"_index":1679,"title":{},"body":{"controllers/GenresController.html":{},"coverage.html":{}}}],["src/modules/genres/genres.controller.ts:29",{"_index":1688,"title":{},"body":{"controllers/GenresController.html":{}}}],["src/modules/genres/genres.module.ts",{"_index":1697,"title":{},"body":{"modules/GenresModule.html":{}}}],["src/modules/genres/genres.service",{"_index":1964,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/modules/genres/genres.service.ts",{"_index":1699,"title":{},"body":{"injectables/GenresService.html":{},"coverage.html":{}}}],["src/modules/genres/genres.service.ts:5",{"_index":1700,"title":{},"body":{"injectables/GenresService.html":{}}}],["src/modules/genres/genres.service.ts:8",{"_index":1701,"title":{},"body":{"injectables/GenresService.html":{}}}],["src/modules/rooms/dto/createroomdto.ts",{"_index":1120,"title":{},"body":{"classes/CreateRoomDto.html":{},"coverage.html":{}}}],["src/modules/rooms/dto/createroomdto.ts:14",{"_index":1142,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["src/modules/rooms/dto/createroomdto.ts:18",{"_index":1130,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["src/modules/rooms/dto/createroomdto.ts:23",{"_index":1138,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["src/modules/rooms/dto/createroomdto.ts:28",{"_index":1136,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["src/modules/rooms/dto/createroomdto.ts:33",{"_index":1137,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["src/modules/rooms/dto/createroomdto.ts:39",{"_index":1145,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["src/modules/rooms/dto/createroomdto.ts:45",{"_index":1132,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["src/modules/rooms/dto/createroomdto.ts:50",{"_index":1140,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["src/modules/rooms/dto/createroomdto.ts:55",{"_index":1134,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["src/modules/rooms/dto/createroomdto.ts:60",{"_index":1135,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["src/modules/rooms/dto/createroomdto.ts:65",{"_index":1141,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["src/modules/rooms/dto/createroomdto.ts:70",{"_index":1144,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["src/modules/rooms/dto/createroomdto.ts:77",{"_index":1147,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["src/modules/rooms/dto/room.dto",{"_index":3542,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts",{"_index":2445,"title":{},"body":{"classes/RoomDto.html":{},"coverage.html":{}}}],["src/modules/rooms/dto/room.dto.ts:101",{"_index":2471,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:108",{"_index":2463,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:115",{"_index":2448,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:21",{"_index":2449,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:25",{"_index":2468,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:29",{"_index":2467,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:33",{"_index":2469,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:37",{"_index":2464,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:41",{"_index":2466,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:45",{"_index":2454,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:49",{"_index":2460,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:53",{"_index":2458,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:57",{"_index":2459,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:61",{"_index":2470,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:65",{"_index":2455,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:69",{"_index":2453,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:73",{"_index":2461,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:77",{"_index":2456,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:81",{"_index":2457,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:85",{"_index":2465,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:94",{"_index":2452,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts",{"_index":6,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"coverage.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:103",{"_index":26,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:109",{"_index":24,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:114",{"_index":2616,"title":{},"body":{"classes/SessionDurationPerDayDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:117",{"_index":2615,"title":{},"body":{"classes/SessionDurationPerDayDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:123",{"_index":2612,"title":{},"body":{"classes/SessionDataPerDayDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:127",{"_index":2614,"title":{},"body":{"classes/SessionDataPerDayDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:131",{"_index":2613,"title":{},"body":{"classes/SessionDataPerDayDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:136",{"_index":1755,"title":{},"body":{"classes/JoinsCount.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:139",{"_index":1756,"title":{},"body":{"classes/JoinsCount.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:143",{"_index":1757,"title":{},"body":{"classes/JoinsPerDay.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:144",{"_index":1758,"title":{},"body":{"classes/JoinsPerDay.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:170",{"_index":2426,"title":{},"body":{"classes/RoomAnalyticsParticipationDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:186",{"_index":2429,"title":{},"body":{"classes/RoomAnalyticsParticipationDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:209",{"_index":2433,"title":{},"body":{"classes/RoomAnalyticsParticipationDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:225",{"_index":2430,"title":{},"body":{"classes/RoomAnalyticsParticipationDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:234",{"_index":2432,"title":{},"body":{"classes/RoomAnalyticsParticipationDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:239",{"_index":1913,"title":{},"body":{"classes/MessagesPerHour.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:242",{"_index":1914,"title":{},"body":{"classes/MessagesPerHour.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:25",{"_index":2425,"title":{},"body":{"classes/RoomAnalyticsKeyMetricsDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:263",{"_index":2421,"title":{},"body":{"classes/RoomAnalyticsInteractionsDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:270",{"_index":2422,"title":{},"body":{"classes/RoomAnalyticsInteractionsDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:274",{"_index":2420,"title":{},"body":{"classes/RoomAnalyticsInteractionsDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:280",{"_index":2627,"title":{},"body":{"classes/SongAnalyticsDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:283",{"_index":2625,"title":{},"body":{"classes/SongAnalyticsDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:287",{"_index":2622,"title":{},"body":{"classes/SongAnalyticsDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:291",{"_index":2628,"title":{},"body":{"classes/SongAnalyticsDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:295",{"_index":2618,"title":{},"body":{"classes/SongAnalyticsDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:299",{"_index":2624,"title":{},"body":{"classes/SongAnalyticsDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:303",{"_index":2620,"title":{},"body":{"classes/SongAnalyticsDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:309",{"_index":2444,"title":{},"body":{"classes/RoomAnalyticsVotesDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:315",{"_index":2443,"title":{},"body":{"classes/RoomAnalyticsVotesDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:322",{"_index":2441,"title":{},"body":{"classes/RoomAnalyticsVotesDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:329",{"_index":2440,"title":{},"body":{"classes/RoomAnalyticsVotesDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:340",{"_index":2442,"title":{},"body":{"classes/RoomAnalyticsVotesDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:353",{"_index":2437,"title":{},"body":{"classes/RoomAnalyticsSongsDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:363",{"_index":2438,"title":{},"body":{"classes/RoomAnalyticsSongsDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:380",{"_index":2406,"title":{},"body":{"classes/RoomAnalyticsContributorsDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:393",{"_index":2414,"title":{},"body":{"classes/RoomAnalyticsDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:402",{"_index":2412,"title":{},"body":{"classes/RoomAnalyticsDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:411",{"_index":2410,"title":{},"body":{"classes/RoomAnalyticsDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:417",{"_index":2418,"title":{},"body":{"classes/RoomAnalyticsDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:42",{"_index":2424,"title":{},"body":{"classes/RoomAnalyticsKeyMetricsDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:423",{"_index":2416,"title":{},"body":{"classes/RoomAnalyticsDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:432",{"_index":2408,"title":{},"body":{"classes/RoomAnalyticsDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:59",{"_index":2423,"title":{},"body":{"classes/RoomAnalyticsKeyMetricsDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:68",{"_index":2436,"title":{},"body":{"classes/RoomAnalyticsQueueDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:74",{"_index":2435,"title":{},"body":{"classes/RoomAnalyticsQueueDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:82",{"_index":2055,"title":{},"body":{"classes/ParticipantsPerHourDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:89",{"_index":2057,"title":{},"body":{"classes/ParticipantsPerHourDto.html":{}}}],["src/modules/rooms/dto/roomanalytics.dto.ts:97",{"_index":22,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{}}}],["src/modules/rooms/dto/roomsong.dto",{"_index":2070,"title":{},"body":{"classes/PlaybackEventDto.html":{}}}],["src/modules/rooms/dto/roomsong.dto.ts",{"_index":2499,"title":{},"body":{"classes/RoomSongDto.html":{},"coverage.html":{}}}],["src/modules/rooms/dto/roomsong.dto.ts:11",{"_index":2512,"title":{},"body":{"classes/RoomSongDto.html":{}}}],["src/modules/rooms/dto/roomsong.dto.ts:15",{"_index":2509,"title":{},"body":{"classes/RoomSongDto.html":{}}}],["src/modules/rooms/dto/roomsong.dto.ts:19",{"_index":2504,"title":{},"body":{"classes/RoomSongDto.html":{}}}],["src/modules/rooms/dto/roomsong.dto.ts:23",{"_index":2511,"title":{},"body":{"classes/RoomSongDto.html":{}}}],["src/modules/rooms/dto/roomsong.dto.ts:27",{"_index":2505,"title":{},"body":{"classes/RoomSongDto.html":{}}}],["src/modules/rooms/dto/roomsong.dto.ts:31",{"_index":2507,"title":{},"body":{"classes/RoomSongDto.html":{}}}],["src/modules/rooms/dto/roomsong.dto.ts:35",{"_index":2508,"title":{},"body":{"classes/RoomSongDto.html":{}}}],["src/modules/rooms/dto/roomsong.dto.ts:7",{"_index":2510,"title":{},"body":{"classes/RoomSongDto.html":{}}}],["src/modules/rooms/dto/songinfo.dto",{"_index":3543,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/modules/rooms/dto/songinfo.dto.ts",{"_index":2629,"title":{},"body":{"classes/SongInfoDto.html":{},"coverage.html":{}}}],["src/modules/rooms/dto/songinfo.dto.ts:30",{"_index":2637,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["src/modules/rooms/dto/songinfo.dto.ts:34",{"_index":2641,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["src/modules/rooms/dto/songinfo.dto.ts:42",{"_index":2633,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["src/modules/rooms/dto/songinfo.dto.ts:47",{"_index":2635,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["src/modules/rooms/dto/songinfo.dto.ts:51",{"_index":2636,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["src/modules/rooms/dto/songinfo.dto.ts:55",{"_index":2638,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["src/modules/rooms/dto/songinfo.dto.ts:64",{"_index":2640,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["src/modules/rooms/dto/updateroomdto.ts",{"_index":3124,"title":{},"body":{"classes/UpdateRoomDto.html":{},"coverage.html":{}}}],["src/modules/rooms/dto/vote.dto.ts",{"_index":3555,"title":{},"body":{"classes/VoteDto.html":{},"coverage.html":{}}}],["src/modules/rooms/dto/vote.dto.ts:11",{"_index":3560,"title":{},"body":{"classes/VoteDto.html":{}}}],["src/modules/rooms/dto/vote.dto.ts:15",{"_index":3559,"title":{},"body":{"classes/VoteDto.html":{}}}],["src/modules/rooms/dto/vote.dto.ts:19",{"_index":3557,"title":{},"body":{"classes/VoteDto.html":{}}}],["src/modules/rooms/dto/vote.dto.ts:7",{"_index":3558,"title":{},"body":{"classes/VoteDto.html":{}}}],["src/modules/rooms/roomanalytics.service",{"_index":1982,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/modules/rooms/roomanalytics.service.ts",{"_index":3617,"title":{},"body":{"coverage.html":{}}}],["src/modules/rooms/roomqueue/roomqueue.module.ts",{"_index":2496,"title":{},"body":{"modules/RoomQueueModule.html":{}}}],["src/modules/rooms/roomqueue/roomqueue.service",{"_index":1972,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/modules/rooms/roomqueue/roomqueue.service.ts",{"_index":3618,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/modules/rooms/rooms.controller",{"_index":1942,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/modules/rooms/rooms.controller.ts",{"_index":3626,"title":{},"body":{"coverage.html":{}}}],["src/modules/rooms/rooms.module",{"_index":1943,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/modules/rooms/rooms.module.ts",{"_index":2552,"title":{},"body":{"modules/RoomsModule.html":{}}}],["src/modules/rooms/rooms.service",{"_index":1945,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/modules/rooms/rooms.service.ts",{"_index":3142,"title":{},"body":{"classes/UserActionDto.html":{},"coverage.html":{}}}],["src/modules/rooms/rooms.service.ts:35",{"_index":3150,"title":{},"body":{"classes/UserActionDto.html":{}}}],["src/modules/search/dto/searchhistorydto.ts",{"_index":2601,"title":{},"body":{"classes/SearchHistoryDto.html":{},"coverage.html":{}}}],["src/modules/search/dto/searchhistorydto.ts:11",{"_index":2603,"title":{},"body":{"classes/SearchHistoryDto.html":{}}}],["src/modules/search/dto/searchhistorydto.ts:15",{"_index":2604,"title":{},"body":{"classes/SearchHistoryDto.html":{}}}],["src/modules/search/dto/searchhistorydto.ts:7",{"_index":2602,"title":{},"body":{"classes/SearchHistoryDto.html":{}}}],["src/modules/search/search.controller",{"_index":1947,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/modules/search/search.controller.ts",{"_index":3630,"title":{},"body":{"coverage.html":{}}}],["src/modules/search/search.module",{"_index":1948,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/modules/search/search.module.ts",{"_index":2609,"title":{},"body":{"modules/SearchModule.html":{}}}],["src/modules/search/search.service",{"_index":1949,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/modules/search/search.service.ts",{"_index":833,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"coverage.html":{}}}],["src/modules/search/search.service.ts:20",{"_index":1117,"title":{},"body":{"classes/CombinedSearchResults.html":{}}}],["src/modules/search/search.service.ts:29",{"_index":1118,"title":{},"body":{"classes/CombinedSearchResults.html":{}}}],["src/modules/search/search.service.ts:46",{"_index":838,"title":{},"body":{"classes/CombinedSearchHistory.html":{}}}],["src/modules/songs/songs.controller",{"_index":1971,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/modules/songs/songs.controller.ts",{"_index":2662,"title":{},"body":{"controllers/SongsController.html":{},"coverage.html":{}}}],["src/modules/songs/songs.module.ts",{"_index":2673,"title":{},"body":{"modules/SongsModule.html":{}}}],["src/modules/songs/songs.service",{"_index":1969,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/modules/songs/songs.service.ts",{"_index":2675,"title":{},"body":{"injectables/SongsService.html":{},"coverage.html":{}}}],["src/modules/songs/songs.service.ts:6",{"_index":2677,"title":{},"body":{"injectables/SongsService.html":{}}}],["src/modules/songs/songs.service.ts:9",{"_index":2679,"title":{},"body":{"injectables/SongsService.html":{}}}],["src/modules/users/dto/dm.dto.ts",{"_index":1198,"title":{},"body":{"classes/DirectMessageDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/dm.dto.ts:16",{"_index":1213,"title":{},"body":{"classes/DirectMessageDto.html":{}}}],["src/modules/users/dto/dm.dto.ts:20",{"_index":1215,"title":{},"body":{"classes/DirectMessageDto.html":{}}}],["src/modules/users/dto/dm.dto.ts:29",{"_index":1219,"title":{},"body":{"classes/DirectMessageDto.html":{}}}],["src/modules/users/dto/dm.dto.ts:38",{"_index":1218,"title":{},"body":{"classes/DirectMessageDto.html":{}}}],["src/modules/users/dto/dm.dto.ts:42",{"_index":1211,"title":{},"body":{"classes/DirectMessageDto.html":{}}}],["src/modules/users/dto/dm.dto.ts:46",{"_index":1210,"title":{},"body":{"classes/DirectMessageDto.html":{}}}],["src/modules/users/dto/dm.dto.ts:50",{"_index":1214,"title":{},"body":{"classes/DirectMessageDto.html":{}}}],["src/modules/users/dto/dm.dto.ts:54",{"_index":1216,"title":{},"body":{"classes/DirectMessageDto.html":{}}}],["src/modules/users/dto/dm.dto.ts:58",{"_index":1208,"title":{},"body":{"classes/DirectMessageDto.html":{}}}],["src/modules/users/dto/updateuser.dto.ts",{"_index":3135,"title":{},"body":{"classes/UpdateUserDto-2.html":{},"coverage.html":{}}}],["src/modules/users/dto/updateuser.dto.ts:4",{"_index":3136,"title":{},"body":{"classes/UpdateUserDto-2.html":{}}}],["src/modules/users/dto/user.dto.ts",{"_index":1650,"title":{},"body":{"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{},"coverage.html":{}}}],["src/modules/users/dto/user.dto.ts:103",{"_index":3506,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dto/user.dto.ts:107",{"_index":3507,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dto/user.dto.ts:111",{"_index":3502,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dto/user.dto.ts:121",{"_index":3496,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dto/user.dto.ts:131",{"_index":3497,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dto/user.dto.ts:140",{"_index":3500,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dto/user.dto.ts:144",{"_index":3484,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dto/user.dto.ts:153",{"_index":3488,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dto/user.dto.ts:16",{"_index":1651,"title":{},"body":{"classes/FollowersAndFollowing.html":{}}}],["src/modules/users/dto/user.dto.ts:161",{"_index":3486,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dto/user.dto.ts:170",{"_index":3490,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dto/user.dto.ts:179",{"_index":3494,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dto/user.dto.ts:188",{"_index":3492,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dto/user.dto.ts:197",{"_index":3503,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dto/user.dto.ts:201",{"_index":3498,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dto/user.dto.ts:210",{"_index":3505,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dto/user.dto.ts:22",{"_index":1653,"title":{},"body":{"classes/FollowersAndFollowing.html":{}}}],["src/modules/users/dto/user.dto.ts:28",{"_index":2546,"title":{},"body":{"classes/RoomsData.html":{}}}],["src/modules/users/dto/user.dto.ts:40",{"_index":2547,"title":{},"body":{"classes/RoomsData.html":{}}}],["src/modules/users/dto/user.dto.ts:46",{"_index":2660,"title":{},"body":{"classes/SongInfosWithCount.html":{}}}],["src/modules/users/dto/user.dto.ts:52",{"_index":2661,"title":{},"body":{"classes/SongInfosWithCount.html":{}}}],["src/modules/users/dto/user.dto.ts:58",{"_index":1782,"title":{},"body":{"classes/LinksWithCount.html":{}}}],["src/modules/users/dto/user.dto.ts:68",{"_index":1784,"title":{},"body":{"classes/LinksWithCount.html":{}}}],["src/modules/users/dto/user.dto.ts:74",{"_index":1706,"title":{},"body":{"classes/GenresWithCount.html":{}}}],["src/modules/users/dto/user.dto.ts:79",{"_index":1708,"title":{},"body":{"classes/GenresWithCount.html":{}}}],["src/modules/users/dto/user.dto.ts:85",{"_index":3527,"title":{},"body":{"classes/UserFriendship.html":{}}}],["src/modules/users/dto/user.dto.ts:89",{"_index":3525,"title":{},"body":{"classes/UserFriendship.html":{}}}],["src/modules/users/dto/user.dto.ts:93",{"_index":3526,"title":{},"body":{"classes/UserFriendship.html":{}}}],["src/modules/users/dto/user.dto.ts:99",{"_index":3501,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/users.controller",{"_index":1951,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/modules/users/users.controller.ts",{"_index":3633,"title":{},"body":{"coverage.html":{}}}],["src/modules/users/users.module",{"_index":1952,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/modules/users/users.module.ts",{"_index":3550,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/modules/users/users.service",{"_index":1953,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/modules/users/users.service.ts",{"_index":3634,"title":{},"body":{"coverage.html":{}}}],["src/recommendations/recommendations.module",{"_index":1980,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/recommendations/recommendations.module.ts",{"_index":2257,"title":{},"body":{"modules/RecommendationsModule.html":{}}}],["src/recommendations/recommendations.service",{"_index":1979,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/recommendations/recommendations.service.ts",{"_index":2259,"title":{},"body":{"injectables/RecommendationsService.html":{},"coverage.html":{}}}],["src/recommendations/recommendations.service.ts:108",{"_index":2276,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["src/recommendations/recommendations.service.ts:18",{"_index":2295,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["src/recommendations/recommendations.service.ts:19",{"_index":2294,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["src/recommendations/recommendations.service.ts:33",{"_index":2281,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["src/recommendations/recommendations.service.ts:4",{"_index":2293,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["src/recommendations/recommendations.service.ts:44",{"_index":2279,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["src/recommendations/recommendations.service.ts:48",{"_index":2271,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["src/recommendations/recommendations.service.ts:85",{"_index":2273,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["src/retry/retry.module",{"_index":2077,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/retry/retry.module.ts",{"_index":2343,"title":{},"body":{"modules/RetryModule.html":{}}}],["src/retry/retry.service",{"_index":2088,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/retry/retry.service.ts",{"_index":2345,"title":{},"body":{"injectables/RetryService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/retry/retry.service.ts:59",{"_index":2350,"title":{},"body":{"injectables/RetryService.html":{}}}],["src/retry/retry.service.ts:85",{"_index":2355,"title":{},"body":{"injectables/RetryService.html":{}}}],["src/s3/s3.module",{"_index":1954,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/s3/s3.module.ts",{"_index":2561,"title":{},"body":{"modules/S3Module.html":{}}}],["src/s3/s3.service",{"_index":1955,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/s3/s3.service.ts",{"_index":2563,"title":{},"body":{"injectables/S3Service.html":{},"coverage.html":{}}}],["src/s3/s3.service.ts:10",{"_index":2572,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/s3/s3.service.ts:11",{"_index":2571,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/s3/s3.service.ts:12",{"_index":2570,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/s3/s3.service.ts:13",{"_index":2573,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/s3/s3.service.ts:14",{"_index":2566,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/s3/s3.service.ts:54",{"_index":2569,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/s3/s3.service.ts:78",{"_index":2568,"title":{},"body":{"injectables/S3Service.html":{}}}],["src/spotify/spotify.module",{"_index":1956,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/spotify/spotify.module.ts",{"_index":2924,"title":{},"body":{"modules/SpotifyModule.html":{}}}],["src/spotify/spotify.service",{"_index":1958,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/spotify/spotify.service.ts",{"_index":3639,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/tasks/tasks.module",{"_index":1959,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/tasks/tasks.module.ts",{"_index":2993,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/tasks/tasks.processor",{"_index":1961,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/tasks/tasks.processor.ts",{"_index":2997,"title":{},"body":{"classes/TasksProcessor.html":{},"coverage.html":{}}}],["src/tasks/tasks.processor.ts:13",{"_index":3002,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["src/tasks/tasks.processor.ts:187",{"_index":3006,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["src/tasks/tasks.processor.ts:20",{"_index":3009,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["src/tasks/tasks.processor.ts:26",{"_index":3013,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["src/tasks/tasks.service",{"_index":1963,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["src/tasks/tasks.service.ts",{"_index":3106,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["src/tasks/tasks.service.ts:11",{"_index":3109,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:14",{"_index":3113,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:18",{"_index":3111,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:32",{"_index":3116,"title":{},"body":{"injectables/TasksService.html":{}}}],["srcsource",{"_index":3792,"title":{},"body":{"index.html":{}}}],["sroom",{"_index":1487,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["sroom.end_date",{"_index":1491,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["sroom.start_date",{"_index":1490,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["st",{"_index":1865,"title":{},"body":{"injectables/LiveService.html":{}}}],["standards",{"_index":3922,"title":{},"body":{"index.html":{}}}],["start",{"_index":1858,"title":{},"body":{"injectables/LiveService.html":{},"injectables/RetryService.html":{},"classes/TasksProcessor.html":{},"index.html":{}}}],["start.valueof",{"_index":1862,"title":{},"body":{"injectables/LiveService.html":{}}}],["start:dev",{"_index":3729,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":3731,"title":{},"body":{"index.html":{}}}],["start_date",{"_index":947,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateRoomDto.html":{},"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/UserActionDto.html":{}}}],["start_time",{"_index":2630,"title":{},"body":{"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{}}}],["started",{"_index":788,"title":{"index.html":{}},"body":{"injectables/BullBoardService.html":{},"classes/SongInfoDto.html":{},"classes/TasksProcessor.html":{}}}],["starting",{"_index":2356,"title":{},"body":{"injectables/RetryService.html":{}}}],["startswith",{"_index":1003,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["starttime",{"_index":2503,"title":{},"body":{"classes/RoomSongDto.html":{}}}],["start}ms",{"_index":3039,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["state",{"_index":2689,"title":{},"body":{"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["statements",{"_index":3583,"title":{},"body":{"coverage.html":{}}}],["stateobj",{"_index":2740,"title":{},"body":{"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["stateobj[\"expo",{"_index":2744,"title":{},"body":{"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["static",{"_index":750,"title":{},"body":{"injectables/BullBoardService.html":{}}}],["statistics",{"_index":93,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["status",{"_index":484,"title":{},"body":{"controllers/AuthController.html":{},"injectables/BullBoardService.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"injectables/PrismaService.html":{},"injectables/RetryService.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"controllers/SpotifyAuthController.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{},"miscellaneous/typealiases.html":{}}}],["status.error.message",{"_index":2124,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/RetryService.html":{}}}],["status.index",{"_index":2099,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/RetryService.html":{}}}],["step",{"_index":2854,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["stop_media",{"_index":4087,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stop_typing",{"_index":4015,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stopmedia",{"_index":4088,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stoptyping",{"_index":4016,"title":{},"body":{"miscellaneous/variables.html":{}}}],["storage",{"_index":200,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"injectables/S3Service.html":{},"dependencies.html":{},"index.html":{}}}],["stored",{"_index":3868,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":1769,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":134,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"classes/ChatEventDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/DirectMessageDto.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"injectables/EventQueueService.html":{},"classes/FollowersAndFollowing.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"classes/GenresWithCount.html":{},"injectables/ImageService.html":{},"classes/InternalError.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/LinksWithCount.html":{},"classes/LiveChatMessageDto.html":{},"injectables/LiveService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"classes/MessagesPerHour.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"injectables/MyLogger.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/PlaybackEventDto.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/QueueEventDto.html":{},"injectables/RecommendationsService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/RoomSongDto.html":{},"injectables/RoomUsersService.html":{},"classes/RoomsData.html":{},"injectables/S3Service.html":{},"classes/SearchHistoryDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/SongInfosWithCount.html":{},"controllers/SongsController.html":{},"injectables/SongsService.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/SpotifyUser.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/UpdateUserDto-1.html":{},"classes/UpdateUserDto-2.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserError.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{},"classes/VoteDto.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":836,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["string})@apioperation({summary",{"_index":1687,"title":{},"body":{"controllers/GenresController.html":{}}}],["string})@apiresponse({status",{"_index":439,"title":{},"body":{"controllers/AuthController.html":{}}}],["string})@type(undefined)@isstring",{"_index":3504,"title":{},"body":{"classes/UserDto.html":{}}}],["string})@useinterceptors(undefined",{"_index":212,"title":{},"body":{"controllers/AppController.html":{}}}],["structure",{"_index":3920,"title":{},"body":{"index.html":{}}}],["sub",{"_index":464,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["sub/id",{"_index":633,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["sub/id'})@isstring",{"_index":2336,"title":{},"body":{"classes/RegisterBody.html":{}}}],["subrooms",{"_index":3403,"title":{},"body":{"classes/UserActionDto.html":{}}}],["subrooms.map((subroom",{"_index":3405,"title":{},"body":{"classes/UserActionDto.html":{}}}],["subrooms[1]?.map((song",{"_index":3413,"title":{},"body":{"classes/UserActionDto.html":{}}}],["successful",{"_index":510,"title":{},"body":{"controllers/AuthController.html":{}}}],["successfully",{"_index":437,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EventQueueService.html":{},"controllers/ProfileController.html":{},"controllers/SpotifyAuthController.html":{},"classes/UserActionDto.html":{}}}],["such",{"_index":3863,"title":{},"body":{"index.html":{}}}],["sum",{"_index":2307,"title":{},"body":{"injectables/RecommendationsService.html":{},"classes/UserActionDto.html":{}}}],["summary",{"_index":246,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/GenresController.html":{},"controllers/ProfileController.html":{},"controllers/SongsController.html":{},"controllers/SpotifyAuthController.html":{}}}],["super",{"_index":1774,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{}}}],["super(message",{"_index":1753,"title":{},"body":{"classes/InternalError.html":{},"classes/UserError.html":{}}}],["support",{"_index":3742,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":3925,"title":{},"body":{"modules.html":{}}}],["swap_song_vote",{"_index":4052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swapsongvote",{"_index":4053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["switch",{"_index":3953,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sync",{"_index":4021,"title":{},"body":{"miscellaneous/variables.html":{}}}],["synchronised",{"_index":4022,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t",{"_index":2351,"title":{},"body":{"injectables/RetryService.html":{}}}],["table",{"_index":1483,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/SongInfoDto.html":{},"classes/UserActionDto.html":{},"coverage.html":{}}}],["table_lock_timeout",{"_index":3642,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["table_state",{"_index":3987,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":3643,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":952,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateRoomDto.html":{},"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{}}}],["tagscondition",{"_index":978,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["task",{"_index":745,"title":{},"body":{"modules/BullBoardModule.html":{},"injectables/EventQueueService.html":{},"modules/TasksModule.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{}}}],["task.tostring",{"_index":1638,"title":{},"body":{"injectables/EventQueueService.html":{}}}],["taskdata",{"_index":3114,"title":{},"body":{"injectables/TasksService.html":{}}}],["taskfunction",{"_index":1616,"title":{},"body":{"injectables/EventQueueService.html":{},"miscellaneous/typealiases.html":{}}}],["taskqueue",{"_index":755,"title":{},"body":{"injectables/BullBoardService.html":{},"injectables/TasksService.html":{}}}],["tasks",{"_index":1623,"title":{},"body":{"injectables/EventQueueService.html":{},"index.html":{}}}],["tasks.module.ts",{"_index":2994,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasks.processor",{"_index":2996,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasks.service",{"_index":2995,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasks/tasks.module",{"_index":361,"title":{},"body":{"modules/AppModule.html":{},"modules/RoomQueueModule.html":{},"modules/SpotifyAuthModule.html":{}}}],["tasks/tasks.service",{"_index":2812,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["tasksmodule",{"_index":334,"title":{"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/RoomQueueModule.html":{},"modules/SpotifyAuthModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["tasksprocessor",{"_index":1960,"title":{"classes/TasksProcessor.html":{}},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/TasksModule.html":{},"classes/TasksProcessor.html":{},"coverage.html":{}}}],["tasksscheduled",{"_index":3842,"title":{},"body":{"index.html":{}}}],["tasksservice",{"_index":1962,"title":{"injectables/TasksService.html":{}},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["tba",{"_index":3923,"title":{},"body":{"index.html":{}}}],["tempo",{"_index":2292,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["test",{"_index":1920,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["test.createtestingmodule",{"_index":1991,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["test:cov",{"_index":3736,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":3735,"title":{},"body":{"index.html":{}}}],["testcontains",{"_index":3794,"title":{},"body":{"index.html":{}}}],["testing",{"_index":3757,"title":{},"body":{"index.html":{}}}],["testingmodule",{"_index":1921,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["tests",{"_index":3733,"title":{},"body":{"index.html":{}}}],["text",{"_index":2644,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["textencoder().encode(json.stringify(state",{"_index":2840,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["that's",{"_index":3905,"title":{},"body":{"index.html":{}}}],["themselves",{"_index":3333,"title":{},"body":{"classes/UserActionDto.html":{}}}],["then((room",{"_index":3221,"title":{},"body":{"classes/UserActionDto.html":{}}}],["then((tracks",{"_index":3070,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["there's",{"_index":1599,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["things",{"_index":3843,"title":{},"body":{"index.html":{}}}],["this.$connect().then",{"_index":2102,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":2096,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.accesskeyid",{"_index":639,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/S3Service.html":{}}}],["this.advancedroomsearchquerybuilder(params",{"_index":988,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["this.advancedusersearchquerybuilder(params",{"_index":1072,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["this.appservice.gethello",{"_index":247,"title":{},"body":{"controllers/AppController.html":{}}}],["this.auth.getuserinfo(req",{"_index":2188,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/SpotifyAuthController.html":{},"classes/UserActionDto.html":{}}}],["this.authheader",{"_index":2827,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["this.authservice.createuser",{"_index":512,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.decodeandverifycognitojwt(cognitoaccesstoken",{"_index":496,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.generatejwt(payload",{"_index":504,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.getusernameandemail",{"_index":500,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshjwt(token",{"_index":529,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(username",{"_index":1910,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.bucketname",{"_index":2582,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.cancelsongannouncements(room.room.roomid",{"_index":1877,"title":{},"body":{"injectables/LiveService.html":{}}}],["this.clientid",{"_index":647,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["this.clientid}:${this.clientsecret",{"_index":2829,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["this.clientsecret",{"_index":2823,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["this.cognitoidentityserviceprovider",{"_index":648,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["this.cognitoidentityserviceprovider.admingetuser",{"_index":661,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["this.cognitoidentityserviceprovider.admininitiateauth(params",{"_index":659,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["this.cognitoidentityserviceprovider.listusers(params",{"_index":669,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["this.combinedsearch",{"_index":1105,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["this.configservice.get",{"_index":640,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/S3Service.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["this.configservice.get(\"aws_access_key_id",{"_index":637,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/S3Service.html":{}}}],["this.configservice.get(\"aws_cognito_client_id",{"_index":645,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["this.configservice.get(\"aws_s3_bucket_name",{"_index":2580,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.configservice.get(\"aws_s3_region",{"_index":2585,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.configservice.get(\"jwt_expiration_time",{"_index":684,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["this.configservice.get(\"jwt_secret_key",{"_index":683,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["this.configservice.get(\"spotify_client_id",{"_index":2820,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["this.configservice.get(\"spotify_redirect_uri",{"_index":2824,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["this.connectedusers",{"_index":1296,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/RoomUsersService.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["this.connectedusers.delete(key",{"_index":1301,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/RoomUsersService.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["this.connectedusers.delete(socketid",{"_index":1297,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/RoomUsersService.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["this.connectedusers.foreach((value",{"_index":2544,"title":{},"body":{"injectables/RoomUsersService.html":{},"interfaces/liveChatUser.html":{}}}],["this.connectedusers.get(socketid",{"_index":1302,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/RoomUsersService.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["this.connectedusers.get(userid",{"_index":1288,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/RoomUsersService.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["this.connectedusers.has(userid",{"_index":1285,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/RoomUsersService.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["this.connectedusers.set(key",{"_index":2542,"title":{},"body":{"injectables/RoomUsersService.html":{},"interfaces/liveChatUser.html":{}}}],["this.connectedusers.set(u.user.userid",{"_index":1327,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["this.connectedusers.set(userid",{"_index":1292,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/RoomUsersService.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["this.cosinesimilarityweighted",{"_index":2320,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["this.country",{"_index":2965,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["this.createmessage(newmessage",{"_index":3298,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.dbutils.getactivity(u",{"_index":1433,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["this.dbutils.getdmindex",{"_index":1552,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["this.dbutils.getfullyqualifiedrooms(roomids",{"_index":3174,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.dbutils.getuserfollowersandfollowing(user.userid",{"_index":1449,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["this.dbutils.getuserswithauth(userids",{"_index":1480,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["this.dbutils.roomexists(message.roomid",{"_index":3291,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.dbutils.roomexists(roomid",{"_index":2539,"title":{},"body":{"injectables/RoomUsersService.html":{},"classes/UserActionDto.html":{},"interfaces/liveChatUser.html":{}}}],["this.dbutils.userexists(userid",{"_index":1282,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/RoomUsersService.html":{},"classes/UserActionDto.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["this.dbutils.usersexist([userid",{"_index":3464,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.dbutilsservice.buildupdatedata",{"_index":2223,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.dbutilsservice.isfollowing(userid",{"_index":2238,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.dbutilsservice.userexists(accountfollowedid",{"_index":2236,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.dbutilsservice.userexists(accountunfollowedid",{"_index":2240,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.dbutilsservice.userexists(userid",{"_index":2237,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.disconnectchat(socketid",{"_index":1314,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["this.display_name",{"_index":2967,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["this.dmusersservice.shareroom(this.server",{"_index":3481,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.dtogen.generatedirectmessagedto(m.p_message_id",{"_index":3462,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.dtogen.generatemultipledirectmessagedto(roomsharemessages",{"_index":3480,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.dtogen.generatemultiplelivechatmessagedto(messages",{"_index":3284,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.dtogen.generatemultipleroomdto",{"_index":931,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["this.dtogen.generatemultipleroomdto([roomid",{"_index":3418,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.dtogen.generatemultipleroomdtofromroom",{"_index":3169,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.dtogen.generatemultipleroomdtofromroom([room",{"_index":3215,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.dtogen.generatemultipleroomdtofromroom(rooms",{"_index":3165,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.dtogen.generatemultipleuserdto",{"_index":1043,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DmUsersService.html":{},"injectables/RoomUsersService.html":{},"classes/UserActionDto.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["this.dtogen.generateuserdto(uid",{"_index":2221,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.dtogen.generateuserdto(userdata.user_id",{"_index":2230,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.dtogen.generateuserdto(userid",{"_index":2226,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.email",{"_index":2969,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["this.explicit_content",{"_index":2971,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["this.external_urls",{"_index":2973,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["this.featureweights",{"_index":2321,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["this.followers",{"_index":2975,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["this.generatebriefuserdto(u",{"_index":1482,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["this.generatemultipleuserdto",{"_index":1522,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["this.generatemultipleuserdto([participant1",{"_index":1564,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["this.generateuserdto(participant1",{"_index":1561,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["this.generateuserdto(participant2",{"_index":1563,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["this.genresfromcluster(subroom.map((song",{"_index":3406,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.genresservice.getallgenres",{"_index":1693,"title":{},"body":{"controllers/GenresController.html":{}}}],["this.getaudiofeatures(roomid",{"_index":3371,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.getconnecteduser(socketid",{"_index":1307,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["this.getcurrentsong",{"_index":3171,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.getcurrentsongs(roomids",{"_index":3179,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.getlivechathistory",{"_index":3283,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.getplaylistsimilarityscores",{"_index":2326,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["this.getqueryparams(row.url",{"_index":1095,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["this.getroominfo(roomid",{"_index":3449,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.getroomqueue(roomid",{"_index":3267,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.getstateobject(state",{"_index":2856,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["this.getuser(socketid",{"_index":1305,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["this.href",{"_index":2977,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["this.httpservice.post",{"_index":2873,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["this.id",{"_index":2979,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["this.images",{"_index":2981,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["this.leaveroom(room.room_id",{"_index":3236,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.leaveroom(roomid",{"_index":3347,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.logger.debug(message",{"_index":2052,"title":{},"body":{"injectables/MyLogger.html":{}}}],["this.logger.error",{"_index":2126,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.logger.error(`error",{"_index":1643,"title":{},"body":{"injectables/EventQueueService.html":{}}}],["this.logger.error(`task",{"_index":1634,"title":{},"body":{"injectables/EventQueueService.html":{}}}],["this.logger.error(message",{"_index":2050,"title":{},"body":{"injectables/MyLogger.html":{}}}],["this.logger.info(message",{"_index":2049,"title":{},"body":{"injectables/MyLogger.html":{}}}],["this.logger.log(\"all",{"_index":1640,"title":{},"body":{"injectables/EventQueueService.html":{}}}],["this.logger.log(\"connected",{"_index":2103,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.logger.log(\"task",{"_index":1645,"title":{},"body":{"injectables/EventQueueService.html":{}}}],["this.logger.log(`task",{"_index":1647,"title":{},"body":{"injectables/EventQueueService.html":{}}}],["this.logger.verbose(message",{"_index":2053,"title":{},"body":{"injectables/MyLogger.html":{}}}],["this.logger.warn",{"_index":2091,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.logger.warn(message",{"_index":2051,"title":{},"body":{"injectables/MyLogger.html":{}}}],["this.messagebodyisroomid(dm.message.contents",{"_index":1559,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["this.mocksongs",{"_index":2302,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["this.murlockservice",{"_index":3099,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["this.name",{"_index":1754,"title":{},"body":{"classes/InternalError.html":{},"classes/UserError.html":{}}}],["this.playlists",{"_index":2301,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["this.prisma",{"_index":3098,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["this.prisma.$queryraw",{"_index":910,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["this.prisma.$queryrawunsafe",{"_index":991,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["this.prisma.$transaction",{"_index":1439,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{}}}],["this.prisma.authentication.create",{"_index":2912,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["this.prisma.authentication.findfirst",{"_index":2914,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["this.prisma.authentication.update",{"_index":2910,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["this.prisma.banned.create",{"_index":3348,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.prisma.banned.deletemany",{"_index":3351,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.prisma.banned.findmany",{"_index":3339,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.prisma.blocked.findfirst",{"_index":3233,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.prisma.blocked.findmany",{"_index":918,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{}}}],["this.prisma.bookmark.create",{"_index":3307,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.prisma.bookmark.deletemany(b",{"_index":3313,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.prisma.bookmark.findfirst",{"_index":3303,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.prisma.chat_reactions.create",{"_index":3319,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.prisma.child_room.findmany",{"_index":3365,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.prisma.follows.count",{"_index":3256,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.prisma.follows.create",{"_index":2239,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.prisma.follows.delete",{"_index":2244,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.prisma.follows.findfirst",{"_index":2243,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.prisma.friends.findmany",{"_index":1455,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["this.prisma.genre.findmany",{"_index":1702,"title":{},"body":{"injectables/GenresService.html":{}}}],["this.prisma.message.create",{"_index":3288,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.prisma.message.findmany",{"_index":3277,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.prisma.message.findunique",{"_index":1518,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["this.prisma.participate.count",{"_index":3262,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.prisma.participate.create",{"_index":3237,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.prisma.participate.delete",{"_index":3245,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.prisma.participate.findfirst",{"_index":3235,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.prisma.participate.findmany",{"_index":3259,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.prisma.playlist.create",{"_index":3059,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["this.prisma.playlist.findmany",{"_index":3032,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["this.prisma.playlist.update",{"_index":3054,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["this.prisma.private_message.create",{"_index":3458,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.prisma.private_message.findmany",{"_index":1575,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["this.prisma.private_message.findunique",{"_index":1545,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["this.prisma.private_room.findmany",{"_index":1467,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["this.prisma.queue.createmany",{"_index":3416,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.prisma.queue.findmany",{"_index":3431,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.prisma.room",{"_index":3220,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.prisma.room.findfirst",{"_index":3168,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.prisma.room.findmany",{"_index":923,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{}}}],["this.prisma.room.update",{"_index":3214,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.prisma.room_message.create",{"_index":3299,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.prisma.room_message.findmany",{"_index":3274,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.prisma.search_history.create",{"_index":888,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["this.prisma.search_history.deletemany",{"_index":1111,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["this.prisma.search_history.findmany",{"_index":1002,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["this.prisma.song.findunique",{"_index":2681,"title":{},"body":{"injectables/SongsService.html":{}}}],["this.prisma.user_activity.create",{"_index":3239,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.prisma.user_activity.findfirst",{"_index":3248,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.prisma.user_activity.update",{"_index":3250,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.prisma.users.create",{"_index":678,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["this.prisma.users.findfirst",{"_index":2229,"title":{},"body":{"injectables/ProfileService.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["this.prisma.users.findmany",{"_index":992,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{}}}],["this.prisma.users.findunique",{"_index":677,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"injectables/ProfileService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"classes/UserActionDto.html":{}}}],["this.prisma.users.update",{"_index":2224,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.product",{"_index":2983,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["this.profileservice.followuser(userinfo.id",{"_index":2196,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.getprofile(userinfo.id",{"_index":2189,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.getprofilebyusername(username",{"_index":2194,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.unfollowuser(userinfo.id",{"_index":2198,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.updateprofile",{"_index":2190,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.queue",{"_index":1632,"title":{},"body":{"injectables/EventQueueService.html":{}}}],["this.queue.drain",{"_index":1639,"title":{},"body":{"injectables/EventQueueService.html":{}}}],["this.queue.error((error",{"_index":1636,"title":{},"body":{"injectables/EventQueueService.html":{}}}],["this.queue.push(task",{"_index":1642,"title":{},"body":{"injectables/EventQueueService.html":{}}}],["this.redirecturi",{"_index":2826,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["this.region",{"_index":2587,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.retryasync(executerequest",{"_index":2400,"title":{},"body":{"injectables/RetryService.html":{}}}],["this.retryservice.retryasync(executerequest",{"_index":2108,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.roomjobs",{"_index":1825,"title":{},"body":{"injectables/LiveService.html":{}}}],["this.roomqueue.flushtodb(room.room.roomid",{"_index":1859,"title":{},"body":{"injectables/LiveService.html":{}}}],["this.roomqueue.getqueuestate(room.room.roomid",{"_index":1873,"title":{},"body":{"injectables/LiveService.html":{}}}],["this.roomqueue.refreshqueue(room.room.roomid",{"_index":1880,"title":{},"body":{"injectables/LiveService.html":{}}}],["this.roomqueue.roomqueues",{"_index":1843,"title":{},"body":{"injectables/LiveService.html":{}}}],["this.roomqueueservice.roomqueues.get(roomid",{"_index":3264,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.roomsservice.getroominfo(roomid",{"_index":709,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["this.roomsservice.shareroom(roomid",{"_index":3454,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.s3",{"_index":2588,"title":{},"body":{"injectables/S3Service.html":{}}}],["this.s3service.uploadfile(file",{"_index":304,"title":{},"body":{"controllers/AppController.html":{}}}],["this.schedulerregistry.deletecronjob(key",{"_index":1902,"title":{},"body":{"injectables/LiveService.html":{}}}],["this.schedulerregistry.getcronjobs",{"_index":1838,"title":{},"body":{"injectables/LiveService.html":{}}}],["this.searchrooms",{"_index":1101,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["this.searchrooms(params",{"_index":896,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["this.searchusers",{"_index":1103,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["this.searchusers(params.q",{"_index":897,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["this.secretaccesskey",{"_index":642,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/S3Service.html":{}}}],["this.selfauthorisedapi",{"_index":2831,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["this.server",{"_index":1831,"title":{},"body":{"injectables/LiveService.html":{},"classes/UserActionDto.html":{}}}],["this.setchatinfo(socketid",{"_index":1291,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["this.songsservice.getspotifyid(songid",{"_index":2668,"title":{},"body":{"controllers/SongsController.html":{}}}],["this.spotifyauth.createuser(tp",{"_index":2756,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["this.spotifyauth.exchangecodefortoken(code",{"_index":2749,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["this.spotifyauth.generatejwt(user",{"_index":2758,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["this.spotifyauth.getspotifytokens",{"_index":2762,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["this.spotifyauth.getspotifytokens(userinfo.id",{"_index":2766,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["this.spotifyauth.getstateobject(state",{"_index":2742,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["this.spotifyauth.refreshaccesstoken(currenttokens.tokens",{"_index":2768,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["this.spotifyauth.saveuserspotifytokens(tk",{"_index":2771,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["this.spotifyauth.saveuserspotifytokens(tp",{"_index":2757,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["this.spotifyservice",{"_index":3101,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["this.spotifyservice.addtrackstodb(likedtracks",{"_index":3045,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["this.spotifyservice.addtrackstodb(playlisttracks.flat",{"_index":3078,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["this.spotifyservice.fixspotifyinfo",{"_index":3105,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["this.spotifyservice.getalllikedsongs(userid",{"_index":3037,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["this.spotifyservice.getuserlessapi",{"_index":3094,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["this.spotifyservice.getuserplaylists(userid",{"_index":3063,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["this.spotifyservice.getuserplaylisttracks(userid",{"_index":3067,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["this.spotifyservice.saveroomplaylist(room",{"_index":3450,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.spotifyservice.unsaveroomplaylist(room",{"_index":3452,"title":{},"body":{"classes/UserActionDto.html":{}}}],["this.taskqueue.add(\"fix",{"_index":3122,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskqueue.add(\"get",{"_index":3120,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskqueue.add(\"import",{"_index":3118,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskqueue.add(\"process",{"_index":3117,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.tasksservice.addimportlibrarytask(tk",{"_index":2908,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["this.type",{"_index":2985,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["this.uri",{"_index":2987,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["this.userpoolid",{"_index":644,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["this.usersservice.generatechathash",{"_index":1316,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["threshold",{"_index":857,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/UserActionDto.html":{}}}],["through",{"_index":3859,"title":{},"body":{"index.html":{}}}],["throughout",{"_index":3828,"title":{},"body":{"index.html":{}}}],["throw",{"_index":298,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"injectables/ImageService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginBody.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"injectables/ProfileService.html":{},"injectables/RecommendationsService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RetryService.html":{},"injectables/RoomUsersService.html":{},"injectables/S3Service.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/TasksProcessor.html":{},"classes/UserActionDto.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["thus",{"_index":3860,"title":{},"body":{"index.html":{}}}],["time",{"_index":96,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"injectables/AuthService.html":{},"injectables/EventQueueService.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"injectables/LiveService.html":{},"classes/LoginBody.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/PlaybackEventDto.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"miscellaneous/variables.html":{}}}],["times",{"_index":68,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["timestamp",{"_index":1000,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["title",{"_index":51,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"injectables/DtoGenService.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/LinksWithCount.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomsData.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{}}}],["tk",{"_index":2769,"title":{},"body":{"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{}}}],["tk.epoch_expiry",{"_index":2889,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/TasksProcessor.html":{}}}],["tk.refresh_token",{"_index":2882,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["tmpsecret",{"_index":1984,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tobuffer",{"_index":1741,"title":{},"body":{"injectables/ImageService.html":{}}}],["todo",{"_index":535,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserActionDto.html":{}}}],["toformat(\"jpeg",{"_index":1737,"title":{},"body":{"injectables/ImageService.html":{}}}],["together",{"_index":3886,"title":{},"body":{"index.html":{}}}],["token",{"_index":259,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"injectables/TasksService.html":{},"index.html":{}}}],["token'})@isstring",{"_index":1911,"title":{},"body":{"classes/LoginBody.html":{}}}],["token_type",{"_index":2814,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["token_use",{"_index":627,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["tokens",{"_index":431,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["tokens.expires_in",{"_index":2753,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["tokenuse",{"_index":721,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["tools",{"_index":3797,"title":{},"body":{"index.html":{}}}],["toolsextra",{"_index":3796,"title":{},"body":{"index.html":{}}}],["top",{"_index":162,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["top_contributors",{"_index":171,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["top_voted",{"_index":164,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["topcontributors",{"_index":166,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["topn",{"_index":2277,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["tostring(\"base64",{"_index":2830,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["total",{"_index":63,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SpotifyUser.html":{}}}],["total_downvotes",{"_index":149,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["total_joins",{"_index":88,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["total_queue_exports",{"_index":73,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["total_songs_queued",{"_index":67,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["total_upvotes",{"_index":148,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["totalsimilarity",{"_index":2318,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["totaltracks",{"_index":3071,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["tp",{"_index":2750,"title":{},"body":{"controllers/SpotifyAuthController.html":{}}}],["trace",{"_index":2028,"title":{},"body":{"injectables/MyLogger.html":{}}}],["track",{"_index":768,"title":{},"body":{"injectables/BullBoardService.html":{}}}],["track.id",{"_index":3082,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["track.track",{"_index":3043,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["tracks",{"_index":3064,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["tracks.reduce",{"_index":3072,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["transform",{"_index":1150,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["transformer",{"_index":39,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/ChatEventDto.html":{},"classes/CreateRoomDto.html":{},"classes/DirectMessageDto.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/LinksWithCount.html":{},"classes/LiveChatMessageDto.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomsData.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfosWithCount.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{},"dependencies.html":{}}}],["transport",{"_index":397,"title":{},"body":{"modules/AppModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/UsersModule.html":{}}}],["transports",{"_index":2040,"title":{},"body":{"injectables/MyLogger.html":{}}}],["transports.console",{"_index":2041,"title":{},"body":{"injectables/MyLogger.html":{}}}],["transports.file",{"_index":2042,"title":{},"body":{"injectables/MyLogger.html":{}}}],["trigger",{"_index":1874,"title":{},"body":{"injectables/LiveService.html":{},"injectables/RetryService.html":{}}}],["triggered",{"_index":824,"title":{},"body":{"classes/ChatEventDto.html":{},"classes/PlaybackEventDto.html":{}}}],["true",{"_index":85,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BullBoardService.html":{},"classes/ChatEventDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateRoomDto.html":{},"injectables/DtoGenService.html":{},"classes/FollowersAndFollowing.html":{},"controllers/GenresController.html":{},"classes/GenresWithCount.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/LinksWithCount.html":{},"injectables/LiveService.html":{},"classes/LoginBody.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/PlaybackEventDto.html":{},"injectables/ProfileService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomsData.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{},"classes/SongInfosWithCount.html":{},"controllers/SongsController.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{}}}],["true})@apibadrequestresponse({description",{"_index":1682,"title":{},"body":{"controllers/GenresController.html":{}}}],["true})@isarray",{"_index":2632,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["true})@isarray()@isstring({each",{"_index":1707,"title":{},"body":{"classes/GenresWithCount.html":{},"classes/RoomsData.html":{}}}],["true})@isarray()@validatenested()@type(undefined",{"_index":1652,"title":{},"body":{"classes/FollowersAndFollowing.html":{},"classes/SongInfosWithCount.html":{}}}],["true})@isarray()@validatenested({each",{"_index":2427,"title":{},"body":{"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{}}}],["true})@isarray({message",{"_index":1115,"title":{},"body":{"classes/CombinedSearchResults.html":{}}}],["true})@isoptional()@isdate",{"_index":2639,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["true})@isstring",{"_index":827,"title":{},"body":{"classes/ChatEventDto.html":{},"classes/PlaybackEventDto.html":{}}}],["true})@type(undefined",{"_index":2428,"title":{},"body":{"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{}}}],["try",{"_index":524,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EventQueueService.html":{},"injectables/LiveService.html":{},"classes/LoginBody.html":{},"injectables/PrismaService.html":{},"injectables/ProfileService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RetryService.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UserActionDto.html":{}}}],["trying",{"_index":3332,"title":{},"body":{"classes/UserActionDto.html":{}}}],["ts",{"_index":2806,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/UserActionDto.html":{},"dependencies.html":{}}}],["tsconfig.build.jsontypescript",{"_index":3769,"title":{},"body":{"index.html":{}}}],["tsconfig.jsontypescript",{"_index":3763,"title":{},"body":{"index.html":{}}}],["tunein",{"_index":204,"title":{},"body":{"controllers/AppController.html":{},"classes/TasksProcessor.html":{}}}],["tutorial",{"_index":855,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["two",{"_index":46,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["type",{"_index":12,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BullBoardService.html":{},"interfaces/Category.html":{},"classes/ChatEventDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/DirectMessageDto.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"injectables/EventQueueService.html":{},"classes/FollowersAndFollowing.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"classes/GenresWithCount.html":{},"injectables/ImageService.html":{},"classes/InternalError.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"injectables/JwtStrategy.html":{},"classes/LinksWithCount.html":{},"classes/LiveChatMessageDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"classes/MessagesPerHour.html":{},"injectables/MyLogger.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/PlaybackEventDto.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/QueueEventDto.html":{},"injectables/RecommendationsService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RetryService.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/RoomSongDto.html":{},"injectables/RoomUsersService.html":{},"classes/RoomsData.html":{},"injectables/S3Service.html":{},"classes/SearchHistoryDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/SongInfosWithCount.html":{},"controllers/SongsController.html":{},"injectables/SongsService.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/SpotifyUser.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserError.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{},"classes/VoteDto.html":{},"classes/WsExceptionFilter.html":{},"coverage.html":{},"interfaces/dmUser.html":{},"miscellaneous/functions.html":{},"interfaces/liveChatUser.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":3938,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":701,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RetryService.html":{}}}],["typescript",{"_index":3783,"title":{},"body":{"index.html":{}}}],["typing",{"_index":4014,"title":{},"body":{"miscellaneous/variables.html":{}}}],["u",{"_index":1287,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"injectables/RoomUsersService.html":{},"classes/UserActionDto.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["u.authentication",{"_index":1432,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["u.chatid",{"_index":1311,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["u.favorite_songs.length",{"_index":1421,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["u.favorite_songs.map((song",{"_index":1422,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["u.participant",{"_index":1310,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["u.roomid",{"_index":2541,"title":{},"body":{"injectables/RoomUsersService.html":{},"interfaces/liveChatUser.html":{}}}],["u.socketids",{"_index":1328,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["u.socketids.push(socketid",{"_index":1290,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/RoomUsersService.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["u.user",{"_index":1304,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/RoomUsersService.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["u.user.userid",{"_index":1308,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["u.user_id",{"_index":1440,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["u.userid",{"_index":1306,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"interfaces/dmUser.html":{}}}],["ui",{"_index":3819,"title":{},"body":{"index.html":{}}}],["uid",{"_index":2214,"title":{},"body":{"injectables/ProfileService.html":{}}}],["unauthorized",{"_index":455,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorizedexception",{"_index":609,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["unauthorizedexception(\"error",{"_index":671,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["unauthorizedexception(\"invalid",{"_index":664,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["unbanned",{"_index":3352,"title":{},"body":{"classes/UserActionDto.html":{}}}],["unbookmarkroom(roomid",{"_index":3309,"title":{},"body":{"classes/UserActionDto.html":{}}}],["undefined",{"_index":558,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"injectables/LiveService.html":{},"classes/LoginBody.html":{},"injectables/RecommendationsService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RetryService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"injectables/RoomUsersService.html":{},"classes/SongInfoEntity.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/TasksProcessor.html":{},"classes/UserActionDto.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["undefined})@apiconsumes('multipart/form",{"_index":208,"title":{},"body":{"controllers/AppController.html":{}}}],["undefined})@apiokresponse({description",{"_index":211,"title":{},"body":{"controllers/AppController.html":{}}}],["undefined})@apiresponse({status",{"_index":435,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@isarray({message",{"_index":837,"title":{},"body":{"classes/CombinedSearchHistory.html":{}}}],["undefined})@isobject",{"_index":1783,"title":{},"body":{"classes/LinksWithCount.html":{}}}],["undefined})@isobject()@validatenested",{"_index":2405,"title":{},"body":{"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{}}}],["undo",{"_index":3336,"title":{},"body":{"classes/UserActionDto.html":{}}}],["undo_song_vote",{"_index":4050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["undoban",{"_index":3350,"title":{},"body":{"classes/UserActionDto.html":{}}}],["undokick",{"_index":3335,"title":{},"body":{"classes/UserActionDto.html":{}}}],["undosongvote",{"_index":4051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unexpected",{"_index":1566,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["unfollow",{"_index":2172,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["unfollowed",{"_index":2173,"title":{},"body":{"controllers/ProfileController.html":{}}}],["unfollowing",{"_index":2174,"title":{},"body":{"controllers/ProfileController.html":{}}}],["unfollowuser",{"_index":2138,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["unfollowuser(req",{"_index":2170,"title":{},"body":{"controllers/ProfileController.html":{}}}],["unfollowuser(userid",{"_index":2216,"title":{},"body":{"injectables/ProfileService.html":{}}}],["unified",{"_index":806,"title":{},"body":{"interfaces/Category.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{}}}],["unique",{"_index":44,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"injectables/DtoGenService.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["unique_joins",{"_index":89,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["unique_visitors",{"_index":56,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["uniquerecords",{"_index":1028,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["uniquerecordsmap",{"_index":1013,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["uniquerecordsmap.has(record.url",{"_index":1020,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["uniquerecordsmap.set(record.url",{"_index":1025,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["uniquerecordsmap.values",{"_index":1030,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["uniquesenderids",{"_index":1531,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["uniqueuserids",{"_index":1592,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["uniquevisitors",{"_index":52,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["unit",{"_index":3732,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":217,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/UserActionDto.html":{}}}],["unlicensed",{"_index":3936,"title":{},"body":{"properties.html":{}}}],["unread",{"_index":1584,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["unreadonly",{"_index":1382,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["unsaveroomplaylist(roomid",{"_index":3451,"title":{},"body":{"classes/UserActionDto.html":{}}}],["update",{"_index":2162,"title":{},"body":{"controllers/ProfileController.html":{},"classes/UserActionDto.html":{},"miscellaneous/variables.html":{}}}],["updated",{"_index":2163,"title":{},"body":{"controllers/ProfileController.html":{}}}],["updatedata",{"_index":2222,"title":{},"body":{"injectables/ProfileService.html":{}}}],["updatedroom",{"_index":3184,"title":{},"body":{"classes/UserActionDto.html":{}}}],["updatedroom.description",{"_index":3189,"title":{},"body":{"classes/UserActionDto.html":{}}}],["updatedroom.explicit",{"_index":3197,"title":{},"body":{"classes/UserActionDto.html":{}}}],["updatedroom.is_temporary",{"_index":3203,"title":{},"body":{"classes/UserActionDto.html":{}}}],["updatedroom.name",{"_index":3187,"title":{},"body":{"classes/UserActionDto.html":{}}}],["updatedroom.nsfw",{"_index":3199,"title":{},"body":{"classes/UserActionDto.html":{}}}],["updatedroom.playlist_photo",{"_index":3191,"title":{},"body":{"classes/UserActionDto.html":{}}}],["updatedroom.private_room",{"_index":3213,"title":{},"body":{"classes/UserActionDto.html":{}}}],["updatedroom.public_room",{"_index":3212,"title":{},"body":{"classes/UserActionDto.html":{}}}],["updatedroom.room_language",{"_index":3201,"title":{},"body":{"classes/UserActionDto.html":{}}}],["updatedroom.room_size",{"_index":3193,"title":{},"body":{"classes/UserActionDto.html":{}}}],["updatedroom.scheduled_room",{"_index":3206,"title":{},"body":{"classes/UserActionDto.html":{}}}],["updatedroom.tags",{"_index":3195,"title":{},"body":{"classes/UserActionDto.html":{}}}],["updatemany",{"_index":3984,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateprofile",{"_index":2207,"title":{},"body":{"injectables/ProfileService.html":{},"miscellaneous/variables.html":{}}}],["updateprofile(userid",{"_index":2219,"title":{},"body":{"injectables/ProfileService.html":{}}}],["updateprofiledto",{"_index":2159,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["updateroomdto",{"_index":3123,"title":{"classes/UpdateRoomDto.html":{}},"body":{"classes/UpdateRoomDto.html":{},"classes/UserActionDto.html":{},"coverage.html":{}}}],["updateroomdto.description",{"_index":3188,"title":{},"body":{"classes/UserActionDto.html":{}}}],["updateroomdto.end_date",{"_index":3209,"title":{},"body":{"classes/UserActionDto.html":{}}}],["updateroomdto.has_explicit_content",{"_index":3196,"title":{},"body":{"classes/UserActionDto.html":{}}}],["updateroomdto.has_nsfw_content",{"_index":3198,"title":{},"body":{"classes/UserActionDto.html":{}}}],["updateroomdto.is_private",{"_index":3210,"title":{},"body":{"classes/UserActionDto.html":{}}}],["updateroomdto.is_scheduled",{"_index":3204,"title":{},"body":{"classes/UserActionDto.html":{}}}],["updateroomdto.is_temporary",{"_index":3202,"title":{},"body":{"classes/UserActionDto.html":{}}}],["updateroomdto.language",{"_index":3200,"title":{},"body":{"classes/UserActionDto.html":{}}}],["updateroomdto.room_image",{"_index":3190,"title":{},"body":{"classes/UserActionDto.html":{}}}],["updateroomdto.room_name",{"_index":3186,"title":{},"body":{"classes/UserActionDto.html":{}}}],["updateroomdto.room_size",{"_index":3192,"title":{},"body":{"classes/UserActionDto.html":{}}}],["updateroomdto.start_date",{"_index":3208,"title":{},"body":{"classes/UserActionDto.html":{}}}],["updateroomdto.tags",{"_index":3194,"title":{},"body":{"classes/UserActionDto.html":{}}}],["updateuserdto",{"_index":3127,"title":{"classes/UpdateUserDto.html":{},"classes/UpdateUserDto-1.html":{},"classes/UpdateUserDto-2.html":{}},"body":{"classes/UpdateUserDto.html":{},"classes/UpdateUserDto-1.html":{},"classes/UpdateUserDto-2.html":{},"coverage.html":{}}}],["updateuserprofiledto",{"_index":2160,"title":{"classes/UpdateUserProfileDto.html":{}},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/UpdateUserProfileDto.html":{},"coverage.html":{}}}],["updating",{"_index":3217,"title":{},"body":{"classes/UserActionDto.html":{}}}],["upload",{"_index":197,"title":{},"body":{"controllers/AppController.html":{},"injectables/S3Service.html":{}}}],["uploaded",{"_index":206,"title":{},"body":{"controllers/AppController.html":{},"injectables/S3Service.html":{},"index.html":{}}}],["uploadedfile",{"_index":221,"title":{},"body":{"controllers/AppController.html":{}}}],["uploadfile",{"_index":186,"title":{},"body":{"controllers/AppController.html":{},"injectables/S3Service.html":{}}}],["uploadfile(@uploadedfile",{"_index":295,"title":{},"body":{"controllers/AppController.html":{}}}],["uploadfile(file",{"_index":194,"title":{},"body":{"controllers/AppController.html":{},"injectables/S3Service.html":{}}}],["uploads",{"_index":203,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["uploadsdirectory",{"_index":3798,"title":{},"body":{"index.html":{}}}],["upsert",{"_index":3207,"title":{},"body":{"classes/UserActionDto.html":{},"miscellaneous/variables.html":{}}}],["upvote_song",{"_index":4046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["upvotes",{"_index":139,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["upvotesong",{"_index":4047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uri",{"_index":2855,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/SpotifyUser.html":{},"miscellaneous/variables.html":{}}}],["url",{"_index":205,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/SearchHistoryDto.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/SpotifyUser.html":{}}}],["url.split",{"_index":1084,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["url.split(\"?\")[1",{"_index":1087,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["urlencoded",{"_index":2867,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["urlsearchparams(requestoptions.body).tostring",{"_index":2875,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["use",{"_index":747,"title":{},"body":{"modules/BullBoardModule.html":{},"injectables/PrismaService.html":{},"injectables/RetryService.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["used",{"_index":810,"title":{},"body":{"interfaces/Category.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"index.html":{}}}],["useguards",{"_index":222,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{},"controllers/SpotifyAuthController.html":{}}}],["useguards(jwtauthguard",{"_index":255,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{},"controllers/SpotifyAuthController.html":{}}}],["useguards(jwtauthguard)@get(':username')@apitags('profile')@apioperation({summary",{"_index":2153,"title":{},"body":{"controllers/ProfileController.html":{}}}],["useguards(jwtauthguard)@get()@apitags('profile')@apioperation({summary",{"_index":2148,"title":{},"body":{"controllers/ProfileController.html":{}}}],["useguards(jwtauthguard)@patch()@apitags('profile')@apioperation({summary",{"_index":2161,"title":{},"body":{"controllers/ProfileController.html":{}}}],["useguards(jwtauthguard)@put()@apitags('profile')@apioperation({summary",{"_index":2168,"title":{},"body":{"controllers/ProfileController.html":{}}}],["useinterceptors",{"_index":223,"title":{},"body":{"controllers/AppController.html":{}}}],["user",{"_index":168,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/LinksWithCount.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"classes/MessagesPerHour.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"classes/ParticipantsPerHourDto.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"injectables/RoomUsersService.html":{},"classes/RoomsData.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfosWithCount.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/TasksProcessor.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{},"modules/UsersModule.html":{},"interfaces/dmUser.html":{},"index.html":{},"interfaces/liveChatUser.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":54,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/LinksWithCount.html":{},"classes/LoginBody.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"controllers/ProfileController.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomsData.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfosWithCount.html":{},"controllers/SpotifyAuthController.html":{},"classes/TasksProcessor.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{}}}],["user'})@apiparam({name",{"_index":2142,"title":{},"body":{"controllers/ProfileController.html":{}}}],["user.activity_id",{"_index":3252,"title":{},"body":{"classes/UserActionDto.html":{}}}],["user.authentication",{"_index":1402,"title":{},"body":{"injectables/DtoGenService.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["user.bio",{"_index":1396,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["user.blockee",{"_index":926,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["user.blocker",{"_index":925,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["user.current_room_id",{"_index":1442,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["user.dto",{"_index":3130,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/UpdateUserDto-1.html":{},"classes/UpdateUserDto-2.html":{}}}],["user.dto.ts",{"_index":1154,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":1179,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:15",{"_index":1166,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":1176,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":1165,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:25",{"_index":1174,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:28",{"_index":1167,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:31",{"_index":1168,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:34",{"_index":1169,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:37",{"_index":1170,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:40",{"_index":1171,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:43",{"_index":1172,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:46",{"_index":1173,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:49",{"_index":1175,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:52",{"_index":1177,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:7",{"_index":1178,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":717,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["user.exists",{"_index":3467,"title":{},"body":{"classes/UserActionDto.html":{}}}],["user.fav_rooms",{"_index":1444,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["user.fav_songs",{"_index":1420,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["user.full_name",{"_index":1392,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["user.hasspotifyaccount",{"_index":1431,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["user.profile_picture",{"_index":1394,"title":{},"body":{"injectables/DtoGenService.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["user.recent_rooms",{"_index":1434,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["user.user_id",{"_index":994,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{},"controllers/SpotifyAuthController.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UserActionDto.html":{}}}],["user.user_id.tostring",{"_index":1040,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["user.userattributes",{"_index":663,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["user.userid",{"_index":1047,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DmUsersService.html":{},"injectables/RoomUsersService.html":{},"classes/UserActionDto.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["user.username",{"_index":662,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DtoGenService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["user/settings",{"_index":3854,"title":{},"body":{"index.html":{}}}],["user1",{"_index":1560,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["user1.userid",{"_index":1576,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["user1.username",{"_index":1580,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["user2",{"_index":1562,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["user2.userid",{"_index":1577,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["user2.username",{"_index":1581,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["user_activity",{"_index":3238,"title":{},"body":{"classes/UserActionDto.html":{},"miscellaneous/variables.html":{}}}],["user_id",{"_index":675,"title":{},"body":{"injectables/AuthService.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{},"classes/LoginBody.html":{},"injectables/ProfileService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/UserActionDto.html":{}}}],["user_id::text",{"_index":998,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["user_joined_room",{"_index":4077,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user_left_room",{"_index":4079,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user_offline",{"_index":4091,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user_online",{"_index":4089,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useractiondto",{"_index":3141,"title":{"classes/UserActionDto.html":{}},"body":{"classes/UserActionDto.html":{},"coverage.html":{}}}],["usercognitosub",{"_index":508,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["usercontroller",{"_index":3885,"title":{},"body":{"index.html":{}}}],["usercontroller's",{"_index":3890,"title":{},"body":{"index.html":{}}}],["usercontroller.ts",{"_index":3855,"title":{},"body":{"index.html":{}}}],["userdata",{"_index":2228,"title":{},"body":{"injectables/ProfileService.html":{}}}],["userdto",{"_index":37,"title":{"classes/UserDto.html":{}},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/DirectMessageDto.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/LinksWithCount.html":{},"classes/LiveChatMessageDto.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"injectables/RoomUsersService.html":{},"classes/RoomsData.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfosWithCount.html":{},"classes/UpdateUserDto-1.html":{},"classes/UpdateUserDto-2.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{},"coverage.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["userdtos",{"_index":1042,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{}}}],["userdtos.find((user",{"_index":1046,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["userdto})@isobject()@validatenested()@type(undefined",{"_index":1217,"title":{},"body":{"classes/DirectMessageDto.html":{},"classes/RoomDto.html":{}}}],["userentity",{"_index":3508,"title":{"classes/UserEntity.html":{}},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["usererror",{"_index":3523,"title":{"classes/UserError.html":{}},"body":{"classes/UserError.html":{},"classes/WsExceptionFilter.html":{},"coverage.html":{}}}],["userexists",{"_index":3964,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userfriendship",{"_index":1661,"title":{"classes/UserFriendship.html":{}},"body":{"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{},"coverage.html":{}}}],["userid",{"_index":497,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"classes/ChatEventDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/LinksWithCount.html":{},"injectables/LiveService.html":{},"classes/LoginBody.html":{},"classes/PlaybackEventDto.html":{},"injectables/ProfileService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"classes/RoomSongDto.html":{},"injectables/RoomUsersService.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/TasksProcessor.html":{},"injectables/TasksService.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{},"classes/VoteDto.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["userids",{"_index":1036,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{}}}],["userids.filter",{"_index":1038,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["userinfo",{"_index":2187,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/SpotifyAuthController.html":{},"classes/UserActionDto.html":{}}}],["userinfo.id",{"_index":2191,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/SpotifyAuthController.html":{},"classes/UserActionDto.html":{}}}],["userjoinedroom",{"_index":4078,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userleftroom",{"_index":4080,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userlisteningstatsdto",{"_index":3635,"title":{},"body":{"coverage.html":{}}}],["usermodule.ts",{"_index":3882,"title":{},"body":{"index.html":{}}}],["username",{"_index":462,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/DtoGenService.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"injectables/JwtStrategy.html":{},"classes/LinksWithCount.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"classes/RoomsData.html":{},"classes/SongInfosWithCount.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{}}}],["username'})@apiokresponse({description",{"_index":2143,"title":{},"body":{"controllers/ProfileController.html":{}}}],["username'})@apiparam({name",{"_index":2154,"title":{},"body":{"controllers/ProfileController.html":{}}}],["username'})@isstring",{"_index":2338,"title":{},"body":{"classes/RegisterBody.html":{}}}],["useroffline",{"_index":4092,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useronline",{"_index":4090,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userplaylist",{"_index":3052,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["userplaylist.name",{"_index":3053,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["userplaylistindb",{"_index":3083,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["userplaylistindb.playlist_id",{"_index":3086,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["userplaylists",{"_index":3030,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["userplaylists.find",{"_index":3051,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["userpoolid",{"_index":572,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["userprofile",{"_index":2225,"title":{},"body":{"injectables/ProfileService.html":{}}}],["userprofile.dto",{"_index":3140,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["userprofiledto",{"_index":2156,"title":{"classes/UserProfileDto.html":{}},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"coverage.html":{}}}],["userprofiledto})@apibadrequestresponse({description",{"_index":2164,"title":{},"body":{"controllers/ProfileController.html":{}}}],["userprofiledto})@apitags('profile",{"_index":2150,"title":{},"body":{"controllers/ProfileController.html":{}}}],["users",{"_index":673,"title":{},"body":{"injectables/AuthService.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"injectables/RoomUsersService.html":{},"classes/TasksProcessor.html":{},"classes/UserActionDto.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{},"miscellaneous/variables.html":{}}}],["users.controller",{"_index":3551,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.find",{"_index":1594,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["users.find((user",{"_index":2891,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["users.foreach((user",{"_index":3466,"title":{},"body":{"classes/UserActionDto.html":{}}}],["users.full_name",{"_index":983,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["users.length",{"_index":1416,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{}}}],["users.map((u",{"_index":1481,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["users.map((user",{"_index":3260,"title":{},"body":{"classes/UserActionDto.html":{}}}],["users.push(value.user",{"_index":2545,"title":{},"body":{"injectables/RoomUsersService.html":{},"interfaces/liveChatUser.html":{}}}],["users.service",{"_index":3552,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.user_id",{"_index":1064,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["users.username",{"_index":982,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["users/dto/dm.dto",{"_index":1388,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserActionDto.html":{}}}],["users/dto/user.dto",{"_index":38,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/DirectMessageDto.html":{},"injectables/DtoGenService.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/UserActionDto.html":{}}}],["users[0",{"_index":1572,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["users[0].userid",{"_index":1570,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["users[1",{"_index":1573,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["users[1].userid",{"_index":1571,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["users]).then((users",{"_index":3465,"title":{},"body":{"classes/UserActionDto.html":{}}}],["userscontroller",{"_index":1950,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"index.html":{}}}],["userservice",{"_index":3884,"title":{},"body":{"index.html":{}}}],["userservice.ts",{"_index":3870,"title":{},"body":{"index.html":{}}}],["usersmodule",{"_index":335,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DmUsersModule.html":{},"modules/LiveModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":1243,"title":{},"body":{"injectables/DmUsersService.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"interfaces/dmUser.html":{},"index.html":{},"overview.html":{}}}],["userswhoblockedgivenuser",{"_index":916,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["userswhoblockedgivenuser.map((user",{"_index":924,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["userwithauth",{"_index":1358,"title":{},"body":{"injectables/DtoGenService.html":{},"miscellaneous/typealiases.html":{}}}],["uses",{"_index":3898,"title":{},"body":{"index.html":{}}}],["usevalue",{"_index":1988,"title":{},"body":{"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{}}}],["using",{"_index":420,"title":{},"body":{"controllers/AuthController.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["utc",{"_index":2067,"title":{},"body":{"classes/PlaybackEventDto.html":{}}}],["utc_time",{"_index":1893,"title":{},"body":{"injectables/LiveService.html":{},"classes/PlaybackEventDto.html":{}}}],["utilities",{"_index":3825,"title":{},"body":{"index.html":{}}}],["utils.api_base_no_port",{"_index":2839,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["utils.bytestobase64(bytes",{"_index":2842,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["utils.module",{"_index":355,"title":{},"body":{"modules/AppModule.html":{},"modules/DmUsersModule.html":{},"modules/DtoGenModule.html":{},"modules/LiveModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/RoomQueueModule.html":{},"modules/RoomUsersModule.html":{},"modules/RoomsModule.html":{},"modules/SearchModule.html":{},"modules/SpotifyAuthModule.html":{},"modules/UsersModule.html":{}}}],["utils.module.ts",{"_index":1194,"title":{},"body":{"modules/DbUtilsModule.html":{}}}],["utils.service",{"_index":1196,"title":{},"body":{"modules/DbUtilsModule.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"injectables/RoomUsersService.html":{},"classes/UserActionDto.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["utils.service.ts",{"_index":3612,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["utils/db",{"_index":354,"title":{},"body":{"modules/AppModule.html":{},"modules/DbUtilsModule.html":{},"modules/DmUsersModule.html":{},"injectables/DmUsersService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"modules/LiveModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/RoomQueueModule.html":{},"modules/RoomUsersModule.html":{},"injectables/RoomUsersService.html":{},"modules/RoomsModule.html":{},"modules/SearchModule.html":{},"modules/SpotifyAuthModule.html":{},"classes/UserActionDto.html":{},"modules/UsersModule.html":{},"coverage.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{},"miscellaneous/typealiases.html":{}}}],["uuid",{"_index":1602,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/SongInfoDto.html":{},"classes/UserActionDto.html":{}}}],["uuid'})@isstring",{"_index":3149,"title":{},"body":{"classes/UserActionDto.html":{}}}],["uuid_generate_v4",{"_index":2643,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["uuidv4",{"_index":1595,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["v",{"_index":249,"title":{},"body":{"controllers/AppController.html":{}}}],["va",{"_index":2594,"title":{},"body":{"injectables/S3Service.html":{}}}],["va.location",{"_index":2597,"title":{},"body":{"injectables/S3Service.html":{}}}],["val",{"_index":3074,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["val.length",{"_index":3075,"title":{},"body":{"classes/TasksProcessor.html":{}}}],["valence",{"_index":2291,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["valid",{"_index":691,"title":{},"body":{"injectables/AuthService.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DtoGenService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"index.html":{}}}],["validate",{"_index":1765,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":1767,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":1907,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validatenested",{"_index":35,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/ChatEventDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/DirectMessageDto.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/LinksWithCount.html":{},"classes/LiveChatMessageDto.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/QueueEventDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomsData.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfosWithCount.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{}}}],["validateuser",{"_index":580,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["validateuser(username",{"_index":601,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":36,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"classes/ChatEventDto.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/DirectMessageDto.html":{},"injectables/DtoGenService.html":{},"interfaces/Emoji.html":{},"classes/EmojiReactionDto.html":{},"classes/FollowersAndFollowing.html":{},"classes/GenresWithCount.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/LinksWithCount.html":{},"classes/LiveChatMessageDto.html":{},"classes/LoginBody.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/PlaybackEventDto.html":{},"classes/QueueEventDto.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/RoomDto.html":{},"classes/RoomSongDto.html":{},"classes/RoomsData.html":{},"classes/SearchHistoryDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"classes/SongInfoDto.html":{},"classes/SongInfosWithCount.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"classes/UserActionDto.html":{},"classes/UserDto.html":{},"classes/UserFriendship.html":{},"classes/UserProfileDto.html":{},"classes/VoteDto.html":{},"dependencies.html":{}}}],["validator.isuuid(match[1",{"_index":1603,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["value",{"_index":483,"title":{},"body":{"controllers/AuthController.html":{},"injectables/BullBoardService.html":{},"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"classes/CreateRoomDto.html":{},"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"injectables/EventQueueService.html":{},"injectables/MyLogger.html":{},"injectables/PrismaService.html":{},"injectables/RecommendationsService.html":{},"injectables/RetryService.html":{},"injectables/RoomUsersService.html":{},"controllers/SpotifyAuthController.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{},"miscellaneous/variables.html":{}}}],["value.roomid",{"_index":2543,"title":{},"body":{"injectables/RoomUsersService.html":{},"interfaces/liveChatUser.html":{}}}],["value.socketids.includes(socketid",{"_index":1298,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/RoomUsersService.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["value.socketids.includes(userid",{"_index":1309,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["value.socketids.length",{"_index":1300,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/RoomUsersService.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["value.socketids.splice(value.socketids.indexof(socketid",{"_index":1299,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/RoomUsersService.html":{},"interfaces/dmUser.html":{},"interfaces/liveChatUser.html":{}}}],["values",{"_index":1027,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/DmUsersService.html":{},"classes/UserActionDto.html":{},"interfaces/dmUser.html":{}}}],["values.find((u",{"_index":1323,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["values.some((u",{"_index":1322,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["variable",{"_index":3590,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":561,"title":{"miscellaneous/variables.html":{}},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["verbose",{"_index":2023,"title":{},"body":{"injectables/MyLogger.html":{}}}],["verbose(message",{"_index":2032,"title":{},"body":{"injectables/MyLogger.html":{}}}],["verification",{"_index":724,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["verified",{"_index":425,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifier",{"_index":719,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["verifier.verify(jwt_token",{"_index":722,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{}}}],["verify",{"_index":622,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RefreshBody.html":{},"classes/RegisterBody.html":{},"dependencies.html":{}}}],["version",{"_index":3753,"title":{},"body":{"index.html":{},"properties.html":{}}}],["versions.jsa",{"_index":3748,"title":{},"body":{"index.html":{}}}],["very",{"_index":1324,"title":{},"body":{"injectables/DmUsersService.html":{},"interfaces/dmUser.html":{}}}],["via",{"_index":263,"title":{},"body":{"controllers/AppController.html":{},"injectables/LiveService.html":{}}}],["visitors",{"_index":45,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["visits",{"_index":110,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["void",{"_index":757,"title":{},"body":{"injectables/BullBoardService.html":{},"injectables/DmUsersService.html":{},"injectables/EventQueueService.html":{},"injectables/LiveService.html":{},"injectables/MyLogger.html":{},"injectables/RecommendationsService.html":{},"injectables/RoomUsersService.html":{},"classes/WsExceptionFilter.html":{}}}],["vote_updated",{"_index":4062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["voted",{"_index":163,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["votedto",{"_index":3554,"title":{"classes/VoteDto.html":{}},"body":{"classes/VoteDto.html":{},"coverage.html":{}}}],["votes",{"_index":176,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{}}}],["voteupdated",{"_index":4063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["voting",{"_index":4045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wait",{"_index":389,"title":{},"body":{"modules/AppModule.html":{},"injectables/RetryService.html":{}}}],["wait(ms",{"_index":1826,"title":{},"body":{"injectables/LiveService.html":{}}}],["waiting",{"_index":2118,"title":{},"body":{"injectables/PrismaService.html":{}}}],["want",{"_index":746,"title":{},"body":{"modules/BullBoardModule.html":{}}}],["warn",{"_index":2024,"title":{},"body":{"injectables/MyLogger.html":{}}}],["warn(message",{"_index":2034,"title":{},"body":{"injectables/MyLogger.html":{}}}],["watch",{"_index":3728,"title":{},"body":{"index.html":{}}}],["webpack",{"_index":3771,"title":{},"body":{"index.html":{}}}],["websocket",{"_index":3574,"title":{},"body":{"classes/WsExceptionFilter.html":{}}}],["weightedsimilarities",{"_index":2303,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["weights",{"_index":2270,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["weights[key",{"_index":2310,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["weird",{"_index":1325,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/DtoGenService.html":{},"interfaces/dmUser.html":{}}}],["welcome",{"_index":3737,"title":{},"body":{"index.html":{}}}],["well",{"_index":3887,"title":{},"body":{"index.html":{}}}],["went",{"_index":1684,"title":{},"body":{"controllers/GenresController.html":{}}}],["whether",{"_index":903,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{},"injectables/RecommendationsService.html":{}}}],["width",{"_index":2964,"title":{},"body":{"classes/SpotifyUser.html":{}}}],["winston",{"_index":2048,"title":{},"body":{"injectables/MyLogger.html":{},"dependencies.html":{}}}],["within",{"_index":3909,"title":{},"body":{"index.html":{}}}],["without",{"_index":117,"title":{},"body":{"classes/AllTimeSessionDataDto.html":{},"classes/JoinsCount.html":{},"classes/JoinsPerDay.html":{},"classes/MessagesPerHour.html":{},"classes/ParticipantsPerHourDto.html":{},"classes/RoomAnalyticsContributorsDto.html":{},"classes/RoomAnalyticsDto.html":{},"classes/RoomAnalyticsInteractionsDto.html":{},"classes/RoomAnalyticsKeyMetricsDto.html":{},"classes/RoomAnalyticsParticipationDto.html":{},"classes/RoomAnalyticsQueueDto.html":{},"classes/RoomAnalyticsSongsDto.html":{},"classes/RoomAnalyticsVotesDto.html":{},"classes/SessionDataPerDayDto.html":{},"classes/SessionDurationPerDayDto.html":{},"classes/SongAnalyticsDto.html":{},"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{},"index.html":{}}}],["words",{"_index":870,"title":{},"body":{"classes/CombinedSearchHistory.html":{},"classes/CombinedSearchResults.html":{}}}],["work",{"_index":3844,"title":{},"body":{"index.html":{}}}],["world",{"_index":189,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["write",{"_index":3258,"title":{},"body":{"classes/UserActionDto.html":{}}}],["wrong",{"_index":1685,"title":{},"body":{"controllers/GenresController.html":{}}}],["wsexception",{"_index":3569,"title":{},"body":{"classes/WsExceptionFilter.html":{}}}],["wsexceptionfilter",{"_index":3561,"title":{"classes/WsExceptionFilter.html":{}},"body":{"classes/WsExceptionFilter.html":{},"coverage.html":{}}}],["www",{"_index":2865,"title":{},"body":{"injectables/SpotifyAuthService.html":{},"classes/SpotifyCallbackResponse.html":{},"classes/SpotifyTokenPair.html":{},"classes/SpotifyTokenRefreshResponse.html":{},"classes/SpotifyTokenResponse.html":{}}}],["x",{"_index":250,"title":{},"body":{"controllers/AppController.html":{}}}],["yaml",{"_index":3686,"title":{},"body":{"dependencies.html":{}}}],["yes",{"_index":1250,"title":{},"body":{"injectables/DmUsersService.html":{},"injectables/RetryService.html":{},"injectables/RoomUsersService.html":{}}}],["you'd",{"_index":2367,"title":{},"body":{"injectables/RetryService.html":{}}}],["yourself",{"_index":2235,"title":{},"body":{"injectables/ProfileService.html":{}}}],["zoom",{"_index":337,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AutoModerationModule.html":{},"modules/BullBoardModule.html":{},"modules/DbUtilsModule.html":{},"modules/DmUsersModule.html":{},"modules/DtoGenModule.html":{},"modules/GenresModule.html":{},"modules/ImageModule.html":{},"modules/LiveModule.html":{},"modules/MockConfigModule.html":{},"modules/MockPrismaModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RecommendationsModule.html":{},"modules/RetryModule.html":{},"modules/RoomQueueModule.html":{},"modules/RoomUsersModule.html":{},"modules/RoomsModule.html":{},"modules/S3Module.html":{},"modules/SearchModule.html":{},"modules/SongsModule.html":{},"modules/SpotifyAuthModule.html":{},"modules/SpotifyModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AllTimeSessionDataDto.html":{"url":"classes/AllTimeSessionDataDto.html","title":"class - AllTimeSessionDataDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllTimeSessionDataDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/dto/roomanalytics.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                avg_duration\n                            \n                            \n                                    \n                                    \n                                max_duration\n                            \n                            \n                                    \n                                    \n                                min_duration\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        avg_duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The average session duration of the room'})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:97\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        max_duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The maximum session duration of the room'})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:109\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        min_duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The minimum session duration of the room'})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:103\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n\tIsArray,\n\tIsDate,\n\tIsNumber,\n\tIsObject,\n\tIsString,\n\tValidateNested,\n} from \"class-validator\";\nimport { UserDto } from \"../../users/dto/user.dto\";\nimport { Type } from \"class-transformer\";\nexport class RoomAnalyticsKeyMetricsDto {\n\t// an object called unique visitors with two properties, count and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"UniqueVisitors\",\n\t\tdescription: \"Unique visitors to the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tcount: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tunique_visitors: {\n\t\tcount: number;\n\t\tpercentage_change: number;\n\t};\n\n\t// an object called returning_visitors with two properties, count and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"ReturningVisitors\",\n\t\tdescription: \"Returning visitors to the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tcount: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\treturning_visitors: {\n\t\tcount: number;\n\t\tpercentage_change: number;\n\t};\n\n\t// an object called average_session_duration with two properties, duration and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"AverageSessionDuration\",\n\t\tdescription: \"Average session duration in the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tduration: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\taverage_session_duration: {\n\t\tduration: number;\n\t\tpercentage_change: number;\n\t};\n}\n\nexport class RoomAnalyticsQueueDto {\n\t@ApiProperty({ description: \"Total number of songs ever queued in the room\" })\n\t@IsNumber()\n\ttotal_songs_queued: number;\n\n\t@ApiProperty({\n\t\tdescription: \"Number of times the room's queue was exported as a playlist\",\n\t})\n\t@IsNumber()\n\ttotal_queue_exports: number;\n}\n\nexport class ParticipantsPerHourDto {\n\t@ApiProperty({\n\t\tdescription: \"The number of participants in the room at the given hour\",\n\t})\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The specific hour for participant count\",\n\t\ttype: Date,\n\t})\n\t@IsDate()\n\tinstance: Date;\n}\n\nexport class AllTimeSessionDataDto {\n\t@ApiProperty({\n\t\tdescription: \"The average session duration of the room\",\n\t})\n\t@IsNumber()\n\tavg_duration: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The minimum session duration of the room\",\n\t})\n\t@IsNumber()\n\tmin_duration: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The maximum session duration of the room\",\n\t})\n\t@IsNumber()\n\tmax_duration: number;\n}\n\nexport class SessionDurationPerDayDto {\n\t@ApiProperty({ type: \"number\" })\n\tduration: number;\n\n\t@ApiProperty({ type: Date })\n\tday: Date;\n}\n\nexport class SessionDataPerDayDto {\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tavg_duration: SessionDurationPerDayDto[];\n\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tmin_duration: SessionDurationPerDayDto[];\n\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tmax_duration: SessionDurationPerDayDto[];\n}\n\nexport class JoinsCount {\n\t@ApiProperty({ type: \"number\" })\n\tcount: number;\n\n\t@ApiProperty({ type: Date })\n\tday: Date;\n}\n\nexport class JoinsPerDay {\n\ttotal_joins: JoinsCount[];\n\tunique_joins: JoinsCount[];\n}\n\nexport class RoomAnalyticsParticipationDto {\n\t@ApiProperty({\n\t\ttitle: \"Joins\",\n\t\tdescription:\n\t\t\t\"Join statistics, including total and unique joins per day and all-time\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tper_day: {\n\t\t\t\ttitle: \"JoinsPerDay\",\n\t\t\t\ttype: \"object\",\n\t\t\t},\n\t\t\tall_time: {\n\t\t\t\ttitle: \"JoinsAllTime\",\n\t\t\t\ttype: \"object\",\n\t\t\t\tproperties: {\n\t\t\t\t\ttotal_joins: { type: \"number\" },\n\t\t\t\t\tunique_joins: { type: \"number\" },\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tjoins: {\n\t\tper_day: JoinsPerDay;\n\t\tall_time: {\n\t\t\ttotal_joins: number;\n\t\t\tunique_joins: number;\n\t\t};\n\t};\n\n\t@ApiProperty({\n\t\tdescription: \"Participants per hour data\",\n\t\ttype: ParticipantsPerHourDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => ParticipantsPerHourDto)\n\tparticipants_per_hour: ParticipantsPerHourDto[];\n\n\t@ApiProperty({\n\t\ttitle: \"SessionData\",\n\t\tdescription:\n\t\t\t\"Session data including average, minimum, and maximum duration all-time and per day\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tall_time: {\n\t\t\t\ttype: \"object\",\n\t\t\t\ttitle: \"AllTimeSessionDataDto\",\n\t\t\t},\n\t\t\tper_day: {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: {\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\ttitle: \"SessionDurationPerDayDto\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tsession_data: {\n\t\tall_time: AllTimeSessionDataDto;\n\t\tper_day: SessionDurationPerDayDto[];\n\t};\n\n\t@ApiProperty({\n\t\ttitle: \"ReturnVisits\",\n\t\tdescription: \"Expected return visits and probability of return\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\texpected_return_count: { type: \"number\" },\n\t\t\tprobability_of_return: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\treturn_visits: {\n\t\texpected_return_count: number;\n\t\tprobability_of_return: number;\n\t};\n\n\t@ApiProperty({\n\t\tdescription: \"Number of previews of the room, i.e. without joining\",\n\t})\n\t@IsNumber()\n\troom_previews: number;\n}\n\nexport class MessagesPerHour {\n\t@ApiProperty({ type: \"number\" })\n\tcount: number;\n\n\t@ApiProperty({ type: Date })\n\thour: Date;\n}\n\nexport class RoomAnalyticsInteractionsDto {\n\t@ApiProperty({\n\t\ttitle: \"Messages\",\n\t\tdescription: \"Total messages sent and messages sent per hour\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\ttotal: { type: \"number\" },\n\t\t\tper_hour: {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: {\n\t\t\t\t\ttitle: \"MessagesPerHour\",\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tmessages: {\n\t\ttotal: number;\n\t\tper_hour: MessagesPerHour[];\n\t};\n\n\t@ApiProperty({ description: \"Total number of reactions sent in the room\" })\n\t@IsNumber()\n\treactions_sent: number;\n\n\t@ApiProperty({ description: \"Number of times the room was bookmarked\" })\n\t@IsNumber()\n\tbookmarked_count: number;\n}\n\nexport class SongAnalyticsDto {\n\t@ApiProperty({ description: \"Spotify ID of the song\" })\n\t@IsString()\n\tspotify_id: string;\n\n\t@ApiProperty({ description: \"Internal song ID\" })\n\tsong_id: string;\n\n\t@ApiProperty({ description: \"Number of times the song was played\" })\n\t@IsNumber()\n\tplays: number;\n\n\t@ApiProperty({ description: \"Number of upvotes the song received\" })\n\t@IsNumber()\n\tupvotes: number;\n\n\t@ApiProperty({ description: \"Number of downvotes the song received\" })\n\t@IsNumber()\n\tdownvotes: number;\n\n\t@ApiProperty({ description: \"Rank of the song based on some criteria\" })\n\t@IsNumber()\n\trank: number;\n\n\t@ApiProperty({ description: \"Global rank of the song across all rooms\" })\n\t@IsNumber()\n\tglobal_rank: number;\n}\n\nexport class RoomAnalyticsVotesDto {\n\t@ApiProperty({ description: \"Total number of upvotes for songs in the room\" })\n\t@IsNumber()\n\ttotal_upvotes: number;\n\n\t@ApiProperty({\n\t\tdescription: \"Total number of downvotes for songs in the room\",\n\t})\n\t@IsNumber()\n\ttotal_downvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Daily percentage change in upvotes for songs in the room. (last 24 hours)\",\n\t})\n\t@IsNumber()\n\tdaily_percentage_change_in_upvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Daily percentage change in downvotes for songs in the room. (last 24 hours)\",\n\t})\n\t@IsNumber()\n\tdaily_percentage_change_in_downvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Details of songs including Spotify ID, song ID, upvotes, and downvotes\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\tsongs: SongAnalyticsDto[];\n}\n\nexport class RoomAnalyticsSongsDto {\n\t@ApiProperty({\n\t\ttitle: \"MostPlayed\",\n\t\tdescription: \"Most played songs in the room\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\tmost_played: SongAnalyticsDto[];\n\n\t@ApiProperty({\n\t\tdescription: \"Top voted songs in the room\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\ttop_voted: SongAnalyticsDto[];\n}\n\nexport class RoomAnalyticsContributorsDto {\n\t@ApiProperty({\n\t\ttitle: \"TopContributors\",\n\t\tdescription: \"Top contributors to the room's queue\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tuser: { title: \"UserDto\", type: \"object\" },\n\t\t\trank: { type: \"number\" },\n\t\t\tnum_songs: { type: \"number\" },\n\t\t\tnum_upvotes: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\ttop_contributors: {\n\t\tuser: UserDto;\n\t\trank: number;\n\t\tnum_songs: number;\n\t\tnum_upvotes: number;\n\t};\n}\n\nexport class RoomAnalyticsDto {\n\t@ApiProperty({ description: \"Queue analytics\", type: RoomAnalyticsQueueDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsQueueDto)\n\tqueue: RoomAnalyticsQueueDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Participation analytics\",\n\t\ttype: RoomAnalyticsParticipationDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsParticipationDto)\n\tparticipation: RoomAnalyticsParticipationDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Interactions analytics\",\n\t\ttype: RoomAnalyticsInteractionsDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsInteractionsDto)\n\tinteractions: RoomAnalyticsInteractionsDto;\n\n\t@ApiProperty({ description: \"Votes analytics\", type: RoomAnalyticsVotesDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsVotesDto)\n\tvotes: RoomAnalyticsVotesDto;\n\n\t@ApiProperty({ description: \"Songs analytics\", type: RoomAnalyticsSongsDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsSongsDto)\n\tsongs: RoomAnalyticsSongsDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Contributors analytics\",\n\t\ttype: RoomAnalyticsContributorsDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsContributorsDto)\n\tcontributors: RoomAnalyticsContributorsDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                getHello\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Hello World!', operationId: 'getHello'})@ApiOkResponse({description: 'Hello World!', type: String})\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@ApiSecurity('bearer')@UseGuards(JwtAuthGuard)@Post('upload')@ApiOperation({summary: 'Upload a file to our AWS S3 storage bucket', description: 'This operation uploads a file to AWS S3 (the TuneIn bucket) and returns the URL of the uploaded file.', operationId: 'uploadFile', externalDocs: undefined})@ApiConsumes('multipart/form-data')@ApiBody({description: 'A file to upload to our AWS S3 storage bucket', schema: undefined})@ApiOkResponse({description: 'The URL of the uploaded file', type: String})@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:107\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n\tController,\n\tGet,\n\tHttpException,\n\tHttpStatus,\n\tPost,\n\tUploadedFile,\n\tUseGuards,\n\tUseInterceptors,\n} from \"@nestjs/common\";\nimport { AppService } from \"./app.service\";\nimport {\n\tApiBearerAuth,\n\tApiBody,\n\tApiConsumes,\n\tApiOkResponse,\n\tApiOperation,\n\tApiSecurity,\n} from \"@nestjs/swagger\";\nimport { FileInterceptor } from \"@nestjs/platform-express\";\nimport { S3Service } from \"./s3/s3.service\";\nimport { memoryStorage } from \"multer\";\nimport { JwtAuthGuard } from \"./auth/jwt-auth.guard\";\n\n@Controller()\nexport class AppController {\n\tconstructor(\n\t\tprivate readonly appService: AppService,\n\t\tprivate readonly s3Service: S3Service,\n\t) {}\n\n\t@Get()\n\t@ApiOperation({ summary: \"Hello World!\", operationId: \"getHello\" })\n\t@ApiOkResponse({\n\t\tdescription: \"Hello World!\",\n\t\ttype: String,\n\t})\n\tgetHello(): string {\n\t\treturn this.appService.getHello();\n\t}\n\n\t/*\n\tcurl -v -X POST http://localhost:3000/upload -F \"file=@/Users/lesedikekana/Downloads/f.jpg\"\n\t*/\n\t@ApiBearerAuth()\n\t@ApiSecurity(\"bearer\")\n\t@UseGuards(JwtAuthGuard)\n\t/*\n\t@ApiHeader({\n\t\tname: \"Authorization\",\n\t\tdescription: \"Bearer token for authentication\",\n\t})\n\t*/\n\t@Post(\"upload\")\n\t@ApiOperation({\n\t\tsummary: \"Upload a file to our AWS S3 storage bucket\",\n\t\tdescription:\n\t\t\t\"This operation uploads a file to AWS S3 (the TuneIn bucket) and returns the URL of the uploaded file.\",\n\t\toperationId: \"uploadFile\",\n\t\texternalDocs: {\n\t\t\tdescription: \"More about file uploads via HTTP POST requests\",\n\t\t\turl: \"https://www.postman.com/postman/postman-answers/collection/t38ia1u/upload-a-file-via-post-request\",\n\t\t},\n\t})\n\t@ApiConsumes(\"multipart/form-data\")\n\t@ApiBody({\n\t\tdescription: \"A file to upload to our AWS S3 storage bucket\",\n\t\tschema: {\n\t\t\ttype: \"object\",\n\t\t\tproperties: {\n\t\t\t\tfile: {\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t\tformat: \"binary\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@ApiOkResponse({\n\t\tdescription: \"The URL of the uploaded file\",\n\t\ttype: String,\n\t})\n\t/*\n\t@ApiBadRequestResponse({\n\t\tdescription: \"Bad request. The file is not a .png or .jpg file.\",\n\t})\n\t@ApiPayloadTooLargeResponse({\n\t\tdescription: \"The file is too large. It must be less than 5MB.\",\n\t})\n\t*/\n\t@UseInterceptors(\n\t\tFileInterceptor(\"file\", {\n\t\t\tstorage: memoryStorage(),\n\t\t\t/*\n\t\t\tlimits: { fileSize: 5 * 1024 * 1024 },\n\t\t\tfileFilter: (req, file, callback) => {\n\t\t\t\tif (!file.originalname.match(/\\.(jpg|png)$/)) {\n\t\t\t\t\treturn callback(\n\t\t\t\t\t\tnew Error(\"Only .png and .jpg files are allowed!\"),\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tcallback(null, true);\n\t\t\t},\n\t\t\t*/\n\t\t}),\n\t)\n\tasync uploadFile(@UploadedFile() file: Express.Multer.File) {\n\t\tconsole.log(\"File uploaded\");\n\t\tconsole.log(file);\n\t\tif (!file) {\n\t\t\tthrow new HttpException(\"No file uploaded\", HttpStatus.BAD_REQUEST);\n\t\t}\n\t\tconst result = await this.s3Service.uploadFile(file);\n\t\treturn {\n\t\t\turl: result.Location,\n\t\t};\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nBullBoardModule\n\nBullBoardModule\n\nAppModule -->\n\nBullBoardModule->AppModule\n\n\n\n\n\nBullConfigModule\n\nBullConfigModule\n\nAppModule -->\n\nBullConfigModule->AppModule\n\n\n\n\n\nDbUtilsModule\n\nDbUtilsModule\n\nAppModule -->\n\nDbUtilsModule->AppModule\n\n\n\n\n\nDtoGenModule\n\nDtoGenModule\n\nAppModule -->\n\nDtoGenModule->AppModule\n\n\n\n\n\nGenresModule\n\nGenresModule\n\nAppModule -->\n\nGenresModule->AppModule\n\n\n\n\n\nImageModule\n\nImageModule\n\nAppModule -->\n\nImageModule->AppModule\n\n\n\n\n\nLiveModule\n\nLiveModule\n\nAppModule -->\n\nLiveModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nRecommendationsModule\n\nRecommendationsModule\n\nAppModule -->\n\nRecommendationsModule->AppModule\n\n\n\n\n\nRetryModule\n\nRetryModule\n\nAppModule -->\n\nRetryModule->AppModule\n\n\n\n\n\nRoomsModule\n\nRoomsModule\n\nAppModule -->\n\nRoomsModule->AppModule\n\n\n\n\n\nS3Module\n\nS3Module\n\nAppModule -->\n\nS3Module->AppModule\n\n\n\n\n\nSearchModule\n\nSearchModule\n\nAppModule -->\n\nSearchModule->AppModule\n\n\n\n\n\nSongsModule\n\nSongsModule\n\nAppModule -->\n\nSongsModule->AppModule\n\n\n\n\n\nSpotifyModule\n\nSpotifyModule\n\nAppModule -->\n\nSpotifyModule->AppModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nMyLogger\n\nMyLogger\n\nAppModule -->\n\nMyLogger->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            MyLogger\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            BullBoardModule\n                        \n                        \n                            BullConfigModule\n                        \n                        \n                            DbUtilsModule\n                        \n                        \n                            DtoGenModule\n                        \n                        \n                            GenresModule\n                        \n                        \n                            ImageModule\n                        \n                        \n                            LiveModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            RecommendationsModule\n                        \n                        \n                            RetryModule\n                        \n                        \n                            RoomsModule\n                        \n                        \n                            S3Module\n                        \n                        \n                            SearchModule\n                        \n                        \n                            SongsModule\n                        \n                        \n                            SpotifyModule\n                        \n                        \n                            TasksModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MulterModule } from \"@nestjs/platform-express\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { AppController } from \"./app.controller\";\nimport { AppService } from \"./app.service\";\nimport { PrismaModule } from \"./../prisma/prisma.module\";\nimport { UsersModule } from \"./modules/users/users.module\";\nimport { AuthModule } from \"./auth/auth.module\";\nimport { RoomsModule } from \"./modules/rooms/rooms.module\";\nimport { DtoGenModule } from \"./modules/dto-gen/dto-gen.module\";\nimport { DbUtilsModule } from \"./modules/db-utils/db-utils.module\";\nimport { LiveModule } from \"./live/live.module\";\nimport { S3Module } from \"./s3/s3.module\";\nimport { SpotifyModule } from \"./spotify/spotify.module\";\nimport { HttpModule } from \"@nestjs/axios\";\nimport { TasksModule } from \"./tasks/tasks.module\";\nimport { BullConfigModule } from \"./bull-config/bull-config.module\";\nimport { BullBoardModule } from \"./bull-board/bull-board.module\";\nimport { memoryStorage } from \"multer\";\nimport { SearchModule } from \"./modules/search/search.module\";\nimport { GenresModule } from \"./modules/genres/genres.module\";\nimport { ScheduleModule } from \"@nestjs/schedule\";\nimport { SongsModule } from \"./modules/songs/songs.module\";\nimport { MurLockModule } from \"murlock\";\nimport { MyLogger } from \"./logger/logger.service\";\nimport { RecommendationsModule } from \"./recommendations/recommendations.module\";\nimport { ImageModule } from \"./image/image.module\";\nimport { RetryModule } from \"./retry/retry.module\";\nimport { MailerModule } from \"@nestjs-modules/mailer\";\n\n@Module({\n\timports: [\n\t\tConfigModule.forRoot({ isGlobal: true }),\n\t\tPrismaModule,\n\t\tUsersModule,\n\t\tAuthModule,\n\t\tRoomsModule,\n\t\tDtoGenModule,\n\t\tDbUtilsModule,\n\t\tLiveModule,\n\t\tS3Module,\n\t\tMulterModule.register({\n\t\t\tdest: \"./uploads\",\n\t\t\tstorage: memoryStorage(),\n\t\t}),\n\t\tSpotifyModule,\n\t\tHttpModule,\n\t\tBullBoardModule,\n\t\tTasksModule,\n\t\tBullConfigModule,\n\t\tSearchModule,\n\t\tGenresModule,\n\t\tScheduleModule.forRoot(),\n\t\tSongsModule,\n\t\tMurLockModule.forRoot({\n\t\t\tredisOptions: { url: \"redis://localhost:6379\" },\n\t\t\twait: 1000,\n\t\t\tmaxAttempts: 10,\n\t\t\tlogLevel: \"log\",\n\t\t\tignoreUnlockFail: false,\n\t\t}),\n\t\tRecommendationsModule,\n\t\tMailerModule.forRoot({\n\t\t\ttransport: {\n\t\t\t\thost: process.env.EMAIL_HOST,\n\t\t\t\tport: process.env.EMAIL_PORT,\n\t\t\t\tauth: {\n\t\t\t\t\tuser: process.env.EMAIL_USERNAME,\n\t\t\t\t\tpass: process.env.EMAIL_PASSWORD,\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n\t\tImageModule,\n\t\tRetryModule,\n\t],\n\tcontrollers: [AppController],\n\tproviders: [AppService, MyLogger],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\n@Injectable()\nexport class AppService {\n\tgetHello(): string {\n\t\treturn \"Hello World!\";\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                refresh\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginInfo: LoginBody)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@ApiOperation({summary: 'Authenticate a user using a Cognito JWT token', description: 'This method will authenticate a user using a Cognito JWT token. The token is decoded and verified, and a new JWT token is generated and returned. See https://jwt.io/ for more information on JWT tokens.', operationId: 'login'})@ApiBody({type: LoginBody, required: true, description: 'Cognito JWT token', examples: undefined})@ApiResponse({status: 200, description: 'User successfully logged in. JWT token returned.', type: String})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginInfo\n                                            \n                                                            LoginBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                        \n                    refresh(rb: RefreshBody)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('refresh')@ApiOperation({summary: 'Refresh an expired (or almost expired) JWT token', description: 'This method will refresh an expired (or almost expired) JWT token. The expired token is sent in the request body, and a new JWT token is generated and returned. The new token will have a new expiration date.', operationId: 'refresh'})@ApiBody({type: RefreshBody, required: true, description: 'The expired JWT token', examples: undefined})@ApiResponse({status: 200, description: 'JWT token successfully refreshed.', type: String})@ApiResponse({status: 400, description: 'Bad request.'})@ApiResponse({status: 401, description: 'Unauthorized.'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:152\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                rb\n                                            \n                                                            RefreshBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerInfo: RegisterBody)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@ApiOperation({summary: 'Register a new user in the API using Cognito', description: 'This method will register a new user in the API using Cognito. The user's Cognito username, email, and Cognito sub ID are required. The user will be created in the our database and will be able to authenticate using the Cognito JWT token.', operationId: 'register'})@ApiBody({type: RegisterBody, required: true, description: 'User info'})@ApiBody({type: RegisterBody, required: true, description: 'User's Cognito information', examples: undefined})@ApiResponse({status: 200, description: 'User successfully registered.', type: RegisterBody})@ApiResponse({status: 400, description: 'Bad request.'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:107\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerInfo\n                                            \n                                                            RegisterBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n\tController,\n\tPost,\n\tBody,\n\tHttpException,\n\tHttpStatus,\n} from \"@nestjs/common\";\nimport {\n\tAuthService,\n\tCognitoDecodedToken,\n\tJWTPayload,\n\tRegisterBody,\n\tLoginBody,\n\tRefreshBody,\n} from \"./auth.service\";\nimport { ApiBody, ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\n\n@Controller(\"auth\")\n@ApiTags(\"auth\")\nexport class AuthController {\n\tconstructor(private readonly authService: AuthService) {}\n\n\t@Post(\"login\")\n\t@ApiOperation({\n\t\tsummary: \"Authenticate a user using a Cognito JWT token\",\n\t\tdescription:\n\t\t\t\"This method will authenticate a user using a Cognito JWT token. The token is decoded and verified, and a new JWT token is generated and returned. See https://jwt.io/ for more information on JWT tokens.\",\n\t\toperationId: \"login\",\n\t})\n\t@ApiBody({\n\t\ttype: LoginBody,\n\t\trequired: true,\n\t\tdescription: \"Cognito JWT token\",\n\t\texamples: {\n\t\t\ttoken: {\n\t\t\t\tvalue: \"(see https://jwt.io/)\",\n\t\t\t},\n\t\t},\n\t})\n\t@ApiResponse({\n\t\tstatus: 200,\n\t\tdescription: \"User successfully logged in. JWT token returned.\",\n\t\ttype: String,\n\t})\n\t@ApiResponse({ status: 403, description: \"Forbidden.\" })\n\tasync login(@Body() loginInfo: LoginBody) {\n\t\tif (!loginInfo.token || loginInfo.token === null) {\n\t\t\tthrow new HttpException(\n\t\t\t\t\"Invalid request. Missing Cognito access token. AuthControllerLoginError01\",\n\t\t\t\tHttpStatus.UNAUTHORIZED,\n\t\t\t);\n\t\t}\n\t\tconst cognitoAccessToken: string = loginInfo.token;\n\t\tconsole.log(\"cognitoAccessToken\", cognitoAccessToken);\n\t\tconst authInfo: CognitoDecodedToken =\n\t\t\tawait this.authService.decodeAndVerifyCognitoJWT(cognitoAccessToken);\n\t\tconst userID: string = authInfo.username;\n\t\tconsole.log(\"authInfo\", authInfo);\n\n\t\tconst { username, email } = await this.authService.getUsernameAndEmail(\n\t\t\tuserID,\n\t\t);\n\n\t\tconst payload: JWTPayload = {\n\t\t\tid: authInfo.username,\n\t\t\tusername: username,\n\t\t\temail: email,\n\t\t};\n\n\t\tconsole.log(\"payload\", payload);\n\t\t//generate JWT token using payload\n\t\tconst token: string = await this.authService.generateJWT(payload);\n\t\tconsole.log(\"token\", token);\n\n\t\t//return the JWT as a string\n\t\treturn { token: token };\n\t}\n\n\t@Post(\"register\")\n\t@ApiOperation({\n\t\tsummary: \"Register a new user in the API using Cognito\",\n\t\tdescription:\n\t\t\t\"This method will register a new user in the API using Cognito. The user's Cognito username, email, and Cognito sub ID are required. The user will be created in the our database and will be able to authenticate using the Cognito JWT token.\",\n\t\toperationId: \"register\",\n\t})\n\t@ApiBody({ type: RegisterBody, required: true, description: \"User info\" })\n\t@ApiBody({\n\t\ttype: RegisterBody,\n\t\trequired: true,\n\t\tdescription: \"User's Cognito information\",\n\t\texamples: {\n\t\t\tregister: {\n\t\t\t\tvalue: {\n\t\t\t\t\tusername: \"cognito-username\",\n\t\t\t\t\temail: \"john@example.com\",\n\t\t\t\t\tuserCognitoSub: \"cognito-sub-id\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@ApiResponse({\n\t\tstatus: 200,\n\t\tdescription: \"User successfully registered.\",\n\t\ttype: RegisterBody,\n\t})\n\t@ApiResponse({ status: 400, description: \"Bad request.\" })\n\tasync register(@Body() registerInfo: RegisterBody) {\n\t\tconst successful: boolean = await this.authService.createUser(\n\t\t\tregisterInfo.username,\n\t\t\tregisterInfo.email,\n\t\t\tregisterInfo.userCognitoSub,\n\t\t);\n\n\t\tif (!successful) {\n\t\t\tthrow new HttpException(\n\t\t\t\t\"Invalid credentials. Could not create user. AuthRegisterError01\",\n\t\t\t\tHttpStatus.BAD_REQUEST,\n\t\t\t);\n\t\t}\n\n\t\tthrow new HttpException(\"Successfully created user.\", HttpStatus.CREATED);\n\t}\n\n\t@Post(\"refresh\")\n\t@ApiOperation({\n\t\tsummary: \"Refresh an expired (or almost expired) JWT token\",\n\t\tdescription:\n\t\t\t\"This method will refresh an expired (or almost expired) JWT token. The expired token is sent in the request body, and a new JWT token is generated and returned. The new token will have a new expiration date.\",\n\t\toperationId: \"refresh\",\n\t})\n\t@ApiBody({\n\t\ttype: RefreshBody,\n\t\trequired: true,\n\t\tdescription: \"The expired JWT token\",\n\t\texamples: {\n\t\t\tregister: {\n\t\t\t\tvalue: {\n\t\t\t\t\tusername: \"cognito-username\",\n\t\t\t\t\temail: \"john@example.com\",\n\t\t\t\t\tuserCognitoSub: \"cognito-sub-id\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@ApiResponse({\n\t\tstatus: 200,\n\t\tdescription: \"JWT token successfully refreshed.\",\n\t\ttype: String,\n\t})\n\t@ApiResponse({ status: 400, description: \"Bad request.\" })\n\t@ApiResponse({ status: 401, description: \"Unauthorized.\" })\n\tasync refresh(@Body() rb: RefreshBody) {\n\t\tif (!rb || rb === null) {\n\t\t\tthrow new HttpException(\n\t\t\t\t\"Invalid request. Missing JWT token. AuthControllerRefreshError01\",\n\t\t\t\tHttpStatus.BAD_REQUEST,\n\t\t\t);\n\t\t}\n\t\ttry {\n\t\t\tconsole.log(\"rb\");\n\t\t\tconsole.log(rb);\n\t\t\tconsole.log(typeof rb);\n\t\t\tconst token: string = rb.refreshToken;\n\t\t\tconst payload: JWTPayload = await this.authService.refreshJWT(token);\n\t\t\tconst newToken: string = await this.authService.generateJWT(payload);\n\t\t\treturn { token: newToken };\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t\tthrow new HttpException(\n\t\t\t\t\"Invalid JWT token. AuthControllerRefreshError02\",\n\t\t\t\tHttpStatus.UNAUTHORIZED,\n\t\t\t);\n\t\t}\n\t}\n\n\t//TODO: Add a POST method to logout a user\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\n\n\nSpotifyAuthModule\n\nSpotifyAuthModule\n\nAuthModule -->\n\nSpotifyAuthModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                        \n                            SpotifyAuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            SpotifyAuthModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { AuthService } from \"./auth.service\";\nimport { AuthController } from \"./auth.controller\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { JwtModule } from \"@nestjs/jwt\";\nimport { LocalStrategy } from \"./local.strategy\";\nimport { JwtStrategy } from \"./jwt.strategy\";\nimport { PrismaModule } from \"../../prisma/prisma.module\";\nimport { SpotifyAuthController } from \"./spotify/spotifyauth.controller\";\nimport { SpotifyAuthModule } from \"./spotify/spotifyauth.module\";\n\nconst JWT_SECRET_KEY = process.env.JWT_SECRET_KEY;\nif (!JWT_SECRET_KEY || JWT_SECRET_KEY === undefined) {\n\tthrow new Error(\"Missing JWT_SECRET_KEY in environment variables\");\n}\n\n@Module({\n\timports: [\n\t\tPassportModule,\n\t\tJwtModule.register({\n\t\t\tsecret: JWT_SECRET_KEY,\n\t\t\tsignOptions: { expiresIn: \"2h\" },\n\t\t}),\n\t\tPrismaModule,\n\t\tSpotifyAuthModule,\n\t],\n\tproviders: [AuthService, LocalStrategy, JwtStrategy],\n\tcontrollers: [AuthController, SpotifyAuthController],\n\texports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                accessKeyId\n                            \n                            \n                                    Private\n                                clientId\n                            \n                            \n                                    Private\n                                cognitoIdentityServiceProvider\n                            \n                            \n                                    Private\n                                secretAccessKey\n                            \n                            \n                                    Private\n                                userPoolId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                decodeAndVerifyCognitoJWT\n                            \n                            \n                                    Async\n                                generateJWT\n                            \n                            \n                                getUserInfo\n                            \n                            \n                                    Async\n                                getUsernameAndEmail\n                            \n                            \n                                    Async\n                                listUsers\n                            \n                            \n                                    Async\n                                refreshJWT\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:76\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(username: string, email: string, userID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:183\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        decodeAndVerifyCognitoJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    decodeAndVerifyCognitoJWT(jwt_token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:335\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                jwt_token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateJWT(payload: JWTPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:209\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserInfo\n                        \n                    \n                \n            \n            \n                \ngetUserInfo(req: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:292\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         JWTPayload\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUsernameAndEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsernameAndEmail(userID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:308\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        listUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    listUsers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:168\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refreshJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshJWT(jwt_token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:225\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                jwt_token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(username: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:121\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        accessKeyId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        clientId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cognitoIdentityServiceProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CognitoIdentityProvider\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        secretAccessKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        userPoolId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:75\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n\tHttpException,\n\tHttpStatus,\n\tInjectable,\n\tUnauthorizedException,\n} from \"@nestjs/common\";\nimport {\n\tAdminInitiateAuthCommandInput,\n\tAttributeType,\n\tAuthenticationResultType,\n\tCognitoIdentityProvider,\n\tListUsersCommandOutput,\n} from \"@aws-sdk/client-cognito-identity-provider\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { PrismaService } from \"../../prisma/prisma.service\";\nimport { Prisma } from \"@prisma/client\";\nimport * as PrismaTypes from \"@prisma/client\";\nimport * as jwt from \"jsonwebtoken\";\nimport { CognitoJwtVerifier } from \"aws-jwt-verify\";\nimport { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString } from \"class-validator\";\n\nexport type CognitoDecodedToken = {\n\tsub: string;\n\tiss: string;\n\tclient_id: string;\n\torigin_jti: string;\n\tevent_id?: string;\n\ttoken_use: string;\n\tscope?: string;\n\tauth_time: number;\n\texp: number;\n\tiat: number;\n\tjti: string;\n\tusername: string;\n};\n\nexport type JWTPayload = {\n\tid: string;\n\temail: string;\n\tusername: string;\n};\n\nexport class RegisterBody {\n\t@ApiProperty({ description: \"The user's username\" })\n\t@IsString()\n\tusername: string;\n\n\t@ApiProperty({ description: \"The user's Cognito sub/ID\" })\n\t@IsString()\n\tuserCognitoSub: string;\n\n\t@ApiProperty({ description: \"The user's email address\" })\n\t@IsString()\n\temail: string;\n}\n\nexport class LoginBody {\n\t@ApiProperty({ description: \"The Cognito JWT token\" })\n\t@IsString()\n\ttoken: string;\n}\n\nexport class RefreshBody {\n\t@ApiProperty({ description: \"The JWT token to be refreshed\" })\n\t@IsString()\n\trefreshToken: string;\n}\n\n@Injectable()\nexport class AuthService {\n\tprivate cognitoIdentityServiceProvider: CognitoIdentityProvider;\n\tprivate accessKeyId: string;\n\tprivate secretAccessKey: string;\n\tprivate userPoolId: string;\n\tprivate clientId: string;\n\n\tconstructor(\n\t\tprivate configService: ConfigService,\n\t\tprivate readonly prisma: PrismaService,\n\t) {\n\t\t// Set the AWS credentials\n\t\tconst accessKeyId = this.configService.get(\"AWS_ACCESS_KEY_ID\");\n\t\tif (!accessKeyId) {\n\t\t\tthrow new Error(\"Missing AWS_ACCESS_KEY_ID\");\n\t\t}\n\t\tthis.accessKeyId = accessKeyId;\n\n\t\tconst secretAccessKey = this.configService.get(\n\t\t\t\"AWS_SECRET_ACCESS_KEY\",\n\t\t);\n\t\tif (!secretAccessKey) {\n\t\t\tthrow new Error(\"Missing AWS_SECRET_ACCESS_KEY\");\n\t\t}\n\t\tthis.secretAccessKey = secretAccessKey;\n\n\t\tconst userPoolId = this.configService.get(\n\t\t\t\"AWS_COGNITO_USER_POOL_ID\",\n\t\t);\n\t\tif (!userPoolId) {\n\t\t\tthrow new Error(\"Missing AWS_COGNITO_USER_POOL_ID\");\n\t\t}\n\t\tthis.userPoolId = userPoolId;\n\n\t\tconst clientId = this.configService.get(\"AWS_COGNITO_CLIENT_ID\");\n\t\tif (!clientId) {\n\t\t\tthrow new Error(\"Missing AWS_COGNITO_CLIENT_ID\");\n\t\t}\n\t\tthis.clientId = clientId;\n\n\t\tthis.cognitoIdentityServiceProvider = new CognitoIdentityProvider({\n\t\t\tregion: \"af-south-1\",\n\n\t\t\tcredentials: {\n\t\t\t\taccessKeyId: this.accessKeyId,\n\t\t\t\tsecretAccessKey: this.secretAccessKey,\n\t\t\t},\n\t\t});\n\t}\n\n\tasync validateUser(\n\t\tusername: string,\n\t\tpassword: string,\n\t): Promise {\n\t\tif (!this.userPoolId || !this.clientId) {\n\t\t\tthrow new Error(\"Missing Cognito configuration\");\n\t\t}\n\n\t\tconst params: AdminInitiateAuthCommandInput = {\n\t\t\tAuthFlow: \"ADMIN_NO_SRP_AUTH\",\n\t\t\tClientId: this.clientId,\n\t\t\tUserPoolId: this.userPoolId,\n\t\t\tAuthParameters: {\n\t\t\t\tUSERNAME: username,\n\t\t\t\tPASSWORD: password,\n\t\t\t},\n\t\t};\n\n\t\ttry {\n\t\t\tconst authResponse =\n\t\t\t\tawait this.cognitoIdentityServiceProvider.adminInitiateAuth(params);\n\t\t\tif (authResponse.AuthenticationResult) {\n\t\t\t\tconst user = await this.cognitoIdentityServiceProvider.adminGetUser({\n\t\t\t\t\tUserPoolId: this.userPoolId,\n\t\t\t\t\tUsername: username,\n\t\t\t\t});\n\n\t\t\t\tif (!user || !user.Username || !user.UserAttributes) {\n\t\t\t\t\tthrow new UnauthorizedException(\"Invalid credentials\");\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tusername: user.Username,\n\t\t\t\t\tattributes: user.UserAttributes,\n\t\t\t\t\tauthenticationResult: authResponse.AuthenticationResult,\n\t\t\t\t};\n\t\t\t}\n\t\t\tthrow new UnauthorizedException(\"Invalid credentials\");\n\t\t} catch (error) {\n\t\t\tthrow new UnauthorizedException(\"Invalid credentials\");\n\t\t}\n\t}\n\n\tasync listUsers(): Promise {\n\t\tconst params = {\n\t\t\tUserPoolId: this.userPoolId,\n\t\t};\n\n\t\ttry {\n\t\t\tconst responsePromise =\n\t\t\t\tawait this.cognitoIdentityServiceProvider.listUsers(params);\n\t\t\tconst response = await responsePromise;\n\t\t\treturn response;\n\t\t} catch (error) {\n\t\t\tthrow new UnauthorizedException(\"Error listing users\");\n\t\t}\n\t}\n\n\tasync createUser(\n\t\tusername: string,\n\t\temail: string,\n\t\tuserID: string,\n\t): Promise {\n\t\tconst user: Prisma.usersCreateInput = {\n\t\t\tusername: username,\n\t\t\temail: email,\n\t\t\tuser_id: userID,\n\t\t};\n\t\tconst existingUser = await this.prisma.users.findUnique({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\t\tif (existingUser) {\n\t\t\treturn true;\n\t\t}\n\t\ttry {\n\t\t\tconst response = await this.prisma.users.create({ data: user });\n\t\t\tconsole.log(response);\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tasync generateJWT(payload: JWTPayload): Promise {\n\t\tconst secretKey = this.configService.get(\"JWT_SECRET_KEY\");\n\t\tconst expiresIn = this.configService.get(\"JWT_EXPIRATION_TIME\");\n\n\t\tif (!secretKey || secretKey === undefined || secretKey === \"\") {\n\t\t\tthrow new Error(\"Missing JWT secret key\");\n\t\t}\n\n\t\tif (!expiresIn || expiresIn === undefined || expiresIn === \"\") {\n\t\t\tthrow new Error(\"Missing JWT expiration time\");\n\t\t}\n\n\t\tconst token = jwt.sign(payload, secretKey, { expiresIn });\n\t\treturn token;\n\t}\n\n\tasync refreshJWT(jwt_token: string): Promise {\n\t\tconst secretKey = this.configService.get(\"JWT_SECRET_KEY\");\n\t\tif (!secretKey || secretKey === undefined || secretKey === \"\") {\n\t\t\tthrow new Error(\"Missing JWT secret key\");\n\t\t}\n\n\t\tconst decoded: jwt.JwtPayload = jwt.decode(jwt_token) as jwt.JwtPayload;\n\t\tconsole.log(\"decoded\", decoded);\n\n\t\t//ensure user data in Payload is valid\n\t\tconst user: PrismaTypes.users | null = await this.prisma.users.findUnique({\n\t\t\twhere: {\n\t\t\t\tuser_id: decoded.id,\n\t\t\t\temail: decoded.email,\n\t\t\t\tusername: decoded.username,\n\t\t\t},\n\t\t});\n\n\t\tconsole.log(\"user\", user);\n\n\t\tif (!user) {\n\t\t\tthrow new UnauthorizedException(\"Invalid JWT token\");\n\t\t}\n\n\t\tconst result: JWTPayload = {\n\t\t\tid: decoded.id as string,\n\t\t\temail: decoded.email as string,\n\t\t\tusername: decoded.username as string,\n\t\t};\n\t\treturn result;\n\t}\n\n\t/*\n\tasync getUserInfo(jwt_token: string): Promise {\n\t\tconst secretKey = this.configService.get(\"JWT_SECRET_KEY\");\n\t\tconst expiresIn = this.configService.get(\"JWT_EXPIRATION_TIME\");\n\n\t\tif (!secretKey || secretKey === undefined || secretKey === \"\") {\n\t\t\tthrow new Error(\"Missing JWT secret key\");\n\t\t}\n\n\t\tif (!expiresIn || expiresIn === undefined || expiresIn === \"\") {\n\t\t\tthrow new Error(\"Missing JWT expiration time\");\n\t\t}\n\n\t\tconst decoded = jwt.verify(jwt_token, secretKey);\n\t\tconst userID = decoded.sub;\n\t\tif (!userID) {\n\t\t\tthrow new Error(\"Invalid JWT token\");\n\t\t}\n\t\tif (typeof userID !== \"string\") {\n\t\t\tthrow new Error(\"Invalid JWT token\");\n\t\t}\n\n\t\tconst user = await this.prisma.users.findUnique({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\t\treturn user;\n\t}\n\t*/\n\n\t// this funciton will be passed a Request object from the NestJS controller eg:\n\t/*\n\tgetRoomInfo(@Request() req: Request, @Param(\"roomID\") roomID: string): RoomDto {\n\t\treturn this.roomsService.getRoomInfo(roomID);\n\t}\n\t*/\n\tgetUserInfo(req: any): JWTPayload {\n\t\tconst result = req.user as JWTPayload;\n\t\tconsole.log(result);\n\t\tif (!result) {\n\t\t\tthrow new UnauthorizedException(\n\t\t\t\t\"No user found in JWT token. Please log in again\",\n\t\t\t);\n\t\t}\n\t\tif (!result.id) {\n\t\t\tthrow new UnauthorizedException(\n\t\t\t\t\"No user ID found in JWT token. Please log in again\",\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync getUsernameAndEmail(userID: string): Promise {\n\t\tconst user: PrismaTypes.users | null = await this.prisma.users.findUnique({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\n\t\tif (!user || user === null) {\n\t\t\tthrow new HttpException(\n\t\t\t\t\"Invalid credentials. Could not create user. getUsernameAndEmailError01\",\n\t\t\t\tHttpStatus.UNAUTHORIZED,\n\t\t\t);\n\t\t}\n\n\t\tif (!user.email || user.email === null) {\n\t\t\tthrow new HttpException(\n\t\t\t\t\"User (\" +\n\t\t\t\t\tuser.username +\n\t\t\t\t\t\") does not have an email address. getUsernameAndEmailError02\",\n\t\t\t\tHttpStatus.UNAUTHORIZED,\n\t\t\t);\n\t\t}\n\n\t\treturn { username: user.username, email: user.email };\n\t}\n\n\tasync decodeAndVerifyCognitoJWT(\n\t\tjwt_token: string,\n\t): Promise {\n\t\tconst verifier = CognitoJwtVerifier.create({\n\t\t\tuserPoolId: this.userPoolId,\n\t\t\ttokenUse: \"access\",\n\t\t\tclientId: this.clientId,\n\t\t});\n\n\t\ttry {\n\t\t\tconst payload = await verifier.verify(jwt_token);\n\t\t\tconsole.log(\"Cognito Verification\", payload);\n\t\t\tconst result: CognitoDecodedToken = payload as CognitoDecodedToken;\n\t\t\treturn result;\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t\tthrow new UnauthorizedException(\"Invalid JWT token\");\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AutoModerationModule.html":{"url":"modules/AutoModerationModule.html","title":"module - AutoModerationModule","body":"\n                   \n\n\n\n\n    Modules\n    AutoModerationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AutoModerationModule\n\n\n\ncluster_AutoModerationModule_providers\n\n\n\ncluster_AutoModerationModule_exports\n\n\n\n\nAutoModerationService \n\nAutoModerationService \n\n\n\nAutoModerationModule\n\nAutoModerationModule\n\nAutoModerationService  -->\n\nAutoModerationModule->AutoModerationService \n\n\n\n\n\nAutoModerationService\n\nAutoModerationService\n\nAutoModerationModule -->\n\nAutoModerationService->AutoModerationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/live/automod/automod.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AutoModerationService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AutoModerationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { AutoModerationService } from \"./automod.service\";\n\n@Module({\n\tproviders: [AutoModerationService],\n\texports: [AutoModerationService],\n})\nexport class AutoModerationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AutoModerationService.html":{"url":"injectables/AutoModerationService.html","title":"injectable - AutoModerationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AutoModerationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/live/automod/automod.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\n@Injectable()\nexport class AutoModerationService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BullBoardModule.html":{"url":"modules/BullBoardModule.html","title":"module - BullBoardModule","body":"\n                   \n\n\n\n\n    Modules\n    BullBoardModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BullBoardModule\n\n\n\ncluster_BullBoardModule_exports\n\n\n\ncluster_BullBoardModule_imports\n\n\n\ncluster_BullBoardModule_providers\n\n\n\n\nBullConfigModule\n\nBullConfigModule\n\n\n\nBullBoardModule\n\nBullBoardModule\n\nBullBoardModule -->\n\nBullConfigModule->BullBoardModule\n\n\n\n\n\nBullBoardService \n\nBullBoardService \n\nBullBoardService  -->\n\nBullBoardModule->BullBoardService \n\n\n\n\n\nBullBoardService\n\nBullBoardService\n\nBullBoardModule -->\n\nBullBoardService->BullBoardModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/bull-board/bull-board.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BullBoardService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BullConfigModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BullBoardService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // bull-board/bull-board.module.ts\nimport { Module } from \"@nestjs/common\";\nimport { BullModule } from \"@nestjs/bull\";\nimport { BullBoardService } from \"./bull-board.service\";\nimport { BullConfigModule } from \"../bull-config/bull-config.module\";\n\n@Module({\n\timports: [BullConfigModule, BullModule.registerQueue({ name: \"task-queue\" })],\n\tproviders: [BullBoardService],\n\texports: [BullBoardService], // Export if you want to use it outside this module\n})\nexport class BullBoardModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BullBoardService.html":{"url":"injectables/BullBoardService.html","title":"injectable - BullBoardService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BullBoardService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bull-board/bull-board.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                serverStarted\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskQueue: Queue)\n                    \n                \n                        \n                            \n                                Defined in src/bull-board/bull-board.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskQueue\n                                                  \n                                                        \n                                                                    Queue\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/bull-board/bull-board.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        serverStarted\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/bull-board/bull-board.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { createBullBoard } from \"@bull-board/api\";\nimport { BullAdapter } from \"@bull-board/api/bullAdapter\";\nimport { ExpressAdapter } from \"@bull-board/express\";\nimport express from \"express\";\nimport { Queue } from \"bull\";\nimport { InjectQueue } from \"@nestjs/bull\";\nimport { Injectable, OnModuleInit } from \"@nestjs/common\";\n\n@Injectable()\nexport class BullBoardService implements OnModuleInit {\n\tprivate static serverStarted = false; // Static property to track server status\n\n\tconstructor(@InjectQueue(\"task-queue\") private readonly taskQueue: Queue) {}\n\n\tonModuleInit() {\n\t\tif (BullBoardService.serverStarted) {\n\t\t\tconsole.log(\"Bull Board server is already running.\");\n\t\t\treturn;\n\t\t}\n\n\t\tconst serverAdapter = new ExpressAdapter();\n\t\tcreateBullBoard({\n\t\t\tqueues: [new BullAdapter(this.taskQueue)],\n\t\t\tserverAdapter,\n\t\t});\n\n\t\tconst app = express();\n\t\tserverAdapter.setBasePath(\"/admin/queues\");\n\t\tapp.use(\"/admin/queues\", serverAdapter.getRouter());\n\n\t\tconst port = 3001;\n\t\tapp\n\t\t\t.listen(port, () => {\n\t\t\t\tconsole.log(\n\t\t\t\t\t`Bull Board is running on https://localhost:${port}/admin/queues`,\n\t\t\t\t);\n\t\t\t\tBullBoardService.serverStarted = true; // Mark server as started\n\t\t\t})\n\t\t\t.on(\"error\", (err) => {\n\t\t\t\tconsole.error(err);\n\t\t\t});\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BullConfigModule.html":{"url":"modules/BullConfigModule.html","title":"module - BullConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    BullConfigModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/bull-config/bull-config.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        // bull.config.ts\nimport { BullModule } from \"@nestjs/bull\";\nimport { Module } from \"@nestjs/common\";\n\n@Module({\n\timports: [\n\t\tBullModule.forRoot({\n\t\t\tredis: {\n\t\t\t\thost: \"localhost\",\n\t\t\t\tport: 6379,\n\t\t\t},\n\t\t}),\n\t],\n})\nexport class BullConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Category.html":{"url":"interfaces/Category.html","title":"interface - Category","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/live/dto/emojireaction.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            emoji\n                                        \n                                \n                                \n                                        \n                                            key\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        emoji\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        emoji:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsDate } from \"class-validator\";\n\n//for Emoji and Category, see: https://github.com/woodybury/rn-emoji-picker\nexport interface Emoji {\n\tcategory: string;\n\tkeywords: string[];\n\tname: string;\n\torder: number;\n\tunified: string;\n\temoji: string;\n}\n\nexport interface Category {\n\tkey: string;\n\tname: string;\n\temoji?: string;\n}\n\nexport class EmojiReactionDto {\n\t@ApiProperty({\n\t\tdescription: \"The date the emoji was sent\",\n\t})\n\t@IsDate()\n\tdate_created: Date;\n\n\t@ApiProperty({\n\t\tdescription: \"The message body\",\n\t})\n\t@IsString()\n\tbody: string;\n\n\t@ApiProperty({\n\t\tdescription: \"The user that used the emoji\",\n\t})\n\t@IsString()\n\tuserID: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChatEventDto.html":{"url":"classes/ChatEventDto.html","title":"class - ChatEventDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChatEventDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/live/dto/chatevent.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                body\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                date_created\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                errorMessage\n                            \n                            \n                                    \n                                    \n                                userID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LiveChatMessageDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The message body', type: LiveChatMessageDto})@IsObject()@Type(undefined)@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/live/dto/chatevent.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        date_created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The date the event was created'})@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/live/dto/chatevent.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        errorMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'An error message, if applicable'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/live/dto/chatevent.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userID\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The userID †hat triggered the event, or null if emitted by the server', type: String, nullable: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/live/dto/chatevent.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsString, IsObject, IsDate, ValidateNested } from \"class-validator\";\nimport { LiveChatMessageDto } from \"./livechatmessage.dto\";\nimport { Type } from \"class-transformer\";\n\nexport class ChatEventDto {\n\t@ApiPropertyOptional({\n\t\tdescription: \"The date the event was created\",\n\t})\n\t@IsDate()\n\tdate_created?: Date;\n\n\t@ApiPropertyOptional({\n\t\tdescription: \"The message body\",\n\t\ttype: LiveChatMessageDto,\n\t})\n\t@IsObject()\n\t@Type(() => LiveChatMessageDto)\n\t@ValidateNested()\n\tbody?: LiveChatMessageDto;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"The userID †hat triggered the event, or null if emitted by the server\",\n\t\ttype: String,\n\t\tnullable: true,\n\t})\n\t@IsString()\n\tuserID: string | null;\n\n\t@ApiPropertyOptional({\n\t\tdescription: \"An error message, if applicable\",\n\t})\n\t@IsString()\n\terrorMessage?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CombinedSearchHistory.html":{"url":"classes/CombinedSearchHistory.html","title":"class - CombinedSearchHistory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CombinedSearchHistory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/search/search.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                results\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        results\n                        \n                    \n                \n            \n                \n                    \n                        Type :     (RoomDto | UserDto | string)[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Mixed list of rooms, users, or strings', isArray: true, type: 'object', items: undefined})@IsArray({message: 'Results must be an array'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/search/search.service.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { UserDto } from \"../users/dto/user.dto\";\nimport { RoomDto } from \"../rooms/dto/room.dto\";\nimport { SearchHistoryDto } from \"./dto/searchhistorydto\";\nimport { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, ValidateNested } from \"class-validator\";\nimport * as PrismaTypes from \"@prisma/client\";\nimport { DtoGenService } from \"../dto-gen/dto-gen.service\";\nimport * as sqlstring from \"sqlstring\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\n\nexport class CombinedSearchResults {\n\t@ApiProperty({\n\t\ttype: RoomDto,\n\t\tdescription: \"List of rooms\",\n\t\tisArray: true,\n\t})\n\t@IsArray({ message: \"Rooms must be an array\" })\n\t@ValidateNested({ each: true, message: \"Each room must be a valid RoomDto\" })\n\trooms: RoomDto[];\n\n\t@ApiProperty({\n\t\ttype: UserDto,\n\t\tdescription: \"List of users\",\n\t\tisArray: true,\n\t})\n\t@IsArray({ message: \"Users must be an array\" })\n\t@ValidateNested({ each: true, message: \"Each user must be a valid UserDto\" })\n\tusers: UserDto[];\n}\n\nexport class CombinedSearchHistory {\n\t@ApiProperty({\n\t\tdescription: \"Mixed list of rooms, users, or strings\",\n\t\tisArray: true,\n\t\ttype: \"object\",\n\t\titems: {\n\t\t\toneOf: [\n\t\t\t\t{ $ref: \"#/components/schemas/RoomDto\" },\n\t\t\t\t{ $ref: \"#/components/schemas/UserDto\" },\n\t\t\t\t{ type: \"string\" },\n\t\t\t],\n\t\t},\n\t})\n\t@IsArray({ message: \"Results must be an array\" })\n\tresults: (RoomDto | UserDto | string)[];\n}\n\n@Injectable()\nexport class SearchService {\n\tconstructor(\n\t\tprivate readonly prisma: PrismaService,\n\t\tprivate readonly dtogen: DtoGenService,\n\t) {}\n\n\t// Fuzzy search tutorial\n\t/*\n\tusing pg_trgm to fuzzy search with threshold 0.4\n\t```\n\tSELECT\n\t*\n\tFROM artists\n\tWHERE SIMILARITY(name,'Claud Monay') > 0.4 ;\n\t```\n\n\tusing pg_trgm to fuzzy search to search part of a string (with default threshold 0.3)\n\t```\n\tSELECT\n\t*\n\tFROM artists\n\tWHERE 'Cadinsky' % ANY(STRING_TO_ARRAY(name,' '));\n\t```\n\n\tusing Levenstein distances (for closest matching words)\n\t```\n\tSELECT\n\t\t*,\n\t\tLEVENSHTEIN(name, 'Freda Kallo')\n\tFROM artists\n\tORDER BY LEVENSHTEIN(name, 'Freda Kallo') ASC\n\tLIMIT 5\n\t```\n\t*/\n\t// async demoSearch(ctx: Context) {\n\t// \tconst result = await ctx.prisma.$queryRaw`\n\t// \tSELECT *,\n\t// \tLEVENSHTEIN(username, 'farmer') AS distance\n\t// \tFROM users\n\t// \tWHERE similarity(username, 'farmer) > 0.2\n\t// \tORDER BY distance ASC\n\t// \tLIMIT 5;`;\n\t// \tconsole.log(result);\n\t// }\n\n\tasync insertSearchHistory(endpoint: string, params: any, user_id: string) {\n\t\tlet url = `${endpoint}?q=${params.q}`;\n\n\t\tif (params.creator) {\n\t\t\turl += `&creator=${params.creator}`;\n\t\t}\n\n\t\tconst result = await this.prisma.search_history.create({\n\t\t\tdata: {\n\t\t\t\tuser_id: user_id,\n\t\t\t\tsearch_term: params.q,\n\t\t\t\turl: url,\n\t\t\t},\n\t\t});\n\n\t\tconsole.log(\"Insertion result: \" + result);\n\t}\n\n\tasync combinedSearch(\n\t\tparams: {\n\t\t\tq: string;\n\t\t\tcreator?: string;\n\t\t},\n\t\tuserID: string,\n\t): Promise {\n\t\t// console.log(params);\n\n\t\tconst rooms = await this.searchRooms(params, userID);\n\t\tconst users = await this.searchUsers(params.q, userID);\n\n\t\tconsole.log(\"Rooms: \" + rooms);\n\t\tconsole.log(\"Users: \" + users);\n\n\t\tif (users) {\n\t\t\treturn {\n\t\t\t\trooms: rooms,\n\t\t\t\tusers: users,\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\trooms: rooms,\n\t\t\tusers: [],\n\t\t};\n\t}\n\n\tasync searchRooms(\n\t\tparams: {\n\t\t\tq: string;\n\t\t\tcreator?: string;\n\t\t},\n\t\tuserID: string, // this is the user who is searching. To check whether the room_creator has blocked this user\n\t): Promise {\n\t\t// console.log(params);\n\t\t// const result = await ctx.prisma.$queryRaw`\n\t\t// SELECT room_id, name, description, username,\n\t\t// LEAST(levenshtein(name, ${params.q}), levenshtein(username, ${params.creator})) AS distance\n\t\t// FROM room INNER JOIN users ON room_creator = user_id\n\t\t// WHERE similarity(name, ${params.q}) > 0.2\n\t\t// OR similarity(username, ${params.creator}) > 0.2\n\t\t// ORDER BY distance ASC\n\t\t// LIMIT 10;`;\n\t\tconst result = await this.prisma.$queryRaw`\n\t\tSELECT room_id, name, description, username,\n       \tLEAST(levenshtein(name, ${params.q}), levenshtein(username, ${params.creator})) AS distance\n\t\tFROM room INNER JOIN users ON room_creator = user_id\n\t\tWHERE similarity(name, ${params.q}) > 0.2\n\t\tOR similarity(username, ${params.creator}) > 0.2\n\t\tORDER BY distance ASC\n\t\tLIMIT 10;`;\n\n\t\t// console.log(result);\n\n\t\tif (Array.isArray(result)) {\n\t\t\tlet roomIds = result.map((row) => row.room_id.toString());\n\n\t\t\t//check if rooms are owned by users who have blocked the user\n\t\t\tconst usersWhoBlockedGivenUser: PrismaTypes.blocked[] =\n\t\t\t\tawait this.prisma.blocked.findMany({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tOR: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tblocker: userID,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tblockee: userID,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\tconst blocked_rooms: PrismaTypes.room[] = await this.prisma.room.findMany(\n\t\t\t\t{\n\t\t\t\t\twhere: {\n\t\t\t\t\t\troom_id: {\n\t\t\t\t\t\t\tin: roomIds,\n\t\t\t\t\t\t},\n\t\t\t\t\t\troom_creator: {\n\t\t\t\t\t\t\tin: usersWhoBlockedGivenUser.map((user) => {\n\t\t\t\t\t\t\t\tif (user.blocker === userID) {\n\t\t\t\t\t\t\t\t\treturn user.blockee;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn user.blocker;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t\troomIds = roomIds.filter(\n\t\t\t\t(id) =>\n\t\t\t\t\t!blocked_rooms.map((room) => room.room_id.toString()).includes(id),\n\t\t\t);\n\n\t\t\tconst roomDtos = await this.dtogen.generateMultipleRoomDto(\n\t\t\t\troomIds,\n\t\t\t\tuserID,\n\t\t\t);\n\t\t\t// console.log(roomDtos);\n\n\t\t\tif (roomDtos) {\n\t\t\t\tconst sortedRooms = roomIds\n\t\t\t\t\t.map((id) => roomDtos.find((room) => room.roomID === id))\n\t\t\t\t\t.filter((room): room is RoomDto => room !== undefined);\n\n\t\t\t\treturn sortedRooms;\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.error(\"Unexpected query result format, expected an array.\");\n\t\t}\n\n\t\treturn [new RoomDto()];\n\t}\n\n\tadvancedRoomSearchQueryBuilder(params: {\n\t\tq: string;\n\t\tcreator_username?: string;\n\t\tcreator_name?: string;\n\t\tparticipant_count?: number;\n\t\tdescription?: string;\n\t\tis_temp?: boolean;\n\t\tis_priv?: boolean;\n\t\tis_scheduled?: boolean;\n\t\tstart_date?: string;\n\t\tend_date?: string;\n\t\tlang?: string;\n\t\texplicit?: boolean;\n\t\tnsfw?: boolean;\n\t\ttags?: string;\n\t}): string {\n\t\tlet query = `\n        SELECT room.*,`;\n\n\t\tif (\n\t\t\tparams.creator_name === undefined &&\n\t\t\tparams.creator_username === undefined\n\t\t) {\n\t\t\tquery += ` levenshtein(name, ${sqlstring.escape(params.q)}) AS distance`;\n\t\t} else if (\n\t\t\tparams.creator_name !== undefined &&\n\t\t\tparams.creator_username !== undefined\n\t\t) {\n\t\t\tquery += ` LEAST(levenshtein(name, ${sqlstring.escape(\n\t\t\t\tparams.q,\n\t\t\t)}), levenshtein(username, ${sqlstring.escape(\n\t\t\t\tparams.creator_username,\n\t\t\t)}), levenshtein(full_name, ${sqlstring.escape(\n\t\t\t\tparams.creator_name,\n\t\t\t)})) AS distance`;\n\t\t} else if (params.creator_name !== undefined) {\n\t\t\tquery += ` LEAST(levenshtein(name, ${sqlstring.escape(\n\t\t\t\tparams.q,\n\t\t\t)}), levenshtein(full_name, ${sqlstring.escape(\n\t\t\t\tparams.creator_name,\n\t\t\t)})) AS distance`;\n\t\t} else if (params.creator_username !== undefined) {\n\t\t\tquery += ` LEAST(levenshtein(name, ${sqlstring.escape(\n\t\t\t\tparams.q,\n\t\t\t)}), levenshtein(username, ${sqlstring.escape(\n\t\t\t\tparams.creator_username,\n\t\t\t)})) AS distance`;\n\t\t}\n\n\t\tif (params.description !== undefined) {\n\t\t\tquery += `, levenshtein(description, 'Get energized') AS desc_distance`;\n\t\t}\n\n\t\tquery += ` FROM room INNER JOIN users ON room_creator = user_id`;\n\n\t\t// console.log(\"priv: \" + params.is_priv);\n\n\t\tif (params.is_scheduled !== undefined) {\n\t\t\tquery += ` LEFT JOIN scheduled_room on room.room_id = scheduled_room.room_id`;\n\t\t}\n\t\tif (params.is_priv !== undefined) {\n\t\t\tquery += ` LEFT JOIN private_room on room.room_id = private_room.room_id`;\n\t\t}\n\t\tif (params.participant_count !== undefined) {\n\t\t\tquery += ` INNER JOIN participate ON room.room_id = participate.room_id`;\n\t\t}\n\n\t\tquery += ` WHERE (similarity(name, ${sqlstring.escape(params.q)}) > 0.2`;\n\n\t\tif (\n\t\t\tparams.creator_name !== undefined &&\n\t\t\tparams.creator_username !== undefined\n\t\t) {\n\t\t\tquery += ` OR similarity(username, ${sqlstring.escape(\n\t\t\t\tparams.creator_username,\n\t\t\t)}) > 0.2 OR similarity(full_name, ${sqlstring.escape(\n\t\t\t\tparams.creator_name,\n\t\t\t)}) > 0.2`;\n\t\t} else if (params.creator_name !== undefined) {\n\t\t\tquery += ` OR similarity(full_name, ${sqlstring.escape(\n\t\t\t\tparams.creator_name,\n\t\t\t)}) > 0.2`;\n\t\t} else if (params.creator_username !== undefined) {\n\t\t\tquery += ` OR similarity(username, ${sqlstring.escape(\n\t\t\t\tparams.creator_username,\n\t\t\t)}) > 0.2`;\n\t\t}\n\t\tquery += ` )`;\n\n\t\t// Handle optional parameters\n\n\t\tif (params.description !== undefined) {\n\t\t\tquery += ` AND levenshtein(description, ${sqlstring.escape(\n\t\t\t\tparams.description,\n\t\t\t)})  0) {\n\t\t\tconst tags = params.tags.split(\",\");\n\t\t\tconst tagsCondition = tags\n\t\t\t\t.map((tag) => `tags @> ARRAY[${sqlstring.escape(tag)}]`)\n\t\t\t\t.join(\" OR \");\n\t\t\tquery += ` AND (${tagsCondition})`;\n\t\t}\n\t\tif (params.participant_count !== undefined) {\n\t\t\tquery += ` GROUP BY room.room_id, users.username, users.full_name\n\t\t\tHAVING COUNT(participate.room_id) >= ${params.participant_count}`;\n\t\t}\n\n\t\tquery += ` ORDER BY distance ASC LIMIT 10`;\n\t\tconsole.log(query);\n\n\t\treturn query;\n\t}\n\n\tasync advancedSearchRooms(\n\t\tparams: {\n\t\t\tq: string;\n\t\t\tcreator_username?: string;\n\t\t\tcreator_name?: string;\n\t\t\tparticipant_count?: number;\n\t\t\tdescription?: string;\n\t\t\tis_temp?: boolean;\n\t\t\tis_priv?: boolean;\n\t\t\tis_scheduled?: boolean;\n\t\t\tstart_date?: string;\n\t\t\tend_date?: string;\n\t\t\tlang?: string;\n\t\t\texplicit?: boolean;\n\t\t\tnsfw?: boolean;\n\t\t\ttags?: string;\n\t\t},\n\t\tuserID: string, // this is the user who is searching. To check whether the room_creator has blocked this user\n\t): Promise {\n\t\tconsole.log(params);\n\n\t\tconst query = this.advancedRoomSearchQueryBuilder(params);\n\n\t\t// const result = await ctx.prisma.$queryRawUnsafe(\n\t\t// \tsqlstring.format(query),\n\t\t// );\n\t\tconst result = await this.prisma.$queryRawUnsafe(\n\t\t\tsqlstring.format(query),\n\t\t);\n\n\t\tif (Array.isArray(result)) {\n\t\t\tlet roomIds = result.map((row) => row.room_id.toString());\n\t\t\t//check if rooms are owned by users who have blocked the user\n\t\t\tconst usersWhoBlockedGivenUser: PrismaTypes.users[] =\n\t\t\t\tawait this.prisma.users.findMany({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tblocked_blocked_blockerTousers: {\n\t\t\t\t\t\t\tsome: {\n\t\t\t\t\t\t\t\tblockee: userID,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\tconst blocked_rooms: PrismaTypes.room[] = await this.prisma.room.findMany(\n\t\t\t\t{\n\t\t\t\t\twhere: {\n\t\t\t\t\t\troom_id: {\n\t\t\t\t\t\t\tin: roomIds,\n\t\t\t\t\t\t},\n\t\t\t\t\t\troom_creator: {\n\t\t\t\t\t\t\tin: usersWhoBlockedGivenUser.map((user) => user.user_id),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t\troomIds = roomIds.filter(\n\t\t\t\t(id) =>\n\t\t\t\t\t!blocked_rooms.map((room) => room.room_id.toString()).includes(id),\n\t\t\t);\n\t\t\tconst roomDtos = await this.dtogen.generateMultipleRoomDto(\n\t\t\t\troomIds,\n\t\t\t\tuserID,\n\t\t\t);\n\n\t\t\tif (roomDtos) {\n\t\t\t\tconst sortedRooms = roomIds\n\t\t\t\t\t.map((id) => roomDtos.find((room) => room.roomID === id))\n\t\t\t\t\t.filter((room): room is RoomDto => room !== undefined);\n\n\t\t\t\treturn sortedRooms;\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.error(\"Unexpected query result format, expected an array.\");\n\t\t}\n\n\t\treturn [new RoomDto()];\n\t}\n\n\tasync searchRoomsHistory(userID: string): Promise {\n\t\tconsole.log(userID);\n\t\t// const result = await ctx.prisma.$queryRaw`\n\t\t// SELECT *\n\t\t// FROM search_history\n\t\t// WHERE user_id::text = ${userID}\n\t\t// AND (url LIKE '/rooms/%'\n\t\t// OR url LIKE '/search/rooms/%')\n\t\t// ORDER BY timestamp DESC\n\t\t// LIMIT 10;`;\n\t\tconst result = await this.prisma.search_history.findMany({\n\t\t\twhere: {\n\t\t\t\tuser_id: userID,\n\t\t\t\tOR: [\n\t\t\t\t\t{\n\t\t\t\t\t\turl: {\n\t\t\t\t\t\t\tstartsWith: \"/rooms/\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\turl: {\n\t\t\t\t\t\t\tstartsWith: \"/search/rooms?q=\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\torderBy: {\n\t\t\t\ttimestamp: \"desc\",\n\t\t\t},\n\t\t});\n\t\t// console.log(\"Result: \" + JSON.stringify(result));\n\n\t\tif (Array.isArray(result)) {\n\t\t\tconst searchIds: SearchHistoryDto[] = result.map((row) => ({\n\t\t\t\tsearch_term: row.search_term,\n\t\t\t\tsearch_time: row.timestamp,\n\t\t\t\turl: row.url as string,\n\t\t\t}));\n\n\t\t\tif (searchIds) {\n\t\t\t\tconst uniqueRecordsMap = new Map();\n\n\t\t\t\t// Process records and filter duplicates\n\t\t\t\tsearchIds.forEach((record) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!uniqueRecordsMap.has(record.url) &&\n\t\t\t\t\t\trecord.search_term.trim() !== \"\"\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst dto: SearchHistoryDto = {\n\t\t\t\t\t\t\tsearch_term: record.search_term,\n\t\t\t\t\t\t\tsearch_time: record.search_time,\n\t\t\t\t\t\t\turl: record.url,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tuniqueRecordsMap.set(record.url, dto);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Convert the map values to an array of SearchHistoryDto\n\t\t\t\tconst uniqueRecords: SearchHistoryDto[] = Array.from(\n\t\t\t\t\tuniqueRecordsMap.values(),\n\t\t\t\t);\n\n\t\t\t\treturn uniqueRecords;\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.error(\"Unexpected query result format, expected an array.\");\n\t\t}\n\n\t\treturn [];\n\t}\n\n\tasync searchRoomsSuggestions(q: string): Promise {\n\t\tconst result = await this.prisma.search_history.findMany({\n\t\t\twhere: {\n\t\t\t\tsearch_term: {\n\t\t\t\t\tstartsWith: q,\n\t\t\t\t},\n\t\t\t\tOR: [\n\t\t\t\t\t{\n\t\t\t\t\t\turl: {\n\t\t\t\t\t\t\tstartsWith: \"/rooms/\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\turl: {\n\t\t\t\t\t\t\tstartsWith: \"/search/rooms?q=\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\t\tconsole.log(\"Result: \" + JSON.stringify(result));\n\n\t\tif (Array.isArray(result)) {\n\t\t\tconst searchIds: SearchHistoryDto[] = result.map((row) => ({\n\t\t\t\tsearch_term: row.search_term,\n\t\t\t\tsearch_time: row.timestamp,\n\t\t\t\turl: row.url as string,\n\t\t\t}));\n\n\t\t\tif (searchIds) {\n\t\t\t\tconst uniqueRecordsMap = new Map();\n\n\t\t\t\t// Process records and filter duplicates\n\t\t\t\tsearchIds.forEach((record) => {\n\t\t\t\t\tif (!uniqueRecordsMap.has(record.url)) {\n\t\t\t\t\t\tconst dto: SearchHistoryDto = {\n\t\t\t\t\t\t\tsearch_term: record.search_term,\n\t\t\t\t\t\t\tsearch_time: record.search_time,\n\t\t\t\t\t\t\turl: record.url,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tuniqueRecordsMap.set(record.url, dto);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Convert the map values to an array of SearchHistoryDto\n\t\t\t\tconst uniqueRecords: SearchHistoryDto[] = Array.from(\n\t\t\t\t\tuniqueRecordsMap.values(),\n\t\t\t\t);\n\n\t\t\t\treturn uniqueRecords;\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.error(\"Unexpected query result format, expected an array.\");\n\t\t}\n\n\t\treturn [new SearchHistoryDto()];\n\t}\n\n\tasync searchUsers(q: string, userID: string): Promise {\n\t\t// console.log(q);\n\n\t\t// const result = await ctx.prisma.$queryRaw`\n\t\t// SELECT *,\n\t\t// LEVENSHTEIN(username, ${q}) AS distance\n\t\t// FROM users\n\t\t// WHERE similarity(username, ${q}) > 0.2\n\t\t// ORDER BY distance ASC\n\t\t// LIMIT 5;`;\n\t\tconst result = await this.prisma.$queryRaw`\n\t\tSELECT *,\n\t\tLEAST(levenshtein(full_name, ${q}), levenshtein(username, ${q})) AS distance\n\t\tFROM users\n\t\tWHERE similarity(full_name, ${q}) > 0.2\n\t\tOR similarity(username, ${q}) > 0.2\n\t\tORDER BY distance ASC\n\t\tLIMIT 5;`;\n\n\t\tconsole.log(\"Result \" + result);\n\n\t\tif (Array.isArray(result)) {\n\t\t\tconsole.log(\"Called\");\n\t\t\tconsole.log(\"Result \" + result);\n\t\t\tlet userIDs = result.map((row) => row.user_id.toString());\n\t\t\tconst usersWhoBlockedGivenUser: PrismaTypes.users[] =\n\t\t\t\tawait this.prisma.users.findMany({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tblocked_blocked_blockerTousers: {\n\t\t\t\t\t\t\tsome: {\n\t\t\t\t\t\t\t\tblockee: userID,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\tuserIDs = userIDs.filter(\n\t\t\t\t(id) =>\n\t\t\t\t\t!usersWhoBlockedGivenUser\n\t\t\t\t\t\t.map((user) => user.user_id.toString())\n\t\t\t\t\t\t.includes(id),\n\t\t\t);\n\t\t\tconst userDtos = await this.dtogen.generateMultipleUserDto(\n\t\t\t\tuserIDs,\n\t\t\t\tuserID,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\tconsole.log(userDtos);\n\n\t\t\tif (userDtos) {\n\t\t\t\tconst sortedUsers = userIDs\n\t\t\t\t\t.map((id) => userDtos.find((user) => user.userID === id))\n\t\t\t\t\t.filter((user): user is UserDto => user !== undefined);\n\n\t\t\t\treturn sortedUsers;\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.error(\"Unexpected query result format, expected an array.\");\n\t\t}\n\n\t\treturn [new UserDto()];\n\t}\n\n\tadvancedUserSearchQueryBuilder(params: {\n\t\tq: string;\n\t\tcreator_username?: string;\n\t\tcreator_name?: string;\n\t\tfollowing?: number;\n\t\tfollowers?: number;\n\t}): string {\n\t\tlet query = `\n        SELECT user_id,`;\n\t\tconsole.log(params.q);\n\n\t\tif (\n\t\t\tparams.creator_name === undefined &&\n\t\t\tparams.creator_username === undefined\n\t\t) {\n\t\t\tquery += ` LEAST(levenshtein(username, ${sqlstring.escape(\n\t\t\t\tparams.q,\n\t\t\t)}), levenshtein(full_name, ${sqlstring.escape(params.q)})) AS distance`;\n\t\t} else if (\n\t\t\tparams.creator_name !== undefined &&\n\t\t\tparams.creator_username !== undefined\n\t\t) {\n\t\t\tquery += ` LEAST(levenshtein(full_name, ${sqlstring.escape(\n\t\t\t\tparams.q,\n\t\t\t)}), levenshtein(username, ${sqlstring.escape(\n\t\t\t\tparams.creator_username,\n\t\t\t)}), levenshtein(full_name, ${sqlstring.escape(\n\t\t\t\tparams.creator_name,\n\t\t\t)})) AS distance`;\n\t\t} else if (params.creator_name !== undefined) {\n\t\t\tquery += ` LEAST(levenshtein(full_name, ${sqlstring.escape(\n\t\t\t\tparams.q,\n\t\t\t)}), levenshtein(full_name, ${sqlstring.escape(\n\t\t\t\tparams.creator_name,\n\t\t\t)})) AS distance`;\n\t\t} else if (params.creator_username !== undefined) {\n\t\t\tquery += ` LEAST(levenshtein(full_name, ${sqlstring.escape(\n\t\t\t\tparams.q,\n\t\t\t)}), levenshtein(username, ${sqlstring.escape(\n\t\t\t\tparams.creator_username,\n\t\t\t)})) AS distance`;\n\t\t}\n\n\t\tif (params.following !== undefined) {\n\t\t\tquery += `, COALESCE(f1.num_followers, 0) AS num_followers`;\n\t\t}\n\n\t\tif (params.followers !== undefined) {\n\t\t\tquery += `, COALESCE(f2.num_following, 0) AS num_following`;\n\t\t}\n\n\t\tquery += ` FROM users`;\n\n\t\tif (params.following !== undefined) {\n\t\t\tquery += ` LEFT JOIN (\n\t\t\t\tSELECT followee, COUNT(*) AS num_followers\n\t\t\t\tFROM follows\n\t\t\t\tGROUP BY followee\n\t\t\t) f1 ON f1.followee = users.user_id`;\n\t\t}\n\n\t\tif (params.followers !== undefined) {\n\t\t\tquery += ` LEFT JOIN (\n\t\t\t\tSELECT follower, COUNT(*) AS num_following\n\t\t\t\tFROM follows\n\t\t\t\tGROUP BY follower\n\t\t\t) f2 ON f2.follower = users.user_id`;\n\t\t}\n\n\t\tquery += ` WHERE similarity(username, ${sqlstring.escape(\n\t\t\tparams.q,\n\t\t)}) > 0.2 OR similarity(full_name, ${sqlstring.escape(params.q)}) > 0.2`;\n\n\t\tif (params.following !== undefined || params.followers !== undefined) {\n\t\t\tquery += ` GROUP BY users.user_id`;\n\n\t\t\tif (params.following !== undefined) {\n\t\t\t\tquery += `, f1.num_followers`;\n\t\t\t}\n\n\t\t\tif (params.followers !== undefined) {\n\t\t\t\tquery += `, f2.num_following`;\n\t\t\t}\n\t\t}\n\n\t\tif (params.following !== undefined && params.followers !== undefined) {\n\t\t\tquery += ` HAVING COALESCE(f1.num_followers, 0) >= ${params.followers} \n\t\t\tAND COALESCE(f2.num_following, 0) >= ${params.following};`;\n\t\t} else if (params.following !== undefined) {\n\t\t\tquery += ` HAVING COALESCE(f1.num_followers, 0) >= ${params.following};`;\n\t\t} else if (params.followers !== undefined) {\n\t\t\tquery += ` HAVING COALESCE(f2.num_following, 0) >= ${params.followers};`;\n\t\t}\n\n\t\tconsole.log(\"Query: \" + query);\n\n\t\treturn query;\n\t}\n\n\tasync advancedSearchUsers(\n\t\tparams: {\n\t\t\tq: string;\n\t\t\tcreator_username?: string;\n\t\t\tcreator_name?: string;\n\t\t\tfollowing?: number;\n\t\t\tfollowers?: number;\n\t\t},\n\t\tuserID: string,\n\t): Promise {\n\t\tconsole.log(params);\n\n\t\tconst query = this.advancedUserSearchQueryBuilder(params);\n\n\t\t// const result = await ctx.prisma.$queryRawUnsafe(\n\t\t// \tsqlstring.format(query),\n\t\t// );\n\t\tconst result = await this.prisma.$queryRawUnsafe(\n\t\t\tsqlstring.format(query),\n\t\t);\n\n\t\tif (Array.isArray(result)) {\n\t\t\tlet userIDs = result.map((row) => row.user_id.toString());\n\t\t\t//check if rooms are owned by users who have blocked the user\n\t\t\tconst usersWhoBlockedGivenUser: PrismaTypes.users[] =\n\t\t\t\tawait this.prisma.users.findMany({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tblocked_blocked_blockerTousers: {\n\t\t\t\t\t\t\tsome: {\n\t\t\t\t\t\t\t\tblockee: userID,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\tuserIDs = userIDs.filter(\n\t\t\t\t(id) =>\n\t\t\t\t\t!usersWhoBlockedGivenUser\n\t\t\t\t\t\t.map((user) => user.user_id.toString())\n\t\t\t\t\t\t.includes(id),\n\t\t\t);\n\t\t\tconst userDtos = await this.dtogen.generateMultipleUserDto(\n\t\t\t\tuserIDs,\n\t\t\t\tuserID,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\t// console.log(userDtos);\n\n\t\t\tif (userDtos) {\n\t\t\t\tconst sortedUsers = userIDs\n\t\t\t\t\t.map((id) => userDtos.find((user) => user.userID === id))\n\t\t\t\t\t.filter((user): user is UserDto => user !== undefined);\n\n\t\t\t\treturn sortedUsers;\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.error(\"Unexpected query result format, expected an array.\");\n\t\t}\n\n\t\treturn [new UserDto()];\n\t}\n\n\tasync searchUsersHistory(userID: string): Promise {\n\t\tconst result = await this.prisma.search_history.findMany({\n\t\t\twhere: {\n\t\t\t\tuser_id: userID,\n\t\t\t\tOR: [\n\t\t\t\t\t{\n\t\t\t\t\t\turl: {\n\t\t\t\t\t\t\tstartsWith: \"/users/\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\turl: {\n\t\t\t\t\t\t\tstartsWith: \"/search/users?q=\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\torderBy: {\n\t\t\t\ttimestamp: \"desc\",\n\t\t\t},\n\t\t});\n\n\t\tif (Array.isArray(result)) {\n\t\t\tconst searchIds: SearchHistoryDto[] = result.map((row) => ({\n\t\t\t\tsearch_term: row.search_term,\n\t\t\t\tsearch_time: row.timestamp,\n\t\t\t\turl: row.url as string,\n\t\t\t}));\n\n\t\t\tif (searchIds) {\n\t\t\t\tconst uniqueRecordsMap = new Map();\n\n\t\t\t\t// Process records and filter duplicates\n\t\t\t\tsearchIds.forEach((record) => {\n\t\t\t\t\tif (!uniqueRecordsMap.has(record.url)) {\n\t\t\t\t\t\tconst dto: SearchHistoryDto = {\n\t\t\t\t\t\t\tsearch_term: record.search_term,\n\t\t\t\t\t\t\tsearch_time: record.search_time,\n\t\t\t\t\t\t\turl: record.url,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tuniqueRecordsMap.set(record.url, dto);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Convert the map values to an array of SearchHistoryDto\n\t\t\t\tconst uniqueRecords: SearchHistoryDto[] = Array.from(\n\t\t\t\t\tuniqueRecordsMap.values(),\n\t\t\t\t);\n\n\t\t\t\treturn uniqueRecords;\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.error(\"Unexpected query result format, expected an array.\");\n\t\t}\n\n\t\treturn [];\n\t}\n\n\tasync searchUsersSuggestions(q: string): Promise {\n\t\tconst result = await this.prisma.search_history.findMany({\n\t\t\twhere: {\n\t\t\t\tsearch_term: {\n\t\t\t\t\tstartsWith: q,\n\t\t\t\t},\n\t\t\t\tOR: [\n\t\t\t\t\t{\n\t\t\t\t\t\turl: {\n\t\t\t\t\t\t\tstartsWith: \"/users/\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\turl: {\n\t\t\t\t\t\t\tstartsWith: \"/search/users?q=\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\t\tconsole.log(\"Result: \" + JSON.stringify(result));\n\n\t\tif (Array.isArray(result)) {\n\t\t\tconst searchIds: SearchHistoryDto[] = result.map((row) => ({\n\t\t\t\tsearch_term: row.search_term,\n\t\t\t\tsearch_time: row.timestamp,\n\t\t\t\turl: row.url as string,\n\t\t\t}));\n\n\t\t\tif (searchIds) {\n\t\t\t\tconst uniqueRecordsMap = new Map();\n\n\t\t\t\t// Process records and filter duplicates\n\t\t\t\tsearchIds.forEach((record) => {\n\t\t\t\t\tif (!uniqueRecordsMap.has(record.url)) {\n\t\t\t\t\t\tconst dto: SearchHistoryDto = {\n\t\t\t\t\t\t\tsearch_term: record.search_term,\n\t\t\t\t\t\t\tsearch_time: record.search_time,\n\t\t\t\t\t\t\turl: record.url,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tuniqueRecordsMap.set(record.url, dto);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Convert the map values to an array of SearchHistoryDto\n\t\t\t\tconst uniqueRecords: SearchHistoryDto[] = Array.from(\n\t\t\t\t\tuniqueRecordsMap.values(),\n\t\t\t\t);\n\n\t\t\t\treturn uniqueRecords;\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.error(\"Unexpected query result format, expected an array.\");\n\t\t}\n\n\t\treturn [new SearchHistoryDto()];\n\t}\n\n\tgetQueryParams(url: string): {\n\t\tpathSegment: string | null;\n\t\tqueryParams: Record;\n\t} {\n\t\t// Extract the path segment and query string part from the URL\n\t\tconst [pathAndQuery] = url.split(\"?\");\n\t\tif (!pathAndQuery) {\n\t\t\treturn { pathSegment: null, queryParams: {} };\n\t\t}\n\t\tconst [pathSegment] = pathAndQuery.split(\"/\").slice(-1);\n\n\t\t// Extract the query string part\n\t\tconst paramsString = url.split(\"?\")[1] || \"\";\n\n\t\t// Process query parameters\n\t\tconst queryParams = paramsString\n\t\t\t.split(\"&\")\n\t\t\t.reduce((params: Record, param) => {\n\t\t\t\tconst [key, value] = param.split(\"=\");\n\t\t\t\tif (key) {\n\t\t\t\t\tparams[key] = value !== undefined ? decodeURIComponent(value) : \"\";\n\t\t\t\t}\n\t\t\t\treturn params;\n\t\t\t}, {});\n\n\t\treturn {\n\t\t\tpathSegment: pathSegment || null,\n\t\t\tqueryParams,\n\t\t};\n\t}\n\n\tasync searchHistory(userID: string): Promise {\n\t\tconst result = await this.prisma.$queryRaw`\n\t\tSELECT *\n\t\tFROM search_history\n\t\tWHERE user_id::text = ${userID}\n\t\tORDER BY timestamp DESC\n\t\tLIMIT 10;`;\n\n\t\tif (Array.isArray(result)) {\n\t\t\tconst searchIds: (SearchHistoryDto & {\n\t\t\t\tparams: {\n\t\t\t\t\tpathSegment: string | null;\n\t\t\t\t\tqueryParams: Record;\n\t\t\t\t};\n\t\t\t})[] = result.map((row) => ({\n\t\t\t\tsearch_term: row.search_term,\n\t\t\t\tsearch_time: row.timestamp,\n\t\t\t\turl: row.url,\n\t\t\t\tparams: this.getQueryParams(row.url),\n\t\t\t}));\n\n\t\t\tconst results: CombinedSearchHistory[] = await Promise.all(\n\t\t\t\tsearchIds.map(async (id) => {\n\t\t\t\t\tlet searchResult: (RoomDto | UserDto)[] | string = \"\";\n\n\t\t\t\t\tif (id.params.pathSegment === \"rooms\") {\n\t\t\t\t\t\tif (id.params.queryParams.creator) {\n\t\t\t\t\t\t\tsearchResult = await this.searchRooms(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tq: id.params.queryParams.q as string,\n\t\t\t\t\t\t\t\t\tcreator: id.params.queryParams.creator as string,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tuserID,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsearchResult = await this.searchRooms(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tq: id.params.queryParams.q as string,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tuserID,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (id.params.pathSegment === \"users\") {\n\t\t\t\t\t\tsearchResult = await this.searchUsers(\n\t\t\t\t\t\t\tid.params.queryParams.q as string,\n\t\t\t\t\t\t\tuserID,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (id.params.queryParams.creator) {\n\t\t\t\t\t\t\tconst combo = await this.combinedSearch(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tq: id.params.queryParams.q as string,\n\t\t\t\t\t\t\t\t\tcreator: id.params.queryParams.creator as string,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tuserID,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tsearchResult = [combo.rooms, combo.users].flat();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst combo = await this.combinedSearch(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tq: id.params.queryParams.q as string,\n\t\t\t\t\t\t\t\tcreator: id.params.queryParams.creator as string,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tuserID,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tsearchResult = [combo.rooms, combo.users].flat();\n\t\t\t\t\t}\n\n\t\t\t\t\treturn { results: [id.search_term, ...searchResult].flat() };\n\t\t\t\t}),\n\t\t\t);\n\t\t\treturn results;\n\t\t} else {\n\t\t\tconsole.error(\"Unexpected query result format, expected an array.\");\n\t\t}\n\t\treturn [];\n\t}\n\n\tasync clearSearchHistory(userID: string): Promise {\n\t\tawait this.prisma.search_history.deleteMany({\n\t\t\twhere: {\n\t\t\t\tuser_id: userID,\n\t\t\t},\n\t\t});\n\t\tconsole.log(userID);\n\t}\n\n\tasync clearRoomsHistory(userID: string): Promise {\n\t\tawait this.prisma.search_history.deleteMany({\n\t\t\twhere: {\n\t\t\t\tuser_id: userID,\n\t\t\t\tOR: [\n\t\t\t\t\t{\n\t\t\t\t\t\turl: {\n\t\t\t\t\t\t\tstartsWith: \"/rooms/\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\turl: {\n\t\t\t\t\t\t\tstartsWith: \"/search/rooms?q=\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\t\tconsole.log(userID);\n\t}\n\n\tasync clearUsersHistory(userID: string): Promise {\n\t\tawait this.prisma.search_history.deleteMany({\n\t\t\twhere: {\n\t\t\t\tuser_id: userID,\n\t\t\t\tOR: [\n\t\t\t\t\t{\n\t\t\t\t\t\turl: {\n\t\t\t\t\t\t\tstartsWith: \"/users/\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\turl: {\n\t\t\t\t\t\t\tstartsWith: \"/search/users?q=\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\t\tconsole.log(userID);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CombinedSearchResults.html":{"url":"classes/CombinedSearchResults.html","title":"class - CombinedSearchResults","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CombinedSearchResults\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/search/search.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                rooms\n                            \n                            \n                                    \n                                    \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        rooms\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RoomDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: RoomDto, description: 'List of rooms', isArray: true})@IsArray({message: 'Rooms must be an array'})@ValidateNested({each: true, message: 'Each room must be a valid RoomDto'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/search/search.service.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: UserDto, description: 'List of users', isArray: true})@IsArray({message: 'Users must be an array'})@ValidateNested({each: true, message: 'Each user must be a valid UserDto'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/search/search.service.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { UserDto } from \"../users/dto/user.dto\";\nimport { RoomDto } from \"../rooms/dto/room.dto\";\nimport { SearchHistoryDto } from \"./dto/searchhistorydto\";\nimport { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, ValidateNested } from \"class-validator\";\nimport * as PrismaTypes from \"@prisma/client\";\nimport { DtoGenService } from \"../dto-gen/dto-gen.service\";\nimport * as sqlstring from \"sqlstring\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\n\nexport class CombinedSearchResults {\n\t@ApiProperty({\n\t\ttype: RoomDto,\n\t\tdescription: \"List of rooms\",\n\t\tisArray: true,\n\t})\n\t@IsArray({ message: \"Rooms must be an array\" })\n\t@ValidateNested({ each: true, message: \"Each room must be a valid RoomDto\" })\n\trooms: RoomDto[];\n\n\t@ApiProperty({\n\t\ttype: UserDto,\n\t\tdescription: \"List of users\",\n\t\tisArray: true,\n\t})\n\t@IsArray({ message: \"Users must be an array\" })\n\t@ValidateNested({ each: true, message: \"Each user must be a valid UserDto\" })\n\tusers: UserDto[];\n}\n\nexport class CombinedSearchHistory {\n\t@ApiProperty({\n\t\tdescription: \"Mixed list of rooms, users, or strings\",\n\t\tisArray: true,\n\t\ttype: \"object\",\n\t\titems: {\n\t\t\toneOf: [\n\t\t\t\t{ $ref: \"#/components/schemas/RoomDto\" },\n\t\t\t\t{ $ref: \"#/components/schemas/UserDto\" },\n\t\t\t\t{ type: \"string\" },\n\t\t\t],\n\t\t},\n\t})\n\t@IsArray({ message: \"Results must be an array\" })\n\tresults: (RoomDto | UserDto | string)[];\n}\n\n@Injectable()\nexport class SearchService {\n\tconstructor(\n\t\tprivate readonly prisma: PrismaService,\n\t\tprivate readonly dtogen: DtoGenService,\n\t) {}\n\n\t// Fuzzy search tutorial\n\t/*\n\tusing pg_trgm to fuzzy search with threshold 0.4\n\t```\n\tSELECT\n\t*\n\tFROM artists\n\tWHERE SIMILARITY(name,'Claud Monay') > 0.4 ;\n\t```\n\n\tusing pg_trgm to fuzzy search to search part of a string (with default threshold 0.3)\n\t```\n\tSELECT\n\t*\n\tFROM artists\n\tWHERE 'Cadinsky' % ANY(STRING_TO_ARRAY(name,' '));\n\t```\n\n\tusing Levenstein distances (for closest matching words)\n\t```\n\tSELECT\n\t\t*,\n\t\tLEVENSHTEIN(name, 'Freda Kallo')\n\tFROM artists\n\tORDER BY LEVENSHTEIN(name, 'Freda Kallo') ASC\n\tLIMIT 5\n\t```\n\t*/\n\t// async demoSearch(ctx: Context) {\n\t// \tconst result = await ctx.prisma.$queryRaw`\n\t// \tSELECT *,\n\t// \tLEVENSHTEIN(username, 'farmer') AS distance\n\t// \tFROM users\n\t// \tWHERE similarity(username, 'farmer) > 0.2\n\t// \tORDER BY distance ASC\n\t// \tLIMIT 5;`;\n\t// \tconsole.log(result);\n\t// }\n\n\tasync insertSearchHistory(endpoint: string, params: any, user_id: string) {\n\t\tlet url = `${endpoint}?q=${params.q}`;\n\n\t\tif (params.creator) {\n\t\t\turl += `&creator=${params.creator}`;\n\t\t}\n\n\t\tconst result = await this.prisma.search_history.create({\n\t\t\tdata: {\n\t\t\t\tuser_id: user_id,\n\t\t\t\tsearch_term: params.q,\n\t\t\t\turl: url,\n\t\t\t},\n\t\t});\n\n\t\tconsole.log(\"Insertion result: \" + result);\n\t}\n\n\tasync combinedSearch(\n\t\tparams: {\n\t\t\tq: string;\n\t\t\tcreator?: string;\n\t\t},\n\t\tuserID: string,\n\t): Promise {\n\t\t// console.log(params);\n\n\t\tconst rooms = await this.searchRooms(params, userID);\n\t\tconst users = await this.searchUsers(params.q, userID);\n\n\t\tconsole.log(\"Rooms: \" + rooms);\n\t\tconsole.log(\"Users: \" + users);\n\n\t\tif (users) {\n\t\t\treturn {\n\t\t\t\trooms: rooms,\n\t\t\t\tusers: users,\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\trooms: rooms,\n\t\t\tusers: [],\n\t\t};\n\t}\n\n\tasync searchRooms(\n\t\tparams: {\n\t\t\tq: string;\n\t\t\tcreator?: string;\n\t\t},\n\t\tuserID: string, // this is the user who is searching. To check whether the room_creator has blocked this user\n\t): Promise {\n\t\t// console.log(params);\n\t\t// const result = await ctx.prisma.$queryRaw`\n\t\t// SELECT room_id, name, description, username,\n\t\t// LEAST(levenshtein(name, ${params.q}), levenshtein(username, ${params.creator})) AS distance\n\t\t// FROM room INNER JOIN users ON room_creator = user_id\n\t\t// WHERE similarity(name, ${params.q}) > 0.2\n\t\t// OR similarity(username, ${params.creator}) > 0.2\n\t\t// ORDER BY distance ASC\n\t\t// LIMIT 10;`;\n\t\tconst result = await this.prisma.$queryRaw`\n\t\tSELECT room_id, name, description, username,\n       \tLEAST(levenshtein(name, ${params.q}), levenshtein(username, ${params.creator})) AS distance\n\t\tFROM room INNER JOIN users ON room_creator = user_id\n\t\tWHERE similarity(name, ${params.q}) > 0.2\n\t\tOR similarity(username, ${params.creator}) > 0.2\n\t\tORDER BY distance ASC\n\t\tLIMIT 10;`;\n\n\t\t// console.log(result);\n\n\t\tif (Array.isArray(result)) {\n\t\t\tlet roomIds = result.map((row) => row.room_id.toString());\n\n\t\t\t//check if rooms are owned by users who have blocked the user\n\t\t\tconst usersWhoBlockedGivenUser: PrismaTypes.blocked[] =\n\t\t\t\tawait this.prisma.blocked.findMany({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tOR: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tblocker: userID,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tblockee: userID,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\tconst blocked_rooms: PrismaTypes.room[] = await this.prisma.room.findMany(\n\t\t\t\t{\n\t\t\t\t\twhere: {\n\t\t\t\t\t\troom_id: {\n\t\t\t\t\t\t\tin: roomIds,\n\t\t\t\t\t\t},\n\t\t\t\t\t\troom_creator: {\n\t\t\t\t\t\t\tin: usersWhoBlockedGivenUser.map((user) => {\n\t\t\t\t\t\t\t\tif (user.blocker === userID) {\n\t\t\t\t\t\t\t\t\treturn user.blockee;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn user.blocker;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t\troomIds = roomIds.filter(\n\t\t\t\t(id) =>\n\t\t\t\t\t!blocked_rooms.map((room) => room.room_id.toString()).includes(id),\n\t\t\t);\n\n\t\t\tconst roomDtos = await this.dtogen.generateMultipleRoomDto(\n\t\t\t\troomIds,\n\t\t\t\tuserID,\n\t\t\t);\n\t\t\t// console.log(roomDtos);\n\n\t\t\tif (roomDtos) {\n\t\t\t\tconst sortedRooms = roomIds\n\t\t\t\t\t.map((id) => roomDtos.find((room) => room.roomID === id))\n\t\t\t\t\t.filter((room): room is RoomDto => room !== undefined);\n\n\t\t\t\treturn sortedRooms;\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.error(\"Unexpected query result format, expected an array.\");\n\t\t}\n\n\t\treturn [new RoomDto()];\n\t}\n\n\tadvancedRoomSearchQueryBuilder(params: {\n\t\tq: string;\n\t\tcreator_username?: string;\n\t\tcreator_name?: string;\n\t\tparticipant_count?: number;\n\t\tdescription?: string;\n\t\tis_temp?: boolean;\n\t\tis_priv?: boolean;\n\t\tis_scheduled?: boolean;\n\t\tstart_date?: string;\n\t\tend_date?: string;\n\t\tlang?: string;\n\t\texplicit?: boolean;\n\t\tnsfw?: boolean;\n\t\ttags?: string;\n\t}): string {\n\t\tlet query = `\n        SELECT room.*,`;\n\n\t\tif (\n\t\t\tparams.creator_name === undefined &&\n\t\t\tparams.creator_username === undefined\n\t\t) {\n\t\t\tquery += ` levenshtein(name, ${sqlstring.escape(params.q)}) AS distance`;\n\t\t} else if (\n\t\t\tparams.creator_name !== undefined &&\n\t\t\tparams.creator_username !== undefined\n\t\t) {\n\t\t\tquery += ` LEAST(levenshtein(name, ${sqlstring.escape(\n\t\t\t\tparams.q,\n\t\t\t)}), levenshtein(username, ${sqlstring.escape(\n\t\t\t\tparams.creator_username,\n\t\t\t)}), levenshtein(full_name, ${sqlstring.escape(\n\t\t\t\tparams.creator_name,\n\t\t\t)})) AS distance`;\n\t\t} else if (params.creator_name !== undefined) {\n\t\t\tquery += ` LEAST(levenshtein(name, ${sqlstring.escape(\n\t\t\t\tparams.q,\n\t\t\t)}), levenshtein(full_name, ${sqlstring.escape(\n\t\t\t\tparams.creator_name,\n\t\t\t)})) AS distance`;\n\t\t} else if (params.creator_username !== undefined) {\n\t\t\tquery += ` LEAST(levenshtein(name, ${sqlstring.escape(\n\t\t\t\tparams.q,\n\t\t\t)}), levenshtein(username, ${sqlstring.escape(\n\t\t\t\tparams.creator_username,\n\t\t\t)})) AS distance`;\n\t\t}\n\n\t\tif (params.description !== undefined) {\n\t\t\tquery += `, levenshtein(description, 'Get energized') AS desc_distance`;\n\t\t}\n\n\t\tquery += ` FROM room INNER JOIN users ON room_creator = user_id`;\n\n\t\t// console.log(\"priv: \" + params.is_priv);\n\n\t\tif (params.is_scheduled !== undefined) {\n\t\t\tquery += ` LEFT JOIN scheduled_room on room.room_id = scheduled_room.room_id`;\n\t\t}\n\t\tif (params.is_priv !== undefined) {\n\t\t\tquery += ` LEFT JOIN private_room on room.room_id = private_room.room_id`;\n\t\t}\n\t\tif (params.participant_count !== undefined) {\n\t\t\tquery += ` INNER JOIN participate ON room.room_id = participate.room_id`;\n\t\t}\n\n\t\tquery += ` WHERE (similarity(name, ${sqlstring.escape(params.q)}) > 0.2`;\n\n\t\tif (\n\t\t\tparams.creator_name !== undefined &&\n\t\t\tparams.creator_username !== undefined\n\t\t) {\n\t\t\tquery += ` OR similarity(username, ${sqlstring.escape(\n\t\t\t\tparams.creator_username,\n\t\t\t)}) > 0.2 OR similarity(full_name, ${sqlstring.escape(\n\t\t\t\tparams.creator_name,\n\t\t\t)}) > 0.2`;\n\t\t} else if (params.creator_name !== undefined) {\n\t\t\tquery += ` OR similarity(full_name, ${sqlstring.escape(\n\t\t\t\tparams.creator_name,\n\t\t\t)}) > 0.2`;\n\t\t} else if (params.creator_username !== undefined) {\n\t\t\tquery += ` OR similarity(username, ${sqlstring.escape(\n\t\t\t\tparams.creator_username,\n\t\t\t)}) > 0.2`;\n\t\t}\n\t\tquery += ` )`;\n\n\t\t// Handle optional parameters\n\n\t\tif (params.description !== undefined) {\n\t\t\tquery += ` AND levenshtein(description, ${sqlstring.escape(\n\t\t\t\tparams.description,\n\t\t\t)})  0) {\n\t\t\tconst tags = params.tags.split(\",\");\n\t\t\tconst tagsCondition = tags\n\t\t\t\t.map((tag) => `tags @> ARRAY[${sqlstring.escape(tag)}]`)\n\t\t\t\t.join(\" OR \");\n\t\t\tquery += ` AND (${tagsCondition})`;\n\t\t}\n\t\tif (params.participant_count !== undefined) {\n\t\t\tquery += ` GROUP BY room.room_id, users.username, users.full_name\n\t\t\tHAVING COUNT(participate.room_id) >= ${params.participant_count}`;\n\t\t}\n\n\t\tquery += ` ORDER BY distance ASC LIMIT 10`;\n\t\tconsole.log(query);\n\n\t\treturn query;\n\t}\n\n\tasync advancedSearchRooms(\n\t\tparams: {\n\t\t\tq: string;\n\t\t\tcreator_username?: string;\n\t\t\tcreator_name?: string;\n\t\t\tparticipant_count?: number;\n\t\t\tdescription?: string;\n\t\t\tis_temp?: boolean;\n\t\t\tis_priv?: boolean;\n\t\t\tis_scheduled?: boolean;\n\t\t\tstart_date?: string;\n\t\t\tend_date?: string;\n\t\t\tlang?: string;\n\t\t\texplicit?: boolean;\n\t\t\tnsfw?: boolean;\n\t\t\ttags?: string;\n\t\t},\n\t\tuserID: string, // this is the user who is searching. To check whether the room_creator has blocked this user\n\t): Promise {\n\t\tconsole.log(params);\n\n\t\tconst query = this.advancedRoomSearchQueryBuilder(params);\n\n\t\t// const result = await ctx.prisma.$queryRawUnsafe(\n\t\t// \tsqlstring.format(query),\n\t\t// );\n\t\tconst result = await this.prisma.$queryRawUnsafe(\n\t\t\tsqlstring.format(query),\n\t\t);\n\n\t\tif (Array.isArray(result)) {\n\t\t\tlet roomIds = result.map((row) => row.room_id.toString());\n\t\t\t//check if rooms are owned by users who have blocked the user\n\t\t\tconst usersWhoBlockedGivenUser: PrismaTypes.users[] =\n\t\t\t\tawait this.prisma.users.findMany({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tblocked_blocked_blockerTousers: {\n\t\t\t\t\t\t\tsome: {\n\t\t\t\t\t\t\t\tblockee: userID,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\tconst blocked_rooms: PrismaTypes.room[] = await this.prisma.room.findMany(\n\t\t\t\t{\n\t\t\t\t\twhere: {\n\t\t\t\t\t\troom_id: {\n\t\t\t\t\t\t\tin: roomIds,\n\t\t\t\t\t\t},\n\t\t\t\t\t\troom_creator: {\n\t\t\t\t\t\t\tin: usersWhoBlockedGivenUser.map((user) => user.user_id),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t\troomIds = roomIds.filter(\n\t\t\t\t(id) =>\n\t\t\t\t\t!blocked_rooms.map((room) => room.room_id.toString()).includes(id),\n\t\t\t);\n\t\t\tconst roomDtos = await this.dtogen.generateMultipleRoomDto(\n\t\t\t\troomIds,\n\t\t\t\tuserID,\n\t\t\t);\n\n\t\t\tif (roomDtos) {\n\t\t\t\tconst sortedRooms = roomIds\n\t\t\t\t\t.map((id) => roomDtos.find((room) => room.roomID === id))\n\t\t\t\t\t.filter((room): room is RoomDto => room !== undefined);\n\n\t\t\t\treturn sortedRooms;\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.error(\"Unexpected query result format, expected an array.\");\n\t\t}\n\n\t\treturn [new RoomDto()];\n\t}\n\n\tasync searchRoomsHistory(userID: string): Promise {\n\t\tconsole.log(userID);\n\t\t// const result = await ctx.prisma.$queryRaw`\n\t\t// SELECT *\n\t\t// FROM search_history\n\t\t// WHERE user_id::text = ${userID}\n\t\t// AND (url LIKE '/rooms/%'\n\t\t// OR url LIKE '/search/rooms/%')\n\t\t// ORDER BY timestamp DESC\n\t\t// LIMIT 10;`;\n\t\tconst result = await this.prisma.search_history.findMany({\n\t\t\twhere: {\n\t\t\t\tuser_id: userID,\n\t\t\t\tOR: [\n\t\t\t\t\t{\n\t\t\t\t\t\turl: {\n\t\t\t\t\t\t\tstartsWith: \"/rooms/\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\turl: {\n\t\t\t\t\t\t\tstartsWith: \"/search/rooms?q=\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\torderBy: {\n\t\t\t\ttimestamp: \"desc\",\n\t\t\t},\n\t\t});\n\t\t// console.log(\"Result: \" + JSON.stringify(result));\n\n\t\tif (Array.isArray(result)) {\n\t\t\tconst searchIds: SearchHistoryDto[] = result.map((row) => ({\n\t\t\t\tsearch_term: row.search_term,\n\t\t\t\tsearch_time: row.timestamp,\n\t\t\t\turl: row.url as string,\n\t\t\t}));\n\n\t\t\tif (searchIds) {\n\t\t\t\tconst uniqueRecordsMap = new Map();\n\n\t\t\t\t// Process records and filter duplicates\n\t\t\t\tsearchIds.forEach((record) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!uniqueRecordsMap.has(record.url) &&\n\t\t\t\t\t\trecord.search_term.trim() !== \"\"\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst dto: SearchHistoryDto = {\n\t\t\t\t\t\t\tsearch_term: record.search_term,\n\t\t\t\t\t\t\tsearch_time: record.search_time,\n\t\t\t\t\t\t\turl: record.url,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tuniqueRecordsMap.set(record.url, dto);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Convert the map values to an array of SearchHistoryDto\n\t\t\t\tconst uniqueRecords: SearchHistoryDto[] = Array.from(\n\t\t\t\t\tuniqueRecordsMap.values(),\n\t\t\t\t);\n\n\t\t\t\treturn uniqueRecords;\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.error(\"Unexpected query result format, expected an array.\");\n\t\t}\n\n\t\treturn [];\n\t}\n\n\tasync searchRoomsSuggestions(q: string): Promise {\n\t\tconst result = await this.prisma.search_history.findMany({\n\t\t\twhere: {\n\t\t\t\tsearch_term: {\n\t\t\t\t\tstartsWith: q,\n\t\t\t\t},\n\t\t\t\tOR: [\n\t\t\t\t\t{\n\t\t\t\t\t\turl: {\n\t\t\t\t\t\t\tstartsWith: \"/rooms/\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\turl: {\n\t\t\t\t\t\t\tstartsWith: \"/search/rooms?q=\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\t\tconsole.log(\"Result: \" + JSON.stringify(result));\n\n\t\tif (Array.isArray(result)) {\n\t\t\tconst searchIds: SearchHistoryDto[] = result.map((row) => ({\n\t\t\t\tsearch_term: row.search_term,\n\t\t\t\tsearch_time: row.timestamp,\n\t\t\t\turl: row.url as string,\n\t\t\t}));\n\n\t\t\tif (searchIds) {\n\t\t\t\tconst uniqueRecordsMap = new Map();\n\n\t\t\t\t// Process records and filter duplicates\n\t\t\t\tsearchIds.forEach((record) => {\n\t\t\t\t\tif (!uniqueRecordsMap.has(record.url)) {\n\t\t\t\t\t\tconst dto: SearchHistoryDto = {\n\t\t\t\t\t\t\tsearch_term: record.search_term,\n\t\t\t\t\t\t\tsearch_time: record.search_time,\n\t\t\t\t\t\t\turl: record.url,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tuniqueRecordsMap.set(record.url, dto);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Convert the map values to an array of SearchHistoryDto\n\t\t\t\tconst uniqueRecords: SearchHistoryDto[] = Array.from(\n\t\t\t\t\tuniqueRecordsMap.values(),\n\t\t\t\t);\n\n\t\t\t\treturn uniqueRecords;\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.error(\"Unexpected query result format, expected an array.\");\n\t\t}\n\n\t\treturn [new SearchHistoryDto()];\n\t}\n\n\tasync searchUsers(q: string, userID: string): Promise {\n\t\t// console.log(q);\n\n\t\t// const result = await ctx.prisma.$queryRaw`\n\t\t// SELECT *,\n\t\t// LEVENSHTEIN(username, ${q}) AS distance\n\t\t// FROM users\n\t\t// WHERE similarity(username, ${q}) > 0.2\n\t\t// ORDER BY distance ASC\n\t\t// LIMIT 5;`;\n\t\tconst result = await this.prisma.$queryRaw`\n\t\tSELECT *,\n\t\tLEAST(levenshtein(full_name, ${q}), levenshtein(username, ${q})) AS distance\n\t\tFROM users\n\t\tWHERE similarity(full_name, ${q}) > 0.2\n\t\tOR similarity(username, ${q}) > 0.2\n\t\tORDER BY distance ASC\n\t\tLIMIT 5;`;\n\n\t\tconsole.log(\"Result \" + result);\n\n\t\tif (Array.isArray(result)) {\n\t\t\tconsole.log(\"Called\");\n\t\t\tconsole.log(\"Result \" + result);\n\t\t\tlet userIDs = result.map((row) => row.user_id.toString());\n\t\t\tconst usersWhoBlockedGivenUser: PrismaTypes.users[] =\n\t\t\t\tawait this.prisma.users.findMany({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tblocked_blocked_blockerTousers: {\n\t\t\t\t\t\t\tsome: {\n\t\t\t\t\t\t\t\tblockee: userID,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\tuserIDs = userIDs.filter(\n\t\t\t\t(id) =>\n\t\t\t\t\t!usersWhoBlockedGivenUser\n\t\t\t\t\t\t.map((user) => user.user_id.toString())\n\t\t\t\t\t\t.includes(id),\n\t\t\t);\n\t\t\tconst userDtos = await this.dtogen.generateMultipleUserDto(\n\t\t\t\tuserIDs,\n\t\t\t\tuserID,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\tconsole.log(userDtos);\n\n\t\t\tif (userDtos) {\n\t\t\t\tconst sortedUsers = userIDs\n\t\t\t\t\t.map((id) => userDtos.find((user) => user.userID === id))\n\t\t\t\t\t.filter((user): user is UserDto => user !== undefined);\n\n\t\t\t\treturn sortedUsers;\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.error(\"Unexpected query result format, expected an array.\");\n\t\t}\n\n\t\treturn [new UserDto()];\n\t}\n\n\tadvancedUserSearchQueryBuilder(params: {\n\t\tq: string;\n\t\tcreator_username?: string;\n\t\tcreator_name?: string;\n\t\tfollowing?: number;\n\t\tfollowers?: number;\n\t}): string {\n\t\tlet query = `\n        SELECT user_id,`;\n\t\tconsole.log(params.q);\n\n\t\tif (\n\t\t\tparams.creator_name === undefined &&\n\t\t\tparams.creator_username === undefined\n\t\t) {\n\t\t\tquery += ` LEAST(levenshtein(username, ${sqlstring.escape(\n\t\t\t\tparams.q,\n\t\t\t)}), levenshtein(full_name, ${sqlstring.escape(params.q)})) AS distance`;\n\t\t} else if (\n\t\t\tparams.creator_name !== undefined &&\n\t\t\tparams.creator_username !== undefined\n\t\t) {\n\t\t\tquery += ` LEAST(levenshtein(full_name, ${sqlstring.escape(\n\t\t\t\tparams.q,\n\t\t\t)}), levenshtein(username, ${sqlstring.escape(\n\t\t\t\tparams.creator_username,\n\t\t\t)}), levenshtein(full_name, ${sqlstring.escape(\n\t\t\t\tparams.creator_name,\n\t\t\t)})) AS distance`;\n\t\t} else if (params.creator_name !== undefined) {\n\t\t\tquery += ` LEAST(levenshtein(full_name, ${sqlstring.escape(\n\t\t\t\tparams.q,\n\t\t\t)}), levenshtein(full_name, ${sqlstring.escape(\n\t\t\t\tparams.creator_name,\n\t\t\t)})) AS distance`;\n\t\t} else if (params.creator_username !== undefined) {\n\t\t\tquery += ` LEAST(levenshtein(full_name, ${sqlstring.escape(\n\t\t\t\tparams.q,\n\t\t\t)}), levenshtein(username, ${sqlstring.escape(\n\t\t\t\tparams.creator_username,\n\t\t\t)})) AS distance`;\n\t\t}\n\n\t\tif (params.following !== undefined) {\n\t\t\tquery += `, COALESCE(f1.num_followers, 0) AS num_followers`;\n\t\t}\n\n\t\tif (params.followers !== undefined) {\n\t\t\tquery += `, COALESCE(f2.num_following, 0) AS num_following`;\n\t\t}\n\n\t\tquery += ` FROM users`;\n\n\t\tif (params.following !== undefined) {\n\t\t\tquery += ` LEFT JOIN (\n\t\t\t\tSELECT followee, COUNT(*) AS num_followers\n\t\t\t\tFROM follows\n\t\t\t\tGROUP BY followee\n\t\t\t) f1 ON f1.followee = users.user_id`;\n\t\t}\n\n\t\tif (params.followers !== undefined) {\n\t\t\tquery += ` LEFT JOIN (\n\t\t\t\tSELECT follower, COUNT(*) AS num_following\n\t\t\t\tFROM follows\n\t\t\t\tGROUP BY follower\n\t\t\t) f2 ON f2.follower = users.user_id`;\n\t\t}\n\n\t\tquery += ` WHERE similarity(username, ${sqlstring.escape(\n\t\t\tparams.q,\n\t\t)}) > 0.2 OR similarity(full_name, ${sqlstring.escape(params.q)}) > 0.2`;\n\n\t\tif (params.following !== undefined || params.followers !== undefined) {\n\t\t\tquery += ` GROUP BY users.user_id`;\n\n\t\t\tif (params.following !== undefined) {\n\t\t\t\tquery += `, f1.num_followers`;\n\t\t\t}\n\n\t\t\tif (params.followers !== undefined) {\n\t\t\t\tquery += `, f2.num_following`;\n\t\t\t}\n\t\t}\n\n\t\tif (params.following !== undefined && params.followers !== undefined) {\n\t\t\tquery += ` HAVING COALESCE(f1.num_followers, 0) >= ${params.followers} \n\t\t\tAND COALESCE(f2.num_following, 0) >= ${params.following};`;\n\t\t} else if (params.following !== undefined) {\n\t\t\tquery += ` HAVING COALESCE(f1.num_followers, 0) >= ${params.following};`;\n\t\t} else if (params.followers !== undefined) {\n\t\t\tquery += ` HAVING COALESCE(f2.num_following, 0) >= ${params.followers};`;\n\t\t}\n\n\t\tconsole.log(\"Query: \" + query);\n\n\t\treturn query;\n\t}\n\n\tasync advancedSearchUsers(\n\t\tparams: {\n\t\t\tq: string;\n\t\t\tcreator_username?: string;\n\t\t\tcreator_name?: string;\n\t\t\tfollowing?: number;\n\t\t\tfollowers?: number;\n\t\t},\n\t\tuserID: string,\n\t): Promise {\n\t\tconsole.log(params);\n\n\t\tconst query = this.advancedUserSearchQueryBuilder(params);\n\n\t\t// const result = await ctx.prisma.$queryRawUnsafe(\n\t\t// \tsqlstring.format(query),\n\t\t// );\n\t\tconst result = await this.prisma.$queryRawUnsafe(\n\t\t\tsqlstring.format(query),\n\t\t);\n\n\t\tif (Array.isArray(result)) {\n\t\t\tlet userIDs = result.map((row) => row.user_id.toString());\n\t\t\t//check if rooms are owned by users who have blocked the user\n\t\t\tconst usersWhoBlockedGivenUser: PrismaTypes.users[] =\n\t\t\t\tawait this.prisma.users.findMany({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tblocked_blocked_blockerTousers: {\n\t\t\t\t\t\t\tsome: {\n\t\t\t\t\t\t\t\tblockee: userID,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\tuserIDs = userIDs.filter(\n\t\t\t\t(id) =>\n\t\t\t\t\t!usersWhoBlockedGivenUser\n\t\t\t\t\t\t.map((user) => user.user_id.toString())\n\t\t\t\t\t\t.includes(id),\n\t\t\t);\n\t\t\tconst userDtos = await this.dtogen.generateMultipleUserDto(\n\t\t\t\tuserIDs,\n\t\t\t\tuserID,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\t// console.log(userDtos);\n\n\t\t\tif (userDtos) {\n\t\t\t\tconst sortedUsers = userIDs\n\t\t\t\t\t.map((id) => userDtos.find((user) => user.userID === id))\n\t\t\t\t\t.filter((user): user is UserDto => user !== undefined);\n\n\t\t\t\treturn sortedUsers;\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.error(\"Unexpected query result format, expected an array.\");\n\t\t}\n\n\t\treturn [new UserDto()];\n\t}\n\n\tasync searchUsersHistory(userID: string): Promise {\n\t\tconst result = await this.prisma.search_history.findMany({\n\t\t\twhere: {\n\t\t\t\tuser_id: userID,\n\t\t\t\tOR: [\n\t\t\t\t\t{\n\t\t\t\t\t\turl: {\n\t\t\t\t\t\t\tstartsWith: \"/users/\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\turl: {\n\t\t\t\t\t\t\tstartsWith: \"/search/users?q=\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\torderBy: {\n\t\t\t\ttimestamp: \"desc\",\n\t\t\t},\n\t\t});\n\n\t\tif (Array.isArray(result)) {\n\t\t\tconst searchIds: SearchHistoryDto[] = result.map((row) => ({\n\t\t\t\tsearch_term: row.search_term,\n\t\t\t\tsearch_time: row.timestamp,\n\t\t\t\turl: row.url as string,\n\t\t\t}));\n\n\t\t\tif (searchIds) {\n\t\t\t\tconst uniqueRecordsMap = new Map();\n\n\t\t\t\t// Process records and filter duplicates\n\t\t\t\tsearchIds.forEach((record) => {\n\t\t\t\t\tif (!uniqueRecordsMap.has(record.url)) {\n\t\t\t\t\t\tconst dto: SearchHistoryDto = {\n\t\t\t\t\t\t\tsearch_term: record.search_term,\n\t\t\t\t\t\t\tsearch_time: record.search_time,\n\t\t\t\t\t\t\turl: record.url,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tuniqueRecordsMap.set(record.url, dto);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Convert the map values to an array of SearchHistoryDto\n\t\t\t\tconst uniqueRecords: SearchHistoryDto[] = Array.from(\n\t\t\t\t\tuniqueRecordsMap.values(),\n\t\t\t\t);\n\n\t\t\t\treturn uniqueRecords;\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.error(\"Unexpected query result format, expected an array.\");\n\t\t}\n\n\t\treturn [];\n\t}\n\n\tasync searchUsersSuggestions(q: string): Promise {\n\t\tconst result = await this.prisma.search_history.findMany({\n\t\t\twhere: {\n\t\t\t\tsearch_term: {\n\t\t\t\t\tstartsWith: q,\n\t\t\t\t},\n\t\t\t\tOR: [\n\t\t\t\t\t{\n\t\t\t\t\t\turl: {\n\t\t\t\t\t\t\tstartsWith: \"/users/\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\turl: {\n\t\t\t\t\t\t\tstartsWith: \"/search/users?q=\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\t\tconsole.log(\"Result: \" + JSON.stringify(result));\n\n\t\tif (Array.isArray(result)) {\n\t\t\tconst searchIds: SearchHistoryDto[] = result.map((row) => ({\n\t\t\t\tsearch_term: row.search_term,\n\t\t\t\tsearch_time: row.timestamp,\n\t\t\t\turl: row.url as string,\n\t\t\t}));\n\n\t\t\tif (searchIds) {\n\t\t\t\tconst uniqueRecordsMap = new Map();\n\n\t\t\t\t// Process records and filter duplicates\n\t\t\t\tsearchIds.forEach((record) => {\n\t\t\t\t\tif (!uniqueRecordsMap.has(record.url)) {\n\t\t\t\t\t\tconst dto: SearchHistoryDto = {\n\t\t\t\t\t\t\tsearch_term: record.search_term,\n\t\t\t\t\t\t\tsearch_time: record.search_time,\n\t\t\t\t\t\t\turl: record.url,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tuniqueRecordsMap.set(record.url, dto);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Convert the map values to an array of SearchHistoryDto\n\t\t\t\tconst uniqueRecords: SearchHistoryDto[] = Array.from(\n\t\t\t\t\tuniqueRecordsMap.values(),\n\t\t\t\t);\n\n\t\t\t\treturn uniqueRecords;\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.error(\"Unexpected query result format, expected an array.\");\n\t\t}\n\n\t\treturn [new SearchHistoryDto()];\n\t}\n\n\tgetQueryParams(url: string): {\n\t\tpathSegment: string | null;\n\t\tqueryParams: Record;\n\t} {\n\t\t// Extract the path segment and query string part from the URL\n\t\tconst [pathAndQuery] = url.split(\"?\");\n\t\tif (!pathAndQuery) {\n\t\t\treturn { pathSegment: null, queryParams: {} };\n\t\t}\n\t\tconst [pathSegment] = pathAndQuery.split(\"/\").slice(-1);\n\n\t\t// Extract the query string part\n\t\tconst paramsString = url.split(\"?\")[1] || \"\";\n\n\t\t// Process query parameters\n\t\tconst queryParams = paramsString\n\t\t\t.split(\"&\")\n\t\t\t.reduce((params: Record, param) => {\n\t\t\t\tconst [key, value] = param.split(\"=\");\n\t\t\t\tif (key) {\n\t\t\t\t\tparams[key] = value !== undefined ? decodeURIComponent(value) : \"\";\n\t\t\t\t}\n\t\t\t\treturn params;\n\t\t\t}, {});\n\n\t\treturn {\n\t\t\tpathSegment: pathSegment || null,\n\t\t\tqueryParams,\n\t\t};\n\t}\n\n\tasync searchHistory(userID: string): Promise {\n\t\tconst result = await this.prisma.$queryRaw`\n\t\tSELECT *\n\t\tFROM search_history\n\t\tWHERE user_id::text = ${userID}\n\t\tORDER BY timestamp DESC\n\t\tLIMIT 10;`;\n\n\t\tif (Array.isArray(result)) {\n\t\t\tconst searchIds: (SearchHistoryDto & {\n\t\t\t\tparams: {\n\t\t\t\t\tpathSegment: string | null;\n\t\t\t\t\tqueryParams: Record;\n\t\t\t\t};\n\t\t\t})[] = result.map((row) => ({\n\t\t\t\tsearch_term: row.search_term,\n\t\t\t\tsearch_time: row.timestamp,\n\t\t\t\turl: row.url,\n\t\t\t\tparams: this.getQueryParams(row.url),\n\t\t\t}));\n\n\t\t\tconst results: CombinedSearchHistory[] = await Promise.all(\n\t\t\t\tsearchIds.map(async (id) => {\n\t\t\t\t\tlet searchResult: (RoomDto | UserDto)[] | string = \"\";\n\n\t\t\t\t\tif (id.params.pathSegment === \"rooms\") {\n\t\t\t\t\t\tif (id.params.queryParams.creator) {\n\t\t\t\t\t\t\tsearchResult = await this.searchRooms(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tq: id.params.queryParams.q as string,\n\t\t\t\t\t\t\t\t\tcreator: id.params.queryParams.creator as string,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tuserID,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsearchResult = await this.searchRooms(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tq: id.params.queryParams.q as string,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tuserID,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (id.params.pathSegment === \"users\") {\n\t\t\t\t\t\tsearchResult = await this.searchUsers(\n\t\t\t\t\t\t\tid.params.queryParams.q as string,\n\t\t\t\t\t\t\tuserID,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (id.params.queryParams.creator) {\n\t\t\t\t\t\t\tconst combo = await this.combinedSearch(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tq: id.params.queryParams.q as string,\n\t\t\t\t\t\t\t\t\tcreator: id.params.queryParams.creator as string,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tuserID,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tsearchResult = [combo.rooms, combo.users].flat();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst combo = await this.combinedSearch(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tq: id.params.queryParams.q as string,\n\t\t\t\t\t\t\t\tcreator: id.params.queryParams.creator as string,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tuserID,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tsearchResult = [combo.rooms, combo.users].flat();\n\t\t\t\t\t}\n\n\t\t\t\t\treturn { results: [id.search_term, ...searchResult].flat() };\n\t\t\t\t}),\n\t\t\t);\n\t\t\treturn results;\n\t\t} else {\n\t\t\tconsole.error(\"Unexpected query result format, expected an array.\");\n\t\t}\n\t\treturn [];\n\t}\n\n\tasync clearSearchHistory(userID: string): Promise {\n\t\tawait this.prisma.search_history.deleteMany({\n\t\t\twhere: {\n\t\t\t\tuser_id: userID,\n\t\t\t},\n\t\t});\n\t\tconsole.log(userID);\n\t}\n\n\tasync clearRoomsHistory(userID: string): Promise {\n\t\tawait this.prisma.search_history.deleteMany({\n\t\t\twhere: {\n\t\t\t\tuser_id: userID,\n\t\t\t\tOR: [\n\t\t\t\t\t{\n\t\t\t\t\t\turl: {\n\t\t\t\t\t\t\tstartsWith: \"/rooms/\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\turl: {\n\t\t\t\t\t\t\tstartsWith: \"/search/rooms?q=\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\t\tconsole.log(userID);\n\t}\n\n\tasync clearUsersHistory(userID: string): Promise {\n\t\tawait this.prisma.search_history.deleteMany({\n\t\t\twhere: {\n\t\t\t\tuser_id: userID,\n\t\t\t\tOR: [\n\t\t\t\t\t{\n\t\t\t\t\t\turl: {\n\t\t\t\t\t\t\tstartsWith: \"/users/\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\turl: {\n\t\t\t\t\t\t\tstartsWith: \"/search/users?q=\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\t\tconsole.log(userID);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRoomDto.html":{"url":"classes/CreateRoomDto.html","title":"class - CreateRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/dto/createroomdto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                end_date\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                has_explicit_content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                has_nsfw_content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                is_private\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                is_scheduled\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                is_temporary\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                language\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                room_image\n                            \n                            \n                                    \n                                    \n                                room_name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                room_size\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                start_date\n                            \n                            \n                                    \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/createroomdto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        end_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsDate()@IsOptional()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/createroomdto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        has_explicit_content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/createroomdto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        has_nsfw_content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/createroomdto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        is_private\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/createroomdto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        is_scheduled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/createroomdto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        is_temporary\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/createroomdto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/createroomdto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        room_image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/createroomdto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        room_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/createroomdto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        room_size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/createroomdto.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsDate()@IsOptional()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/createroomdto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The tags that describe the room', type: String, isArray: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/createroomdto.ts:77\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport {\n\tIsString,\n\tIsBoolean,\n\tIsOptional,\n\tIsDate,\n\tIsNumber,\n} from \"class-validator\";\nimport { Transform } from \"class-transformer\";\n\nexport class CreateRoomDto {\n\t@ApiProperty()\n\t@IsString()\n\troom_name: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tdescription: string;\n\n\t@ApiPropertyOptional()\n\t@IsBoolean()\n\t@IsOptional()\n\tis_temporary?: boolean;\n\n\t@ApiPropertyOptional()\n\t@IsBoolean()\n\t@IsOptional()\n\tis_private?: boolean;\n\n\t@ApiPropertyOptional()\n\t@IsBoolean()\n\t@IsOptional()\n\tis_scheduled?: boolean;\n\n\t@ApiPropertyOptional()\n\t@IsDate()\n\t@IsOptional()\n\t@Transform(({ value }) => new Date(value))\n\tstart_date?: Date;\n\n\t@ApiPropertyOptional()\n\t@IsDate()\n\t@IsOptional()\n\t@Transform(({ value }) => new Date(value))\n\tend_date?: Date;\n\n\t@ApiPropertyOptional()\n\t@IsString()\n\t@IsOptional()\n\tlanguage?: string;\n\n\t@ApiPropertyOptional()\n\t@IsBoolean()\n\t@IsOptional()\n\thas_explicit_content?: boolean;\n\n\t@ApiPropertyOptional()\n\t@IsBoolean()\n\t@IsOptional()\n\thas_nsfw_content?: boolean;\n\n\t@ApiPropertyOptional()\n\t@IsString()\n\t@IsOptional()\n\troom_image?: string;\n\n\t@ApiPropertyOptional()\n\t@IsNumber()\n\t@IsOptional()\n\troom_size?: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The tags that describe the room\",\n\t\ttype: String,\n\t\tisArray: true,\n\t})\n\ttags: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            archive/modules/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                activity\n                            \n                            \n                                    \n                                    \n                                bio\n                            \n                            \n                                    \n                                bookmark\n                            \n                            \n                                    \n                                follows_follows_followeeTousers\n                            \n                            \n                                    \n                                follows_follows_followerTousers\n                            \n                            \n                                    \n                                friends_friends_friend1Tousers\n                            \n                            \n                                    \n                                friends_friends_friend2Tousers\n                            \n                            \n                                    \n                                message\n                            \n                            \n                                    \n                                participate\n                            \n                            \n                                    \n                                preferences\n                            \n                            \n                                    \n                                private_message\n                            \n                            \n                                    \n                                    \n                                profile_picture\n                            \n                            \n                                    \n                                room\n                            \n                            \n                                    \n                                    \n                                userID\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        activity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/users/dto/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/users/dto/create-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        bookmark\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/users/dto/create-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        follows_follows_followeeTousers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/users/dto/create-user.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        follows_follows_followerTousers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/users/dto/create-user.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        friends_friends_friend1Tousers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/users/dto/create-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        friends_friends_friend2Tousers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/users/dto/create-user.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/users/dto/create-user.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        participate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/users/dto/create-user.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        preferences\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/users/dto/create-user.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        private_message\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/users/dto/create-user.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        profile_picture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/users/dto/create-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        room\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/users/dto/create-user.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/users/dto/create-user.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/users/dto/create-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString } from \"class-validator\";\n\nexport class CreateUserDto {\n\t@ApiProperty()\n\t@IsString()\n\tuserID: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tusername: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tbio: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tprofile_picture: string;\n\n\t@ApiProperty()\n\tactivity: any;\n\n\t@ApiProperty()\n\tpreferences: any;\n\n\t@ApiProperty()\n\tbookmark: any[];\n\n\t@ApiProperty()\n\tfollows_follows_followeeTousers: any[];\n\n\t@ApiProperty()\n\tfollows_follows_followerTousers: any[];\n\n\t@ApiProperty()\n\tfriends_friends_friend1Tousers: any[];\n\n\t@ApiProperty()\n\tfriends_friends_friend2Tousers: any[];\n\n\t@ApiProperty()\n\tmessage: any[];\n\n\t@ApiProperty()\n\tparticipate: any[];\n\n\t@ApiProperty()\n\tprivate_message: any[];\n\n\t@ApiProperty()\n\troom: any[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto-1.html":{"url":"classes/CreateUserDto-1.html","title":"class - CreateUserDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            archive/modules/users/entities/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                activity\n                            \n                            \n                                    \n                                bio\n                            \n                            \n                                    \n                                preferences\n                            \n                            \n                                    \n                                profile_picture\n                            \n                            \n                                    \n                                userID\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        activity\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Prisma.JsonValue\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/users/entities/user.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/users/entities/user.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        preferences\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Prisma.JsonValue\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/users/entities/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        profile_picture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/users/entities/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/users/entities/user.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/users/entities/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma } from \"@prisma/client\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n\nexport class CreateUserDto {\n\t@ApiProperty()\n\tuserID: string;\n\n\t@ApiProperty()\n\tusername: string;\n\n\t@ApiProperty()\n\tbio: string;\n\n\t@ApiProperty()\n\tprofile_picture: string;\n\n\t@ApiProperty()\n\tactivity: Prisma.JsonValue;\n\n\t@ApiProperty()\n\tpreferences: Prisma.JsonValue;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DbUtilsModule.html":{"url":"modules/DbUtilsModule.html","title":"module - DbUtilsModule","body":"\n                   \n\n\n\n\n    Modules\n    DbUtilsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DbUtilsModule\n\n\n\ncluster_DbUtilsModule_imports\n\n\n\ncluster_DbUtilsModule_providers\n\n\n\ncluster_DbUtilsModule_exports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nDbUtilsModule\n\nDbUtilsModule\n\nDbUtilsModule -->\n\nPrismaModule->DbUtilsModule\n\n\n\n\n\nDbUtilsService \n\nDbUtilsService \n\nDbUtilsService  -->\n\nDbUtilsModule->DbUtilsService \n\n\n\n\n\nDbUtilsService\n\nDbUtilsService\n\nDbUtilsModule -->\n\nDbUtilsService->DbUtilsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/db-utils/db-utils.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DbUtilsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DbUtilsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PrismaModule } from \"../../../prisma/prisma.module\";\nimport { DbUtilsService } from \"./db-utils.service\";\n\n@Module({\n\timports: [PrismaModule],\n\tproviders: [DbUtilsService],\n\texports: [DbUtilsService],\n})\nexport class DbUtilsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DirectMessageDto.html":{"url":"classes/DirectMessageDto.html","title":"class - DirectMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DirectMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/dm.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                bodyIsRoomID\n                            \n                            \n                                    \n                                    \n                                dateRead\n                            \n                            \n                                    \n                                    \n                                dateSent\n                            \n                            \n                                    \n                                    \n                                index\n                            \n                            \n                                    \n                                    \n                                isRead\n                            \n                            \n                                    \n                                    \n                                messageBody\n                            \n                            \n                                    \n                                    \n                                pID\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                recipient\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                sender\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        bodyIsRoomID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/dm.dto.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        dateRead\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/dm.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        dateSent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/dm.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/dm.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isRead\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/dm.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        messageBody\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/dm.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        pID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/dm.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        recipient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The recipient of the message', type: UserDto})@IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/dm.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        sender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The sender of the message', type: UserDto})@IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/dm.dto.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n\tIsString,\n\tIsNumber,\n\tIsObject,\n\tIsBoolean,\n\tValidateNested,\n\tIsDate,\n} from \"class-validator\";\nimport { UserDto } from \"../../users/dto/user.dto\";\nimport { Type } from \"class-transformer\";\n\nexport class DirectMessageDto {\n\t@ApiProperty()\n\t@IsNumber()\n\tindex: number;\n\n\t@ApiProperty()\n\t@IsString()\n\tmessageBody: string;\n\n\t@ApiProperty({\n\t\tdescription: \"The sender of the message\",\n\t\ttype: UserDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => UserDto)\n\tsender: UserDto;\n\n\t@ApiProperty({\n\t\tdescription: \"The recipient of the message\",\n\t\ttype: UserDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => UserDto)\n\trecipient: UserDto;\n\n\t@ApiProperty()\n\t@IsDate()\n\tdateSent: Date;\n\n\t@ApiProperty()\n\t@IsDate()\n\tdateRead: Date;\n\n\t@ApiProperty()\n\t@IsBoolean()\n\tisRead: boolean;\n\n\t@ApiProperty()\n\t@IsString()\n\tpID: string;\n\n\t@ApiProperty()\n\t@IsBoolean()\n\tbodyIsRoomID: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DmUsersModule.html":{"url":"modules/DmUsersModule.html","title":"module - DmUsersModule","body":"\n                   \n\n\n\n\n    Modules\n    DmUsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DmUsersModule\n\n\n\ncluster_DmUsersModule_imports\n\n\n\ncluster_DmUsersModule_providers\n\n\n\ncluster_DmUsersModule_exports\n\n\n\n\nAutoModerationModule\n\nAutoModerationModule\n\n\n\nDmUsersModule\n\nDmUsersModule\n\nDmUsersModule -->\n\nAutoModerationModule->DmUsersModule\n\n\n\n\n\nDbUtilsModule\n\nDbUtilsModule\n\nDmUsersModule -->\n\nDbUtilsModule->DmUsersModule\n\n\n\n\n\nDtoGenModule\n\nDtoGenModule\n\nDmUsersModule -->\n\nDtoGenModule->DmUsersModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nDmUsersModule -->\n\nUsersModule->DmUsersModule\n\n\n\n\n\nDmUsersService \n\nDmUsersService \n\nDmUsersService  -->\n\nDmUsersModule->DmUsersService \n\n\n\n\n\nDmUsersService\n\nDmUsersService\n\nDmUsersModule -->\n\nDmUsersService->DmUsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/live/dmusers/dmusers.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DmUsersService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AutoModerationModule\n                        \n                        \n                            DbUtilsModule\n                        \n                        \n                            DtoGenModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DmUsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { DmUsersService } from \"./dmusers.service\";\nimport { DtoGenModule } from \"../../modules/dto-gen/dto-gen.module\";\nimport { DbUtilsModule } from \"../../modules/db-utils/db-utils.module\";\nimport { UsersModule } from \"../../modules/users/users.module\";\nimport { AutoModerationModule } from \"../automod/automod.module\";\n\n@Module({\n\timports: [DtoGenModule, DbUtilsModule, UsersModule, AutoModerationModule],\n\tproviders: [DmUsersService],\n\texports: [DmUsersService],\n})\nexport class DmUsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DmUsersService.html":{"url":"injectables/DmUsersService.html","title":"injectable - DmUsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DmUsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/live/dmusers/dmusers.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                connectedUsers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addConnectedUser\n                            \n                            \n                                disconnectChat\n                            \n                            \n                                getChatID\n                            \n                            \n                                getConnectedUser\n                            \n                            \n                                getParticipant\n                            \n                            \n                                getSocketId\n                            \n                            \n                                getUser\n                            \n                            \n                                getUserId\n                            \n                            \n                                removeConnectedUser\n                            \n                            \n                                    Async\n                                setChatInfo\n                            \n                            \n                                    Async\n                                shareRoom\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dbUtils: DbUtilsService, dtogen: DtoGenService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/live/dmusers/dmusers.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dbUtils\n                                                  \n                                                        \n                                                                        DbUtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dtogen\n                                                  \n                                                        \n                                                                        DtoGenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addConnectedUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    addConnectedUser(socketID: string, userId: string, participantId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/live/dmusers/dmusers.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                socketID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                participantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        disconnectChat\n                        \n                    \n                \n            \n            \n                \ndisconnectChat(socketID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/live/dmusers/dmusers.service.ts:235\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                socketID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getChatID\n                        \n                    \n                \n            \n            \n                \ngetChatID(socketID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/live/dmusers/dmusers.service.ts:166\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                socketID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getConnectedUser\n                        \n                    \n                \n            \n            \n                \ngetConnectedUser(socketID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/live/dmusers/dmusers.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                socketID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         dmUser | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getParticipant\n                        \n                    \n                \n            \n            \n                \ngetParticipant(socketID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/live/dmusers/dmusers.service.ts:145\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                socketID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserDto | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSocketId\n                        \n                    \n                \n            \n            \n                \ngetSocketId(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/live/dmusers/dmusers.service.ts:130\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUser\n                        \n                    \n                \n            \n            \n                \ngetUser(socketID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/live/dmusers/dmusers.service.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                socketID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserDto | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserId\n                        \n                    \n                \n            \n            \n                \ngetUserId(socketID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/live/dmusers/dmusers.service.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                socketID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeConnectedUser\n                        \n                    \n                \n            \n            \n                \nremoveConnectedUser(socketID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/live/dmusers/dmusers.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                socketID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setChatInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    setChatInfo(socketID: string, participantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/live/dmusers/dmusers.service.ts:179\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                socketID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                participantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        shareRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    shareRoom(socketServer: Server, messages: DirectMessageDto[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/live/dmusers/dmusers.service.ts:249\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                socketServer\n                                            \n                                                        Server\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                messages\n                                            \n                                                            DirectMessageDto[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        connectedUsers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/live/dmusers/dmusers.service.ts:25\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { DbUtilsService } from \"../../modules/db-utils/db-utils.service\";\nimport { DtoGenService } from \"../../modules/dto-gen/dto-gen.service\";\nimport { UserDto } from \"../../modules/users/dto/user.dto\";\nimport { UsersService } from \"../../modules/users/users.service\";\nimport { Server } from \"socket.io\";\nimport { SOCKET_EVENTS } from \"../../common/constants\";\nimport { DirectMessageDto } from \"../../modules/users/dto/dm.dto\";\n\ninterface dmUser {\n\tuser: UserDto;\n\tparticipant: UserDto | null;\n\tchatID: string | null;\n\tsocketIDs: string[];\n}\n\n@Injectable()\nexport class DmUsersService {\n\tconstructor(\n\t\tprivate readonly dbUtils: DbUtilsService,\n\t\tprivate readonly dtogen: DtoGenService,\n\t\tprivate readonly usersService: UsersService,\n\t) {}\n\n\tprivate connectedUsers = new Map();\n\n\tasync addConnectedUser(\n\t\tsocketID: string,\n\t\tuserId: string,\n\t\tparticipantId?: string,\n\t): Promise {\n\t\tif (!(await this.dbUtils.userExists(userId))) {\n\t\t\tthrow new Error(\"User with ID \" + userId + \" does not exist\");\n\t\t}\n\n\t\tif (this.connectedUsers.has(userId)) {\n\t\t\t// add socket id to user\n\t\t\tconst u = this.connectedUsers.get(userId);\n\t\t\tif (!u) {\n\t\t\t\tthrow new Error(\"Connected user does not exist\");\n\t\t\t}\n\t\t\tu.socketIDs.push(socketID);\n\t\t\tif (participantId) {\n\t\t\t\tawait this.setChatInfo(socketID, participantId);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tconst [user]: UserDto[] = await this.dtogen.generateMultipleUserDto([\n\t\t\tuserId,\n\t\t]);\n\n\t\tthis.connectedUsers.set(userId, {\n\t\t\tuser: user,\n\t\t\tparticipant: null,\n\t\t\tchatID: null,\n\t\t\tsocketIDs: [socketID],\n\t\t});\n\t\tif (participantId) {\n\t\t\tawait this.setChatInfo(socketID, participantId);\n\t\t}\n\n\t\tconsole.log(\"Added connected user: \" + user);\n\t\tconsole.log(\"Connected users: \" + this.connectedUsers);\n\t}\n\n\tremoveConnectedUser(socketID: string) {\n\t\t// this.connectedUsers.delete(socketID);\n\t\tfor (const [key, value] of this.connectedUsers) {\n\t\t\twhile (value.socketIDs.includes(socketID)) {\n\t\t\t\tvalue.socketIDs.splice(value.socketIDs.indexOf(socketID), 1);\n\t\t\t\tif (value.socketIDs.length === 0) {\n\t\t\t\t\tthis.connectedUsers.delete(key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tgetConnectedUser(socketID: string): dmUser | null {\n\t\t// const u = this.connectedUsers.get(socketID);\n\t\t// if (!u || u === undefined) {\n\t\t// \tthrow new Error(\"Connected user does not exist\");\n\t\t// }\n\t\t// return u;\n\t\tfor (const [_, value] of this.connectedUsers) {\n\t\t\tif (value.socketIDs.includes(socketID)) {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetUserId(socketID: string): string | null {\n\t\t// const u = this.connectedUsers.get(socketID);\n\t\t// if (!u || u === undefined) {\n\t\t// \tthrow new Error(\"Connected user does not exist\");\n\t\t// }\n\t\t// const user = u.user;\n\t\t// if (!user || user === undefined) {\n\t\t// \tthrow new Error(\"Connected user does not have a user object\");\n\t\t// }\n\t\t// if (!user.userID || user.userID === undefined) {\n\t\t// \tthrow new Error(\"Connected user does not have a userID\");\n\t\t// }\n\t\t// return user.userID;\n\t\tconst u = this.getUser(socketID);\n\t\tif (u === null) {\n\t\t\tthrow new Error(\"Connected user does not exist\");\n\t\t}\n\t\treturn u.userID;\n\t}\n\n\tgetUser(socketID: string): UserDto | null {\n\t\t// const u = this.connectedUsers.get(socketID);\n\t\t// if (!u || u === undefined) {\n\t\t// \tthrow new Error(\"Connected user does not exist\");\n\t\t// }\n\t\t// const user = u.user;\n\t\t// if (!user || user === undefined) {\n\t\t// \tthrow new Error(\"Connected user does not have a user object\");\n\t\t// }\n\t\t// return user;\n\t\tconst u = this.getConnectedUser(socketID);\n\t\tif (u === null) {\n\t\t\tthrow new Error(\"Connected user does not exist\");\n\t\t}\n\t\treturn u.user;\n\t}\n\n\tgetSocketId(userId: string): string | null {\n\t\t// for (const [socketID, u] of this.connectedUsers) {\n\t\t// \tif (u.user.userID === userId) {\n\t\t// \t\treturn socketID;\n\t\t// \t}\n\t\t// }\n\t\t// return null;\n\t\tfor (const [key, value] of this.connectedUsers) {\n\t\t\tif (value.socketIDs.includes(userId)) {\n\t\t\t\treturn key;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetParticipant(socketID: string): UserDto | null {\n\t\t// const u = this.connectedUsers.get(socketID);\n\t\t// if (!u || u === undefined) {\n\t\t// \tthrow new Error(\"Connected user does not exist\");\n\t\t// }\n\t\t// const participant = u.participant;\n\t\t// if (!participant || participant === undefined) {\n\t\t// \tthrow new Error(\"Connected user does not have a participant object\");\n\t\t// }\n\t\t// return participant;\n\t\tconst u = this.getConnectedUser(socketID);\n\t\tif (u === null) {\n\t\t\tthrow new Error(\"Connected user does not exist\");\n\t\t}\n\t\tconst participant = u.participant;\n\t\tif (participant === null) {\n\t\t\tthrow new Error(\"Connected user does not have a participant object\");\n\t\t}\n\t\treturn participant;\n\t}\n\n\tgetChatID(socketID: string): string | null {\n\t\t// const u = this.connectedUsers.get(socketID);\n\t\t// if (!u || u === undefined) {\n\t\t// \tthrow new Error(\"Connected user does not exist\");\n\t\t// }\n\t\t// return u.chatID;\n\t\tconst u = this.getConnectedUser(socketID);\n\t\tif (u === null) {\n\t\t\tthrow new Error(\"Connected user does not exist\");\n\t\t}\n\t\treturn u.chatID;\n\t}\n\n\tasync setChatInfo(socketID: string, participantId: string) {\n\t\tconst u = this.getConnectedUser(socketID);\n\t\tif (!u || u === undefined) {\n\t\t\tthrow new Error(\"Connected user does not exist\");\n\t\t}\n\t\t/*\n\t\tif (!(u.participant === null)) {\n\t\t\tthrow new Error(\"Connected user already has a participant\");\n\t\t}\n\t\tif (!(u.chatID === null)) {\n\t\t\tthrow new Error(\"Connected user already has a chatID\");\n\t\t}\n\t\t\t*/\n\t\tif (!(u.participant === null) || !(u.chatID === null)) {\n\t\t\t//disconnect & reconnect\n\t\t\tthis.disconnectChat(socketID);\n\t\t}\n\n\t\tconst [participant]: UserDto[] = await this.dtogen.generateMultipleUserDto([\n\t\t\tparticipantId,\n\t\t]);\n\n\t\tconst chatIDs: string[] = await this.usersService.generateChatHash(\n\t\t\tu.user.userID,\n\t\t\tparticipantId,\n\t\t);\n\n\t\tconst values: dmUser[] = Array.from(this.connectedUsers.values());\n\t\tif (\n\t\t\tchatIDs.length !== 2 ||\n\t\t\tchatIDs[0] === undefined ||\n\t\t\tchatIDs[1] === undefined ||\n\t\t\tchatIDs[0] === chatIDs[1]\n\t\t) {\n\t\t\tthrow new Error(\"Invalid chatIDs generated\");\n\t\t}\n\n\t\tlet chatID: string = chatIDs[0];\n\t\tif (values.some((u) => u.chatID === chatIDs[1])) {\n\t\t\tconst id = values.find((u) => u.chatID === chatIDs[1]);\n\t\t\tif (!id) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"Very weird error. The chatID exists but the object does not\",\n\t\t\t\t);\n\t\t\t}\n\t\t\tchatID = chatIDs[1];\n\t\t}\n\n\t\tthis.connectedUsers.set(u.user.userID, {\n\t\t\tuser: u.user,\n\t\t\tparticipant: participant,\n\t\t\tchatID: chatID,\n\t\t\tsocketIDs: u.socketIDs,\n\t\t});\n\t}\n\n\tdisconnectChat(socketID: string) {\n\t\tconst u = this.getConnectedUser(socketID);\n\t\tif (!u || u === undefined) {\n\t\t\tthrow new Error(\"Connected user does not exist\");\n\t\t}\n\t\tthis.connectedUsers.set(u.user.userID, {\n\t\t\tuser: u.user,\n\t\t\tparticipant: null,\n\t\t\tchatID: null,\n\t\t\tsocketIDs: u.socketIDs,\n\t\t});\n\t\tconsole.log(socketID);\n\t}\n\n\tasync shareRoom(\n\t\tsocketServer: Server,\n\t\tmessages: DirectMessageDto[],\n\t): Promise {\n\t\tconst chatIDs: string[][] = await Promise.all(\n\t\t\tmessages.map(async (m) => {\n\t\t\t\treturn await this.usersService.generateChatHash(\n\t\t\t\t\tm.sender.userID,\n\t\t\t\t\tm.recipient.userID,\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t\tfor (let i = 0; i  u.chatID === chatIDs[i][0])) {\n\t\t\t\tconst id = values.find((u) => u.chatID === chatIDs[i][0]);\n\t\t\t\tif (!id) {\n\t\t\t\t\tchatID = undefined;\n\t\t\t\t}\n\t\t\t\tchatID = chatIDs[i][0];\n\t\t\t}\n\t\t\tif (!chatID && values.some((u) => u.chatID === chatIDs[i][1])) {\n\t\t\t\tconst id = values.find((u) => u.chatID === chatIDs[i][1]);\n\t\t\t\tif (!id) {\n\t\t\t\t\tchatID = undefined;\n\t\t\t\t}\n\t\t\t\tchatID = chatIDs[i][1];\n\t\t\t}\n\n\t\t\tif (chatID)\n\t\t\t\tsocketServer.to(chatID).emit(SOCKET_EVENTS.DIRECT_MESSAGE, messages[i]);\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DtoGenModule.html":{"url":"modules/DtoGenModule.html","title":"module - DtoGenModule","body":"\n                   \n\n\n\n\n    Modules\n    DtoGenModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DtoGenModule\n\n\n\ncluster_DtoGenModule_exports\n\n\n\ncluster_DtoGenModule_providers\n\n\n\ncluster_DtoGenModule_imports\n\n\n\n\nDbUtilsModule\n\nDbUtilsModule\n\n\n\nDtoGenModule\n\nDtoGenModule\n\nDtoGenModule -->\n\nDbUtilsModule->DtoGenModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nDtoGenModule -->\n\nPrismaModule->DtoGenModule\n\n\n\n\n\nDtoGenService \n\nDtoGenService \n\nDtoGenService  -->\n\nDtoGenModule->DtoGenService \n\n\n\n\n\nDtoGenService\n\nDtoGenService\n\nDtoGenModule -->\n\nDtoGenService->DtoGenModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/dto-gen/dto-gen.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DtoGenService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DbUtilsModule\n                        \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DtoGenService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PrismaModule } from \"../../../prisma/prisma.module\";\nimport { DtoGenService } from \"./dto-gen.service\";\nimport { DbUtilsModule } from \"../db-utils/db-utils.module\";\n\n@Module({\n\timports: [PrismaModule, DbUtilsModule],\n\tproviders: [DtoGenService],\n\texports: [DtoGenService],\n})\nexport class DtoGenModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DtoGenService.html":{"url":"injectables/DtoGenService.html","title":"injectable - DtoGenService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DtoGenService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/dto-gen/dto-gen.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generateBriefUserDto\n                            \n                            \n                                    Async\n                                generateDirectMessageDto\n                            \n                            \n                                    Async\n                                generateLiveChatMessageDto\n                            \n                            \n                                    Async\n                                generateMultipleDirectMessageDto\n                            \n                            \n                                    Async\n                                generateMultipleLiveChatMessageDto\n                            \n                            \n                                    Async\n                                generateMultipleRoomDto\n                            \n                            \n                                    Async\n                                generateMultipleRoomDtoFromRoom\n                            \n                            \n                                    Async\n                                generateMultipleUserDto\n                            \n                            \n                                    Async\n                                getChatAsDirectMessageDto\n                            \n                            \n                                messageBodyIsRoomID\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, dbUtils: DbUtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/dto-gen/dto-gen.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dbUtils\n                                                  \n                                                        \n                                                                        DbUtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateBriefUserDto\n                        \n                    \n                \n            \n            \n                \ngenerateBriefUserDto(user: UserWithAuth)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/dto-gen/dto-gen.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            UserWithAuth\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateDirectMessageDto\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateDirectMessageDto(pmID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/dto-gen/dto-gen.service.ts:477\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                pmID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateLiveChatMessageDto\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateLiveChatMessageDto(messageID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/dto-gen/dto-gen.service.ts:386\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                messageID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateMultipleDirectMessageDto\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateMultipleDirectMessageDto(dms: ()[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/dto-gen/dto-gen.service.ts:629\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dms\n                                            \n                                                        ()[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateMultipleLiveChatMessageDto\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateMultipleLiveChatMessageDto(messages: PrismaTypes.message[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/dto-gen/dto-gen.service.ts:421\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                messages\n                                            \n                                                        PrismaTypes.message[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateMultipleRoomDto\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateMultipleRoomDto(roomIDs: string[], userID: string | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/dto-gen/dto-gen.service.ts:196\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                roomIDs\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                userID\n                                            \n                                                        string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    undefined\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateMultipleRoomDtoFromRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateMultipleRoomDtoFromRoom(rooms: FullyQualifiedRoom[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/dto-gen/dto-gen.service.ts:324\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                rooms\n                                            \n                                                            FullyQualifiedRoom[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateMultipleUserDto\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateMultipleUserDto(userIDs: string[], userID: string | undefined, fully_qualify)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/dto-gen/dto-gen.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                userIDs\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                userID\n                                            \n                                                        string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    undefined\n                                            \n\n                                        \n                                        \n                                                fully_qualify\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getChatAsDirectMessageDto\n                        \n                    \n                \n            \n            \n                \n                        \n                    getChatAsDirectMessageDto(participant1: string, participant2: string, unreadOnly)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/dto-gen/dto-gen.service.ts:523\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                participant1\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                participant2\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                unreadOnly\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        messageBodyIsRoomID\n                        \n                    \n                \n            \n            \n                \nmessageBodyIsRoomID(messageBody: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/dto-gen/dto-gen.service.ts:678\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                messageBody\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { RoomDto } from \"../rooms/dto/room.dto\";\nimport { UserDto } from \"../users/dto/user.dto\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\n//import { Prisma } from \"@prisma/client\";\nimport * as PrismaTypes from \"@prisma/client\";\nimport {\n\tDbUtilsService,\n\tFullyQualifiedRoom,\n\tUserWithAuth,\n} from \"../db-utils/db-utils.service\";\nimport { LiveChatMessageDto } from \"../../live/dto/livechatmessage.dto\";\nimport { DirectMessageDto } from \"../users/dto/dm.dto\";\nimport validator from \"validator\";\n\n// A service that will generate DTOs\n@Injectable()\nexport class DtoGenService {\n\tconstructor(\n\t\tprivate readonly prisma: PrismaService,\n\t\tprivate readonly dbUtils: DbUtilsService,\n\t) {}\n\n\tgenerateBriefUserDto(user: UserWithAuth): UserDto {\n\t\treturn {\n\t\t\tprofile_name: user.full_name || \"\",\n\t\t\tuserID: user.user_id,\n\t\t\tusername: user.username,\n\t\t\tprofile_picture_url: user.profile_picture || \"\",\n\t\t\tfollowers: {\n\t\t\t\tcount: 0,\n\t\t\t\tdata: [],\n\t\t\t},\n\t\t\tfollowing: {\n\t\t\t\tcount: 0,\n\t\t\t\tdata: [],\n\t\t\t},\n\t\t\tlinks: {\n\t\t\t\tcount: 0,\n\t\t\t\tdata: {},\n\t\t\t},\n\t\t\tbio: user.bio || \"\",\n\t\t\tfav_genres: {\n\t\t\t\tcount: 0,\n\t\t\t\tdata: [],\n\t\t\t},\n\t\t\tfav_songs: {\n\t\t\t\tcount: 0,\n\t\t\t\tdata: [],\n\t\t\t},\n\t\t\tfav_rooms: {\n\t\t\t\tcount: 0,\n\t\t\t\tdata: [],\n\t\t\t},\n\t\t\trecent_rooms: {\n\t\t\t\tcount: 0,\n\t\t\t\tdata: [],\n\t\t\t},\n\t\t\thasSpotifyAccount: user.authentication !== null,\n\t\t};\n\t}\n\n\tasync generateMultipleUserDto(\n\t\tuserIDs: string[],\n\t\tuserID: string | undefined = undefined,\n\t\tfully_qualify = false,\n\t): Promise {\n\t\tlet blocked: PrismaTypes.blocked[] = [];\n\t\tif (userID && userID !== null) {\n\t\t\tblocked = await this.prisma.blocked.findMany({\n\t\t\t\twhere: { OR: [{ blockee: userID }, { blocker: userID }] },\n\t\t\t});\n\t\t}\n\t\t// create a an array of all the blocker and blockee ids and only include unique\n\t\tconst blocked_ids: string[] = [\n\t\t\t...new Set([\n\t\t\t\t...blocked.map((b) => b.blocker),\n\t\t\t\t...blocked.map((b) => b.blockee),\n\t\t\t]),\n\t\t];\n\t\t// exclude userID from the blocked_ids\n\t\tconst blocked_id = blocked_ids.filter((id) => id !== userID);\n\t\tconst users = await this.prisma.users.findMany({\n\t\t\twhere: {\n\t\t\t\tAND: [{ user_id: { in: userIDs } }, { user_id: { notIn: blocked_id } }],\n\t\t\t},\n\t\t\tinclude: {\n\t\t\t\tauthentication: true,\n\t\t\t\tfavorite_genres: {\n\t\t\t\t\tinclude: { genre: true },\n\t\t\t\t},\n\t\t\t\tfavorite_songs: {\n\t\t\t\t\tinclude: { song: true },\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\tif (users.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst result: UserDto[] = [];\n\t\tfor (let i = 0, n = users.length; i  genre.genre?.genre)\n\t\t\t\t\t.filter((name): name is string => name !== null),\n\t\t\t};\n\n\t\t\tuser.fav_songs = {\n\t\t\t\tcount: u.favorite_songs.length,\n\t\t\t\tdata: u.favorite_songs.map((song) => ({\n\t\t\t\t\tsongID: song.song.song_id,\n\t\t\t\t\ttitle: song.song.name,\n\t\t\t\t\tartists: song.song.artists,\n\t\t\t\t\tcover: song.song.artwork_url as string,\n\t\t\t\t\tspotify_id: song.song.spotify_id,\n\t\t\t\t\tduration: song.song.duration as number,\n\t\t\t\t})),\n\t\t\t};\n\t\t\tuser.hasSpotifyAccount = u.authentication !== null;\n\n\t\t\tif (fully_qualify) {\n\t\t\t\tconst recent_rooms = this.dbUtils.getActivity(u);\n\t\t\t\tuser.recent_rooms = {\n\t\t\t\t\tcount: recent_rooms.count,\n\t\t\t\t\tdata: recent_rooms.data,\n\t\t\t\t};\n\n\t\t\t\tconst [currentRoom, bookmarkedRooms]: PrismaTypes.room[][] =\n\t\t\t\t\tawait this.prisma.$transaction([\n\t\t\t\t\t\tthis.prisma.room.findMany({\n\t\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\t\tparticipate: {\n\t\t\t\t\t\t\t\t\tsome: {\n\t\t\t\t\t\t\t\t\t\tuser_id: u.user_id,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tthis.prisma.room.findMany({\n\t\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\t\tbookmark: {\n\t\t\t\t\t\t\t\t\tsome: {\n\t\t\t\t\t\t\t\t\t\tuser_id: u.user_id,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}),\n\t\t\t\t\t]);\n\n\t\t\t\tif (currentRoom.length > 0) {\n\t\t\t\t\tuser.current_room_id = currentRoom[0].room_id;\n\t\t\t\t}\n\t\t\t\tuser.fav_rooms = {\n\t\t\t\t\tcount: bookmarkedRooms.length,\n\t\t\t\t\tdata: bookmarkedRooms.map((r) => r.room_id),\n\t\t\t\t};\n\n\t\t\t\tconst followData: {\n\t\t\t\t\tfollowing: UserWithAuth[];\n\t\t\t\t\tfollowers: UserWithAuth[];\n\t\t\t\t} = await this.dbUtils.getUserFollowersAndFollowing(user.userID);\n\n\t\t\t\tfor (let i = 0; i  {\n\t\tif (roomIDs.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\t//\n\t\tlet blocked: PrismaTypes.blocked[] = [];\n\t\tif (userID && userID !== null) {\n\t\t\tblocked = await this.prisma.blocked.findMany({\n\t\t\t\twhere: { OR: [{ blockee: userID }, { blocker: userID }] },\n\t\t\t});\n\t\t}\n\t\t// create a an array of all the blocker and blockee ids and only include unique\n\t\tconst blocked_ids: string[] = [\n\t\t\t...new Set([\n\t\t\t\t...blocked.map((b) => b.blocker),\n\t\t\t\t...blocked.map((b) => b.blockee),\n\t\t\t]),\n\t\t];\n\n\t\t// get private rooms from users who aren't friends with the user then exclude them\n\t\tlet nonFriends: PrismaTypes.friends[] = [];\n\t\tif (userID) {\n\t\t\tnonFriends = await this.prisma.friends.findMany({\n\t\t\t\twhere: {\n\t\t\t\t\tOR: [\n\t\t\t\t\t\t{ friend1: userID, is_pending: false },\n\t\t\t\t\t\t{ friend2: userID, is_pending: false },\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\tconsole.log(\"nonFriends: \" + JSON.stringify(nonFriends));\n\t\tconst friendIDs: string[] = nonFriends.map((f) =>\n\t\t\tf.friend1 === userID ? f.friend2 : f.friend1,\n\t\t);\n\t\tif (userID) {\n\t\t\tfriendIDs.push(userID);\n\t\t}\n\t\t// get private rooms from users who aren't friends with the user then exclude them\n\t\tconst nonFriendPrivateRooms = await this.prisma.private_room.findMany({\n\t\t\twhere: {\n\t\t\t\troom_id: { in: roomIDs },\n\t\t\t}, // include rooms with room_creator not in friendIDs\n\t\t\tinclude: { room: true },\n\t\t});\n\t\t// filter out the private rooms that are not created by friends, then just return the room_id\n\t\tconst nonFriendPrivateRoomIDs = nonFriendPrivateRooms\n\t\t\t.filter((r) => !friendIDs.includes(r.room.room_creator))\n\t\t\t.map((r) => r.room_id);\n\t\t// remove private rooms from the room_ids\n\t\tconst nonPrivateRoomIDs = roomIDs.filter(\n\t\t\t(id) => !nonFriendPrivateRoomIDs.includes(id),\n\t\t);\n\t\t// exclude userID from the blocked_ids\n\t\tconst blocked_id = blocked_ids.filter((id) => id !== userID);\n\t\tconst rooms: FullyQualifiedRoom[] = await this.prisma.room.findMany({\n\t\t\twhere: {\n\t\t\t\tAND: [\n\t\t\t\t\t{ room_id: { in: nonPrivateRoomIDs } },\n\t\t\t\t\t{ room_creator: { notIn: blocked_id } },\n\t\t\t\t],\n\t\t\t},\n\t\t\tinclude: {\n\t\t\t\tchild_room_child_room_parent_room_idToroom: true,\n\t\t\t\tparticipate: true,\n\t\t\t\tprivate_room: true,\n\t\t\t\tpublic_room: true,\n\t\t\t\tscheduled_room: true,\n\t\t\t},\n\t\t});\n\n\t\tconst userIDs: string[] = rooms.map((r) => r.room_creator);\n\t\tconst users: UserWithAuth[] = await this.dbUtils.getUsersWithAuth(userIDs);\n\t\tconst userDtos: UserDto[] = users.map((u) => this.generateBriefUserDto(u));\n\n\t\tconst result: RoomDto[] = [];\n\t\tfor (let i = 0; i  u.userID === r.room_creator);\n\t\t\t\tif (!u || u === null) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\"Weird error. Got users from Rooms table but user (\" +\n\t\t\t\t\t\t\tr.room_creator +\n\t\t\t\t\t\t\t\") not found in Users table\",\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tconst childrenRooms = r.child_room_child_room_parent_room_idToroom.map(\n\t\t\t\t\t(r) => r.room_id,\n\t\t\t\t);\n\t\t\t\tconst sRoom = r.scheduled_room;\n\t\t\t\tconst scheduledRoom = sRoom\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tstart_date: sRoom.start_date || undefined,\n\t\t\t\t\t\t\tend_date: sRoom.end_date || undefined,\n\t\t\t\t\t\t\tis_scheduled: true,\n\t\t\t\t\t  }\n\t\t\t\t\t: { start_date: undefined, end_date: undefined, is_scheduled: false };\n\t\t\t\tconst pRoom = r.private_room;\n\t\t\t\tconst room: RoomDto = {\n\t\t\t\t\tcreator: u || new UserDto(),\n\t\t\t\t\troomID: r.room_id,\n\t\t\t\t\tparticipant_count: r.participate.length,\n\t\t\t\t\troom_name: r.name,\n\t\t\t\t\tdescription: r.description || \"\",\n\t\t\t\t\tis_temporary: r.is_temporary || false,\n\t\t\t\t\tis_private: pRoom !== null,\n\t\t\t\t\tlanguage: r.room_language || \"\",\n\t\t\t\t\thas_explicit_content: r.explicit || false,\n\t\t\t\t\thas_nsfw_content: r.nsfw || false,\n\t\t\t\t\troom_image: r.playlist_photo || \"\",\n\t\t\t\t\ttags: r.tags || [],\n\t\t\t\t\tspotifyPlaylistID: r.playlist_id || \"\",\n\t\t\t\t\tchildrenRoomIDs: childrenRooms,\n\t\t\t\t\tdate_created: r.date_created,\n\t\t\t\t\t...scheduledRoom,\n\t\t\t\t\troom_size: Number(r.room_size) || 50,\n\t\t\t\t};\n\t\t\t\tresult.push(room);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync generateMultipleRoomDtoFromRoom(\n\t\trooms: FullyQualifiedRoom[],\n\t): Promise {\n\t\tif (rooms.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tconst userIDs: string[] = rooms.map((r) => r.room_creator);\n\t\tconst users: UserWithAuth[] = await this.dbUtils.getUsersWithAuth(userIDs);\n\t\tconst userDtos: UserDto[] = users.map((u) => this.generateBriefUserDto(u));\n\n\t\tconst result: RoomDto[] = [];\n\t\tfor (let i = 0; i  u.userID === r.room_creator);\n\t\t\tif (!u) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"Weird error. Got users from Rooms table but user (\" +\n\t\t\t\t\t\tr.room_creator +\n\t\t\t\t\t\t\") not found in Users table\",\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst childrenRooms = r.child_room_child_room_parent_room_idToroom;\n\t\t\tconst scheduledRoom: {\n\t\t\t\tstart_date: Date | undefined;\n\t\t\t\tend_date: Date | undefined;\n\t\t\t\tis_scheduled: boolean;\n\t\t\t} =\n\t\t\t\tr.scheduled_room === null\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tstart_date: undefined,\n\t\t\t\t\t\t\tend_date: undefined,\n\t\t\t\t\t\t\tis_scheduled: false,\n\t\t\t\t\t  }\n\t\t\t\t\t: {\n\t\t\t\t\t\t\tstart_date: r.scheduled_room.start_date || undefined,\n\t\t\t\t\t\t\tend_date: r.scheduled_room.end_date || undefined,\n\t\t\t\t\t\t\tis_scheduled: true,\n\t\t\t\t\t  };\n\t\t\tconst room: RoomDto = {\n\t\t\t\tcreator: u || new UserDto(),\n\t\t\t\troomID: r.room_id,\n\t\t\t\tspotifyPlaylistID: r.playlist_id || \"\",\n\t\t\t\tparticipant_count: r.participate.length,\n\t\t\t\troom_name: r.name,\n\t\t\t\tdescription: r.description || \"\",\n\t\t\t\tis_temporary: r.is_temporary || false,\n\t\t\t\tis_private: r.private_room !== null,\n\t\t\t\t...scheduledRoom,\n\t\t\t\tlanguage: r.room_language || \"\",\n\t\t\t\thas_explicit_content: r.explicit || false,\n\t\t\t\thas_nsfw_content: r.nsfw || false,\n\t\t\t\troom_image: r.playlist_photo || \"\",\n\t\t\t\ttags: r.tags || [],\n\t\t\t\tdate_created: r.date_created,\n\t\t\t\tchildrenRoomIDs: childrenRooms.map((child) => child.room_id),\n\t\t\t\troom_size: Number(r.room_size) || 50,\n\t\t\t};\n\t\t\tresult.push(room);\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync generateLiveChatMessageDto(\n\t\tmessageID: string,\n\t): Promise {\n\t\tconst message:\n\t\t\t| ({\n\t\t\t\t\troom_message: PrismaTypes.room_message | null;\n\t\t\t  } & PrismaTypes.message)\n\t\t\t| null = await this.prisma.message.findUnique({\n\t\t\twhere: { message_id: messageID },\n\t\t\tinclude: { room_message: true },\n\t\t});\n\n\t\tif (message === null || message.room_message === null) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Message with id \" +\n\t\t\t\t\tmessageID +\n\t\t\t\t\t\" does not exist. DTOGenService.generateLiveChatMessageDto():ERROR01\",\n\t\t\t);\n\t\t}\n\n\t\tconst [sender]: UserDto[] = await this.generateMultipleUserDto([\n\t\t\tmessage.sender,\n\t\t]);\n\n\t\tconst result: LiveChatMessageDto = {\n\t\t\tmessageID: messageID,\n\t\t\tmessageBody: message.contents,\n\t\t\tsender: sender,\n\t\t\troomID: message.room_message.room_id,\n\t\t\tdateCreated: message.date_sent,\n\t\t};\n\n\t\treturn result;\n\t}\n\n\tasync generateMultipleLiveChatMessageDto(\n\t\tmessages: PrismaTypes.message[],\n\t): Promise {\n\t\tconst senderIDs: string[] = messages.map((m) => m.sender);\n\t\tconst uniqueSenderIDs: string[] = [...new Set(senderIDs)];\n\t\tconst senders: Map = new Map();\n\t\tconst sendUsers: UserDto[] = await this.generateMultipleUserDto(\n\t\t\tuniqueSenderIDs,\n\t\t);\n\t\tfor (let i = 0; i  m.message_id),\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\tconst result: LiveChatMessageDto[] = [];\n\t\tfor (let i = 0; i  r.message_id === m.message_id);\n\t\t\t\tif (!roomMessage) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\"Weird error. Got messages from Messages table but message (\" +\n\t\t\t\t\t\t\tm.message_id +\n\t\t\t\t\t\t\t\") not found in Room Messages table\",\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst message: LiveChatMessageDto = {\n\t\t\t\t\tmessageID: m.message_id,\n\t\t\t\t\tmessageBody: m.contents,\n\t\t\t\t\tsender: s,\n\t\t\t\t\troomID: roomMessage.room_id,\n\t\t\t\t\tdateCreated: m.date_sent,\n\t\t\t\t};\n\t\t\t\tresult.push(message);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync generateDirectMessageDto(pmID: string): Promise {\n\t\tconst dm:\n\t\t\t| ({ message: PrismaTypes.message } & PrismaTypes.private_message)\n\t\t\t| null = await this.prisma.private_message.findUnique({\n\t\t\twhere: {\n\t\t\t\tp_message_id: pmID,\n\t\t\t},\n\t\t\tinclude: {\n\t\t\t\tmessage: true,\n\t\t\t},\n\t\t});\n\t\tconsole.log(\"dm: \" + JSON.stringify(dm));\n\n\t\tif (dm === null) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Message with id \" +\n\t\t\t\t\tpmID +\n\t\t\t\t\t\" does not exist. DTOGenService.generateDirectMessageDto():ERROR01\",\n\t\t\t);\n\t\t}\n\n\t\tconst [sender, recipient]: UserDto[] = await this.generateMultipleUserDto([\n\t\t\tdm.message.sender,\n\t\t\tdm.recipient,\n\t\t]);\n\t\tconst index: number = await this.dbUtils.getDMIndex(\n\t\t\tsender.userID,\n\t\t\trecipient.userID,\n\t\t\tpmID,\n\t\t);\n\n\t\tconst result: DirectMessageDto = {\n\t\t\tindex: index,\n\t\t\tmessageBody: dm.message.contents,\n\t\t\tsender: sender,\n\t\t\trecipient: recipient,\n\t\t\tdateSent: dm.message.date_sent,\n\t\t\tdateRead: new Date(0),\n\t\t\tisRead: false,\n\t\t\tpID: dm.p_message_id,\n\t\t\tbodyIsRoomID: this.messageBodyIsRoomID(dm.message.contents),\n\t\t};\n\t\tconsole.log(\"result: \" + JSON.stringify(result));\n\t\treturn result;\n\t}\n\n\tasync getChatAsDirectMessageDto(\n\t\tparticipant1: string,\n\t\tparticipant2: string,\n\t\tunreadOnly = false,\n\t): Promise {\n\t\t/*\n\t\tconst user1: UserDto = await this.generateUserDto(participant1);\n\t\tconst user2: UserDto = await this.generateUserDto(participant2);\n\t\t*/\n\t\tconst { user1, user2 }: { user1: UserDto; user2: UserDto } =\n\t\t\tawait this.generateMultipleUserDto([participant1, participant2]).then(\n\t\t\t\t(users) => {\n\t\t\t\t\tif (users.length !== 2) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\"An unexpected error occurred in the database. Could not fetch users. DTOGenService.getChatAsDirectMessageDto():ERROR01\",\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\tusers[0].userID === participant1 &&\n\t\t\t\t\t\tusers[1].userID === participant2\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn { user1: users[0], user2: users[1] };\n\t\t\t\t\t} else if (\n\t\t\t\t\t\tusers[0].userID === participant2 &&\n\t\t\t\t\t\tusers[1].userID === participant1\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn { user1: users[1], user2: users[0] };\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\"An unexpected error occurred in the database. Could not fetch users. DTOGenService.getChatAsDirectMessageDto():ERROR03\",\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\n\t\tconst dms: ({\n\t\t\tmessage: PrismaTypes.message;\n\t\t} & PrismaTypes.private_message)[] =\n\t\t\tawait this.prisma.private_message.findMany({\n\t\t\t\twhere: {\n\t\t\t\t\tOR: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tAND: [\n\t\t\t\t\t\t\t\t{ message: { sender: user1.userID } },\n\t\t\t\t\t\t\t\t{ recipient: user2.userID },\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tAND: [\n\t\t\t\t\t\t\t\t{ message: { sender: user2.userID } },\n\t\t\t\t\t\t\t\t{ recipient: user1.userID },\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\tinclude: {\n\t\t\t\t\tmessage: true,\n\t\t\t\t},\n\t\t\t});\n\t\tconsole.log(\n\t\t\t\" direct messages between \" + user1.username + \" and \" + user2.username,\n\t\t);\n\t\tconsole.log(dms);\n\n\t\tif (dms.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\t//filter unread messages\n\t\tif (unreadOnly) {\n\t\t\t//a future feature\n\t\t}\n\n\t\t//sort messages by date\n\t\tdms.sort((a, b) => {\n\t\t\treturn a.message.date_sent.getTime() - b.message.date_sent.getTime();\n\t\t});\n\n\t\tconst result: DirectMessageDto[] = [];\n\t\tfor (let i = 0; i  {\n\t\tconst result: DirectMessageDto[] = [];\n\n\t\tlet uniqueUserIDs: string[] = [\n\t\t\t...new Set(dms.map((dm) => dm.message.sender)),\n\t\t];\n\t\tuniqueUserIDs = [\n\t\t\t...uniqueUserIDs,\n\t\t\t...new Set(dms.map((dm) => dm.recipient)),\n\t\t];\n\t\tconst users: UserDto[] = await this.generateMultipleUserDto(\n\t\t\tuniqueUserIDs,\n\t\t\tundefined,\n\t\t);\n\n\t\tfor (let i = 0; i  u.userID === dm.message.sender,\n\t\t\t);\n\t\t\tconst recipient: UserDto | undefined = users.find(\n\t\t\t\t(u) => u.userID === dm.recipient,\n\t\t\t);\n\t\t\tif (!sender || !recipient) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"Weird error. Got messages from DMs table but user not found in Users table\",\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst message: DirectMessageDto = {\n\t\t\t\tindex: i,\n\t\t\t\tmessageBody: dm.message.contents,\n\t\t\t\tsender: sender,\n\t\t\t\trecipient: recipient,\n\t\t\t\tdateSent: dm.message.date_sent,\n\t\t\t\tdateRead: new Date(0),\n\t\t\t\tisRead: false,\n\t\t\t\tpID: dm.p_message_id,\n\t\t\t\tbodyIsRoomID: this.messageBodyIsRoomID(dm.message.contents),\n\t\t\t};\n\t\t\tresult.push(message);\n\t\t}\n\t\treturn result;\n\t}\n\n\tmessageBodyIsRoomID(messageBody: string): boolean {\n\t\t// format: ##uuidv4##\n\t\tconst regexPattern = /^##(.+?)##$/;\n\t\tconst match = messageBody.match(regexPattern);\n\n\t\t// if there's a match and the captured group (the content between ##) is a valid UUID, return true\n\t\tif (match && validator.isUUID(match[1])) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Emoji.html":{"url":"interfaces/Emoji.html","title":"interface - Emoji","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Emoji\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/live/dto/emojireaction.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            category\n                                        \n                                \n                                \n                                        \n                                            emoji\n                                        \n                                \n                                \n                                        \n                                            keywords\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            order\n                                        \n                                \n                                \n                                        \n                                            unified\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        emoji\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        emoji:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        keywords\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        keywords:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        order\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        order:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unified\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        unified:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsDate } from \"class-validator\";\n\n//for Emoji and Category, see: https://github.com/woodybury/rn-emoji-picker\nexport interface Emoji {\n\tcategory: string;\n\tkeywords: string[];\n\tname: string;\n\torder: number;\n\tunified: string;\n\temoji: string;\n}\n\nexport interface Category {\n\tkey: string;\n\tname: string;\n\temoji?: string;\n}\n\nexport class EmojiReactionDto {\n\t@ApiProperty({\n\t\tdescription: \"The date the emoji was sent\",\n\t})\n\t@IsDate()\n\tdate_created: Date;\n\n\t@ApiProperty({\n\t\tdescription: \"The message body\",\n\t})\n\t@IsString()\n\tbody: string;\n\n\t@ApiProperty({\n\t\tdescription: \"The user that used the emoji\",\n\t})\n\t@IsString()\n\tuserID: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmojiReactionDto.html":{"url":"classes/EmojiReactionDto.html","title":"class - EmojiReactionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmojiReactionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/live/dto/emojireaction.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                body\n                            \n                            \n                                    \n                                    \n                                date_created\n                            \n                            \n                                    \n                                    \n                                userID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The message body'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/live/dto/emojireaction.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        date_created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The date the emoji was sent'})@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/live/dto/emojireaction.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The user that used the emoji'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/live/dto/emojireaction.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsDate } from \"class-validator\";\n\n//for Emoji and Category, see: https://github.com/woodybury/rn-emoji-picker\nexport interface Emoji {\n\tcategory: string;\n\tkeywords: string[];\n\tname: string;\n\torder: number;\n\tunified: string;\n\temoji: string;\n}\n\nexport interface Category {\n\tkey: string;\n\tname: string;\n\temoji?: string;\n}\n\nexport class EmojiReactionDto {\n\t@ApiProperty({\n\t\tdescription: \"The date the emoji was sent\",\n\t})\n\t@IsDate()\n\tdate_created: Date;\n\n\t@ApiProperty({\n\t\tdescription: \"The message body\",\n\t})\n\t@IsString()\n\tbody: string;\n\n\t@ApiProperty({\n\t\tdescription: \"The user that used the emoji\",\n\t})\n\t@IsString()\n\tuserID: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EventQueueService.html":{"url":"injectables/EventQueueService.html","title":"injectable - EventQueueService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EventQueueService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/live/eventqueue/eventqueue.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                    Readonly\n                                queue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addToQueue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/live/eventqueue/eventqueue.service.ts:13\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addToQueue\n                        \n                    \n                \n            \n            \n                \naddToQueue(event: string, task: TaskFunction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/live/eventqueue/eventqueue.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                task\n                                            \n                                                            TaskFunction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(EventQueueService.name)\n                    \n                \n                    \n                        \n                                Defined in src/live/eventqueue/eventqueue.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        queue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         async.QueueObject\n\n                    \n                \n                    \n                        \n                                Defined in src/live/eventqueue/eventqueue.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from \"@nestjs/common\";\nimport * as async from \"async\";\n\nconst GLOBAL_CONCURRENCY = 1; //1 concurrent tasks at a time\n// const FIFO_CONCURRENCY = 1; // Concurrency set to 1 would ensure FIFO processing for all tasks in queue\n\n//custom type for task function (because it's more type-safe than the default 'Function')\nexport type TaskFunction = () => Promise;\n\n@Injectable()\nexport class EventQueueService {\n\tprivate readonly queue: async.QueueObject;\n\tprivate readonly logger = new Logger(EventQueueService.name);\n\n\tconstructor() {\n\t\tthis.queue = async.queue(async (task: TaskFunction) => {\n\t\t\ttry {\n\t\t\t\tawait task();\n\t\t\t} catch (error) {\n\t\t\t\tthis.logger.error(`Task failed: ${error}`);\n\t\t\t}\n\t\t}, GLOBAL_CONCURRENCY);\n\n\t\tthis.queue.error((error, task) => {\n\t\t\tthis.logger.error(`Task encountered an error: ${error}`, task.toString());\n\t\t});\n\n\t\tthis.queue.drain(() => {\n\t\t\tthis.logger.log(\"All tasks have been processed.\");\n\t\t});\n\t}\n\n\taddToQueue(event: string, task: TaskFunction): void {\n\t\tthis.queue.push(task, (err) => {\n\t\t\tif (err) {\n\t\t\t\tthis.logger.error(`Error executing task: ${err}`);\n\t\t\t} else {\n\t\t\t\tthis.logger.log(\"Task completed successfully.\");\n\t\t\t}\n\t\t});\n\t\tthis.logger.log(`Task '${event}' added to the queue.`);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FollowersAndFollowing.html":{"url":"classes/FollowersAndFollowing.html","title":"class - FollowersAndFollowing","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FollowersAndFollowing\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                count\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: () => UserDto, isArray: true})@IsArray()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/user.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport {\n\tIsString,\n\tValidateNested,\n\tIsObject,\n\tIsNumber,\n\tIsArray,\n\tIsBoolean,\n} from \"class-validator\";\nimport { SongInfoDto } from \"../../rooms/dto/songinfo.dto\";\nimport { Type } from \"class-transformer\";\n\nexport class FollowersAndFollowing {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({ type: () => UserDto, isArray: true })\n\t@IsArray()\n\t@ValidateNested()\n\t@Type(() => UserDto)\n\tdata: UserDto[];\n}\n\nexport class RoomsData {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t/*\n\t@ApiProperty({ type: () => RoomDto, isArray: true })\n\t@IsArray()\n\t@ValidateNested()\n\t@Type(() => RoomDto)\n\tdata: RoomDto[];\n\t*/\n\t@ApiProperty({ type: String, isArray: true })\n\t@IsArray()\n\t@IsString({ each: true })\n\tdata: string[];\n}\n\nexport class SongInfosWithCount {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({ type: () => SongInfoDto, isArray: true })\n\t@IsArray()\n\t@ValidateNested()\n\t@Type(() => SongInfoDto)\n\tdata: SongInfoDto[];\n}\n\nexport class LinksWithCount {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({\n\t\ttype: \"object\",\n\t\tadditionalProperties: {\n\t\t\ttype: \"array\",\n\t\t\titems: { type: \"string\" },\n\t\t},\n\t})\n\t@IsObject()\n\tdata: Record;\n}\n\nexport class GenresWithCount {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({ type: String, isArray: true })\n\t@IsArray()\n\t@IsString({ each: true })\n\tdata: string[];\n}\n\nexport class UserFriendship {\n\t@ApiProperty()\n\t@IsBoolean()\n\tstatus: boolean;\n\n\t@ApiProperty()\n\t@IsString()\n\taccept_url: string;\n\n\t@ApiProperty()\n\t@IsString()\n\treject_url: string;\n}\n\nexport class UserDto {\n\t@ApiProperty()\n\t@IsString()\n\tprofile_name: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tuserID: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tusername: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tprofile_picture_url: string;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's followers\",\n\t\ttitle: \"FollowersAndFollowing\",\n\t\ttype: FollowersAndFollowing,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => FollowersAndFollowing)\n\tfollowers: FollowersAndFollowing;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's following\",\n\t\ttitle: \"FollowersAndFollowing\",\n\t\ttype: FollowersAndFollowing,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => FollowersAndFollowing)\n\tfollowing: FollowersAndFollowing;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's links\",\n\t\ttype: LinksWithCount,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => LinksWithCount)\n\tlinks: LinksWithCount;\n\n\t@ApiPropertyOptional()\n\t@IsString()\n\tbio: string;\n\n\t@ApiPropertyOptional({\n\t\tdescription: \"The current song the user is listening to, if applicable\",\n\t\ttype: SongInfoDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => SongInfoDto)\n\tcurrent_song?: SongInfoDto;\n\n\t@ApiPropertyOptional({\n\t\tdescription:\n\t\t\t\"The roomID of the room that the user is currently in, if applicable\",\n\t})\n\t@IsString()\n\t@ValidateNested()\n\tcurrent_room_id?: string;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's favorite genres\",\n\t\ttype: GenresWithCount,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => GenresWithCount)\n\tfav_genres: GenresWithCount;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's favorite songs\",\n\t\ttype: SongInfosWithCount,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => SongInfosWithCount)\n\tfav_songs: SongInfosWithCount;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's favorite rooms\",\n\t\ttype: RoomsData,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomsData)\n\tfav_rooms: RoomsData;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's recent rooms\",\n\t\ttype: RoomsData,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomsData)\n\trecent_rooms: RoomsData;\n\n\t@ApiProperty()\n\t@IsBoolean()\n\thasSpotifyAccount: boolean;\n\n\t@ApiPropertyOptional({\n\t\tdescription:\n\t\t\t\"The relationship status between the current user and the user in question\",\n\t\ttype: String,\n\t})\n\t@Type(() => String)\n\t@IsString()\n\trelationship?:\n\t\t| \"following\"\n\t\t| \"follower\"\n\t\t| \"mutual\"\n\t\t| \"friend\"\n\t\t| \"pending\"\n\t\t| \"none\"\n\t\t| \"blocked\";\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GenresController.html":{"url":"controllers/GenresController.html","title":"controller - GenresController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GenresController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/genres/genres.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                genres\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAllGenres\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getAllGenres\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllGenres()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({description: 'List of all genres', type: String, isArray: true})@ApiBadRequestResponse({description: 'Something went wrong while fetching genres', type: String})@ApiOperation({summary: 'Get all genres', description: 'Returns a list of all genres'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/genres/genres.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport { GenresService } from \"./genres.service\";\nimport {\n\tApiBadRequestResponse,\n\tApiOkResponse,\n\tApiOperation,\n\tApiTags,\n} from \"@nestjs/swagger\";\n\n@Controller(\"genres\")\n@ApiTags(\"genres\")\nexport class GenresController {\n\tconstructor(private readonly genresService: GenresService) {}\n\n\t@Get()\n\t@ApiOkResponse({\n\t\tdescription: \"List of all genres\",\n\t\ttype: String,\n\t\tisArray: true,\n\t})\n\t@ApiBadRequestResponse({\n\t\tdescription: \"Something went wrong while fetching genres\",\n\t\ttype: String,\n\t})\n\t@ApiOperation({\n\t\tsummary: \"Get all genres\",\n\t\tdescription: \"Returns a list of all genres\",\n\t})\n\tasync getAllGenres(): Promise {\n\t\treturn await this.genresService.getAllGenres();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GenresModule.html":{"url":"modules/GenresModule.html","title":"module - GenresModule","body":"\n                   \n\n\n\n\n    Modules\n    GenresModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GenresModule\n\n\n\ncluster_GenresModule_imports\n\n\n\ncluster_GenresModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nGenresModule\n\nGenresModule\n\nGenresModule -->\n\nPrismaModule->GenresModule\n\n\n\n\n\nGenresService\n\nGenresService\n\nGenresModule -->\n\nGenresService->GenresModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/genres/genres.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GenresService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GenresController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { GenresService } from \"./genres.service\";\nimport { GenresController } from \"./genres.controller\";\nimport { PrismaModule } from \"../../../prisma/prisma.module\";\n\n@Module({\n\timports: [PrismaModule],\n\tproviders: [GenresService],\n\tcontrollers: [GenresController],\n})\nexport class GenresModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GenresService.html":{"url":"injectables/GenresService.html","title":"injectable - GenresService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GenresService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/genres/genres.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAllGenres\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/genres/genres.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllGenres\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllGenres()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/genres/genres.service.ts:8\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\n\n@Injectable()\nexport class GenresService {\n\tconstructor(private readonly prisma: PrismaService) {}\n\n\tasync getAllGenres(): Promise {\n\t\tconst search = await this.prisma.genre.findMany();\n\t\tconst genres_only: (string | null)[] = search.map((genre) => genre.genre);\n\t\tconst result: string[] = [];\n\t\tfor (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GenresWithCount.html":{"url":"classes/GenresWithCount.html","title":"class - GenresWithCount","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GenresWithCount\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                count\n                            \n                            \n                                    \n                                    \n                                    \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/user.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, isArray: true})@IsArray()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/user.dto.ts:79\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport {\n\tIsString,\n\tValidateNested,\n\tIsObject,\n\tIsNumber,\n\tIsArray,\n\tIsBoolean,\n} from \"class-validator\";\nimport { SongInfoDto } from \"../../rooms/dto/songinfo.dto\";\nimport { Type } from \"class-transformer\";\n\nexport class FollowersAndFollowing {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({ type: () => UserDto, isArray: true })\n\t@IsArray()\n\t@ValidateNested()\n\t@Type(() => UserDto)\n\tdata: UserDto[];\n}\n\nexport class RoomsData {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t/*\n\t@ApiProperty({ type: () => RoomDto, isArray: true })\n\t@IsArray()\n\t@ValidateNested()\n\t@Type(() => RoomDto)\n\tdata: RoomDto[];\n\t*/\n\t@ApiProperty({ type: String, isArray: true })\n\t@IsArray()\n\t@IsString({ each: true })\n\tdata: string[];\n}\n\nexport class SongInfosWithCount {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({ type: () => SongInfoDto, isArray: true })\n\t@IsArray()\n\t@ValidateNested()\n\t@Type(() => SongInfoDto)\n\tdata: SongInfoDto[];\n}\n\nexport class LinksWithCount {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({\n\t\ttype: \"object\",\n\t\tadditionalProperties: {\n\t\t\ttype: \"array\",\n\t\t\titems: { type: \"string\" },\n\t\t},\n\t})\n\t@IsObject()\n\tdata: Record;\n}\n\nexport class GenresWithCount {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({ type: String, isArray: true })\n\t@IsArray()\n\t@IsString({ each: true })\n\tdata: string[];\n}\n\nexport class UserFriendship {\n\t@ApiProperty()\n\t@IsBoolean()\n\tstatus: boolean;\n\n\t@ApiProperty()\n\t@IsString()\n\taccept_url: string;\n\n\t@ApiProperty()\n\t@IsString()\n\treject_url: string;\n}\n\nexport class UserDto {\n\t@ApiProperty()\n\t@IsString()\n\tprofile_name: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tuserID: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tusername: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tprofile_picture_url: string;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's followers\",\n\t\ttitle: \"FollowersAndFollowing\",\n\t\ttype: FollowersAndFollowing,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => FollowersAndFollowing)\n\tfollowers: FollowersAndFollowing;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's following\",\n\t\ttitle: \"FollowersAndFollowing\",\n\t\ttype: FollowersAndFollowing,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => FollowersAndFollowing)\n\tfollowing: FollowersAndFollowing;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's links\",\n\t\ttype: LinksWithCount,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => LinksWithCount)\n\tlinks: LinksWithCount;\n\n\t@ApiPropertyOptional()\n\t@IsString()\n\tbio: string;\n\n\t@ApiPropertyOptional({\n\t\tdescription: \"The current song the user is listening to, if applicable\",\n\t\ttype: SongInfoDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => SongInfoDto)\n\tcurrent_song?: SongInfoDto;\n\n\t@ApiPropertyOptional({\n\t\tdescription:\n\t\t\t\"The roomID of the room that the user is currently in, if applicable\",\n\t})\n\t@IsString()\n\t@ValidateNested()\n\tcurrent_room_id?: string;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's favorite genres\",\n\t\ttype: GenresWithCount,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => GenresWithCount)\n\tfav_genres: GenresWithCount;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's favorite songs\",\n\t\ttype: SongInfosWithCount,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => SongInfosWithCount)\n\tfav_songs: SongInfosWithCount;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's favorite rooms\",\n\t\ttype: RoomsData,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomsData)\n\tfav_rooms: RoomsData;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's recent rooms\",\n\t\ttype: RoomsData,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomsData)\n\trecent_rooms: RoomsData;\n\n\t@ApiProperty()\n\t@IsBoolean()\n\thasSpotifyAccount: boolean;\n\n\t@ApiPropertyOptional({\n\t\tdescription:\n\t\t\t\"The relationship status between the current user and the user in question\",\n\t\ttype: String,\n\t})\n\t@Type(() => String)\n\t@IsString()\n\trelationship?:\n\t\t| \"following\"\n\t\t| \"follower\"\n\t\t| \"mutual\"\n\t\t| \"friend\"\n\t\t| \"pending\"\n\t\t| \"none\"\n\t\t| \"blocked\";\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ImageModule.html":{"url":"modules/ImageModule.html","title":"module - ImageModule","body":"\n                   \n\n\n\n\n    Modules\n    ImageModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ImageModule\n\n\n\ncluster_ImageModule_providers\n\n\n\ncluster_ImageModule_exports\n\n\n\n\nImageService \n\nImageService \n\n\n\nImageModule\n\nImageModule\n\nImageService  -->\n\nImageModule->ImageService \n\n\n\n\n\nImageService\n\nImageService\n\nImageModule -->\n\nImageService->ImageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/image/image.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ImageService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ImageService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ImageService } from \"./image.service\";\n\n@Module({\n\tproviders: [ImageService],\n\texports: [ImageService],\n})\nexport class ImageModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ImageService.html":{"url":"injectables/ImageService.html","title":"injectable - ImageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ImageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/image/image.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                compressImage\n                            \n                            \n                                imageToB64\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        compressImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    compressImage(imageBuffer: Buffer, maxSize: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/image/image.service.ts:12\n                        \n                    \n\n\n            \n                \n                        Process the image by converting it to JPEG format and compressing it\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                imageBuffer\n                                            \n                                                        Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The image buffer to process\n\n                                            \n                                        \n                                        \n                                                maxSize\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The maximum size of the image in bytes\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The processed image buffer\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        imageToB64\n                        \n                    \n                \n            \n            \n                \nimageToB64(imageBuffer: Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/image/image.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Process the image by converting it to base64 format\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                imageBuffer\n                                            \n                                                        Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The image buffer to process\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The processed image in base64 format\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport sharp from \"sharp\";\n\n@Injectable()\nexport class ImageService {\n\t/**\n\t * Process the image by converting it to JPEG format and compressing it\n\t * @param imageBuffer The image buffer to process\n\t * @param maxSize The maximum size of the image in bytes\n\t * @returns The processed image buffer\n\t */\n\tasync compressImage(imageBuffer: Buffer, maxSize: number): Promise {\n\t\tif (imageBuffer.length  0; i -= 10) {\n\t\t\t// Convert and compress the image\n\t\t\tprocessedImageBuffer = await sharp(imageBuffer)\n\t\t\t\t.toFormat(\"jpeg\") // Convert to JPEG or PNG\n\t\t\t\t.jpeg({ quality: i }) // Compress JPEG, adjust the quality if necessary\n\t\t\t\t.toBuffer();\n\n\t\t\t// Check if the processed image exceeds 256KB\n\t\t\tif (processedImageBuffer.length  maxSize) {\n\t\t\tthrow new Error(\"Image is too large\");\n\t\t}\n\t\treturn processedImageBuffer;\n\t}\n\n\t/**\n\t * Process the image by converting it to base64 format\n\t * @param imageBuffer The image buffer to process\n\t * @returns The processed image in base64 format\n\t */\n\timageToB64(imageBuffer: Buffer): string {\n\t\treturn imageBuffer.toString(\"base64\");\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InternalError.html":{"url":"classes/InternalError.html","title":"class - InternalError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InternalError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/internal-error.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/internal-error.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class InternalError extends Error {\n\tconstructor(message: string) {\n\t\tsuper(message);\n\t\tthis.name = \"InternalError\";\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JoinsCount.html":{"url":"classes/JoinsCount.html","title":"class - JoinsCount","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JoinsCount\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/dto/roomanalytics.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                count\n                            \n                            \n                                    \n                                day\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:136\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        day\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Date})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:139\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n\tIsArray,\n\tIsDate,\n\tIsNumber,\n\tIsObject,\n\tIsString,\n\tValidateNested,\n} from \"class-validator\";\nimport { UserDto } from \"../../users/dto/user.dto\";\nimport { Type } from \"class-transformer\";\nexport class RoomAnalyticsKeyMetricsDto {\n\t// an object called unique visitors with two properties, count and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"UniqueVisitors\",\n\t\tdescription: \"Unique visitors to the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tcount: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tunique_visitors: {\n\t\tcount: number;\n\t\tpercentage_change: number;\n\t};\n\n\t// an object called returning_visitors with two properties, count and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"ReturningVisitors\",\n\t\tdescription: \"Returning visitors to the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tcount: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\treturning_visitors: {\n\t\tcount: number;\n\t\tpercentage_change: number;\n\t};\n\n\t// an object called average_session_duration with two properties, duration and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"AverageSessionDuration\",\n\t\tdescription: \"Average session duration in the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tduration: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\taverage_session_duration: {\n\t\tduration: number;\n\t\tpercentage_change: number;\n\t};\n}\n\nexport class RoomAnalyticsQueueDto {\n\t@ApiProperty({ description: \"Total number of songs ever queued in the room\" })\n\t@IsNumber()\n\ttotal_songs_queued: number;\n\n\t@ApiProperty({\n\t\tdescription: \"Number of times the room's queue was exported as a playlist\",\n\t})\n\t@IsNumber()\n\ttotal_queue_exports: number;\n}\n\nexport class ParticipantsPerHourDto {\n\t@ApiProperty({\n\t\tdescription: \"The number of participants in the room at the given hour\",\n\t})\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The specific hour for participant count\",\n\t\ttype: Date,\n\t})\n\t@IsDate()\n\tinstance: Date;\n}\n\nexport class AllTimeSessionDataDto {\n\t@ApiProperty({\n\t\tdescription: \"The average session duration of the room\",\n\t})\n\t@IsNumber()\n\tavg_duration: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The minimum session duration of the room\",\n\t})\n\t@IsNumber()\n\tmin_duration: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The maximum session duration of the room\",\n\t})\n\t@IsNumber()\n\tmax_duration: number;\n}\n\nexport class SessionDurationPerDayDto {\n\t@ApiProperty({ type: \"number\" })\n\tduration: number;\n\n\t@ApiProperty({ type: Date })\n\tday: Date;\n}\n\nexport class SessionDataPerDayDto {\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tavg_duration: SessionDurationPerDayDto[];\n\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tmin_duration: SessionDurationPerDayDto[];\n\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tmax_duration: SessionDurationPerDayDto[];\n}\n\nexport class JoinsCount {\n\t@ApiProperty({ type: \"number\" })\n\tcount: number;\n\n\t@ApiProperty({ type: Date })\n\tday: Date;\n}\n\nexport class JoinsPerDay {\n\ttotal_joins: JoinsCount[];\n\tunique_joins: JoinsCount[];\n}\n\nexport class RoomAnalyticsParticipationDto {\n\t@ApiProperty({\n\t\ttitle: \"Joins\",\n\t\tdescription:\n\t\t\t\"Join statistics, including total and unique joins per day and all-time\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tper_day: {\n\t\t\t\ttitle: \"JoinsPerDay\",\n\t\t\t\ttype: \"object\",\n\t\t\t},\n\t\t\tall_time: {\n\t\t\t\ttitle: \"JoinsAllTime\",\n\t\t\t\ttype: \"object\",\n\t\t\t\tproperties: {\n\t\t\t\t\ttotal_joins: { type: \"number\" },\n\t\t\t\t\tunique_joins: { type: \"number\" },\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tjoins: {\n\t\tper_day: JoinsPerDay;\n\t\tall_time: {\n\t\t\ttotal_joins: number;\n\t\t\tunique_joins: number;\n\t\t};\n\t};\n\n\t@ApiProperty({\n\t\tdescription: \"Participants per hour data\",\n\t\ttype: ParticipantsPerHourDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => ParticipantsPerHourDto)\n\tparticipants_per_hour: ParticipantsPerHourDto[];\n\n\t@ApiProperty({\n\t\ttitle: \"SessionData\",\n\t\tdescription:\n\t\t\t\"Session data including average, minimum, and maximum duration all-time and per day\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tall_time: {\n\t\t\t\ttype: \"object\",\n\t\t\t\ttitle: \"AllTimeSessionDataDto\",\n\t\t\t},\n\t\t\tper_day: {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: {\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\ttitle: \"SessionDurationPerDayDto\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tsession_data: {\n\t\tall_time: AllTimeSessionDataDto;\n\t\tper_day: SessionDurationPerDayDto[];\n\t};\n\n\t@ApiProperty({\n\t\ttitle: \"ReturnVisits\",\n\t\tdescription: \"Expected return visits and probability of return\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\texpected_return_count: { type: \"number\" },\n\t\t\tprobability_of_return: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\treturn_visits: {\n\t\texpected_return_count: number;\n\t\tprobability_of_return: number;\n\t};\n\n\t@ApiProperty({\n\t\tdescription: \"Number of previews of the room, i.e. without joining\",\n\t})\n\t@IsNumber()\n\troom_previews: number;\n}\n\nexport class MessagesPerHour {\n\t@ApiProperty({ type: \"number\" })\n\tcount: number;\n\n\t@ApiProperty({ type: Date })\n\thour: Date;\n}\n\nexport class RoomAnalyticsInteractionsDto {\n\t@ApiProperty({\n\t\ttitle: \"Messages\",\n\t\tdescription: \"Total messages sent and messages sent per hour\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\ttotal: { type: \"number\" },\n\t\t\tper_hour: {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: {\n\t\t\t\t\ttitle: \"MessagesPerHour\",\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tmessages: {\n\t\ttotal: number;\n\t\tper_hour: MessagesPerHour[];\n\t};\n\n\t@ApiProperty({ description: \"Total number of reactions sent in the room\" })\n\t@IsNumber()\n\treactions_sent: number;\n\n\t@ApiProperty({ description: \"Number of times the room was bookmarked\" })\n\t@IsNumber()\n\tbookmarked_count: number;\n}\n\nexport class SongAnalyticsDto {\n\t@ApiProperty({ description: \"Spotify ID of the song\" })\n\t@IsString()\n\tspotify_id: string;\n\n\t@ApiProperty({ description: \"Internal song ID\" })\n\tsong_id: string;\n\n\t@ApiProperty({ description: \"Number of times the song was played\" })\n\t@IsNumber()\n\tplays: number;\n\n\t@ApiProperty({ description: \"Number of upvotes the song received\" })\n\t@IsNumber()\n\tupvotes: number;\n\n\t@ApiProperty({ description: \"Number of downvotes the song received\" })\n\t@IsNumber()\n\tdownvotes: number;\n\n\t@ApiProperty({ description: \"Rank of the song based on some criteria\" })\n\t@IsNumber()\n\trank: number;\n\n\t@ApiProperty({ description: \"Global rank of the song across all rooms\" })\n\t@IsNumber()\n\tglobal_rank: number;\n}\n\nexport class RoomAnalyticsVotesDto {\n\t@ApiProperty({ description: \"Total number of upvotes for songs in the room\" })\n\t@IsNumber()\n\ttotal_upvotes: number;\n\n\t@ApiProperty({\n\t\tdescription: \"Total number of downvotes for songs in the room\",\n\t})\n\t@IsNumber()\n\ttotal_downvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Daily percentage change in upvotes for songs in the room. (last 24 hours)\",\n\t})\n\t@IsNumber()\n\tdaily_percentage_change_in_upvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Daily percentage change in downvotes for songs in the room. (last 24 hours)\",\n\t})\n\t@IsNumber()\n\tdaily_percentage_change_in_downvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Details of songs including Spotify ID, song ID, upvotes, and downvotes\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\tsongs: SongAnalyticsDto[];\n}\n\nexport class RoomAnalyticsSongsDto {\n\t@ApiProperty({\n\t\ttitle: \"MostPlayed\",\n\t\tdescription: \"Most played songs in the room\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\tmost_played: SongAnalyticsDto[];\n\n\t@ApiProperty({\n\t\tdescription: \"Top voted songs in the room\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\ttop_voted: SongAnalyticsDto[];\n}\n\nexport class RoomAnalyticsContributorsDto {\n\t@ApiProperty({\n\t\ttitle: \"TopContributors\",\n\t\tdescription: \"Top contributors to the room's queue\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tuser: { title: \"UserDto\", type: \"object\" },\n\t\t\trank: { type: \"number\" },\n\t\t\tnum_songs: { type: \"number\" },\n\t\t\tnum_upvotes: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\ttop_contributors: {\n\t\tuser: UserDto;\n\t\trank: number;\n\t\tnum_songs: number;\n\t\tnum_upvotes: number;\n\t};\n}\n\nexport class RoomAnalyticsDto {\n\t@ApiProperty({ description: \"Queue analytics\", type: RoomAnalyticsQueueDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsQueueDto)\n\tqueue: RoomAnalyticsQueueDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Participation analytics\",\n\t\ttype: RoomAnalyticsParticipationDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsParticipationDto)\n\tparticipation: RoomAnalyticsParticipationDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Interactions analytics\",\n\t\ttype: RoomAnalyticsInteractionsDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsInteractionsDto)\n\tinteractions: RoomAnalyticsInteractionsDto;\n\n\t@ApiProperty({ description: \"Votes analytics\", type: RoomAnalyticsVotesDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsVotesDto)\n\tvotes: RoomAnalyticsVotesDto;\n\n\t@ApiProperty({ description: \"Songs analytics\", type: RoomAnalyticsSongsDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsSongsDto)\n\tsongs: RoomAnalyticsSongsDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Contributors analytics\",\n\t\ttype: RoomAnalyticsContributorsDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsContributorsDto)\n\tcontributors: RoomAnalyticsContributorsDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JoinsPerDay.html":{"url":"classes/JoinsPerDay.html","title":"class - JoinsPerDay","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JoinsPerDay\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/dto/roomanalytics.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                total_joins\n                            \n                            \n                                unique_joins\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        total_joins\n                        \n                    \n                \n            \n                \n                    \n                        Type :         JoinsCount[]\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:143\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unique_joins\n                        \n                    \n                \n            \n                \n                    \n                        Type :         JoinsCount[]\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:144\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n\tIsArray,\n\tIsDate,\n\tIsNumber,\n\tIsObject,\n\tIsString,\n\tValidateNested,\n} from \"class-validator\";\nimport { UserDto } from \"../../users/dto/user.dto\";\nimport { Type } from \"class-transformer\";\nexport class RoomAnalyticsKeyMetricsDto {\n\t// an object called unique visitors with two properties, count and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"UniqueVisitors\",\n\t\tdescription: \"Unique visitors to the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tcount: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tunique_visitors: {\n\t\tcount: number;\n\t\tpercentage_change: number;\n\t};\n\n\t// an object called returning_visitors with two properties, count and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"ReturningVisitors\",\n\t\tdescription: \"Returning visitors to the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tcount: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\treturning_visitors: {\n\t\tcount: number;\n\t\tpercentage_change: number;\n\t};\n\n\t// an object called average_session_duration with two properties, duration and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"AverageSessionDuration\",\n\t\tdescription: \"Average session duration in the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tduration: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\taverage_session_duration: {\n\t\tduration: number;\n\t\tpercentage_change: number;\n\t};\n}\n\nexport class RoomAnalyticsQueueDto {\n\t@ApiProperty({ description: \"Total number of songs ever queued in the room\" })\n\t@IsNumber()\n\ttotal_songs_queued: number;\n\n\t@ApiProperty({\n\t\tdescription: \"Number of times the room's queue was exported as a playlist\",\n\t})\n\t@IsNumber()\n\ttotal_queue_exports: number;\n}\n\nexport class ParticipantsPerHourDto {\n\t@ApiProperty({\n\t\tdescription: \"The number of participants in the room at the given hour\",\n\t})\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The specific hour for participant count\",\n\t\ttype: Date,\n\t})\n\t@IsDate()\n\tinstance: Date;\n}\n\nexport class AllTimeSessionDataDto {\n\t@ApiProperty({\n\t\tdescription: \"The average session duration of the room\",\n\t})\n\t@IsNumber()\n\tavg_duration: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The minimum session duration of the room\",\n\t})\n\t@IsNumber()\n\tmin_duration: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The maximum session duration of the room\",\n\t})\n\t@IsNumber()\n\tmax_duration: number;\n}\n\nexport class SessionDurationPerDayDto {\n\t@ApiProperty({ type: \"number\" })\n\tduration: number;\n\n\t@ApiProperty({ type: Date })\n\tday: Date;\n}\n\nexport class SessionDataPerDayDto {\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tavg_duration: SessionDurationPerDayDto[];\n\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tmin_duration: SessionDurationPerDayDto[];\n\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tmax_duration: SessionDurationPerDayDto[];\n}\n\nexport class JoinsCount {\n\t@ApiProperty({ type: \"number\" })\n\tcount: number;\n\n\t@ApiProperty({ type: Date })\n\tday: Date;\n}\n\nexport class JoinsPerDay {\n\ttotal_joins: JoinsCount[];\n\tunique_joins: JoinsCount[];\n}\n\nexport class RoomAnalyticsParticipationDto {\n\t@ApiProperty({\n\t\ttitle: \"Joins\",\n\t\tdescription:\n\t\t\t\"Join statistics, including total and unique joins per day and all-time\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tper_day: {\n\t\t\t\ttitle: \"JoinsPerDay\",\n\t\t\t\ttype: \"object\",\n\t\t\t},\n\t\t\tall_time: {\n\t\t\t\ttitle: \"JoinsAllTime\",\n\t\t\t\ttype: \"object\",\n\t\t\t\tproperties: {\n\t\t\t\t\ttotal_joins: { type: \"number\" },\n\t\t\t\t\tunique_joins: { type: \"number\" },\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tjoins: {\n\t\tper_day: JoinsPerDay;\n\t\tall_time: {\n\t\t\ttotal_joins: number;\n\t\t\tunique_joins: number;\n\t\t};\n\t};\n\n\t@ApiProperty({\n\t\tdescription: \"Participants per hour data\",\n\t\ttype: ParticipantsPerHourDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => ParticipantsPerHourDto)\n\tparticipants_per_hour: ParticipantsPerHourDto[];\n\n\t@ApiProperty({\n\t\ttitle: \"SessionData\",\n\t\tdescription:\n\t\t\t\"Session data including average, minimum, and maximum duration all-time and per day\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tall_time: {\n\t\t\t\ttype: \"object\",\n\t\t\t\ttitle: \"AllTimeSessionDataDto\",\n\t\t\t},\n\t\t\tper_day: {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: {\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\ttitle: \"SessionDurationPerDayDto\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tsession_data: {\n\t\tall_time: AllTimeSessionDataDto;\n\t\tper_day: SessionDurationPerDayDto[];\n\t};\n\n\t@ApiProperty({\n\t\ttitle: \"ReturnVisits\",\n\t\tdescription: \"Expected return visits and probability of return\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\texpected_return_count: { type: \"number\" },\n\t\t\tprobability_of_return: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\treturn_visits: {\n\t\texpected_return_count: number;\n\t\tprobability_of_return: number;\n\t};\n\n\t@ApiProperty({\n\t\tdescription: \"Number of previews of the room, i.e. without joining\",\n\t})\n\t@IsNumber()\n\troom_previews: number;\n}\n\nexport class MessagesPerHour {\n\t@ApiProperty({ type: \"number\" })\n\tcount: number;\n\n\t@ApiProperty({ type: Date })\n\thour: Date;\n}\n\nexport class RoomAnalyticsInteractionsDto {\n\t@ApiProperty({\n\t\ttitle: \"Messages\",\n\t\tdescription: \"Total messages sent and messages sent per hour\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\ttotal: { type: \"number\" },\n\t\t\tper_hour: {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: {\n\t\t\t\t\ttitle: \"MessagesPerHour\",\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tmessages: {\n\t\ttotal: number;\n\t\tper_hour: MessagesPerHour[];\n\t};\n\n\t@ApiProperty({ description: \"Total number of reactions sent in the room\" })\n\t@IsNumber()\n\treactions_sent: number;\n\n\t@ApiProperty({ description: \"Number of times the room was bookmarked\" })\n\t@IsNumber()\n\tbookmarked_count: number;\n}\n\nexport class SongAnalyticsDto {\n\t@ApiProperty({ description: \"Spotify ID of the song\" })\n\t@IsString()\n\tspotify_id: string;\n\n\t@ApiProperty({ description: \"Internal song ID\" })\n\tsong_id: string;\n\n\t@ApiProperty({ description: \"Number of times the song was played\" })\n\t@IsNumber()\n\tplays: number;\n\n\t@ApiProperty({ description: \"Number of upvotes the song received\" })\n\t@IsNumber()\n\tupvotes: number;\n\n\t@ApiProperty({ description: \"Number of downvotes the song received\" })\n\t@IsNumber()\n\tdownvotes: number;\n\n\t@ApiProperty({ description: \"Rank of the song based on some criteria\" })\n\t@IsNumber()\n\trank: number;\n\n\t@ApiProperty({ description: \"Global rank of the song across all rooms\" })\n\t@IsNumber()\n\tglobal_rank: number;\n}\n\nexport class RoomAnalyticsVotesDto {\n\t@ApiProperty({ description: \"Total number of upvotes for songs in the room\" })\n\t@IsNumber()\n\ttotal_upvotes: number;\n\n\t@ApiProperty({\n\t\tdescription: \"Total number of downvotes for songs in the room\",\n\t})\n\t@IsNumber()\n\ttotal_downvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Daily percentage change in upvotes for songs in the room. (last 24 hours)\",\n\t})\n\t@IsNumber()\n\tdaily_percentage_change_in_upvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Daily percentage change in downvotes for songs in the room. (last 24 hours)\",\n\t})\n\t@IsNumber()\n\tdaily_percentage_change_in_downvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Details of songs including Spotify ID, song ID, upvotes, and downvotes\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\tsongs: SongAnalyticsDto[];\n}\n\nexport class RoomAnalyticsSongsDto {\n\t@ApiProperty({\n\t\ttitle: \"MostPlayed\",\n\t\tdescription: \"Most played songs in the room\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\tmost_played: SongAnalyticsDto[];\n\n\t@ApiProperty({\n\t\tdescription: \"Top voted songs in the room\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\ttop_voted: SongAnalyticsDto[];\n}\n\nexport class RoomAnalyticsContributorsDto {\n\t@ApiProperty({\n\t\ttitle: \"TopContributors\",\n\t\tdescription: \"Top contributors to the room's queue\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tuser: { title: \"UserDto\", type: \"object\" },\n\t\t\trank: { type: \"number\" },\n\t\t\tnum_songs: { type: \"number\" },\n\t\t\tnum_upvotes: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\ttop_contributors: {\n\t\tuser: UserDto;\n\t\trank: number;\n\t\tnum_songs: number;\n\t\tnum_upvotes: number;\n\t};\n}\n\nexport class RoomAnalyticsDto {\n\t@ApiProperty({ description: \"Queue analytics\", type: RoomAnalyticsQueueDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsQueueDto)\n\tqueue: RoomAnalyticsQueueDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Participation analytics\",\n\t\ttype: RoomAnalyticsParticipationDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsParticipationDto)\n\tparticipation: RoomAnalyticsParticipationDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Interactions analytics\",\n\t\ttype: RoomAnalyticsInteractionsDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsInteractionsDto)\n\tinteractions: RoomAnalyticsInteractionsDto;\n\n\t@ApiProperty({ description: \"Votes analytics\", type: RoomAnalyticsVotesDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsVotesDto)\n\tvotes: RoomAnalyticsVotesDto;\n\n\t@ApiProperty({ description: \"Songs analytics\", type: RoomAnalyticsSongsDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsSongsDto)\n\tsongs: RoomAnalyticsSongsDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Contributors analytics\",\n\t\ttype: RoomAnalyticsContributorsDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsContributorsDto)\n\tcontributors: RoomAnalyticsContributorsDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard(\"jwt\")\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard(\"jwt\") {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy, ExtractJwt } from \"passport-jwt\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { Injectable } from \"@nestjs/common\";\nimport { JWTPayload } from \"./auth.service\";\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n\tconstructor() {\n\t\tconst jwtSecret = process.env.JWT_SECRET_KEY;\n\t\tif (!jwtSecret || jwtSecret === \"\") {\n\t\t\tthrow new Error(\"Missing JWT_SECRET_KEY\");\n\t\t}\n\n\t\tsuper({\n\t\t\tjwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n\t\t\tignoreExpiration: false,\n\t\t\tsecretOrKey: jwtSecret,\n\t\t});\n\t}\n\n\tasync validate(payload: any): Promise {\n\t\tconst result: JWTPayload = {\n\t\t\tid: payload.id,\n\t\t\temail: payload.email,\n\t\t\tusername: payload.username,\n\t\t};\n\t\treturn result;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LinksWithCount.html":{"url":"classes/LinksWithCount.html","title":"class - LinksWithCount","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LinksWithCount\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                count\n                            \n                            \n                                    \n                                    \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/user.dto.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'object', additionalProperties: undefined})@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/user.dto.ts:68\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport {\n\tIsString,\n\tValidateNested,\n\tIsObject,\n\tIsNumber,\n\tIsArray,\n\tIsBoolean,\n} from \"class-validator\";\nimport { SongInfoDto } from \"../../rooms/dto/songinfo.dto\";\nimport { Type } from \"class-transformer\";\n\nexport class FollowersAndFollowing {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({ type: () => UserDto, isArray: true })\n\t@IsArray()\n\t@ValidateNested()\n\t@Type(() => UserDto)\n\tdata: UserDto[];\n}\n\nexport class RoomsData {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t/*\n\t@ApiProperty({ type: () => RoomDto, isArray: true })\n\t@IsArray()\n\t@ValidateNested()\n\t@Type(() => RoomDto)\n\tdata: RoomDto[];\n\t*/\n\t@ApiProperty({ type: String, isArray: true })\n\t@IsArray()\n\t@IsString({ each: true })\n\tdata: string[];\n}\n\nexport class SongInfosWithCount {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({ type: () => SongInfoDto, isArray: true })\n\t@IsArray()\n\t@ValidateNested()\n\t@Type(() => SongInfoDto)\n\tdata: SongInfoDto[];\n}\n\nexport class LinksWithCount {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({\n\t\ttype: \"object\",\n\t\tadditionalProperties: {\n\t\t\ttype: \"array\",\n\t\t\titems: { type: \"string\" },\n\t\t},\n\t})\n\t@IsObject()\n\tdata: Record;\n}\n\nexport class GenresWithCount {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({ type: String, isArray: true })\n\t@IsArray()\n\t@IsString({ each: true })\n\tdata: string[];\n}\n\nexport class UserFriendship {\n\t@ApiProperty()\n\t@IsBoolean()\n\tstatus: boolean;\n\n\t@ApiProperty()\n\t@IsString()\n\taccept_url: string;\n\n\t@ApiProperty()\n\t@IsString()\n\treject_url: string;\n}\n\nexport class UserDto {\n\t@ApiProperty()\n\t@IsString()\n\tprofile_name: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tuserID: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tusername: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tprofile_picture_url: string;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's followers\",\n\t\ttitle: \"FollowersAndFollowing\",\n\t\ttype: FollowersAndFollowing,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => FollowersAndFollowing)\n\tfollowers: FollowersAndFollowing;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's following\",\n\t\ttitle: \"FollowersAndFollowing\",\n\t\ttype: FollowersAndFollowing,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => FollowersAndFollowing)\n\tfollowing: FollowersAndFollowing;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's links\",\n\t\ttype: LinksWithCount,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => LinksWithCount)\n\tlinks: LinksWithCount;\n\n\t@ApiPropertyOptional()\n\t@IsString()\n\tbio: string;\n\n\t@ApiPropertyOptional({\n\t\tdescription: \"The current song the user is listening to, if applicable\",\n\t\ttype: SongInfoDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => SongInfoDto)\n\tcurrent_song?: SongInfoDto;\n\n\t@ApiPropertyOptional({\n\t\tdescription:\n\t\t\t\"The roomID of the room that the user is currently in, if applicable\",\n\t})\n\t@IsString()\n\t@ValidateNested()\n\tcurrent_room_id?: string;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's favorite genres\",\n\t\ttype: GenresWithCount,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => GenresWithCount)\n\tfav_genres: GenresWithCount;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's favorite songs\",\n\t\ttype: SongInfosWithCount,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => SongInfosWithCount)\n\tfav_songs: SongInfosWithCount;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's favorite rooms\",\n\t\ttype: RoomsData,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomsData)\n\tfav_rooms: RoomsData;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's recent rooms\",\n\t\ttype: RoomsData,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomsData)\n\trecent_rooms: RoomsData;\n\n\t@ApiProperty()\n\t@IsBoolean()\n\thasSpotifyAccount: boolean;\n\n\t@ApiPropertyOptional({\n\t\tdescription:\n\t\t\t\"The relationship status between the current user and the user in question\",\n\t\ttype: String,\n\t})\n\t@Type(() => String)\n\t@IsString()\n\trelationship?:\n\t\t| \"following\"\n\t\t| \"follower\"\n\t\t| \"mutual\"\n\t\t| \"friend\"\n\t\t| \"pending\"\n\t\t| \"none\"\n\t\t| \"blocked\";\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LiveChatMessageDto.html":{"url":"classes/LiveChatMessageDto.html","title":"class - LiveChatMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LiveChatMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/live/dto/livechatmessage.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                dateCreated\n                            \n                            \n                                    \n                                    \n                                messageBody\n                            \n                            \n                                    \n                                    \n                                messageID\n                            \n                            \n                                    \n                                    \n                                roomID\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                sender\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        dateCreated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/live/dto/livechatmessage.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        messageBody\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/live/dto/livechatmessage.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        messageID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/live/dto/livechatmessage.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        roomID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/live/dto/livechatmessage.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        sender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/live/dto/livechatmessage.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsString, ValidateNested, IsObject, IsDate } from \"class-validator\";\nimport { UserDto } from \"../../modules/users/dto/user.dto\";\nimport { Type } from \"class-transformer\";\n\nexport class LiveChatMessageDto {\n\t@ApiProperty()\n\t@IsString()\n\tmessageID: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tmessageBody: string;\n\n\t@ApiProperty()\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => UserDto)\n\tsender: UserDto;\n\n\t@ApiProperty()\n\t@IsString()\n\troomID: string;\n\n\t@ApiPropertyOptional()\n\t@IsDate()\n\tdateCreated?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LiveModule.html":{"url":"modules/LiveModule.html","title":"module - LiveModule","body":"\n                   \n\n\n\n\n    Modules\n    LiveModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_LiveModule\n\n\n\ncluster_LiveModule_providers\n\n\n\ncluster_LiveModule_imports\n\n\n\ncluster_LiveModule_exports\n\n\n\n\nAutoModerationModule\n\nAutoModerationModule\n\n\n\nLiveModule\n\nLiveModule\n\nLiveModule -->\n\nAutoModerationModule->LiveModule\n\n\n\n\n\nDbUtilsModule\n\nDbUtilsModule\n\nLiveModule -->\n\nDbUtilsModule->LiveModule\n\n\n\n\n\nDmUsersModule\n\nDmUsersModule\n\nLiveModule -->\n\nDmUsersModule->LiveModule\n\n\n\n\n\nDtoGenModule\n\nDtoGenModule\n\nLiveModule -->\n\nDtoGenModule->LiveModule\n\n\n\n\n\nRoomQueueModule\n\nRoomQueueModule\n\nLiveModule -->\n\nRoomQueueModule->LiveModule\n\n\n\n\n\nRoomUsersModule\n\nRoomUsersModule\n\nLiveModule -->\n\nRoomUsersModule->LiveModule\n\n\n\n\n\nRoomsModule\n\nRoomsModule\n\nLiveModule -->\n\nRoomsModule->LiveModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nLiveModule -->\n\nUsersModule->LiveModule\n\n\n\n\n\nDmUsersModule \n\nDmUsersModule \n\nDmUsersModule  -->\n\nLiveModule->DmUsersModule \n\n\n\n\n\nLiveGateway \n\nLiveGateway \n\nLiveGateway  -->\n\nLiveModule->LiveGateway \n\n\n\n\n\nRoomUsersModule \n\nRoomUsersModule \n\nRoomUsersModule  -->\n\nLiveModule->RoomUsersModule \n\n\n\n\n\nEventQueueService\n\nEventQueueService\n\nLiveModule -->\n\nEventQueueService->LiveModule\n\n\n\n\n\nLiveService\n\nLiveService\n\nLiveModule -->\n\nLiveService->LiveModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/live/live.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EventQueueService\n                        \n                        \n                            LiveService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AutoModerationModule\n                        \n                        \n                            DbUtilsModule\n                        \n                        \n                            DmUsersModule\n                        \n                        \n                            DtoGenModule\n                        \n                        \n                            RoomQueueModule\n                        \n                        \n                            RoomUsersModule\n                        \n                        \n                            RoomsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DmUsersModule\n                        \n                        \n                            LiveGateway\n                        \n                        \n                            RoomUsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { DbUtilsModule } from \"../modules/db-utils/db-utils.module\"; // Assuming this exists\nimport { DtoGenModule } from \"../modules/dto-gen/dto-gen.module\"; // Assuming this exists\nimport { RoomsModule } from \"../modules/rooms/rooms.module\";\nimport { RoomUsersModule } from \"./roomusers/roomuser.module\";\nimport { LiveGateway } from \"./live.gateway\";\nimport { EventQueueService } from \"./eventqueue/eventqueue.service\";\nimport { LiveService } from \"./live.service\";\nimport { RoomQueueModule } from \"../modules/rooms/roomqueue/roomqueue.module\";\nimport { DmUsersModule } from \"./dmusers/dmusers.module\";\nimport { UsersModule } from \"../modules/users/users.module\";\nimport { AutoModerationModule } from \"./automod/automod.module\";\n\n@Module({\n\timports: [\n\t\tRoomUsersModule,\n\t\tDmUsersModule,\n\t\tDbUtilsModule,\n\t\tDtoGenModule,\n\t\tRoomsModule,\n\t\tRoomQueueModule,\n\t\tUsersModule,\n\t\tAutoModerationModule,\n\t],\n\texports: [RoomUsersModule, DmUsersModule, LiveGateway],\n\tproviders: [LiveGateway, EventQueueService, LiveService],\n})\nexport class LiveModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LiveService.html":{"url":"injectables/LiveService.html","title":"injectable - LiveService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LiveService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/live/live.service.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/live/live.service.ts:16\n                            \n                        \n\n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n// import { Cron, SchedulerRegistry } from \"@nestjs/schedule\";\n// import { Cron } from \"@nestjs/schedule\";\n// import { CronJob } from \"cron\";\n// import { Server } from \"socket.io\";\n// import { PlaybackEventDto } from \"./dto/playbackevent.dto\";\n// import { SOCKET_EVENTS } from \"../common/constants\";\nimport // RoomQueueService,\n// ActiveRoom,\n\"../modules/rooms/roomqueue/roomqueue.service\";\n// import { RoomSongDto } from \"../modules/rooms/dto/roomsong.dto\";\n\n// const MAX_ANNOUNCEMENTS_PER_ROOM = 5;\n// const ROOM_ACTIVITY_TIMEOUT = 5;\n@Injectable()\nexport class LiveService {\n\t// private server: Server;\n\t// private roomJobs: Map;\n\tconstructor() {\n\t\t// private readonly roomQueue: RoomQueueService, // private readonly schedulerRegistry: SchedulerRegistry,\n\t\t// this.roomJobs = new Map();\n\t}\n\n\t// async wait(ms: number) {\n\t// \treturn new Promise((resolve) => setTimeout(resolve, ms));\n\t// }\n\n\t// serverSet(): boolean {\n\t// \treturn this.server !== undefined;\n\t// }\n\n\t// setServer(server: Server): void {\n\t// \tthis.server = server;\n\t// }\n\n\t// @Cron(\"0 * * * * *\") // Run this every 1 minutes\n\t// async checkRoomQueues() {\n\t// \t// const jobs = this.schedulerRegistry.getCronJobs();\n\t// \tlet now = new Date().valueOf();\n\t// \tconsole.log(\n\t// \t\t`${new Date().valueOf()} Checking room queues (${new Date().toISOString()})`,\n\t// \t);\n\t// \tconst rooms: Map = this.roomQueue.roomQueues;\n\t// \tconst roomsToRemove: string[] = [];\n\t// \tfor (const room of rooms.values()) {\n\t// \t\tconsole.log(`Checking room ${room.room.roomID}`);\n\t// \t\tnow = new Date().valueOf();\n\t// \t\tif (room.inactive) {\n\t// \t\t\troom.minutesInactive++;\n\t// \t\t\tconsole.log(\n\t// \t\t\t\t`Room ${room.room.roomID} has been inactive for ${room.minutesInactive} minutes`,\n\t// \t\t\t);\n\t// \t\t\tif (room.minutesInactive >= ROOM_ACTIVITY_TIMEOUT) {\n\t// \t\t\t\tconsole.log(\n\t// \t\t\t\t\t`Will remove room ${room.room.roomID} from queue due to inactivity`,\n\t// \t\t\t\t);\n\t// \t\t\t\troomsToRemove.push(room.room.roomID);\n\t// \t\t\t\tcontinue;\n\t// \t\t\t}\n\t// \t\t}\n\t// \t\tif (room.songs.length === 0) {\n\t// \t\t\troom.inactive = true;\n\t// \t\t\tconsole.log(\n\t// \t\t\t\t`Room ${room.room.roomID} has no songs in the queue. Marking as inactive.`,\n\t// \t\t\t);\n\t// \t\t\tcontinue;\n\t// \t\t}\n\n\t// \t\tconsole.log(`Flushing room ${room.room.roomID} to DB`);\n\t// \t\tconst start: Date = new Date();\n\t// \t\tawait this.roomQueue.flushToDB(room.room.roomID);\n\t// \t\tconsole.log(\n\t// \t\t\t`Finished flushing room ${room.room.roomID} to DB in ${\n\t// \t\t\t\tnew Date().valueOf() - start.valueOf()\n\t// \t\t\t}ms`,\n\t// \t\t);\n\n\t// \t\tif (room.songs.length > 0) {\n\t// \t\t\tconst head = room.songs[0];\n\t// \t\t\tconst st = head.getPlaybackStartTime();\n\t// \t\t\tif (st !== null) {\n\t// \t\t\t\tconst expectedEndTime = st + head.songDurationMs + 5000; // 5 seconds of buffer for this code to run\n\t// \t\t\t\tif (now > expectedEndTime) {\n\t// \t\t\t\t\tconsole.log(\n\t// \t\t\t\t\t\t`Room ${room.room.roomID}: Removing played songs from queue`,\n\t// \t\t\t\t\t);\n\t// \t\t\t\t\tawait this.roomQueue.getQueueState(room.room.roomID); // this will trigger played songs to be removed (via ActiveRoom.updateQueue)\n\t// \t\t\t\t}\n\t// \t\t\t}\n\t// \t\t\t// this.cancelSongAnnouncements(room.room.roomID);\n\t// \t\t\t// if (room.songs[0].getPlaybackStartTime() === null) {\n\t// \t\t\t// \troom.songs[0].setPlaybackStartTime(new Date().valueOf());\n\t// \t\t\t// \tawait this.roomQueue.refreshQueue(room.room.roomID);\n\t// \t\t\t// }\n\t// \t\t\t// let songsAsRoomSongDto: RoomSongDto[] = room\n\t// \t\t\t// \t.queueAsRoomSongDto()\n\t// \t\t\t// \t.slice(0, 1 + MAX_ANNOUNCEMENTS_PER_ROOM);\n\t// \t\t\t// const currentSong: RoomSongDto = songsAsRoomSongDto[0];\n\t// \t\t\t// if (!currentSong.startTime) {\n\t// \t\t\t// \tconsole.warn(\n\t// \t\t\t// \t\t`The current song in the queue for room ${room.room.roomID} has no start time. Skipping room entirely.`,\n\t// \t\t\t// \t);\n\t// \t\t\t// \tcontinue;\n\t// \t\t\t// }\n\t// \t\t\t// const currentSongEvent: PlaybackEventDto = {\n\t// \t\t\t// \tdate_created: new Date(),\n\t// \t\t\t// \tuserID: null,\n\t// \t\t\t// \troomID: room.room.roomID,\n\t// \t\t\t// \tspotifyID: currentSong.spotifyID,\n\t// \t\t\t// \tsong: currentSong,\n\t// \t\t\t// \tUTC_time: currentSong.startTime,\n\t// \t\t\t// };\n\t// \t\t\t// if (currentSong.startTime  {\n\t// \t\ttry {\n\t// \t\t\tconsole.log(`${roomID}: New song announcement for room`);\n\t// \t\t\tif (event.song) {\n\t// \t\t\t\tconsole.log(\n\t// \t\t\t\t\t`${roomID}: Play song (index=${event.song.index}): ${event.song.spotifyID}`,\n\t// \t\t\t\t);\n\t// \t\t\t}\n\t// \t\t\tfor (let i = 0; i  {\n\t// \t\tif (key.startsWith(`songAnnouncement-${roomID}`)) {\n\t// \t\t\tjob.stop();\n\t// \t\t\tthis.schedulerRegistry.deleteCronJob(key);\n\t// \t\t\tconsole.warn(`Cancelled announcement ${key}`);\n\t// \t\t}\n\t// \t});\n\t// }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/local.strategy.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(username: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/local.strategy.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from \"passport-local\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { Injectable } from \"@nestjs/common\";\nimport { AuthService } from \"./auth.service\";\nimport {\n\tAttributeType,\n\tAuthenticationResultType,\n} from \"@aws-sdk/client-cognito-identity-provider\";\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n\tconstructor(private authService: AuthService) {\n\t\tsuper();\n\t}\n\n\tasync validate(\n\t\tusername: string,\n\t\tpassword: string,\n\t): Promise {\n\t\tconst user = await this.authService.validateUser(username, password);\n\t\treturn user;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginBody.html":{"url":"classes/LoginBody.html","title":"class - LoginBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The Cognito JWT token'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:61\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n\tHttpException,\n\tHttpStatus,\n\tInjectable,\n\tUnauthorizedException,\n} from \"@nestjs/common\";\nimport {\n\tAdminInitiateAuthCommandInput,\n\tAttributeType,\n\tAuthenticationResultType,\n\tCognitoIdentityProvider,\n\tListUsersCommandOutput,\n} from \"@aws-sdk/client-cognito-identity-provider\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { PrismaService } from \"../../prisma/prisma.service\";\nimport { Prisma } from \"@prisma/client\";\nimport * as PrismaTypes from \"@prisma/client\";\nimport * as jwt from \"jsonwebtoken\";\nimport { CognitoJwtVerifier } from \"aws-jwt-verify\";\nimport { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString } from \"class-validator\";\n\nexport type CognitoDecodedToken = {\n\tsub: string;\n\tiss: string;\n\tclient_id: string;\n\torigin_jti: string;\n\tevent_id?: string;\n\ttoken_use: string;\n\tscope?: string;\n\tauth_time: number;\n\texp: number;\n\tiat: number;\n\tjti: string;\n\tusername: string;\n};\n\nexport type JWTPayload = {\n\tid: string;\n\temail: string;\n\tusername: string;\n};\n\nexport class RegisterBody {\n\t@ApiProperty({ description: \"The user's username\" })\n\t@IsString()\n\tusername: string;\n\n\t@ApiProperty({ description: \"The user's Cognito sub/ID\" })\n\t@IsString()\n\tuserCognitoSub: string;\n\n\t@ApiProperty({ description: \"The user's email address\" })\n\t@IsString()\n\temail: string;\n}\n\nexport class LoginBody {\n\t@ApiProperty({ description: \"The Cognito JWT token\" })\n\t@IsString()\n\ttoken: string;\n}\n\nexport class RefreshBody {\n\t@ApiProperty({ description: \"The JWT token to be refreshed\" })\n\t@IsString()\n\trefreshToken: string;\n}\n\n@Injectable()\nexport class AuthService {\n\tprivate cognitoIdentityServiceProvider: CognitoIdentityProvider;\n\tprivate accessKeyId: string;\n\tprivate secretAccessKey: string;\n\tprivate userPoolId: string;\n\tprivate clientId: string;\n\n\tconstructor(\n\t\tprivate configService: ConfigService,\n\t\tprivate readonly prisma: PrismaService,\n\t) {\n\t\t// Set the AWS credentials\n\t\tconst accessKeyId = this.configService.get(\"AWS_ACCESS_KEY_ID\");\n\t\tif (!accessKeyId) {\n\t\t\tthrow new Error(\"Missing AWS_ACCESS_KEY_ID\");\n\t\t}\n\t\tthis.accessKeyId = accessKeyId;\n\n\t\tconst secretAccessKey = this.configService.get(\n\t\t\t\"AWS_SECRET_ACCESS_KEY\",\n\t\t);\n\t\tif (!secretAccessKey) {\n\t\t\tthrow new Error(\"Missing AWS_SECRET_ACCESS_KEY\");\n\t\t}\n\t\tthis.secretAccessKey = secretAccessKey;\n\n\t\tconst userPoolId = this.configService.get(\n\t\t\t\"AWS_COGNITO_USER_POOL_ID\",\n\t\t);\n\t\tif (!userPoolId) {\n\t\t\tthrow new Error(\"Missing AWS_COGNITO_USER_POOL_ID\");\n\t\t}\n\t\tthis.userPoolId = userPoolId;\n\n\t\tconst clientId = this.configService.get(\"AWS_COGNITO_CLIENT_ID\");\n\t\tif (!clientId) {\n\t\t\tthrow new Error(\"Missing AWS_COGNITO_CLIENT_ID\");\n\t\t}\n\t\tthis.clientId = clientId;\n\n\t\tthis.cognitoIdentityServiceProvider = new CognitoIdentityProvider({\n\t\t\tregion: \"af-south-1\",\n\n\t\t\tcredentials: {\n\t\t\t\taccessKeyId: this.accessKeyId,\n\t\t\t\tsecretAccessKey: this.secretAccessKey,\n\t\t\t},\n\t\t});\n\t}\n\n\tasync validateUser(\n\t\tusername: string,\n\t\tpassword: string,\n\t): Promise {\n\t\tif (!this.userPoolId || !this.clientId) {\n\t\t\tthrow new Error(\"Missing Cognito configuration\");\n\t\t}\n\n\t\tconst params: AdminInitiateAuthCommandInput = {\n\t\t\tAuthFlow: \"ADMIN_NO_SRP_AUTH\",\n\t\t\tClientId: this.clientId,\n\t\t\tUserPoolId: this.userPoolId,\n\t\t\tAuthParameters: {\n\t\t\t\tUSERNAME: username,\n\t\t\t\tPASSWORD: password,\n\t\t\t},\n\t\t};\n\n\t\ttry {\n\t\t\tconst authResponse =\n\t\t\t\tawait this.cognitoIdentityServiceProvider.adminInitiateAuth(params);\n\t\t\tif (authResponse.AuthenticationResult) {\n\t\t\t\tconst user = await this.cognitoIdentityServiceProvider.adminGetUser({\n\t\t\t\t\tUserPoolId: this.userPoolId,\n\t\t\t\t\tUsername: username,\n\t\t\t\t});\n\n\t\t\t\tif (!user || !user.Username || !user.UserAttributes) {\n\t\t\t\t\tthrow new UnauthorizedException(\"Invalid credentials\");\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tusername: user.Username,\n\t\t\t\t\tattributes: user.UserAttributes,\n\t\t\t\t\tauthenticationResult: authResponse.AuthenticationResult,\n\t\t\t\t};\n\t\t\t}\n\t\t\tthrow new UnauthorizedException(\"Invalid credentials\");\n\t\t} catch (error) {\n\t\t\tthrow new UnauthorizedException(\"Invalid credentials\");\n\t\t}\n\t}\n\n\tasync listUsers(): Promise {\n\t\tconst params = {\n\t\t\tUserPoolId: this.userPoolId,\n\t\t};\n\n\t\ttry {\n\t\t\tconst responsePromise =\n\t\t\t\tawait this.cognitoIdentityServiceProvider.listUsers(params);\n\t\t\tconst response = await responsePromise;\n\t\t\treturn response;\n\t\t} catch (error) {\n\t\t\tthrow new UnauthorizedException(\"Error listing users\");\n\t\t}\n\t}\n\n\tasync createUser(\n\t\tusername: string,\n\t\temail: string,\n\t\tuserID: string,\n\t): Promise {\n\t\tconst user: Prisma.usersCreateInput = {\n\t\t\tusername: username,\n\t\t\temail: email,\n\t\t\tuser_id: userID,\n\t\t};\n\t\tconst existingUser = await this.prisma.users.findUnique({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\t\tif (existingUser) {\n\t\t\treturn true;\n\t\t}\n\t\ttry {\n\t\t\tconst response = await this.prisma.users.create({ data: user });\n\t\t\tconsole.log(response);\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tasync generateJWT(payload: JWTPayload): Promise {\n\t\tconst secretKey = this.configService.get(\"JWT_SECRET_KEY\");\n\t\tconst expiresIn = this.configService.get(\"JWT_EXPIRATION_TIME\");\n\n\t\tif (!secretKey || secretKey === undefined || secretKey === \"\") {\n\t\t\tthrow new Error(\"Missing JWT secret key\");\n\t\t}\n\n\t\tif (!expiresIn || expiresIn === undefined || expiresIn === \"\") {\n\t\t\tthrow new Error(\"Missing JWT expiration time\");\n\t\t}\n\n\t\tconst token = jwt.sign(payload, secretKey, { expiresIn });\n\t\treturn token;\n\t}\n\n\tasync refreshJWT(jwt_token: string): Promise {\n\t\tconst secretKey = this.configService.get(\"JWT_SECRET_KEY\");\n\t\tif (!secretKey || secretKey === undefined || secretKey === \"\") {\n\t\t\tthrow new Error(\"Missing JWT secret key\");\n\t\t}\n\n\t\tconst decoded: jwt.JwtPayload = jwt.decode(jwt_token) as jwt.JwtPayload;\n\t\tconsole.log(\"decoded\", decoded);\n\n\t\t//ensure user data in Payload is valid\n\t\tconst user: PrismaTypes.users | null = await this.prisma.users.findUnique({\n\t\t\twhere: {\n\t\t\t\tuser_id: decoded.id,\n\t\t\t\temail: decoded.email,\n\t\t\t\tusername: decoded.username,\n\t\t\t},\n\t\t});\n\n\t\tconsole.log(\"user\", user);\n\n\t\tif (!user) {\n\t\t\tthrow new UnauthorizedException(\"Invalid JWT token\");\n\t\t}\n\n\t\tconst result: JWTPayload = {\n\t\t\tid: decoded.id as string,\n\t\t\temail: decoded.email as string,\n\t\t\tusername: decoded.username as string,\n\t\t};\n\t\treturn result;\n\t}\n\n\t/*\n\tasync getUserInfo(jwt_token: string): Promise {\n\t\tconst secretKey = this.configService.get(\"JWT_SECRET_KEY\");\n\t\tconst expiresIn = this.configService.get(\"JWT_EXPIRATION_TIME\");\n\n\t\tif (!secretKey || secretKey === undefined || secretKey === \"\") {\n\t\t\tthrow new Error(\"Missing JWT secret key\");\n\t\t}\n\n\t\tif (!expiresIn || expiresIn === undefined || expiresIn === \"\") {\n\t\t\tthrow new Error(\"Missing JWT expiration time\");\n\t\t}\n\n\t\tconst decoded = jwt.verify(jwt_token, secretKey);\n\t\tconst userID = decoded.sub;\n\t\tif (!userID) {\n\t\t\tthrow new Error(\"Invalid JWT token\");\n\t\t}\n\t\tif (typeof userID !== \"string\") {\n\t\t\tthrow new Error(\"Invalid JWT token\");\n\t\t}\n\n\t\tconst user = await this.prisma.users.findUnique({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\t\treturn user;\n\t}\n\t*/\n\n\t// this funciton will be passed a Request object from the NestJS controller eg:\n\t/*\n\tgetRoomInfo(@Request() req: Request, @Param(\"roomID\") roomID: string): RoomDto {\n\t\treturn this.roomsService.getRoomInfo(roomID);\n\t}\n\t*/\n\tgetUserInfo(req: any): JWTPayload {\n\t\tconst result = req.user as JWTPayload;\n\t\tconsole.log(result);\n\t\tif (!result) {\n\t\t\tthrow new UnauthorizedException(\n\t\t\t\t\"No user found in JWT token. Please log in again\",\n\t\t\t);\n\t\t}\n\t\tif (!result.id) {\n\t\t\tthrow new UnauthorizedException(\n\t\t\t\t\"No user ID found in JWT token. Please log in again\",\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync getUsernameAndEmail(userID: string): Promise {\n\t\tconst user: PrismaTypes.users | null = await this.prisma.users.findUnique({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\n\t\tif (!user || user === null) {\n\t\t\tthrow new HttpException(\n\t\t\t\t\"Invalid credentials. Could not create user. getUsernameAndEmailError01\",\n\t\t\t\tHttpStatus.UNAUTHORIZED,\n\t\t\t);\n\t\t}\n\n\t\tif (!user.email || user.email === null) {\n\t\t\tthrow new HttpException(\n\t\t\t\t\"User (\" +\n\t\t\t\t\tuser.username +\n\t\t\t\t\t\") does not have an email address. getUsernameAndEmailError02\",\n\t\t\t\tHttpStatus.UNAUTHORIZED,\n\t\t\t);\n\t\t}\n\n\t\treturn { username: user.username, email: user.email };\n\t}\n\n\tasync decodeAndVerifyCognitoJWT(\n\t\tjwt_token: string,\n\t): Promise {\n\t\tconst verifier = CognitoJwtVerifier.create({\n\t\t\tuserPoolId: this.userPoolId,\n\t\t\ttokenUse: \"access\",\n\t\t\tclientId: this.clientId,\n\t\t});\n\n\t\ttry {\n\t\t\tconst payload = await verifier.verify(jwt_token);\n\t\t\tconsole.log(\"Cognito Verification\", payload);\n\t\t\tconst result: CognitoDecodedToken = payload as CognitoDecodedToken;\n\t\t\treturn result;\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t\tthrow new UnauthorizedException(\"Invalid JWT token\");\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MessagesPerHour.html":{"url":"classes/MessagesPerHour.html","title":"class - MessagesPerHour","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MessagesPerHour\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/dto/roomanalytics.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                count\n                            \n                            \n                                    \n                                hour\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:239\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        hour\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Date})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:242\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n\tIsArray,\n\tIsDate,\n\tIsNumber,\n\tIsObject,\n\tIsString,\n\tValidateNested,\n} from \"class-validator\";\nimport { UserDto } from \"../../users/dto/user.dto\";\nimport { Type } from \"class-transformer\";\nexport class RoomAnalyticsKeyMetricsDto {\n\t// an object called unique visitors with two properties, count and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"UniqueVisitors\",\n\t\tdescription: \"Unique visitors to the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tcount: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tunique_visitors: {\n\t\tcount: number;\n\t\tpercentage_change: number;\n\t};\n\n\t// an object called returning_visitors with two properties, count and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"ReturningVisitors\",\n\t\tdescription: \"Returning visitors to the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tcount: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\treturning_visitors: {\n\t\tcount: number;\n\t\tpercentage_change: number;\n\t};\n\n\t// an object called average_session_duration with two properties, duration and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"AverageSessionDuration\",\n\t\tdescription: \"Average session duration in the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tduration: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\taverage_session_duration: {\n\t\tduration: number;\n\t\tpercentage_change: number;\n\t};\n}\n\nexport class RoomAnalyticsQueueDto {\n\t@ApiProperty({ description: \"Total number of songs ever queued in the room\" })\n\t@IsNumber()\n\ttotal_songs_queued: number;\n\n\t@ApiProperty({\n\t\tdescription: \"Number of times the room's queue was exported as a playlist\",\n\t})\n\t@IsNumber()\n\ttotal_queue_exports: number;\n}\n\nexport class ParticipantsPerHourDto {\n\t@ApiProperty({\n\t\tdescription: \"The number of participants in the room at the given hour\",\n\t})\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The specific hour for participant count\",\n\t\ttype: Date,\n\t})\n\t@IsDate()\n\tinstance: Date;\n}\n\nexport class AllTimeSessionDataDto {\n\t@ApiProperty({\n\t\tdescription: \"The average session duration of the room\",\n\t})\n\t@IsNumber()\n\tavg_duration: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The minimum session duration of the room\",\n\t})\n\t@IsNumber()\n\tmin_duration: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The maximum session duration of the room\",\n\t})\n\t@IsNumber()\n\tmax_duration: number;\n}\n\nexport class SessionDurationPerDayDto {\n\t@ApiProperty({ type: \"number\" })\n\tduration: number;\n\n\t@ApiProperty({ type: Date })\n\tday: Date;\n}\n\nexport class SessionDataPerDayDto {\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tavg_duration: SessionDurationPerDayDto[];\n\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tmin_duration: SessionDurationPerDayDto[];\n\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tmax_duration: SessionDurationPerDayDto[];\n}\n\nexport class JoinsCount {\n\t@ApiProperty({ type: \"number\" })\n\tcount: number;\n\n\t@ApiProperty({ type: Date })\n\tday: Date;\n}\n\nexport class JoinsPerDay {\n\ttotal_joins: JoinsCount[];\n\tunique_joins: JoinsCount[];\n}\n\nexport class RoomAnalyticsParticipationDto {\n\t@ApiProperty({\n\t\ttitle: \"Joins\",\n\t\tdescription:\n\t\t\t\"Join statistics, including total and unique joins per day and all-time\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tper_day: {\n\t\t\t\ttitle: \"JoinsPerDay\",\n\t\t\t\ttype: \"object\",\n\t\t\t},\n\t\t\tall_time: {\n\t\t\t\ttitle: \"JoinsAllTime\",\n\t\t\t\ttype: \"object\",\n\t\t\t\tproperties: {\n\t\t\t\t\ttotal_joins: { type: \"number\" },\n\t\t\t\t\tunique_joins: { type: \"number\" },\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tjoins: {\n\t\tper_day: JoinsPerDay;\n\t\tall_time: {\n\t\t\ttotal_joins: number;\n\t\t\tunique_joins: number;\n\t\t};\n\t};\n\n\t@ApiProperty({\n\t\tdescription: \"Participants per hour data\",\n\t\ttype: ParticipantsPerHourDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => ParticipantsPerHourDto)\n\tparticipants_per_hour: ParticipantsPerHourDto[];\n\n\t@ApiProperty({\n\t\ttitle: \"SessionData\",\n\t\tdescription:\n\t\t\t\"Session data including average, minimum, and maximum duration all-time and per day\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tall_time: {\n\t\t\t\ttype: \"object\",\n\t\t\t\ttitle: \"AllTimeSessionDataDto\",\n\t\t\t},\n\t\t\tper_day: {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: {\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\ttitle: \"SessionDurationPerDayDto\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tsession_data: {\n\t\tall_time: AllTimeSessionDataDto;\n\t\tper_day: SessionDurationPerDayDto[];\n\t};\n\n\t@ApiProperty({\n\t\ttitle: \"ReturnVisits\",\n\t\tdescription: \"Expected return visits and probability of return\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\texpected_return_count: { type: \"number\" },\n\t\t\tprobability_of_return: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\treturn_visits: {\n\t\texpected_return_count: number;\n\t\tprobability_of_return: number;\n\t};\n\n\t@ApiProperty({\n\t\tdescription: \"Number of previews of the room, i.e. without joining\",\n\t})\n\t@IsNumber()\n\troom_previews: number;\n}\n\nexport class MessagesPerHour {\n\t@ApiProperty({ type: \"number\" })\n\tcount: number;\n\n\t@ApiProperty({ type: Date })\n\thour: Date;\n}\n\nexport class RoomAnalyticsInteractionsDto {\n\t@ApiProperty({\n\t\ttitle: \"Messages\",\n\t\tdescription: \"Total messages sent and messages sent per hour\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\ttotal: { type: \"number\" },\n\t\t\tper_hour: {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: {\n\t\t\t\t\ttitle: \"MessagesPerHour\",\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tmessages: {\n\t\ttotal: number;\n\t\tper_hour: MessagesPerHour[];\n\t};\n\n\t@ApiProperty({ description: \"Total number of reactions sent in the room\" })\n\t@IsNumber()\n\treactions_sent: number;\n\n\t@ApiProperty({ description: \"Number of times the room was bookmarked\" })\n\t@IsNumber()\n\tbookmarked_count: number;\n}\n\nexport class SongAnalyticsDto {\n\t@ApiProperty({ description: \"Spotify ID of the song\" })\n\t@IsString()\n\tspotify_id: string;\n\n\t@ApiProperty({ description: \"Internal song ID\" })\n\tsong_id: string;\n\n\t@ApiProperty({ description: \"Number of times the song was played\" })\n\t@IsNumber()\n\tplays: number;\n\n\t@ApiProperty({ description: \"Number of upvotes the song received\" })\n\t@IsNumber()\n\tupvotes: number;\n\n\t@ApiProperty({ description: \"Number of downvotes the song received\" })\n\t@IsNumber()\n\tdownvotes: number;\n\n\t@ApiProperty({ description: \"Rank of the song based on some criteria\" })\n\t@IsNumber()\n\trank: number;\n\n\t@ApiProperty({ description: \"Global rank of the song across all rooms\" })\n\t@IsNumber()\n\tglobal_rank: number;\n}\n\nexport class RoomAnalyticsVotesDto {\n\t@ApiProperty({ description: \"Total number of upvotes for songs in the room\" })\n\t@IsNumber()\n\ttotal_upvotes: number;\n\n\t@ApiProperty({\n\t\tdescription: \"Total number of downvotes for songs in the room\",\n\t})\n\t@IsNumber()\n\ttotal_downvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Daily percentage change in upvotes for songs in the room. (last 24 hours)\",\n\t})\n\t@IsNumber()\n\tdaily_percentage_change_in_upvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Daily percentage change in downvotes for songs in the room. (last 24 hours)\",\n\t})\n\t@IsNumber()\n\tdaily_percentage_change_in_downvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Details of songs including Spotify ID, song ID, upvotes, and downvotes\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\tsongs: SongAnalyticsDto[];\n}\n\nexport class RoomAnalyticsSongsDto {\n\t@ApiProperty({\n\t\ttitle: \"MostPlayed\",\n\t\tdescription: \"Most played songs in the room\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\tmost_played: SongAnalyticsDto[];\n\n\t@ApiProperty({\n\t\tdescription: \"Top voted songs in the room\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\ttop_voted: SongAnalyticsDto[];\n}\n\nexport class RoomAnalyticsContributorsDto {\n\t@ApiProperty({\n\t\ttitle: \"TopContributors\",\n\t\tdescription: \"Top contributors to the room's queue\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tuser: { title: \"UserDto\", type: \"object\" },\n\t\t\trank: { type: \"number\" },\n\t\t\tnum_songs: { type: \"number\" },\n\t\t\tnum_upvotes: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\ttop_contributors: {\n\t\tuser: UserDto;\n\t\trank: number;\n\t\tnum_songs: number;\n\t\tnum_upvotes: number;\n\t};\n}\n\nexport class RoomAnalyticsDto {\n\t@ApiProperty({ description: \"Queue analytics\", type: RoomAnalyticsQueueDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsQueueDto)\n\tqueue: RoomAnalyticsQueueDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Participation analytics\",\n\t\ttype: RoomAnalyticsParticipationDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsParticipationDto)\n\tparticipation: RoomAnalyticsParticipationDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Interactions analytics\",\n\t\ttype: RoomAnalyticsInteractionsDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsInteractionsDto)\n\tinteractions: RoomAnalyticsInteractionsDto;\n\n\t@ApiProperty({ description: \"Votes analytics\", type: RoomAnalyticsVotesDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsVotesDto)\n\tvotes: RoomAnalyticsVotesDto;\n\n\t@ApiProperty({ description: \"Songs analytics\", type: RoomAnalyticsSongsDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsSongsDto)\n\tsongs: RoomAnalyticsSongsDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Contributors analytics\",\n\t\ttype: RoomAnalyticsContributorsDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsContributorsDto)\n\tcontributors: RoomAnalyticsContributorsDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MockConfigModule.html":{"url":"modules/MockConfigModule.html","title":"module - MockConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    MockConfigModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MockConfigModule\n\n\n\ncluster_MockConfigModule_exports\n\n\n\n\nConfigService \n\nConfigService \n\n\n\nMockConfigModule\n\nMockConfigModule\n\nConfigService  -->\n\nMockConfigModule->ConfigService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            jest_mocking/module-mocking.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            ConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Test, TestingModule } from \"@nestjs/testing\";\n\nimport { MulterModule } from \"@nestjs/platform-express\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { HttpModule } from \"@nestjs/axios\";\nimport { memoryStorage } from \"multer\";\n\nimport { PassportModule } from \"@nestjs/passport\";\nimport { JwtModule } from \"@nestjs/jwt\";\n\nimport { PrismaService } from \"../prisma/prisma.service\";\nimport { PrismaModule } from \"./../prisma/prisma.module\";\n\nimport {\n\tmockConfigService,\n\tmockPrismaService,\n\tmockUsersService,\n} from \"./service-mocking\";\n\nimport { AppController } from \"../src/app.controller\";\nimport { AppService } from \"../src/app.service\";\nimport { AuthController } from \"../src/auth/auth.controller\";\nimport { AuthModule } from \"../src/auth/auth.module\";\nimport { AuthService } from \"../src/auth/auth.service\";\nimport { SpotifyAuthController } from \"../src/auth/spotify/spotifyauth.controller\";\nimport { SpotifyAuthModule } from \"../src/auth/spotify/spotifyauth.module\";\nimport { SpotifyAuthService } from \"../src/auth/spotify/spotifyauth.service\";\nimport { BullBoardModule } from \"../src/bull-board/bull-board.module\";\nimport { BullBoardService } from \"../src/bull-board/bull-board.service\";\nimport { BullConfigModule } from \"../src/bull-config/bull-config.module\";\nimport { LiveGateway } from \"../src/live/live.gateway\";\nimport { LiveModule } from \"../src/live/live.module\";\nimport { RoomUsersService } from \"../src/live/roomusers/roomuser.service\";\nimport { RoomUsersModule } from \"../src/live/roomusers/roomuser.module\";\nimport { DbUtilsModule } from \"../src/modules/db-utils/db-utils.module\";\nimport { DbUtilsService } from \"../src/modules/db-utils/db-utils.service\";\nimport { DtoGenModule } from \"../src/modules/dto-gen/dto-gen.module\";\nimport { DtoGenService } from \"../src/modules/dto-gen/dto-gen.service\";\nimport { RoomsController } from \"../src/modules/rooms/rooms.controller\";\nimport { RoomsModule } from \"../src/modules/rooms/rooms.module\";\nimport { RoomsService } from \"../src/modules/rooms/rooms.service\";\nimport { SearchController } from \"../src/modules/search/search.controller\";\n//import { SearchModule } from \"../src/modules/search/search.module\";\nimport { SearchService } from \"../src/modules/search/search.service\";\n//import { UsersController } from \"../src/modules/users/users.controller\";\nimport { UsersModule } from \"../src/modules/users/users.module\";\nimport { UsersService } from \"../src/modules/users/users.service\";\nimport { S3Module } from \"../src/s3/s3.module\";\nimport { S3Service } from \"../src/s3/s3.service\";\nimport { SpotifyModule } from \"../src/spotify/spotify.module\";\nimport { SpotifyService } from \"../src/spotify/spotify.service\";\nimport { TasksModule } from \"../src/tasks/tasks.module\";\n//import { TasksProcessor } from \"../src/tasks/tasks.processor\";\nimport { TasksService } from \"../src/tasks/tasks.service\";\nimport { GenresService } from \"../src/modules/genres/genres.service\";\nimport { GenresController } from \"../src/modules/genres/genres.controller\";\nimport { EventQueueService } from \"../src/live/eventqueue/eventqueue.service\";\nimport { LiveService } from \"../src/live/live.service\";\nimport { SongsService } from \"../src/modules/songs/songs.service\";\nimport { SongsController } from \"../src/modules/songs/songs.controller\";\nimport { RoomQueueService } from \"../src/modules/rooms/roomqueue/roomqueue.service\";\nimport { DmUsersService } from \"../src/live/dmusers/dmusers.service\";\nimport { DmUsersModule } from \"../src/live/dmusers/dmusers.module\";\nimport { MyLogger } from \"../src/logger/logger.service\";\nimport { AutoModerationService } from \"../src/live/automod/automod.service\";\nimport { AutoModerationModule } from \"../src/live/automod/automod.module\";\nimport { RecommendationsService } from \"../src/recommendations/recommendations.service\";\nimport { RecommendationsModule } from \"../src/recommendations/recommendations.module\";\nimport { RoomAnalyticsService } from \"../src/modules/rooms/roomanalytics.service\";\nimport { Module } from \"@nestjs/common\";\nimport { MailerModule, MailerService } from \"@nestjs-modules/mailer\";\n\nconst tmpSecret: string | null = mockConfigService.get(\"JWT_SECRET_KEY\");\nif (!tmpSecret || tmpSecret === null) {\n\tthrow new Error(\"Mock JWT_SECRET_KEY is not defined\");\n}\nconst JWT_SECRET_KEY: string = tmpSecret;\n\n@Module({\n\tproviders: [\n\t\t{\n\t\t\tprovide: ConfigService,\n\t\t\tuseValue: mockConfigService,\n\t\t},\n\t],\n\texports: [ConfigService],\n})\nclass MockConfigModule {}\n\n@Module({\n\tproviders: [\n\t\t{\n\t\t\tprovide: PrismaService,\n\t\t\tuseValue: mockPrismaService,\n\t\t},\n\t],\n\texports: [PrismaService],\n})\nclass MockPrismaModule {}\n\n//AppModule\nexport async function createAppTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\tcontrollers: [AppController],\n\t\tproviders: [AppService, MyLogger],\n\t\timports: [\n\t\t\tMockConfigModule,\n\t\t\tMockPrismaModule,\n\t\t\tUsersModule,\n\t\t\tAuthModule,\n\t\t\tRoomsModule,\n\t\t\tDtoGenModule,\n\t\t\tDbUtilsModule,\n\t\t\tLiveModule,\n\t\t\tS3Module,\n\t\t\tMulterModule.register({\n\t\t\t\tdest: \"./uploads\",\n\t\t\t\tstorage: memoryStorage(),\n\t\t\t}),\n\t\t\tMailerModule.forRoot({\n\t\t\t\ttransport: {\n\t\t\t\t\thost: \"host\",\n\t\t\t\t\tport: 1234,\n\t\t\t\t\tauth: {\n\t\t\t\t\t\tuser: \"user\",\n\t\t\t\t\t\tpass: \"pass\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}),\n\t\t\tSpotifyModule,\n\t\t\tHttpModule,\n\t\t\tBullBoardModule,\n\t\t\tTasksModule,\n\t\t\tBullConfigModule,\n\t\t],\n\t}).compile();\n}\n\n//AuthModule\nexport async function createAuthTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\timports: [\n\t\t\tPassportModule,\n\t\t\tJwtModule.register({\n\t\t\t\tsecret: JWT_SECRET_KEY,\n\t\t\t\tsignOptions: { expiresIn: \"2h\" },\n\t\t\t}),\n\t\t\tMockConfigModule,\n\t\t\tMockPrismaModule,\n\t\t\tSpotifyModule,\n\t\t\tSpotifyAuthModule,\n\t\t],\n\t\tcontrollers: [AuthController],\n\t\tproviders: [\n\t\t\tAuthService,\n\t\t\t{ provide: UsersService, useValue: mockUsersService },\n\t\t],\n\t}).compile();\n}\n\n//SpotifyAuthModule\nexport async function createSpotifyAuthTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\tcontrollers: [SpotifyAuthController],\n\n\t\timports: [\n\t\t\tHttpModule,\n\t\t\tMockConfigModule,\n\t\t\tMockPrismaModule,\n\t\t\tDbUtilsModule,\n\t\t\tSpotifyModule,\n\t\t\tTasksModule,\n\t\t\tAuthModule,\n\t\t],\n\t\tproviders: [AuthService, SpotifyAuthService],\n\t\texports: [SpotifyAuthService],\n\t}).compile();\n}\n\n//BullBoardModule\nexport async function createBullBoardTestingModule(): Promise {\n\t// Mock of BullQueue_task-queue\n\tconst mockBullQueue = {\n\t\t// Mock methods and properties as needed by BullBoardService\n\t};\n\n\treturn await Test.createTestingModule({\n\t\tproviders: [\n\t\t\tBullBoardService,\n\t\t\t{ provide: \"BullQueue_task-queue\", useValue: mockBullQueue }, // Provide the mock here\n\t\t],\n\t}).compile();\n}\n\n//LiveModule\nexport async function createLiveTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\tproviders: [LiveGateway, EventQueueService, LiveService],\n\t\timports: [\n\t\t\tRoomUsersModule,\n\t\t\tDmUsersModule,\n\t\t\tDbUtilsModule,\n\t\t\tDtoGenModule,\n\t\t\tRoomsModule,\n\t\t\tUsersModule,\n\t\t\tAutoModerationModule,\n\t\t\tMockConfigModule,\n\t\t\tMockPrismaModule,\n\t\t],\n\t\texports: [RoomUsersModule, DmUsersModule, LiveGateway],\n\t}).compile();\n}\n\n//RoomUsersModule\nexport async function createRoomUsersTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\timports: [\n\t\t\tDtoGenModule,\n\t\t\tDbUtilsModule,\n\t\t\tAutoModerationModule,\n\t\t\tMockPrismaModule,\n\t\t],\n\t\tproviders: [RoomUsersService],\n\t\texports: [RoomUsersService],\n\t}).compile();\n}\n\n//DmUsersModule\nexport async function createDMUsersTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\timports: [\n\t\t\tDtoGenModule,\n\t\t\tDbUtilsModule,\n\t\t\tUsersModule,\n\t\t\tAutoModerationModule,\n\t\t\tMockPrismaModule,\n\t\t],\n\t\tproviders: [DmUsersService],\n\t\texports: [DmUsersService],\n\t}).compile();\n}\n\n//DbUtilsModule\nexport async function createDbUtilsTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\timports: [MockConfigModule, MockPrismaModule],\n\t\tproviders: [DbUtilsService],\n\t\texports: [DbUtilsService],\n\t}).compile();\n}\n\n//DtoGenModule\nexport async function createDtoGenTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\timports: [DbUtilsModule, MockConfigModule, MockPrismaModule],\n\t\tproviders: [DtoGenService],\n\t}).compile();\n}\n\n//RoomsModule\nexport async function createRoomsTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\timports: [\n\t\t\tMockPrismaModule,\n\t\t\tDtoGenModule,\n\t\t\tDbUtilsModule,\n\t\t\tAuthModule,\n\t\t\tRecommendationsModule,\n\t\t\tMockConfigModule,\n\t\t],\n\t\tcontrollers: [RoomsController],\n\t\tproviders: [RoomsService, RoomAnalyticsService],\n\t\texports: [RoomsService, RoomAnalyticsService],\n\t}).compile();\n}\n\n//SearchModule\nexport async function createSearchTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\timports: [MockConfigModule, MockPrismaModule],\n\t\tcontrollers: [SearchController],\n\t\tproviders: [SearchService, AuthService, DtoGenService, DbUtilsService],\n\t\texports: [SearchService],\n\t}).compile();\n}\n\n//UsersModule\nexport async function createUsersTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\timports: [PrismaModule, RecommendationsModule],\n\t\tproviders: [\n\t\t\t{ provide: UsersService, useValue: mockUsersService },\n\t\t\t{ provide: PrismaService, useValue: mockPrismaService },\n\t\t\tDtoGenService,\n\t\t\tDbUtilsService,\n\t\t\tRecommendationsService,\n\t\t\tAuthService,\n\t\t\tMailerService,\n\t\t\t{ provide: ConfigService, useValue: mockConfigService }, // Provide the mockConfigService\n\t\t],\n\t}).compile();\n}\n\nexport async function createUsersUpdateTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\timports: [PrismaModule],\n\t\tproviders: [\n\t\t\t{ provide: UsersService, useValue: mockUsersService },\n\t\t\tPrismaService,\n\t\t\tDtoGenService,\n\t\t\tDbUtilsService,\n\t\t\tAuthService,\n\t\t\tRecommendationsService,\n\t\t\t{ provide: ConfigService, useValue: mockConfigService }, // Provide the mockConfigService\n\t\t],\n\t}).compile();\n}\n\n//S3Module\nexport async function createS3TestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\timports: [MockConfigModule, MockPrismaModule],\n\t\tproviders: [S3Service],\n\t}).compile();\n}\n\n//SpotifyModule\nexport async function createSpotifyTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\timports: [HttpModule, DbUtilsModule, MockConfigModule, MockPrismaModule],\n\t\tproviders: [SpotifyService],\n\t}).compile();\n}\n\n//TasksModule\nexport async function createTasksTestingModule(): Promise {\n\t// Mock of BullQueue_task-queue\n\tconst mockBullQueue = {\n\t\t// Mock methods and properties as needed by BullBoardService\n\t};\n\n\treturn await Test.createTestingModule({\n\t\timports: [SpotifyModule, BullBoardModule, MockPrismaModule],\n\t\tproviders: [\n\t\t\tTasksService,\n\t\t\t{ provide: \"BullQueue_task-queue\", useValue: mockBullQueue },\n\t\t], // Provide the mock here\n\t}).compile();\n}\n\n//GenresModule\nexport async function createGenresTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\timports: [MockPrismaModule],\n\t\tproviders: [GenresService],\n\t\tcontrollers: [GenresController],\n\t}).compile();\n}\n\n//SongsModule\nexport async function createSongsTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\timports: [AuthModule, MockPrismaModule],\n\t\tproviders: [SongsService],\n\t\tcontrollers: [SongsController],\n\t\texports: [SongsService],\n\t}).compile();\n}\n\n//RoomQueueModule\nexport async function createRoomQueueTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\timports: [\n\t\t\tPrismaModule,\n\t\t\tDtoGenModule,\n\t\t\tDbUtilsModule,\n\t\t\tSpotifyModule,\n\t\t\tSpotifyAuthModule,\n\t\t],\n\t\tproviders: [\n\t\t\tRoomQueueService,\n\t\t\t{ provide: PrismaService, useValue: mockPrismaService },\n\t\t],\n\t\texports: [RoomQueueService],\n\t}).compile();\n}\n\n//AutoModerationModule\nexport async function createAutoModerationTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\tproviders: [AutoModerationService],\n\t\texports: [AutoModerationService],\n\t}).compile();\n}\n\n//RecommendationsModule\nexport async function createRecommendationsTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\timports: [MockPrismaModule],\n\t\tproviders: [RecommendationsService],\n\t\texports: [RecommendationsService],\n\t}).compile();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MockPrismaModule.html":{"url":"modules/MockPrismaModule.html","title":"module - MockPrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    MockPrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MockPrismaModule\n\n\n\ncluster_MockPrismaModule_exports\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nMockPrismaModule\n\nMockPrismaModule\n\nPrismaService  -->\n\nMockPrismaModule->PrismaService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            jest_mocking/module-mocking.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Test, TestingModule } from \"@nestjs/testing\";\n\nimport { MulterModule } from \"@nestjs/platform-express\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { HttpModule } from \"@nestjs/axios\";\nimport { memoryStorage } from \"multer\";\n\nimport { PassportModule } from \"@nestjs/passport\";\nimport { JwtModule } from \"@nestjs/jwt\";\n\nimport { PrismaService } from \"../prisma/prisma.service\";\nimport { PrismaModule } from \"./../prisma/prisma.module\";\n\nimport {\n\tmockConfigService,\n\tmockPrismaService,\n\tmockUsersService,\n} from \"./service-mocking\";\n\nimport { AppController } from \"../src/app.controller\";\nimport { AppService } from \"../src/app.service\";\nimport { AuthController } from \"../src/auth/auth.controller\";\nimport { AuthModule } from \"../src/auth/auth.module\";\nimport { AuthService } from \"../src/auth/auth.service\";\nimport { SpotifyAuthController } from \"../src/auth/spotify/spotifyauth.controller\";\nimport { SpotifyAuthModule } from \"../src/auth/spotify/spotifyauth.module\";\nimport { SpotifyAuthService } from \"../src/auth/spotify/spotifyauth.service\";\nimport { BullBoardModule } from \"../src/bull-board/bull-board.module\";\nimport { BullBoardService } from \"../src/bull-board/bull-board.service\";\nimport { BullConfigModule } from \"../src/bull-config/bull-config.module\";\nimport { LiveGateway } from \"../src/live/live.gateway\";\nimport { LiveModule } from \"../src/live/live.module\";\nimport { RoomUsersService } from \"../src/live/roomusers/roomuser.service\";\nimport { RoomUsersModule } from \"../src/live/roomusers/roomuser.module\";\nimport { DbUtilsModule } from \"../src/modules/db-utils/db-utils.module\";\nimport { DbUtilsService } from \"../src/modules/db-utils/db-utils.service\";\nimport { DtoGenModule } from \"../src/modules/dto-gen/dto-gen.module\";\nimport { DtoGenService } from \"../src/modules/dto-gen/dto-gen.service\";\nimport { RoomsController } from \"../src/modules/rooms/rooms.controller\";\nimport { RoomsModule } from \"../src/modules/rooms/rooms.module\";\nimport { RoomsService } from \"../src/modules/rooms/rooms.service\";\nimport { SearchController } from \"../src/modules/search/search.controller\";\n//import { SearchModule } from \"../src/modules/search/search.module\";\nimport { SearchService } from \"../src/modules/search/search.service\";\n//import { UsersController } from \"../src/modules/users/users.controller\";\nimport { UsersModule } from \"../src/modules/users/users.module\";\nimport { UsersService } from \"../src/modules/users/users.service\";\nimport { S3Module } from \"../src/s3/s3.module\";\nimport { S3Service } from \"../src/s3/s3.service\";\nimport { SpotifyModule } from \"../src/spotify/spotify.module\";\nimport { SpotifyService } from \"../src/spotify/spotify.service\";\nimport { TasksModule } from \"../src/tasks/tasks.module\";\n//import { TasksProcessor } from \"../src/tasks/tasks.processor\";\nimport { TasksService } from \"../src/tasks/tasks.service\";\nimport { GenresService } from \"../src/modules/genres/genres.service\";\nimport { GenresController } from \"../src/modules/genres/genres.controller\";\nimport { EventQueueService } from \"../src/live/eventqueue/eventqueue.service\";\nimport { LiveService } from \"../src/live/live.service\";\nimport { SongsService } from \"../src/modules/songs/songs.service\";\nimport { SongsController } from \"../src/modules/songs/songs.controller\";\nimport { RoomQueueService } from \"../src/modules/rooms/roomqueue/roomqueue.service\";\nimport { DmUsersService } from \"../src/live/dmusers/dmusers.service\";\nimport { DmUsersModule } from \"../src/live/dmusers/dmusers.module\";\nimport { MyLogger } from \"../src/logger/logger.service\";\nimport { AutoModerationService } from \"../src/live/automod/automod.service\";\nimport { AutoModerationModule } from \"../src/live/automod/automod.module\";\nimport { RecommendationsService } from \"../src/recommendations/recommendations.service\";\nimport { RecommendationsModule } from \"../src/recommendations/recommendations.module\";\nimport { RoomAnalyticsService } from \"../src/modules/rooms/roomanalytics.service\";\nimport { Module } from \"@nestjs/common\";\nimport { MailerModule, MailerService } from \"@nestjs-modules/mailer\";\n\nconst tmpSecret: string | null = mockConfigService.get(\"JWT_SECRET_KEY\");\nif (!tmpSecret || tmpSecret === null) {\n\tthrow new Error(\"Mock JWT_SECRET_KEY is not defined\");\n}\nconst JWT_SECRET_KEY: string = tmpSecret;\n\n@Module({\n\tproviders: [\n\t\t{\n\t\t\tprovide: ConfigService,\n\t\t\tuseValue: mockConfigService,\n\t\t},\n\t],\n\texports: [ConfigService],\n})\nclass MockConfigModule {}\n\n@Module({\n\tproviders: [\n\t\t{\n\t\t\tprovide: PrismaService,\n\t\t\tuseValue: mockPrismaService,\n\t\t},\n\t],\n\texports: [PrismaService],\n})\nclass MockPrismaModule {}\n\n//AppModule\nexport async function createAppTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\tcontrollers: [AppController],\n\t\tproviders: [AppService, MyLogger],\n\t\timports: [\n\t\t\tMockConfigModule,\n\t\t\tMockPrismaModule,\n\t\t\tUsersModule,\n\t\t\tAuthModule,\n\t\t\tRoomsModule,\n\t\t\tDtoGenModule,\n\t\t\tDbUtilsModule,\n\t\t\tLiveModule,\n\t\t\tS3Module,\n\t\t\tMulterModule.register({\n\t\t\t\tdest: \"./uploads\",\n\t\t\t\tstorage: memoryStorage(),\n\t\t\t}),\n\t\t\tMailerModule.forRoot({\n\t\t\t\ttransport: {\n\t\t\t\t\thost: \"host\",\n\t\t\t\t\tport: 1234,\n\t\t\t\t\tauth: {\n\t\t\t\t\t\tuser: \"user\",\n\t\t\t\t\t\tpass: \"pass\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}),\n\t\t\tSpotifyModule,\n\t\t\tHttpModule,\n\t\t\tBullBoardModule,\n\t\t\tTasksModule,\n\t\t\tBullConfigModule,\n\t\t],\n\t}).compile();\n}\n\n//AuthModule\nexport async function createAuthTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\timports: [\n\t\t\tPassportModule,\n\t\t\tJwtModule.register({\n\t\t\t\tsecret: JWT_SECRET_KEY,\n\t\t\t\tsignOptions: { expiresIn: \"2h\" },\n\t\t\t}),\n\t\t\tMockConfigModule,\n\t\t\tMockPrismaModule,\n\t\t\tSpotifyModule,\n\t\t\tSpotifyAuthModule,\n\t\t],\n\t\tcontrollers: [AuthController],\n\t\tproviders: [\n\t\t\tAuthService,\n\t\t\t{ provide: UsersService, useValue: mockUsersService },\n\t\t],\n\t}).compile();\n}\n\n//SpotifyAuthModule\nexport async function createSpotifyAuthTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\tcontrollers: [SpotifyAuthController],\n\n\t\timports: [\n\t\t\tHttpModule,\n\t\t\tMockConfigModule,\n\t\t\tMockPrismaModule,\n\t\t\tDbUtilsModule,\n\t\t\tSpotifyModule,\n\t\t\tTasksModule,\n\t\t\tAuthModule,\n\t\t],\n\t\tproviders: [AuthService, SpotifyAuthService],\n\t\texports: [SpotifyAuthService],\n\t}).compile();\n}\n\n//BullBoardModule\nexport async function createBullBoardTestingModule(): Promise {\n\t// Mock of BullQueue_task-queue\n\tconst mockBullQueue = {\n\t\t// Mock methods and properties as needed by BullBoardService\n\t};\n\n\treturn await Test.createTestingModule({\n\t\tproviders: [\n\t\t\tBullBoardService,\n\t\t\t{ provide: \"BullQueue_task-queue\", useValue: mockBullQueue }, // Provide the mock here\n\t\t],\n\t}).compile();\n}\n\n//LiveModule\nexport async function createLiveTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\tproviders: [LiveGateway, EventQueueService, LiveService],\n\t\timports: [\n\t\t\tRoomUsersModule,\n\t\t\tDmUsersModule,\n\t\t\tDbUtilsModule,\n\t\t\tDtoGenModule,\n\t\t\tRoomsModule,\n\t\t\tUsersModule,\n\t\t\tAutoModerationModule,\n\t\t\tMockConfigModule,\n\t\t\tMockPrismaModule,\n\t\t],\n\t\texports: [RoomUsersModule, DmUsersModule, LiveGateway],\n\t}).compile();\n}\n\n//RoomUsersModule\nexport async function createRoomUsersTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\timports: [\n\t\t\tDtoGenModule,\n\t\t\tDbUtilsModule,\n\t\t\tAutoModerationModule,\n\t\t\tMockPrismaModule,\n\t\t],\n\t\tproviders: [RoomUsersService],\n\t\texports: [RoomUsersService],\n\t}).compile();\n}\n\n//DmUsersModule\nexport async function createDMUsersTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\timports: [\n\t\t\tDtoGenModule,\n\t\t\tDbUtilsModule,\n\t\t\tUsersModule,\n\t\t\tAutoModerationModule,\n\t\t\tMockPrismaModule,\n\t\t],\n\t\tproviders: [DmUsersService],\n\t\texports: [DmUsersService],\n\t}).compile();\n}\n\n//DbUtilsModule\nexport async function createDbUtilsTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\timports: [MockConfigModule, MockPrismaModule],\n\t\tproviders: [DbUtilsService],\n\t\texports: [DbUtilsService],\n\t}).compile();\n}\n\n//DtoGenModule\nexport async function createDtoGenTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\timports: [DbUtilsModule, MockConfigModule, MockPrismaModule],\n\t\tproviders: [DtoGenService],\n\t}).compile();\n}\n\n//RoomsModule\nexport async function createRoomsTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\timports: [\n\t\t\tMockPrismaModule,\n\t\t\tDtoGenModule,\n\t\t\tDbUtilsModule,\n\t\t\tAuthModule,\n\t\t\tRecommendationsModule,\n\t\t\tMockConfigModule,\n\t\t],\n\t\tcontrollers: [RoomsController],\n\t\tproviders: [RoomsService, RoomAnalyticsService],\n\t\texports: [RoomsService, RoomAnalyticsService],\n\t}).compile();\n}\n\n//SearchModule\nexport async function createSearchTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\timports: [MockConfigModule, MockPrismaModule],\n\t\tcontrollers: [SearchController],\n\t\tproviders: [SearchService, AuthService, DtoGenService, DbUtilsService],\n\t\texports: [SearchService],\n\t}).compile();\n}\n\n//UsersModule\nexport async function createUsersTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\timports: [PrismaModule, RecommendationsModule],\n\t\tproviders: [\n\t\t\t{ provide: UsersService, useValue: mockUsersService },\n\t\t\t{ provide: PrismaService, useValue: mockPrismaService },\n\t\t\tDtoGenService,\n\t\t\tDbUtilsService,\n\t\t\tRecommendationsService,\n\t\t\tAuthService,\n\t\t\tMailerService,\n\t\t\t{ provide: ConfigService, useValue: mockConfigService }, // Provide the mockConfigService\n\t\t],\n\t}).compile();\n}\n\nexport async function createUsersUpdateTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\timports: [PrismaModule],\n\t\tproviders: [\n\t\t\t{ provide: UsersService, useValue: mockUsersService },\n\t\t\tPrismaService,\n\t\t\tDtoGenService,\n\t\t\tDbUtilsService,\n\t\t\tAuthService,\n\t\t\tRecommendationsService,\n\t\t\t{ provide: ConfigService, useValue: mockConfigService }, // Provide the mockConfigService\n\t\t],\n\t}).compile();\n}\n\n//S3Module\nexport async function createS3TestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\timports: [MockConfigModule, MockPrismaModule],\n\t\tproviders: [S3Service],\n\t}).compile();\n}\n\n//SpotifyModule\nexport async function createSpotifyTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\timports: [HttpModule, DbUtilsModule, MockConfigModule, MockPrismaModule],\n\t\tproviders: [SpotifyService],\n\t}).compile();\n}\n\n//TasksModule\nexport async function createTasksTestingModule(): Promise {\n\t// Mock of BullQueue_task-queue\n\tconst mockBullQueue = {\n\t\t// Mock methods and properties as needed by BullBoardService\n\t};\n\n\treturn await Test.createTestingModule({\n\t\timports: [SpotifyModule, BullBoardModule, MockPrismaModule],\n\t\tproviders: [\n\t\t\tTasksService,\n\t\t\t{ provide: \"BullQueue_task-queue\", useValue: mockBullQueue },\n\t\t], // Provide the mock here\n\t}).compile();\n}\n\n//GenresModule\nexport async function createGenresTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\timports: [MockPrismaModule],\n\t\tproviders: [GenresService],\n\t\tcontrollers: [GenresController],\n\t}).compile();\n}\n\n//SongsModule\nexport async function createSongsTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\timports: [AuthModule, MockPrismaModule],\n\t\tproviders: [SongsService],\n\t\tcontrollers: [SongsController],\n\t\texports: [SongsService],\n\t}).compile();\n}\n\n//RoomQueueModule\nexport async function createRoomQueueTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\timports: [\n\t\t\tPrismaModule,\n\t\t\tDtoGenModule,\n\t\t\tDbUtilsModule,\n\t\t\tSpotifyModule,\n\t\t\tSpotifyAuthModule,\n\t\t],\n\t\tproviders: [\n\t\t\tRoomQueueService,\n\t\t\t{ provide: PrismaService, useValue: mockPrismaService },\n\t\t],\n\t\texports: [RoomQueueService],\n\t}).compile();\n}\n\n//AutoModerationModule\nexport async function createAutoModerationTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\tproviders: [AutoModerationService],\n\t\texports: [AutoModerationService],\n\t}).compile();\n}\n\n//RecommendationsModule\nexport async function createRecommendationsTestingModule(): Promise {\n\treturn await Test.createTestingModule({\n\t\timports: [MockPrismaModule],\n\t\tproviders: [RecommendationsService],\n\t\texports: [RecommendationsService],\n\t}).compile();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MyLogger.html":{"url":"injectables/MyLogger.html","title":"injectable - MyLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MyLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/logger.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/logger/logger.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: string, trace: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/logger/logger.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                trace\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/logger/logger.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/logger/logger.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/logger/logger.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLogger({\n\t\tlevel: \"info\",\n\t\tformat: format.combine(format.timestamp(), format.json()),\n\t\ttransports: [\n\t\t\tnew transports.Console(),\n\t\t\tnew transports.File({ filename: \"combined.log\" }),\n\t\t\tnew transports.File({ filename: \"errors.log\", level: \"error\" }),\n\t\t],\n\t})\n                    \n                \n                    \n                        \n                                Defined in src/logger/logger.service.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, LoggerService } from \"@nestjs/common\";\nimport { createLogger, format, transports } from \"winston\";\n\n@Injectable()\nexport class MyLogger implements LoggerService {\n\tprivate readonly logger = createLogger({\n\t\tlevel: \"info\",\n\t\tformat: format.combine(format.timestamp(), format.json()),\n\t\ttransports: [\n\t\t\tnew transports.Console(),\n\t\t\tnew transports.File({ filename: \"combined.log\" }),\n\t\t\tnew transports.File({ filename: \"errors.log\", level: \"error\" }),\n\t\t],\n\t});\n\n\tlog(message: string) {\n\t\tthis.logger.info(message);\n\t}\n\n\terror(message: string, trace: string) {\n\t\tthis.logger.error(message, { trace });\n\t}\n\n\twarn(message: string) {\n\t\tthis.logger.warn(message);\n\t}\n\n\tdebug(message: string) {\n\t\tthis.logger.debug(message);\n\t}\n\n\tverbose(message: string) {\n\t\tthis.logger.verbose(message);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParticipantsPerHourDto.html":{"url":"classes/ParticipantsPerHourDto.html","title":"class - ParticipantsPerHourDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParticipantsPerHourDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/dto/roomanalytics.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                count\n                            \n                            \n                                    \n                                    \n                                instance\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of participants in the room at the given hour'})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        instance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The specific hour for participant count', type: Date})@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:89\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n\tIsArray,\n\tIsDate,\n\tIsNumber,\n\tIsObject,\n\tIsString,\n\tValidateNested,\n} from \"class-validator\";\nimport { UserDto } from \"../../users/dto/user.dto\";\nimport { Type } from \"class-transformer\";\nexport class RoomAnalyticsKeyMetricsDto {\n\t// an object called unique visitors with two properties, count and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"UniqueVisitors\",\n\t\tdescription: \"Unique visitors to the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tcount: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tunique_visitors: {\n\t\tcount: number;\n\t\tpercentage_change: number;\n\t};\n\n\t// an object called returning_visitors with two properties, count and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"ReturningVisitors\",\n\t\tdescription: \"Returning visitors to the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tcount: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\treturning_visitors: {\n\t\tcount: number;\n\t\tpercentage_change: number;\n\t};\n\n\t// an object called average_session_duration with two properties, duration and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"AverageSessionDuration\",\n\t\tdescription: \"Average session duration in the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tduration: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\taverage_session_duration: {\n\t\tduration: number;\n\t\tpercentage_change: number;\n\t};\n}\n\nexport class RoomAnalyticsQueueDto {\n\t@ApiProperty({ description: \"Total number of songs ever queued in the room\" })\n\t@IsNumber()\n\ttotal_songs_queued: number;\n\n\t@ApiProperty({\n\t\tdescription: \"Number of times the room's queue was exported as a playlist\",\n\t})\n\t@IsNumber()\n\ttotal_queue_exports: number;\n}\n\nexport class ParticipantsPerHourDto {\n\t@ApiProperty({\n\t\tdescription: \"The number of participants in the room at the given hour\",\n\t})\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The specific hour for participant count\",\n\t\ttype: Date,\n\t})\n\t@IsDate()\n\tinstance: Date;\n}\n\nexport class AllTimeSessionDataDto {\n\t@ApiProperty({\n\t\tdescription: \"The average session duration of the room\",\n\t})\n\t@IsNumber()\n\tavg_duration: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The minimum session duration of the room\",\n\t})\n\t@IsNumber()\n\tmin_duration: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The maximum session duration of the room\",\n\t})\n\t@IsNumber()\n\tmax_duration: number;\n}\n\nexport class SessionDurationPerDayDto {\n\t@ApiProperty({ type: \"number\" })\n\tduration: number;\n\n\t@ApiProperty({ type: Date })\n\tday: Date;\n}\n\nexport class SessionDataPerDayDto {\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tavg_duration: SessionDurationPerDayDto[];\n\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tmin_duration: SessionDurationPerDayDto[];\n\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tmax_duration: SessionDurationPerDayDto[];\n}\n\nexport class JoinsCount {\n\t@ApiProperty({ type: \"number\" })\n\tcount: number;\n\n\t@ApiProperty({ type: Date })\n\tday: Date;\n}\n\nexport class JoinsPerDay {\n\ttotal_joins: JoinsCount[];\n\tunique_joins: JoinsCount[];\n}\n\nexport class RoomAnalyticsParticipationDto {\n\t@ApiProperty({\n\t\ttitle: \"Joins\",\n\t\tdescription:\n\t\t\t\"Join statistics, including total and unique joins per day and all-time\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tper_day: {\n\t\t\t\ttitle: \"JoinsPerDay\",\n\t\t\t\ttype: \"object\",\n\t\t\t},\n\t\t\tall_time: {\n\t\t\t\ttitle: \"JoinsAllTime\",\n\t\t\t\ttype: \"object\",\n\t\t\t\tproperties: {\n\t\t\t\t\ttotal_joins: { type: \"number\" },\n\t\t\t\t\tunique_joins: { type: \"number\" },\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tjoins: {\n\t\tper_day: JoinsPerDay;\n\t\tall_time: {\n\t\t\ttotal_joins: number;\n\t\t\tunique_joins: number;\n\t\t};\n\t};\n\n\t@ApiProperty({\n\t\tdescription: \"Participants per hour data\",\n\t\ttype: ParticipantsPerHourDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => ParticipantsPerHourDto)\n\tparticipants_per_hour: ParticipantsPerHourDto[];\n\n\t@ApiProperty({\n\t\ttitle: \"SessionData\",\n\t\tdescription:\n\t\t\t\"Session data including average, minimum, and maximum duration all-time and per day\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tall_time: {\n\t\t\t\ttype: \"object\",\n\t\t\t\ttitle: \"AllTimeSessionDataDto\",\n\t\t\t},\n\t\t\tper_day: {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: {\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\ttitle: \"SessionDurationPerDayDto\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tsession_data: {\n\t\tall_time: AllTimeSessionDataDto;\n\t\tper_day: SessionDurationPerDayDto[];\n\t};\n\n\t@ApiProperty({\n\t\ttitle: \"ReturnVisits\",\n\t\tdescription: \"Expected return visits and probability of return\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\texpected_return_count: { type: \"number\" },\n\t\t\tprobability_of_return: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\treturn_visits: {\n\t\texpected_return_count: number;\n\t\tprobability_of_return: number;\n\t};\n\n\t@ApiProperty({\n\t\tdescription: \"Number of previews of the room, i.e. without joining\",\n\t})\n\t@IsNumber()\n\troom_previews: number;\n}\n\nexport class MessagesPerHour {\n\t@ApiProperty({ type: \"number\" })\n\tcount: number;\n\n\t@ApiProperty({ type: Date })\n\thour: Date;\n}\n\nexport class RoomAnalyticsInteractionsDto {\n\t@ApiProperty({\n\t\ttitle: \"Messages\",\n\t\tdescription: \"Total messages sent and messages sent per hour\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\ttotal: { type: \"number\" },\n\t\t\tper_hour: {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: {\n\t\t\t\t\ttitle: \"MessagesPerHour\",\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tmessages: {\n\t\ttotal: number;\n\t\tper_hour: MessagesPerHour[];\n\t};\n\n\t@ApiProperty({ description: \"Total number of reactions sent in the room\" })\n\t@IsNumber()\n\treactions_sent: number;\n\n\t@ApiProperty({ description: \"Number of times the room was bookmarked\" })\n\t@IsNumber()\n\tbookmarked_count: number;\n}\n\nexport class SongAnalyticsDto {\n\t@ApiProperty({ description: \"Spotify ID of the song\" })\n\t@IsString()\n\tspotify_id: string;\n\n\t@ApiProperty({ description: \"Internal song ID\" })\n\tsong_id: string;\n\n\t@ApiProperty({ description: \"Number of times the song was played\" })\n\t@IsNumber()\n\tplays: number;\n\n\t@ApiProperty({ description: \"Number of upvotes the song received\" })\n\t@IsNumber()\n\tupvotes: number;\n\n\t@ApiProperty({ description: \"Number of downvotes the song received\" })\n\t@IsNumber()\n\tdownvotes: number;\n\n\t@ApiProperty({ description: \"Rank of the song based on some criteria\" })\n\t@IsNumber()\n\trank: number;\n\n\t@ApiProperty({ description: \"Global rank of the song across all rooms\" })\n\t@IsNumber()\n\tglobal_rank: number;\n}\n\nexport class RoomAnalyticsVotesDto {\n\t@ApiProperty({ description: \"Total number of upvotes for songs in the room\" })\n\t@IsNumber()\n\ttotal_upvotes: number;\n\n\t@ApiProperty({\n\t\tdescription: \"Total number of downvotes for songs in the room\",\n\t})\n\t@IsNumber()\n\ttotal_downvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Daily percentage change in upvotes for songs in the room. (last 24 hours)\",\n\t})\n\t@IsNumber()\n\tdaily_percentage_change_in_upvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Daily percentage change in downvotes for songs in the room. (last 24 hours)\",\n\t})\n\t@IsNumber()\n\tdaily_percentage_change_in_downvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Details of songs including Spotify ID, song ID, upvotes, and downvotes\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\tsongs: SongAnalyticsDto[];\n}\n\nexport class RoomAnalyticsSongsDto {\n\t@ApiProperty({\n\t\ttitle: \"MostPlayed\",\n\t\tdescription: \"Most played songs in the room\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\tmost_played: SongAnalyticsDto[];\n\n\t@ApiProperty({\n\t\tdescription: \"Top voted songs in the room\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\ttop_voted: SongAnalyticsDto[];\n}\n\nexport class RoomAnalyticsContributorsDto {\n\t@ApiProperty({\n\t\ttitle: \"TopContributors\",\n\t\tdescription: \"Top contributors to the room's queue\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tuser: { title: \"UserDto\", type: \"object\" },\n\t\t\trank: { type: \"number\" },\n\t\t\tnum_songs: { type: \"number\" },\n\t\t\tnum_upvotes: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\ttop_contributors: {\n\t\tuser: UserDto;\n\t\trank: number;\n\t\tnum_songs: number;\n\t\tnum_upvotes: number;\n\t};\n}\n\nexport class RoomAnalyticsDto {\n\t@ApiProperty({ description: \"Queue analytics\", type: RoomAnalyticsQueueDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsQueueDto)\n\tqueue: RoomAnalyticsQueueDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Participation analytics\",\n\t\ttype: RoomAnalyticsParticipationDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsParticipationDto)\n\tparticipation: RoomAnalyticsParticipationDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Interactions analytics\",\n\t\ttype: RoomAnalyticsInteractionsDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsInteractionsDto)\n\tinteractions: RoomAnalyticsInteractionsDto;\n\n\t@ApiProperty({ description: \"Votes analytics\", type: RoomAnalyticsVotesDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsVotesDto)\n\tvotes: RoomAnalyticsVotesDto;\n\n\t@ApiProperty({ description: \"Songs analytics\", type: RoomAnalyticsSongsDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsSongsDto)\n\tsongs: RoomAnalyticsSongsDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Contributors analytics\",\n\t\ttype: RoomAnalyticsContributorsDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsContributorsDto)\n\tcontributors: RoomAnalyticsContributorsDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PlaybackEventDto.html":{"url":"classes/PlaybackEventDto.html","title":"class - PlaybackEventDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PlaybackEventDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/live/dto/playbackevent.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                date_created\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                errorMessage\n                            \n                            \n                                    \n                                    \n                                roomID\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                song\n                            \n                            \n                                    \n                                    \n                                spotifyID\n                            \n                            \n                                    \n                                    \n                                userID\n                            \n                            \n                                    \n                                    \n                                UTC_time\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        date_created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/live/dto/playbackevent.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        errorMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/live/dto/playbackevent.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        roomID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/live/dto/playbackevent.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        song\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RoomSongDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/live/dto/playbackevent.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        spotifyID\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The songID that was played, or null if no song was played', type: String, nullable: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/live/dto/playbackevent.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userID\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The userID that triggered the event, or null if emitted by the server', type: String, nullable: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/live/dto/playbackevent.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        UTC_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The UTC time the event was triggered, or null if no time was recorded', type: Number, nullable: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/live/dto/playbackevent.dto.ts:45\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsString, IsObject, IsDate } from \"class-validator\";\nimport { RoomSongDto } from \"src/modules/rooms/dto/roomsong.dto\";\n\nexport class PlaybackEventDto {\n\t@ApiPropertyOptional()\n\t@IsDate()\n\tdate_created?: Date;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"The userID that triggered the event, or null if emitted by the server\",\n\t\ttype: String,\n\t\tnullable: true,\n\t})\n\t@IsString()\n\tuserID: string | null;\n\n\t@ApiProperty()\n\t@IsString()\n\troomID: string;\n\n\t@ApiProperty({\n\t\tdescription: \"The songID that was played, or null if no song was played\",\n\t\ttype: String,\n\t\tnullable: true,\n\t})\n\t@IsString()\n\tspotifyID: string | null;\n\n\t@ApiProperty()\n\t@IsObject()\n\tsong?: RoomSongDto | null;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"The UTC time the event was triggered, or null if no time was recorded\",\n\t\ttype: Number,\n\t\tnullable: true,\n\t})\n\t@IsString()\n\tUTC_time: number | null;\n\n\t@ApiPropertyOptional()\n\t@IsString()\n\terrorMessage?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_PrismaModule_imports\n\n\n\ncluster_PrismaModule_exports\n\n\n\n\nRetryModule\n\nRetryModule\n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaModule -->\n\nRetryModule->PrismaModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RetryModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PrismaService } from \"./prisma.service\";\nimport { RetryModule } from \"../src/retry/retry.module\";\n\n@Module({\n\timports: [RetryModule],\n\tproviders: [PrismaService],\n\texports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(retryService: RetryService)\n                    \n                \n                        \n                            \n                                Defined in prisma/prisma.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        retryService\n                                                  \n                                                        \n                                                                        RetryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in prisma/prisma.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in prisma/prisma.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(PrismaService.name)\n                    \n                \n                    \n                        \n                                Defined in prisma/prisma.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n\tInjectable,\n\tOnModuleInit,\n\tOnModuleDestroy,\n\tLogger,\n} from \"@nestjs/common\";\nimport { PrismaClient } from \"@prisma/client\";\nimport { RetryService, RetryStatus } from \"../src/retry/retry.service\";\n\nconst RETRIES = 10;\n\n@Injectable()\nexport class PrismaService\n\textends PrismaClient\n\timplements OnModuleInit, OnModuleDestroy\n{\n\tprivate readonly logger = new Logger(PrismaService.name);\n\n\tconstructor(private readonly retryService: RetryService) {\n\t\tsuper();\n\t\tprocess.on(\"SIGINT\", async () => {\n\t\t\tthis.logger.warn(\n\t\t\t\t\"SIGINT signal received. Closing database connection...\",\n\t\t\t);\n\t\t\tawait this.$disconnect();\n\t\t\tprocess.exit(0);\n\t\t});\n\t}\n\n\tasync onModuleInit() {\n\t\ttry {\n\t\t\tconst executeRequest = async (status: RetryStatus) => {\n\t\t\t\tif (status.index > 0) {\n\t\t\t\t\tconsole.log(`Retrying... Attempt #${status.index + 1}`);\n\t\t\t\t}\n\t\t\t\treturn await this.$connect().then(() => {\n\t\t\t\t\tthis.logger.log(\"Connected to the database\");\n\t\t\t\t});\n\t\t\t};\n\n\t\t\t// Call retryAsync, passing the function and options\n\t\t\tawait this.retryService.retryAsync(executeRequest, {\n\t\t\t\tretry: RETRIES,\n\t\t\t\tdelay: (status: RetryStatus) => {\n\t\t\t\t\t// Optionally use exponential backoff or fixed delay\n\t\t\t\t\tconst delay = Math.pow(2, status.index) * 50; // Exponential backoff (50ms * 2^index)\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t`Waiting for ${delay}ms before attempting database reconnection...`,\n\t\t\t\t\t);\n\t\t\t\t\treturn delay;\n\t\t\t\t},\n\t\t\t\terror: (status: RetryStatus) => {\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t`Error encountered on attempt #${status.index + 1}:`,\n\t\t\t\t\t\tstatus.error.message,\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\tthis.logger.error(\n\t\t\t\t`Failed to connect to the database after ${RETRIES} retries. Exiting...`,\n\t\t\t);\n\t\t\tprocess.exit(1);\n\t\t}\n\t}\n\n\tasync onModuleDestroy() {\n\t\tawait this.$disconnect();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProfileController.html":{"url":"controllers/ProfileController.html","title":"controller - ProfileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProfileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            archive/modules/profile/profile.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                profile\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                followUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getProfileByUsername\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                patchProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                putProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                unfollowUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        followUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    followUser(req: any, username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Post(':username/follow')@ApiTags('profile')@ApiOperation({summary: 'Follow the given user'})@ApiParam({name: 'username'})@ApiOkResponse({description: 'Successfully followed the user.', type: Boolean})@ApiBadRequestResponse({description: 'Error following the user.', type: Boolean})\n                \n            \n\n                    \n                        \n                            Defined in archive/modules/profile/profile.controller.ts:125\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get()@ApiTags('profile')@ApiOperation({summary: 'Get current user's profile info'})@ApiOkResponse({description: 'Successfully returned user profile info.', type: UserProfileDto})@ApiTags('profile')\n                \n            \n\n                    \n                        \n                            Defined in archive/modules/profile/profile.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getProfileByUsername\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfileByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get(':username')@ApiTags('profile')@ApiOperation({summary: 'Get user profile info by username'})@ApiParam({name: 'username', description: 'The username of the user to fetch profile info for.'})@ApiOkResponse({description: 'Returns the user profile.', type: UserProfileDto})\n                \n            \n\n                    \n                        \n                            Defined in archive/modules/profile/profile.controller.ts:105\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        patchProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchProfile(req: any, updateProfileDto: UpdateUserProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch()@ApiTags('profile')@ApiOperation({summary: 'Update user's profile info'})@ApiOkResponse({description: 'Returns the updated user profile info.', type: UserProfileDto})@ApiBadRequestResponse({description: 'Bad request. The request body may be malformed.'})\n                \n            \n\n                    \n                        \n                            Defined in archive/modules/profile/profile.controller.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateProfileDto\n                                            \n                                                            UpdateUserProfileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        putProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    putProfile(req: any, updateProfileDto: UpdateUserProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Put()@ApiTags('profile')@ApiOperation({summary: 'Update user's profile info'})@ApiOkResponse({description: 'Returns the updated user profile info.', type: UserProfileDto})@ApiBadRequestResponse({description: 'Bad request. The request body may be malformed.'})\n                \n            \n\n                    \n                        \n                            Defined in archive/modules/profile/profile.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateProfileDto\n                                            \n                                                            UpdateUserProfileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        unfollowUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    unfollowUser(req: any, username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Post(':username/unfollow')@ApiTags('profile')@ApiOperation({summary: 'Unfollow the given user'})@ApiParam({name: 'username'})@ApiOkResponse({description: 'Successfully unfollowed the user.', type: Boolean})@ApiBadRequestResponse({description: 'Error unfollowing the user.', type: Boolean})\n                \n            \n\n                    \n                        \n                            Defined in archive/modules/profile/profile.controller.ts:147\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n\tController,\n\tGet,\n\tPost,\n\tPut,\n\tPatch,\n\tBody,\n\tParam,\n\tUseGuards,\n\tRequest,\n} from \"@nestjs/common\";\nimport {\n\tApiBadRequestResponse,\n\tApiBearerAuth,\n\tApiOkResponse,\n\tApiOperation,\n\tApiParam,\n\tApiTags,\n} from \"@nestjs/swagger\";\nimport { UserProfileDto } from \"./dto/userprofile.dto\";\nimport { ProfileService } from \"./profile.service\";\nimport { UpdateUserProfileDto } from \"./dto/updateuserprofile.dto\";\n// import { JwtAuthGuard } from \"./../../auth/jwt-auth.guard\";\n// import { AuthService, JWTPayload } from \"../../auth/auth.service\";\nimport { JwtAuthGuard } from \"src/auth/jwt-auth.guard\";\nimport { AuthService, JWTPayload } from \"src/auth/auth.service\";\n\n@Controller(\"profile\")\nexport class ProfileController {\n\tconstructor(\n\t\tprivate readonly profileService: ProfileService,\n\t\tprivate readonly auth: AuthService,\n\t) {}\n\n\t@UseGuards(JwtAuthGuard)\n\t@Get()\n\t@ApiTags(\"profile\")\n\t@ApiOperation({ summary: \"Get current user's profile info\" })\n\t@ApiOkResponse({\n\t\tdescription: \"Successfully returned user profile info.\",\n\t\ttype: UserProfileDto,\n\t})\n\t@ApiTags(\"profile\")\n\tgetProfile(@Request() req: any): Promise {\n\t\tconst userInfo: JWTPayload = this.auth.getUserInfo(req);\n\t\treturn this.profileService.getProfile(userInfo.id);\n\t}\n\n\t@UseGuards(JwtAuthGuard)\n\t@Put()\n\t@ApiTags(\"profile\")\n\t@ApiOperation({ summary: \"Update user's profile info\" })\n\t@ApiOkResponse({\n\t\tdescription: \"Returns the updated user profile info.\",\n\t\ttype: UserProfileDto,\n\t})\n\t@ApiBadRequestResponse({\n\t\tdescription: \"Bad request. The request body may be malformed.\",\n\t})\n\tasync putProfile(\n\t\t@Request() req: any,\n\t\t@Body() updateProfileDto: UpdateUserProfileDto,\n\t): Promise {\n\t\tconst userInfo: JWTPayload = this.auth.getUserInfo(req);\n\t\treturn await this.profileService.updateProfile(\n\t\t\tuserInfo.id,\n\t\t\tupdateProfileDto,\n\t\t);\n\t}\n\n\t@UseGuards(JwtAuthGuard)\n\t@Patch()\n\t@ApiTags(\"profile\")\n\t@ApiOperation({ summary: \"Update user's profile info\" })\n\t@ApiOkResponse({\n\t\tdescription: \"Returns the updated user profile info.\",\n\t\ttype: UserProfileDto,\n\t})\n\t@ApiBadRequestResponse({\n\t\tdescription: \"Bad request. The request body may be malformed.\",\n\t})\n\tasync patchProfile(\n\t\t@Request() req: any,\n\t\t@Body() updateProfileDto: UpdateUserProfileDto,\n\t): Promise {\n\t\tconst userInfo: JWTPayload = this.auth.getUserInfo(req);\n\t\treturn await this.profileService.updateProfile(\n\t\t\tuserInfo.id,\n\t\t\tupdateProfileDto,\n\t\t);\n\t}\n\n\t@UseGuards(JwtAuthGuard)\n\t@Get(\":username\")\n\t@ApiTags(\"profile\")\n\t@ApiOperation({ summary: \"Get user profile info by username\" })\n\t@ApiParam({\n\t\tname: \"username\",\n\t\tdescription: \"The username of the user to fetch profile info for.\",\n\t})\n\t@ApiOkResponse({\n\t\tdescription: \"Returns the user profile.\",\n\t\ttype: UserProfileDto,\n\t})\n\tasync getProfileByUsername(\n\t\t@Param(\"username\") username: string,\n\t): Promise {\n\t\treturn this.profileService.getProfileByUsername(username);\n\t}\n\n\t@ApiBearerAuth()\n\t@UseGuards(JwtAuthGuard)\n\t@Post(\":username/follow\")\n\t@ApiTags(\"profile\")\n\t@ApiOperation({ summary: \"Follow the given user\" })\n\t@ApiParam({ name: \"username\" })\n\t@ApiOkResponse({\n\t\tdescription: \"Successfully followed the user.\",\n\t\ttype: Boolean,\n\t})\n\t@ApiBadRequestResponse({\n\t\tdescription: \"Error following the user.\",\n\t\ttype: Boolean,\n\t})\n\tasync followUser(\n\t\t@Request() req: any,\n\t\t@Param(\"username\") username: string,\n\t): Promise {\n\t\tconst userInfo: JWTPayload = this.auth.getUserInfo(req);\n\t\treturn await this.profileService.followUser(userInfo.id, username);\n\t}\n\n\t@ApiBearerAuth()\n\t@UseGuards(JwtAuthGuard)\n\t@Post(\":username/unfollow\")\n\t@ApiTags(\"profile\")\n\t@ApiOperation({ summary: \"Unfollow the given user\" })\n\t@ApiParam({ name: \"username\" })\n\t@ApiOkResponse({\n\t\tdescription: \"Successfully unfollowed the user.\",\n\t\ttype: Boolean,\n\t})\n\t@ApiBadRequestResponse({\n\t\tdescription: \"Error unfollowing the user.\",\n\t\ttype: Boolean,\n\t})\n\tasync unfollowUser(\n\t\t@Request() req: any,\n\t\t@Param(\"username\") username: string,\n\t): Promise {\n\t\tconst userInfo: JWTPayload = this.auth.getUserInfo(req);\n\t\treturn await this.profileService.unfollowUser(userInfo.id, username);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProfileModule.html":{"url":"modules/ProfileModule.html","title":"module - ProfileModule","body":"\n                   \n\n\n\n\n    Modules\n    ProfileModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_providers\n\n\n\ncluster_ProfileModule_imports\n\n\n\ncluster_ProfileModule_exports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nProfileModule\n\nProfileModule\n\nProfileModule -->\n\nPrismaModule->ProfileModule\n\n\n\n\n\nProfileService \n\nProfileService \n\nProfileService  -->\n\nProfileModule->ProfileService \n\n\n\n\n\nAuthService\n\nAuthService\n\nProfileModule -->\n\nAuthService->ProfileModule\n\n\n\n\n\nDbUtilsService\n\nDbUtilsService\n\nProfileModule -->\n\nDbUtilsService->ProfileModule\n\n\n\n\n\nDtoGenService\n\nDtoGenService\n\nProfileModule -->\n\nDtoGenService->ProfileModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nProfileModule -->\n\nPrismaService->ProfileModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            archive/modules/profile/profile.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            DbUtilsService\n                        \n                        \n                            DtoGenService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            ProfileService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProfileController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ProfileService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ProfileController } from \"./profile.controller\";\nimport { ProfileService } from \"./profile.service\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\nimport { PrismaModule } from \"../../../prisma/prisma.module\";\nimport { AuthService } from \"src/auth/auth.service\";\nimport { DbUtilsService } from \"src/modules/db-utils/db-utils.service\";\nimport { DtoGenService } from \"src/modules/dto-gen/dto-gen.service\";\n// import { DtoGenService } from \"../dto-gen/dto-gen.service\";\n// import { DbUtilsService } from \"../db-utils/db-utils.service\";\n// import { AuthService } from \"../../auth/auth.service\";\n\n@Module({\n\tcontrollers: [ProfileController],\n\tproviders: [\n\t\tProfileService,\n\t\tPrismaService,\n\t\tDtoGenService,\n\t\tDbUtilsService,\n\t\tAuthService,\n\t],\n\timports: [PrismaModule],\n\texports: [ProfileService],\n})\nexport class ProfileModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfileService.html":{"url":"injectables/ProfileService.html","title":"injectable - ProfileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProfileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            archive/modules/profile/profile.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                followUser\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                getProfileByUsername\n                            \n                            \n                                    Async\n                                unfollowUser\n                            \n                            \n                                    Async\n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, dtogen: DtoGenService, dbUtilsService: DbUtilsService)\n                    \n                \n                        \n                            \n                                Defined in archive/modules/profile/profile.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dtogen\n                                                  \n                                                        \n                                                                        DtoGenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dbUtilsService\n                                                  \n                                                        \n                                                                        DbUtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        followUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    followUser(userId: string, accountFollowedId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in archive/modules/profile/profile.service.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                accountFollowedId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(uid: string)\n                \n            \n\n\n                    \n                        \n                            Defined in archive/modules/profile/profile.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                uid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getProfileByUsername\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfileByUsername(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in archive/modules/profile/profile.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        unfollowUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    unfollowUser(userId: string, accountUnfollowedId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in archive/modules/profile/profile.service.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                accountUnfollowedId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(userId: string, updateProfileDto: UpdateUserProfileDto)\n                \n            \n\n\n                    \n                        \n                            Defined in archive/modules/profile/profile.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateProfileDto\n                                            \n                                                            UpdateUserProfileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { UserProfileDto } from \"./dto/userprofile.dto\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\n// import { DtoGenService } from \"../dto-gen/dto-gen.service\";\n// import { DbUtilsService } from \"../db-utils/db-utils.service\";\nimport { UpdateUserProfileDto } from \"./dto/updateuserprofile.dto\";\nimport { DbUtilsService } from \"src/modules/db-utils/db-utils.service\";\nimport { DtoGenService } from \"src/modules/dto-gen/dto-gen.service\";\n\n@Injectable()\nexport class ProfileService {\n\tconstructor(\n\t\tprivate readonly prisma: PrismaService,\n\t\tprivate readonly dtogen: DtoGenService,\n\t\tprivate readonly dbUtilsService: DbUtilsService,\n\t) {}\n\n\tasync getProfile(uid: string): Promise {\n\t\tconst user = await this.dtogen.generateUserDto(uid);\n\t\treturn new UserProfileDto();\n\t}\n\n\tasync updateProfile(\n\t\tuserId: string,\n\t\tupdateProfileDto: UpdateUserProfileDto,\n\t): Promise {\n\t\tconst user = await this.prisma.users.findUnique({\n\t\t\twhere: { user_id: userId },\n\t\t});\n\n\t\tif (!user) {\n\t\t\tthrow new Error(\"User not found\");\n\t\t}\n\n\t\t// const updateData = this.dbUtilsService.buildUpdateData(\n\t\t// \tuser,\n\t\t// \tupdateProfileDto,\n\t\t// );\n\n\t\t// await this.prisma.users.update({\n\t\t// \twhere: { user_id: userId },\n\t\t// \tdata: updateData,\n\t\t// });\n\n\t\tconst userProfile = await this.dtogen.generateUserDto(userId);\n\t\tif (!userProfile) {\n\t\t\tthrow new Error(\"Failed to generate user profile\");\n\t\t}\n\n\t\treturn new UserProfileDto();\n\t}\n\n\tasync getProfileByUsername(username: string): Promise {\n\t\tconst userData = await this.prisma.users.findFirst({\n\t\t\twhere: { username: username },\n\t\t});\n\n\t\tif (!userData) {\n\t\t\tthrow new Error(\"User not found\");\n\t\t} else {\n\t\t\tconst user = await this.dtogen.generateUserDto(userData.user_id);\n\t\t\tif (user) {\n\t\t\t\treturn new UserProfileDto();\n\t\t\t}\n\t\t}\n\n\t\treturn new UserProfileDto();\n\t}\n\n\t/*\n\tfollower: the person who does the following\n\tfollowee (leader): the person being followed\n\t*/\n\tasync followUser(\n\t\tuserId: string,\n\t\taccountFollowedId: string,\n\t): Promise {\n\t\tif (userId === accountFollowedId) {\n\t\t\tthrow new Error(\"You cannot follow yourself\");\n\t\t}\n\n\t\tif (!(await this.dbUtilsService.userExists(accountFollowedId))) {\n\t\t\tthrow new Error(\"User (\" + accountFollowedId + \") does not exist\");\n\t\t}\n\n\t\tif (!(await this.dbUtilsService.userExists(userId))) {\n\t\t\tthrow new Error(\"User (\" + userId + \") does not exist\");\n\t\t}\n\n\t\tif (await this.dbUtilsService.isFollowing(userId, accountFollowedId)) {\n\t\t\treturn true;\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.prisma.follows.create({\n\t\t\t\tdata: {\n\t\t\t\t\tfollower: userId,\n\t\t\t\t\tfollowee: accountFollowedId,\n\t\t\t\t},\n\t\t\t});\n\t\t\treturn true;\n\t\t} catch (e) {\n\t\t\tthrow new Error(\"Failed to follow user (\" + accountFollowedId + \")\");\n\t\t}\n\t}\n\n\t/*\n\tfollower: the person who does the following\n\tfollowee (leader): the person being followed\n\t*/\n\tasync unfollowUser(\n\t\tuserId: string,\n\t\taccountUnfollowedId: string,\n\t): Promise {\n\t\tif (userId === accountUnfollowedId) {\n\t\t\tthrow new Error(\"You cannot unfollow yourself\");\n\t\t}\n\n\t\tif (!(await this.dbUtilsService.userExists(accountUnfollowedId))) {\n\t\t\tthrow new Error(\"User (\" + accountUnfollowedId + \") does not exist\");\n\t\t}\n\n\t\tif (!(await this.dbUtilsService.userExists(userId))) {\n\t\t\tthrow new Error(\"User (\" + userId + \") does not exist\");\n\t\t}\n\n\t\tif (!(await this.dbUtilsService.isFollowing(userId, accountUnfollowedId))) {\n\t\t\treturn true;\n\t\t}\n\n\t\ttry {\n\t\t\t//find the follow relationship and delete it\n\t\t\tconst follow = await this.prisma.follows.findFirst({\n\t\t\t\twhere: {\n\t\t\t\t\tfollower: userId,\n\t\t\t\t\tfollowee: accountUnfollowedId,\n\t\t\t\t},\n\t\t\t});\n\t\t\tif (!follow) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tawait this.prisma.follows.delete({\n\t\t\t\twhere: {\n\t\t\t\t\tfollows_id: follow.follows_id,\n\t\t\t\t\tfollower: userId,\n\t\t\t\t\tfollowee: accountUnfollowedId,\n\t\t\t\t},\n\t\t\t});\n\t\t\treturn true;\n\t\t} catch (e) {\n\t\t\tthrow new Error(\"Failed to unfollow user (\" + accountUnfollowedId + \")\");\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueueEventDto.html":{"url":"classes/QueueEventDto.html","title":"class - QueueEventDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueueEventDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/live/dto/queueevent.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                createdAt\n                            \n                            \n                                    \n                                    \n                                roomID\n                            \n                            \n                                    \n                                    \n                                    \n                                songs\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/live/dto/queueevent.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        roomID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/live/dto/queueevent.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        songs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RoomSongDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsObject()@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/live/dto/queueevent.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsObject, ValidateNested, IsNumber } from \"class-validator\";\nimport { RoomSongDto } from \"../../modules/rooms/dto/roomsong.dto\";\n\nexport class QueueEventDto {\n\t@ApiProperty()\n\t@IsObject()\n\t@ValidateNested()\n\tsongs: RoomSongDto[];\n\n\t@ApiProperty()\n\t@IsString()\n\troomID: string;\n\n\t@ApiProperty()\n\t@IsNumber()\n\tcreatedAt?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RecommendationsModule.html":{"url":"modules/RecommendationsModule.html","title":"module - RecommendationsModule","body":"\n                   \n\n\n\n\n    Modules\n    RecommendationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RecommendationsModule\n\n\n\ncluster_RecommendationsModule_exports\n\n\n\ncluster_RecommendationsModule_providers\n\n\n\n\nRecommendationsService \n\nRecommendationsService \n\n\n\nRecommendationsModule\n\nRecommendationsModule\n\nRecommendationsService  -->\n\nRecommendationsModule->RecommendationsService \n\n\n\n\n\nRecommendationsService\n\nRecommendationsService\n\nRecommendationsModule -->\n\nRecommendationsService->RecommendationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/recommendations/recommendations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RecommendationsService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RecommendationsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { RecommendationsService } from \"./recommendations.service\";\n\n@Module({\n\timports: [],\n\tproviders: [RecommendationsService],\n\texports: [RecommendationsService],\n})\nexport class RecommendationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RecommendationsService.html":{"url":"injectables/RecommendationsService.html","title":"injectable - RecommendationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RecommendationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recommendations/recommendations.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                featureWeights\n                            \n                            \n                                    Private\n                                mockSongs\n                            \n                            \n                                    Private\n                                playlists\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                cosineSimilarityWeighted\n                            \n                            \n                                getPlaylistSimilarityScores\n                            \n                            \n                                getTopPlaylists\n                            \n                            \n                                setMockSongs\n                            \n                            \n                                setPlaylists\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cosineSimilarityWeighted\n                        \n                    \n                \n            \n            \n                \n                        \n                    cosineSimilarityWeighted(favoriteSongs: any, song2: any, weights: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/recommendations/recommendations.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                favoriteSongs\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                song2\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                weights\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPlaylistSimilarityScores\n                        \n                    \n                \n            \n            \n                \ngetPlaylistSimilarityScores()\n                \n            \n\n\n                    \n                        \n                            Defined in src/recommendations/recommendations.service.ts:85\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     literal type\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTopPlaylists\n                        \n                    \n                \n            \n            \n                \ngetTopPlaylists(topN: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/recommendations/recommendations.service.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                topN\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setMockSongs\n                        \n                    \n                \n            \n            \n                \nsetMockSongs(mockSongs: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/recommendations/recommendations.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                mockSongs\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPlaylists\n                        \n                    \n                \n            \n            \n                \nsetPlaylists(playlists: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/recommendations/recommendations.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                playlists\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        featureWeights\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n\t\tdanceability: 1,\n\t\tenergy: 1,\n\t\tkey: 0.5,\n\t\tloudness: 0.5,\n\t\tmode: 0.5,\n\t\tspeechiness: 0.5,\n\t\tacousticness: 0.5,\n\t\tinstrumentalness: 0.5,\n\t\tliveness: 0.5,\n\t\tvalence: 1,\n\t\ttempo: 0.5,\n\t}\n                    \n                \n                    \n                        \n                                Defined in src/recommendations/recommendations.service.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mockSongs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/recommendations/recommendations.service.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        playlists\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/recommendations/recommendations.service.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n@Injectable()\nexport class RecommendationsService {\n\tprivate featureWeights = {\n\t\tdanceability: 1,\n\t\tenergy: 1,\n\t\tkey: 0.5,\n\t\tloudness: 0.5,\n\t\tmode: 0.5,\n\t\tspeechiness: 0.5,\n\t\tacousticness: 0.5,\n\t\tinstrumentalness: 0.5,\n\t\tliveness: 0.5,\n\t\tvalence: 1,\n\t\ttempo: 0.5,\n\t};\n\n\tprivate playlists: { [key: string]: any[] } = {};\n\tprivate mockSongs: {\n\t\tdanceability: number;\n\t\tenergy: number;\n\t\tkey: number;\n\t\tloudness: number;\n\t\tmode: number;\n\t\tspeechiness: number;\n\t\tacousticness: number;\n\t\tinstrumentalness: number;\n\t\tliveness: number;\n\t\tvalence: number;\n\t\ttempo: number;\n\t}[] = [];\n\n\tsetPlaylists(playlists: { [key: string]: any[] }) {\n\t\t// check whether the individual songs in playlists are not null or undefined\n\t\tfor (const [playlistName, songs] of Object.entries(playlists)) {\n\t\t\tconsole.log(\"playlistName: \", playlistName);\n\t\t\tif (songs.some((song) => !song)) {\n\t\t\t\tthrow new Error(\"Invalid song in playlist\");\n\t\t\t}\n\t\t}\n\n\t\tthis.playlists = playlists;\n\t}\n\tsetMockSongs(mockSongs: any[]) {\n\t\tthis.mockSongs = mockSongs;\n\t}\n\n\tprivate cosineSimilarityWeighted(\n\t\tfavoriteSongs: any,\n\t\tsong2: any,\n\t\tweights: any,\n\t): number {\n\t\tlet weightedSimilarities = 0;\n\t\tfor (const song1 of favoriteSongs) {\n\t\t\tconst dotProduct = Object.keys(song1).reduce((sum, key) => {\n\t\t\t\tif (key in weights) {\n\t\t\t\t\treturn sum + song1[key] * song2[key] * weights[key];\n\t\t\t\t}\n\t\t\t\treturn sum;\n\t\t\t}, 0);\n\n\t\t\tconst magnitude1 = Math.sqrt(\n\t\t\t\tObject.keys(song1).reduce((sum, key) => {\n\t\t\t\t\tif (key in weights) {\n\t\t\t\t\t\treturn sum + song1[key] * song1[key] * weights[key];\n\t\t\t\t\t}\n\t\t\t\t\treturn sum;\n\t\t\t\t}, 0),\n\t\t\t);\n\n\t\t\tconst magnitude2 = Math.sqrt(\n\t\t\t\tObject.keys(song2).reduce((sum, key) => {\n\t\t\t\t\tif (key in weights) {\n\t\t\t\t\t\treturn sum + song2[key] * song2[key] * weights[key];\n\t\t\t\t\t}\n\t\t\t\t\treturn sum;\n\t\t\t\t}, 0),\n\t\t\t);\n\n\t\t\tweightedSimilarities += dotProduct / (magnitude1 * magnitude2);\n\t\t}\n\t\treturn weightedSimilarities / favoriteSongs.length;\n\t}\n\n\tgetPlaylistSimilarityScores(): { [key: string]: number } {\n\t\tconst playlistScores: { [key: string]: number } = {};\n\t\tfor (const [playlistName, songs] of Object.entries(this.playlists)) {\n\t\t\tconst totalSimilarity = songs.reduce((sum, song) => {\n\t\t\t\treturn (\n\t\t\t\t\tsum +\n\t\t\t\t\tthis.cosineSimilarityWeighted(\n\t\t\t\t\t\tthis.mockSongs,\n\t\t\t\t\t\tsong,\n\t\t\t\t\t\tthis.featureWeights,\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}, 0);\n\n\t\t\tconst averageSimilarity = songs.length\n\t\t\t\t? totalSimilarity / songs.length\n\t\t\t\t: 0;\n\t\t\tplaylistScores[playlistName] = averageSimilarity;\n\t\t}\n\n\t\treturn playlistScores;\n\t}\n\n\tgetTopPlaylists(topN: number): { playlist: string; score: number }[] {\n\t\tconst playlistScores = this.getPlaylistSimilarityScores();\n\t\treturn Object.entries(playlistScores)\n\t\t\t.map(([playlist, score]) => ({ playlist, score }))\n\t\t\t.sort((a, b) => b.score - a.score)\n\t\t\t.slice(0, topN);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshBody.html":{"url":"classes/RefreshBody.html","title":"class - RefreshBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The JWT token to be refreshed'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:67\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n\tHttpException,\n\tHttpStatus,\n\tInjectable,\n\tUnauthorizedException,\n} from \"@nestjs/common\";\nimport {\n\tAdminInitiateAuthCommandInput,\n\tAttributeType,\n\tAuthenticationResultType,\n\tCognitoIdentityProvider,\n\tListUsersCommandOutput,\n} from \"@aws-sdk/client-cognito-identity-provider\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { PrismaService } from \"../../prisma/prisma.service\";\nimport { Prisma } from \"@prisma/client\";\nimport * as PrismaTypes from \"@prisma/client\";\nimport * as jwt from \"jsonwebtoken\";\nimport { CognitoJwtVerifier } from \"aws-jwt-verify\";\nimport { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString } from \"class-validator\";\n\nexport type CognitoDecodedToken = {\n\tsub: string;\n\tiss: string;\n\tclient_id: string;\n\torigin_jti: string;\n\tevent_id?: string;\n\ttoken_use: string;\n\tscope?: string;\n\tauth_time: number;\n\texp: number;\n\tiat: number;\n\tjti: string;\n\tusername: string;\n};\n\nexport type JWTPayload = {\n\tid: string;\n\temail: string;\n\tusername: string;\n};\n\nexport class RegisterBody {\n\t@ApiProperty({ description: \"The user's username\" })\n\t@IsString()\n\tusername: string;\n\n\t@ApiProperty({ description: \"The user's Cognito sub/ID\" })\n\t@IsString()\n\tuserCognitoSub: string;\n\n\t@ApiProperty({ description: \"The user's email address\" })\n\t@IsString()\n\temail: string;\n}\n\nexport class LoginBody {\n\t@ApiProperty({ description: \"The Cognito JWT token\" })\n\t@IsString()\n\ttoken: string;\n}\n\nexport class RefreshBody {\n\t@ApiProperty({ description: \"The JWT token to be refreshed\" })\n\t@IsString()\n\trefreshToken: string;\n}\n\n@Injectable()\nexport class AuthService {\n\tprivate cognitoIdentityServiceProvider: CognitoIdentityProvider;\n\tprivate accessKeyId: string;\n\tprivate secretAccessKey: string;\n\tprivate userPoolId: string;\n\tprivate clientId: string;\n\n\tconstructor(\n\t\tprivate configService: ConfigService,\n\t\tprivate readonly prisma: PrismaService,\n\t) {\n\t\t// Set the AWS credentials\n\t\tconst accessKeyId = this.configService.get(\"AWS_ACCESS_KEY_ID\");\n\t\tif (!accessKeyId) {\n\t\t\tthrow new Error(\"Missing AWS_ACCESS_KEY_ID\");\n\t\t}\n\t\tthis.accessKeyId = accessKeyId;\n\n\t\tconst secretAccessKey = this.configService.get(\n\t\t\t\"AWS_SECRET_ACCESS_KEY\",\n\t\t);\n\t\tif (!secretAccessKey) {\n\t\t\tthrow new Error(\"Missing AWS_SECRET_ACCESS_KEY\");\n\t\t}\n\t\tthis.secretAccessKey = secretAccessKey;\n\n\t\tconst userPoolId = this.configService.get(\n\t\t\t\"AWS_COGNITO_USER_POOL_ID\",\n\t\t);\n\t\tif (!userPoolId) {\n\t\t\tthrow new Error(\"Missing AWS_COGNITO_USER_POOL_ID\");\n\t\t}\n\t\tthis.userPoolId = userPoolId;\n\n\t\tconst clientId = this.configService.get(\"AWS_COGNITO_CLIENT_ID\");\n\t\tif (!clientId) {\n\t\t\tthrow new Error(\"Missing AWS_COGNITO_CLIENT_ID\");\n\t\t}\n\t\tthis.clientId = clientId;\n\n\t\tthis.cognitoIdentityServiceProvider = new CognitoIdentityProvider({\n\t\t\tregion: \"af-south-1\",\n\n\t\t\tcredentials: {\n\t\t\t\taccessKeyId: this.accessKeyId,\n\t\t\t\tsecretAccessKey: this.secretAccessKey,\n\t\t\t},\n\t\t});\n\t}\n\n\tasync validateUser(\n\t\tusername: string,\n\t\tpassword: string,\n\t): Promise {\n\t\tif (!this.userPoolId || !this.clientId) {\n\t\t\tthrow new Error(\"Missing Cognito configuration\");\n\t\t}\n\n\t\tconst params: AdminInitiateAuthCommandInput = {\n\t\t\tAuthFlow: \"ADMIN_NO_SRP_AUTH\",\n\t\t\tClientId: this.clientId,\n\t\t\tUserPoolId: this.userPoolId,\n\t\t\tAuthParameters: {\n\t\t\t\tUSERNAME: username,\n\t\t\t\tPASSWORD: password,\n\t\t\t},\n\t\t};\n\n\t\ttry {\n\t\t\tconst authResponse =\n\t\t\t\tawait this.cognitoIdentityServiceProvider.adminInitiateAuth(params);\n\t\t\tif (authResponse.AuthenticationResult) {\n\t\t\t\tconst user = await this.cognitoIdentityServiceProvider.adminGetUser({\n\t\t\t\t\tUserPoolId: this.userPoolId,\n\t\t\t\t\tUsername: username,\n\t\t\t\t});\n\n\t\t\t\tif (!user || !user.Username || !user.UserAttributes) {\n\t\t\t\t\tthrow new UnauthorizedException(\"Invalid credentials\");\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tusername: user.Username,\n\t\t\t\t\tattributes: user.UserAttributes,\n\t\t\t\t\tauthenticationResult: authResponse.AuthenticationResult,\n\t\t\t\t};\n\t\t\t}\n\t\t\tthrow new UnauthorizedException(\"Invalid credentials\");\n\t\t} catch (error) {\n\t\t\tthrow new UnauthorizedException(\"Invalid credentials\");\n\t\t}\n\t}\n\n\tasync listUsers(): Promise {\n\t\tconst params = {\n\t\t\tUserPoolId: this.userPoolId,\n\t\t};\n\n\t\ttry {\n\t\t\tconst responsePromise =\n\t\t\t\tawait this.cognitoIdentityServiceProvider.listUsers(params);\n\t\t\tconst response = await responsePromise;\n\t\t\treturn response;\n\t\t} catch (error) {\n\t\t\tthrow new UnauthorizedException(\"Error listing users\");\n\t\t}\n\t}\n\n\tasync createUser(\n\t\tusername: string,\n\t\temail: string,\n\t\tuserID: string,\n\t): Promise {\n\t\tconst user: Prisma.usersCreateInput = {\n\t\t\tusername: username,\n\t\t\temail: email,\n\t\t\tuser_id: userID,\n\t\t};\n\t\tconst existingUser = await this.prisma.users.findUnique({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\t\tif (existingUser) {\n\t\t\treturn true;\n\t\t}\n\t\ttry {\n\t\t\tconst response = await this.prisma.users.create({ data: user });\n\t\t\tconsole.log(response);\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tasync generateJWT(payload: JWTPayload): Promise {\n\t\tconst secretKey = this.configService.get(\"JWT_SECRET_KEY\");\n\t\tconst expiresIn = this.configService.get(\"JWT_EXPIRATION_TIME\");\n\n\t\tif (!secretKey || secretKey === undefined || secretKey === \"\") {\n\t\t\tthrow new Error(\"Missing JWT secret key\");\n\t\t}\n\n\t\tif (!expiresIn || expiresIn === undefined || expiresIn === \"\") {\n\t\t\tthrow new Error(\"Missing JWT expiration time\");\n\t\t}\n\n\t\tconst token = jwt.sign(payload, secretKey, { expiresIn });\n\t\treturn token;\n\t}\n\n\tasync refreshJWT(jwt_token: string): Promise {\n\t\tconst secretKey = this.configService.get(\"JWT_SECRET_KEY\");\n\t\tif (!secretKey || secretKey === undefined || secretKey === \"\") {\n\t\t\tthrow new Error(\"Missing JWT secret key\");\n\t\t}\n\n\t\tconst decoded: jwt.JwtPayload = jwt.decode(jwt_token) as jwt.JwtPayload;\n\t\tconsole.log(\"decoded\", decoded);\n\n\t\t//ensure user data in Payload is valid\n\t\tconst user: PrismaTypes.users | null = await this.prisma.users.findUnique({\n\t\t\twhere: {\n\t\t\t\tuser_id: decoded.id,\n\t\t\t\temail: decoded.email,\n\t\t\t\tusername: decoded.username,\n\t\t\t},\n\t\t});\n\n\t\tconsole.log(\"user\", user);\n\n\t\tif (!user) {\n\t\t\tthrow new UnauthorizedException(\"Invalid JWT token\");\n\t\t}\n\n\t\tconst result: JWTPayload = {\n\t\t\tid: decoded.id as string,\n\t\t\temail: decoded.email as string,\n\t\t\tusername: decoded.username as string,\n\t\t};\n\t\treturn result;\n\t}\n\n\t/*\n\tasync getUserInfo(jwt_token: string): Promise {\n\t\tconst secretKey = this.configService.get(\"JWT_SECRET_KEY\");\n\t\tconst expiresIn = this.configService.get(\"JWT_EXPIRATION_TIME\");\n\n\t\tif (!secretKey || secretKey === undefined || secretKey === \"\") {\n\t\t\tthrow new Error(\"Missing JWT secret key\");\n\t\t}\n\n\t\tif (!expiresIn || expiresIn === undefined || expiresIn === \"\") {\n\t\t\tthrow new Error(\"Missing JWT expiration time\");\n\t\t}\n\n\t\tconst decoded = jwt.verify(jwt_token, secretKey);\n\t\tconst userID = decoded.sub;\n\t\tif (!userID) {\n\t\t\tthrow new Error(\"Invalid JWT token\");\n\t\t}\n\t\tif (typeof userID !== \"string\") {\n\t\t\tthrow new Error(\"Invalid JWT token\");\n\t\t}\n\n\t\tconst user = await this.prisma.users.findUnique({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\t\treturn user;\n\t}\n\t*/\n\n\t// this funciton will be passed a Request object from the NestJS controller eg:\n\t/*\n\tgetRoomInfo(@Request() req: Request, @Param(\"roomID\") roomID: string): RoomDto {\n\t\treturn this.roomsService.getRoomInfo(roomID);\n\t}\n\t*/\n\tgetUserInfo(req: any): JWTPayload {\n\t\tconst result = req.user as JWTPayload;\n\t\tconsole.log(result);\n\t\tif (!result) {\n\t\t\tthrow new UnauthorizedException(\n\t\t\t\t\"No user found in JWT token. Please log in again\",\n\t\t\t);\n\t\t}\n\t\tif (!result.id) {\n\t\t\tthrow new UnauthorizedException(\n\t\t\t\t\"No user ID found in JWT token. Please log in again\",\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync getUsernameAndEmail(userID: string): Promise {\n\t\tconst user: PrismaTypes.users | null = await this.prisma.users.findUnique({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\n\t\tif (!user || user === null) {\n\t\t\tthrow new HttpException(\n\t\t\t\t\"Invalid credentials. Could not create user. getUsernameAndEmailError01\",\n\t\t\t\tHttpStatus.UNAUTHORIZED,\n\t\t\t);\n\t\t}\n\n\t\tif (!user.email || user.email === null) {\n\t\t\tthrow new HttpException(\n\t\t\t\t\"User (\" +\n\t\t\t\t\tuser.username +\n\t\t\t\t\t\") does not have an email address. getUsernameAndEmailError02\",\n\t\t\t\tHttpStatus.UNAUTHORIZED,\n\t\t\t);\n\t\t}\n\n\t\treturn { username: user.username, email: user.email };\n\t}\n\n\tasync decodeAndVerifyCognitoJWT(\n\t\tjwt_token: string,\n\t): Promise {\n\t\tconst verifier = CognitoJwtVerifier.create({\n\t\t\tuserPoolId: this.userPoolId,\n\t\t\ttokenUse: \"access\",\n\t\t\tclientId: this.clientId,\n\t\t});\n\n\t\ttry {\n\t\t\tconst payload = await verifier.verify(jwt_token);\n\t\t\tconsole.log(\"Cognito Verification\", payload);\n\t\t\tconst result: CognitoDecodedToken = payload as CognitoDecodedToken;\n\t\t\treturn result;\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t\tthrow new UnauthorizedException(\"Invalid JWT token\");\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterBody.html":{"url":"classes/RegisterBody.html","title":"class - RegisterBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                userCognitoSub\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The user's email address'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userCognitoSub\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The user's Cognito sub/ID'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The user's username'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:47\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n\tHttpException,\n\tHttpStatus,\n\tInjectable,\n\tUnauthorizedException,\n} from \"@nestjs/common\";\nimport {\n\tAdminInitiateAuthCommandInput,\n\tAttributeType,\n\tAuthenticationResultType,\n\tCognitoIdentityProvider,\n\tListUsersCommandOutput,\n} from \"@aws-sdk/client-cognito-identity-provider\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { PrismaService } from \"../../prisma/prisma.service\";\nimport { Prisma } from \"@prisma/client\";\nimport * as PrismaTypes from \"@prisma/client\";\nimport * as jwt from \"jsonwebtoken\";\nimport { CognitoJwtVerifier } from \"aws-jwt-verify\";\nimport { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString } from \"class-validator\";\n\nexport type CognitoDecodedToken = {\n\tsub: string;\n\tiss: string;\n\tclient_id: string;\n\torigin_jti: string;\n\tevent_id?: string;\n\ttoken_use: string;\n\tscope?: string;\n\tauth_time: number;\n\texp: number;\n\tiat: number;\n\tjti: string;\n\tusername: string;\n};\n\nexport type JWTPayload = {\n\tid: string;\n\temail: string;\n\tusername: string;\n};\n\nexport class RegisterBody {\n\t@ApiProperty({ description: \"The user's username\" })\n\t@IsString()\n\tusername: string;\n\n\t@ApiProperty({ description: \"The user's Cognito sub/ID\" })\n\t@IsString()\n\tuserCognitoSub: string;\n\n\t@ApiProperty({ description: \"The user's email address\" })\n\t@IsString()\n\temail: string;\n}\n\nexport class LoginBody {\n\t@ApiProperty({ description: \"The Cognito JWT token\" })\n\t@IsString()\n\ttoken: string;\n}\n\nexport class RefreshBody {\n\t@ApiProperty({ description: \"The JWT token to be refreshed\" })\n\t@IsString()\n\trefreshToken: string;\n}\n\n@Injectable()\nexport class AuthService {\n\tprivate cognitoIdentityServiceProvider: CognitoIdentityProvider;\n\tprivate accessKeyId: string;\n\tprivate secretAccessKey: string;\n\tprivate userPoolId: string;\n\tprivate clientId: string;\n\n\tconstructor(\n\t\tprivate configService: ConfigService,\n\t\tprivate readonly prisma: PrismaService,\n\t) {\n\t\t// Set the AWS credentials\n\t\tconst accessKeyId = this.configService.get(\"AWS_ACCESS_KEY_ID\");\n\t\tif (!accessKeyId) {\n\t\t\tthrow new Error(\"Missing AWS_ACCESS_KEY_ID\");\n\t\t}\n\t\tthis.accessKeyId = accessKeyId;\n\n\t\tconst secretAccessKey = this.configService.get(\n\t\t\t\"AWS_SECRET_ACCESS_KEY\",\n\t\t);\n\t\tif (!secretAccessKey) {\n\t\t\tthrow new Error(\"Missing AWS_SECRET_ACCESS_KEY\");\n\t\t}\n\t\tthis.secretAccessKey = secretAccessKey;\n\n\t\tconst userPoolId = this.configService.get(\n\t\t\t\"AWS_COGNITO_USER_POOL_ID\",\n\t\t);\n\t\tif (!userPoolId) {\n\t\t\tthrow new Error(\"Missing AWS_COGNITO_USER_POOL_ID\");\n\t\t}\n\t\tthis.userPoolId = userPoolId;\n\n\t\tconst clientId = this.configService.get(\"AWS_COGNITO_CLIENT_ID\");\n\t\tif (!clientId) {\n\t\t\tthrow new Error(\"Missing AWS_COGNITO_CLIENT_ID\");\n\t\t}\n\t\tthis.clientId = clientId;\n\n\t\tthis.cognitoIdentityServiceProvider = new CognitoIdentityProvider({\n\t\t\tregion: \"af-south-1\",\n\n\t\t\tcredentials: {\n\t\t\t\taccessKeyId: this.accessKeyId,\n\t\t\t\tsecretAccessKey: this.secretAccessKey,\n\t\t\t},\n\t\t});\n\t}\n\n\tasync validateUser(\n\t\tusername: string,\n\t\tpassword: string,\n\t): Promise {\n\t\tif (!this.userPoolId || !this.clientId) {\n\t\t\tthrow new Error(\"Missing Cognito configuration\");\n\t\t}\n\n\t\tconst params: AdminInitiateAuthCommandInput = {\n\t\t\tAuthFlow: \"ADMIN_NO_SRP_AUTH\",\n\t\t\tClientId: this.clientId,\n\t\t\tUserPoolId: this.userPoolId,\n\t\t\tAuthParameters: {\n\t\t\t\tUSERNAME: username,\n\t\t\t\tPASSWORD: password,\n\t\t\t},\n\t\t};\n\n\t\ttry {\n\t\t\tconst authResponse =\n\t\t\t\tawait this.cognitoIdentityServiceProvider.adminInitiateAuth(params);\n\t\t\tif (authResponse.AuthenticationResult) {\n\t\t\t\tconst user = await this.cognitoIdentityServiceProvider.adminGetUser({\n\t\t\t\t\tUserPoolId: this.userPoolId,\n\t\t\t\t\tUsername: username,\n\t\t\t\t});\n\n\t\t\t\tif (!user || !user.Username || !user.UserAttributes) {\n\t\t\t\t\tthrow new UnauthorizedException(\"Invalid credentials\");\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tusername: user.Username,\n\t\t\t\t\tattributes: user.UserAttributes,\n\t\t\t\t\tauthenticationResult: authResponse.AuthenticationResult,\n\t\t\t\t};\n\t\t\t}\n\t\t\tthrow new UnauthorizedException(\"Invalid credentials\");\n\t\t} catch (error) {\n\t\t\tthrow new UnauthorizedException(\"Invalid credentials\");\n\t\t}\n\t}\n\n\tasync listUsers(): Promise {\n\t\tconst params = {\n\t\t\tUserPoolId: this.userPoolId,\n\t\t};\n\n\t\ttry {\n\t\t\tconst responsePromise =\n\t\t\t\tawait this.cognitoIdentityServiceProvider.listUsers(params);\n\t\t\tconst response = await responsePromise;\n\t\t\treturn response;\n\t\t} catch (error) {\n\t\t\tthrow new UnauthorizedException(\"Error listing users\");\n\t\t}\n\t}\n\n\tasync createUser(\n\t\tusername: string,\n\t\temail: string,\n\t\tuserID: string,\n\t): Promise {\n\t\tconst user: Prisma.usersCreateInput = {\n\t\t\tusername: username,\n\t\t\temail: email,\n\t\t\tuser_id: userID,\n\t\t};\n\t\tconst existingUser = await this.prisma.users.findUnique({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\t\tif (existingUser) {\n\t\t\treturn true;\n\t\t}\n\t\ttry {\n\t\t\tconst response = await this.prisma.users.create({ data: user });\n\t\t\tconsole.log(response);\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tasync generateJWT(payload: JWTPayload): Promise {\n\t\tconst secretKey = this.configService.get(\"JWT_SECRET_KEY\");\n\t\tconst expiresIn = this.configService.get(\"JWT_EXPIRATION_TIME\");\n\n\t\tif (!secretKey || secretKey === undefined || secretKey === \"\") {\n\t\t\tthrow new Error(\"Missing JWT secret key\");\n\t\t}\n\n\t\tif (!expiresIn || expiresIn === undefined || expiresIn === \"\") {\n\t\t\tthrow new Error(\"Missing JWT expiration time\");\n\t\t}\n\n\t\tconst token = jwt.sign(payload, secretKey, { expiresIn });\n\t\treturn token;\n\t}\n\n\tasync refreshJWT(jwt_token: string): Promise {\n\t\tconst secretKey = this.configService.get(\"JWT_SECRET_KEY\");\n\t\tif (!secretKey || secretKey === undefined || secretKey === \"\") {\n\t\t\tthrow new Error(\"Missing JWT secret key\");\n\t\t}\n\n\t\tconst decoded: jwt.JwtPayload = jwt.decode(jwt_token) as jwt.JwtPayload;\n\t\tconsole.log(\"decoded\", decoded);\n\n\t\t//ensure user data in Payload is valid\n\t\tconst user: PrismaTypes.users | null = await this.prisma.users.findUnique({\n\t\t\twhere: {\n\t\t\t\tuser_id: decoded.id,\n\t\t\t\temail: decoded.email,\n\t\t\t\tusername: decoded.username,\n\t\t\t},\n\t\t});\n\n\t\tconsole.log(\"user\", user);\n\n\t\tif (!user) {\n\t\t\tthrow new UnauthorizedException(\"Invalid JWT token\");\n\t\t}\n\n\t\tconst result: JWTPayload = {\n\t\t\tid: decoded.id as string,\n\t\t\temail: decoded.email as string,\n\t\t\tusername: decoded.username as string,\n\t\t};\n\t\treturn result;\n\t}\n\n\t/*\n\tasync getUserInfo(jwt_token: string): Promise {\n\t\tconst secretKey = this.configService.get(\"JWT_SECRET_KEY\");\n\t\tconst expiresIn = this.configService.get(\"JWT_EXPIRATION_TIME\");\n\n\t\tif (!secretKey || secretKey === undefined || secretKey === \"\") {\n\t\t\tthrow new Error(\"Missing JWT secret key\");\n\t\t}\n\n\t\tif (!expiresIn || expiresIn === undefined || expiresIn === \"\") {\n\t\t\tthrow new Error(\"Missing JWT expiration time\");\n\t\t}\n\n\t\tconst decoded = jwt.verify(jwt_token, secretKey);\n\t\tconst userID = decoded.sub;\n\t\tif (!userID) {\n\t\t\tthrow new Error(\"Invalid JWT token\");\n\t\t}\n\t\tif (typeof userID !== \"string\") {\n\t\t\tthrow new Error(\"Invalid JWT token\");\n\t\t}\n\n\t\tconst user = await this.prisma.users.findUnique({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\t\treturn user;\n\t}\n\t*/\n\n\t// this funciton will be passed a Request object from the NestJS controller eg:\n\t/*\n\tgetRoomInfo(@Request() req: Request, @Param(\"roomID\") roomID: string): RoomDto {\n\t\treturn this.roomsService.getRoomInfo(roomID);\n\t}\n\t*/\n\tgetUserInfo(req: any): JWTPayload {\n\t\tconst result = req.user as JWTPayload;\n\t\tconsole.log(result);\n\t\tif (!result) {\n\t\t\tthrow new UnauthorizedException(\n\t\t\t\t\"No user found in JWT token. Please log in again\",\n\t\t\t);\n\t\t}\n\t\tif (!result.id) {\n\t\t\tthrow new UnauthorizedException(\n\t\t\t\t\"No user ID found in JWT token. Please log in again\",\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync getUsernameAndEmail(userID: string): Promise {\n\t\tconst user: PrismaTypes.users | null = await this.prisma.users.findUnique({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\n\t\tif (!user || user === null) {\n\t\t\tthrow new HttpException(\n\t\t\t\t\"Invalid credentials. Could not create user. getUsernameAndEmailError01\",\n\t\t\t\tHttpStatus.UNAUTHORIZED,\n\t\t\t);\n\t\t}\n\n\t\tif (!user.email || user.email === null) {\n\t\t\tthrow new HttpException(\n\t\t\t\t\"User (\" +\n\t\t\t\t\tuser.username +\n\t\t\t\t\t\") does not have an email address. getUsernameAndEmailError02\",\n\t\t\t\tHttpStatus.UNAUTHORIZED,\n\t\t\t);\n\t\t}\n\n\t\treturn { username: user.username, email: user.email };\n\t}\n\n\tasync decodeAndVerifyCognitoJWT(\n\t\tjwt_token: string,\n\t): Promise {\n\t\tconst verifier = CognitoJwtVerifier.create({\n\t\t\tuserPoolId: this.userPoolId,\n\t\t\ttokenUse: \"access\",\n\t\t\tclientId: this.clientId,\n\t\t});\n\n\t\ttry {\n\t\t\tconst payload = await verifier.verify(jwt_token);\n\t\t\tconsole.log(\"Cognito Verification\", payload);\n\t\t\tconst result: CognitoDecodedToken = payload as CognitoDecodedToken;\n\t\t\treturn result;\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t\tthrow new UnauthorizedException(\"Invalid JWT token\");\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RetryModule.html":{"url":"modules/RetryModule.html","title":"module - RetryModule","body":"\n                   \n\n\n\n\n    Modules\n    RetryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RetryModule\n\n\n\ncluster_RetryModule_exports\n\n\n\ncluster_RetryModule_providers\n\n\n\n\nRetryService \n\nRetryService \n\n\n\nRetryModule\n\nRetryModule\n\nRetryService  -->\n\nRetryModule->RetryService \n\n\n\n\n\nRetryService\n\nRetryService\n\nRetryModule -->\n\nRetryService->RetryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/retry/retry.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RetryService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RetryService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { RetryService } from \"./retry.service\";\n\n@Module({\n\tproviders: [RetryService],\n\texports: [RetryService],\n})\nexport class RetryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RetryService.html":{"url":"injectables/RetryService.html","title":"injectable - RetryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RetryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/retry/retry.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                retryAsync\n                            \n                            \n                                    Async\n                                spotifyRequestWithRetries\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        retryAsync\n                        \n                    \n                \n            \n            \n                \n                        \n                    retryAsync(func: RetryCB>, options?: RetryOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/retry/retry.service.ts:59\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Retries async operation returned from \"func\" callback, according to \"options\".\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                func\n                                            \n                                                            RetryCB>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            RetryOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        spotifyRequestWithRetries\n                        \n                    \n                \n            \n            \n                \n                        \n                    spotifyRequestWithRetries(request: Promise, retries: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/retry/retry.service.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Promise\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                retries\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    RETRIES\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\n/**\n * Retry-status object type, for use with RetryCB.\n */\nexport type RetryStatus = {\n\t/**\n\t * Retry index, starting from 0.\n\t */\n\tindex: number;\n\t/**\n\t * Retry overall duration, in milliseconds.\n\t */\n\tduration: number;\n\t/**\n\t * Last error, if available;\n\t * it is undefined only when \"retryAsync\" calls \"func\" with index = 0.\n\t */\n\terror?: any;\n};\n\n/**\n * Retry-status callback type.\n */\nexport type RetryCB = (s: RetryStatus) => T;\n\n/**\n * Type for options passed into retryAsync function.\n */\nexport type RetryOptions = {\n\t/**\n\t * Maximum number of retries (infinite by default),\n\t * or a callback to indicate the need for another retry.\n\t */\n\tretry?: number | RetryCB;\n\t/**\n\t * Retry delays, in milliseconds (no delay by default),\n\t * or a callback that returns the delays.\n\t */\n\tdelay?: number | RetryCB;\n\t/**\n\t * Error notifications.\n\t */\n\terror?: RetryCB;\n};\n\nconst RETRIES = 5; // Or any number of retries you'd like to set\n\n@Injectable()\nexport class RetryService {\n\t/**\n\t * Retries async operation returned from \"func\" callback, according to \"options\".\n\t */\n\tasync retryAsync(\n\t\tfunc: RetryCB>,\n\t\toptions?: RetryOptions,\n\t): Promise {\n\t\tconst start = Date.now();\n\t\tlet index = 0,\n\t\t\te: any;\n\t\t// eslint-disable-next-line prefer-const\n\t\tlet { retry = Number.POSITIVE_INFINITY, delay = -1, error } = options ?? {};\n\t\tconst s = () => ({ index, duration: Date.now() - start, error: e });\n\t\tconst c = (): Promise =>\n\t\t\tfunc(s()).catch((err) => {\n\t\t\t\te = err;\n\t\t\t\ttypeof error === \"function\" && error(s());\n\t\t\t\tif (\n\t\t\t\t\t(typeof retry === \"function\" ? (retry(s()) ? 1 : 0) : retry--) = 0 ? new Promise((a) => setTimeout(a, d)).then(c) : c();\n\t\t\t});\n\t\treturn c();\n\t}\n\n\tasync spotifyRequestWithRetries(\n\t\trequest: Promise,\n\t\tretries: number = RETRIES,\n\t): Promise {\n\t\tconst executeRequest = async (status: RetryStatus) => {\n\t\t\ttry {\n\t\t\t\tif (status.index > 0) {\n\t\t\t\t\tconsole.log(`Retrying... Attempt #${status.index + 1}`);\n\t\t\t\t}\n\t\t\t\tconsole.log(`SPOTIFY REQUEST MADE`);\n\t\t\t\treturn await request;\n\t\t\t} catch (e: any) {\n\t\t\t\t// Handle rate-limit errors (429)\n\t\t\t\tconsole.error(`Error performing Spotify request: ${e.message}`);\n\t\t\t\tconsole.error(JSON.stringify(e));\n\t\t\t\tif (\n\t\t\t\t\te.statusCode &&\n\t\t\t\t\te.statusCode === 429 &&\n\t\t\t\t\te.headers[\"retry-after\"] &&\n\t\t\t\t\te.headers[\"retry-after\"]\n\t\t\t\t) {\n\t\t\t\t\tconst retryAfter = parseInt(e.headers[\"retry-after\"], 10);\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t`Rate-limited. Retrying after ${retryAfter} seconds...`,\n\t\t\t\t\t);\n\t\t\t\t\tawait new Promise((resolve) =>\n\t\t\t\t\t\tsetTimeout(resolve, (retryAfter + 1) * 1000),\n\t\t\t\t\t); // Wait for retry-after + 1 second\n\t\t\t\t\tthrow e; // Rethrow the error to trigger retry\n\t\t\t\t}\n\n\t\t\t\tthrow e; // For other errors, rethrow to be handled by retryAsync\n\t\t\t}\n\t\t};\n\n\t\t// Call retryAsync, passing the function and options\n\t\treturn this.retryAsync(executeRequest, {\n\t\t\tretry: retries,\n\t\t\tdelay: (status: RetryStatus) => {\n\t\t\t\t// Optionally use exponential backoff or fixed delay\n\t\t\t\tconst delay = Math.pow(2, status.index) * 500; // Exponential backoff (500ms * 2^index)\n\t\t\t\tconsole.log(`Waiting for ${delay}ms before next attempt...`);\n\t\t\t\treturn delay;\n\t\t\t},\n\t\t\terror: (status: RetryStatus) => {\n\t\t\t\tconsole.log(\n\t\t\t\t\t`Error encountered on attempt #${status.index + 1}:`,\n\t\t\t\t\tstatus.error.message,\n\t\t\t\t);\n\t\t\t},\n\t\t});\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoomAnalyticsContributorsDto.html":{"url":"classes/RoomAnalyticsContributorsDto.html","title":"class - RoomAnalyticsContributorsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoomAnalyticsContributorsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/dto/roomanalytics.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                top_contributors\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        top_contributors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'TopContributors', description: 'Top contributors to the room's queue', type: 'object', properties: undefined})@IsObject()@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:380\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n\tIsArray,\n\tIsDate,\n\tIsNumber,\n\tIsObject,\n\tIsString,\n\tValidateNested,\n} from \"class-validator\";\nimport { UserDto } from \"../../users/dto/user.dto\";\nimport { Type } from \"class-transformer\";\nexport class RoomAnalyticsKeyMetricsDto {\n\t// an object called unique visitors with two properties, count and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"UniqueVisitors\",\n\t\tdescription: \"Unique visitors to the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tcount: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tunique_visitors: {\n\t\tcount: number;\n\t\tpercentage_change: number;\n\t};\n\n\t// an object called returning_visitors with two properties, count and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"ReturningVisitors\",\n\t\tdescription: \"Returning visitors to the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tcount: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\treturning_visitors: {\n\t\tcount: number;\n\t\tpercentage_change: number;\n\t};\n\n\t// an object called average_session_duration with two properties, duration and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"AverageSessionDuration\",\n\t\tdescription: \"Average session duration in the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tduration: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\taverage_session_duration: {\n\t\tduration: number;\n\t\tpercentage_change: number;\n\t};\n}\n\nexport class RoomAnalyticsQueueDto {\n\t@ApiProperty({ description: \"Total number of songs ever queued in the room\" })\n\t@IsNumber()\n\ttotal_songs_queued: number;\n\n\t@ApiProperty({\n\t\tdescription: \"Number of times the room's queue was exported as a playlist\",\n\t})\n\t@IsNumber()\n\ttotal_queue_exports: number;\n}\n\nexport class ParticipantsPerHourDto {\n\t@ApiProperty({\n\t\tdescription: \"The number of participants in the room at the given hour\",\n\t})\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The specific hour for participant count\",\n\t\ttype: Date,\n\t})\n\t@IsDate()\n\tinstance: Date;\n}\n\nexport class AllTimeSessionDataDto {\n\t@ApiProperty({\n\t\tdescription: \"The average session duration of the room\",\n\t})\n\t@IsNumber()\n\tavg_duration: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The minimum session duration of the room\",\n\t})\n\t@IsNumber()\n\tmin_duration: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The maximum session duration of the room\",\n\t})\n\t@IsNumber()\n\tmax_duration: number;\n}\n\nexport class SessionDurationPerDayDto {\n\t@ApiProperty({ type: \"number\" })\n\tduration: number;\n\n\t@ApiProperty({ type: Date })\n\tday: Date;\n}\n\nexport class SessionDataPerDayDto {\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tavg_duration: SessionDurationPerDayDto[];\n\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tmin_duration: SessionDurationPerDayDto[];\n\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tmax_duration: SessionDurationPerDayDto[];\n}\n\nexport class JoinsCount {\n\t@ApiProperty({ type: \"number\" })\n\tcount: number;\n\n\t@ApiProperty({ type: Date })\n\tday: Date;\n}\n\nexport class JoinsPerDay {\n\ttotal_joins: JoinsCount[];\n\tunique_joins: JoinsCount[];\n}\n\nexport class RoomAnalyticsParticipationDto {\n\t@ApiProperty({\n\t\ttitle: \"Joins\",\n\t\tdescription:\n\t\t\t\"Join statistics, including total and unique joins per day and all-time\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tper_day: {\n\t\t\t\ttitle: \"JoinsPerDay\",\n\t\t\t\ttype: \"object\",\n\t\t\t},\n\t\t\tall_time: {\n\t\t\t\ttitle: \"JoinsAllTime\",\n\t\t\t\ttype: \"object\",\n\t\t\t\tproperties: {\n\t\t\t\t\ttotal_joins: { type: \"number\" },\n\t\t\t\t\tunique_joins: { type: \"number\" },\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tjoins: {\n\t\tper_day: JoinsPerDay;\n\t\tall_time: {\n\t\t\ttotal_joins: number;\n\t\t\tunique_joins: number;\n\t\t};\n\t};\n\n\t@ApiProperty({\n\t\tdescription: \"Participants per hour data\",\n\t\ttype: ParticipantsPerHourDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => ParticipantsPerHourDto)\n\tparticipants_per_hour: ParticipantsPerHourDto[];\n\n\t@ApiProperty({\n\t\ttitle: \"SessionData\",\n\t\tdescription:\n\t\t\t\"Session data including average, minimum, and maximum duration all-time and per day\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tall_time: {\n\t\t\t\ttype: \"object\",\n\t\t\t\ttitle: \"AllTimeSessionDataDto\",\n\t\t\t},\n\t\t\tper_day: {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: {\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\ttitle: \"SessionDurationPerDayDto\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tsession_data: {\n\t\tall_time: AllTimeSessionDataDto;\n\t\tper_day: SessionDurationPerDayDto[];\n\t};\n\n\t@ApiProperty({\n\t\ttitle: \"ReturnVisits\",\n\t\tdescription: \"Expected return visits and probability of return\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\texpected_return_count: { type: \"number\" },\n\t\t\tprobability_of_return: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\treturn_visits: {\n\t\texpected_return_count: number;\n\t\tprobability_of_return: number;\n\t};\n\n\t@ApiProperty({\n\t\tdescription: \"Number of previews of the room, i.e. without joining\",\n\t})\n\t@IsNumber()\n\troom_previews: number;\n}\n\nexport class MessagesPerHour {\n\t@ApiProperty({ type: \"number\" })\n\tcount: number;\n\n\t@ApiProperty({ type: Date })\n\thour: Date;\n}\n\nexport class RoomAnalyticsInteractionsDto {\n\t@ApiProperty({\n\t\ttitle: \"Messages\",\n\t\tdescription: \"Total messages sent and messages sent per hour\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\ttotal: { type: \"number\" },\n\t\t\tper_hour: {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: {\n\t\t\t\t\ttitle: \"MessagesPerHour\",\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tmessages: {\n\t\ttotal: number;\n\t\tper_hour: MessagesPerHour[];\n\t};\n\n\t@ApiProperty({ description: \"Total number of reactions sent in the room\" })\n\t@IsNumber()\n\treactions_sent: number;\n\n\t@ApiProperty({ description: \"Number of times the room was bookmarked\" })\n\t@IsNumber()\n\tbookmarked_count: number;\n}\n\nexport class SongAnalyticsDto {\n\t@ApiProperty({ description: \"Spotify ID of the song\" })\n\t@IsString()\n\tspotify_id: string;\n\n\t@ApiProperty({ description: \"Internal song ID\" })\n\tsong_id: string;\n\n\t@ApiProperty({ description: \"Number of times the song was played\" })\n\t@IsNumber()\n\tplays: number;\n\n\t@ApiProperty({ description: \"Number of upvotes the song received\" })\n\t@IsNumber()\n\tupvotes: number;\n\n\t@ApiProperty({ description: \"Number of downvotes the song received\" })\n\t@IsNumber()\n\tdownvotes: number;\n\n\t@ApiProperty({ description: \"Rank of the song based on some criteria\" })\n\t@IsNumber()\n\trank: number;\n\n\t@ApiProperty({ description: \"Global rank of the song across all rooms\" })\n\t@IsNumber()\n\tglobal_rank: number;\n}\n\nexport class RoomAnalyticsVotesDto {\n\t@ApiProperty({ description: \"Total number of upvotes for songs in the room\" })\n\t@IsNumber()\n\ttotal_upvotes: number;\n\n\t@ApiProperty({\n\t\tdescription: \"Total number of downvotes for songs in the room\",\n\t})\n\t@IsNumber()\n\ttotal_downvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Daily percentage change in upvotes for songs in the room. (last 24 hours)\",\n\t})\n\t@IsNumber()\n\tdaily_percentage_change_in_upvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Daily percentage change in downvotes for songs in the room. (last 24 hours)\",\n\t})\n\t@IsNumber()\n\tdaily_percentage_change_in_downvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Details of songs including Spotify ID, song ID, upvotes, and downvotes\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\tsongs: SongAnalyticsDto[];\n}\n\nexport class RoomAnalyticsSongsDto {\n\t@ApiProperty({\n\t\ttitle: \"MostPlayed\",\n\t\tdescription: \"Most played songs in the room\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\tmost_played: SongAnalyticsDto[];\n\n\t@ApiProperty({\n\t\tdescription: \"Top voted songs in the room\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\ttop_voted: SongAnalyticsDto[];\n}\n\nexport class RoomAnalyticsContributorsDto {\n\t@ApiProperty({\n\t\ttitle: \"TopContributors\",\n\t\tdescription: \"Top contributors to the room's queue\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tuser: { title: \"UserDto\", type: \"object\" },\n\t\t\trank: { type: \"number\" },\n\t\t\tnum_songs: { type: \"number\" },\n\t\t\tnum_upvotes: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\ttop_contributors: {\n\t\tuser: UserDto;\n\t\trank: number;\n\t\tnum_songs: number;\n\t\tnum_upvotes: number;\n\t};\n}\n\nexport class RoomAnalyticsDto {\n\t@ApiProperty({ description: \"Queue analytics\", type: RoomAnalyticsQueueDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsQueueDto)\n\tqueue: RoomAnalyticsQueueDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Participation analytics\",\n\t\ttype: RoomAnalyticsParticipationDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsParticipationDto)\n\tparticipation: RoomAnalyticsParticipationDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Interactions analytics\",\n\t\ttype: RoomAnalyticsInteractionsDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsInteractionsDto)\n\tinteractions: RoomAnalyticsInteractionsDto;\n\n\t@ApiProperty({ description: \"Votes analytics\", type: RoomAnalyticsVotesDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsVotesDto)\n\tvotes: RoomAnalyticsVotesDto;\n\n\t@ApiProperty({ description: \"Songs analytics\", type: RoomAnalyticsSongsDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsSongsDto)\n\tsongs: RoomAnalyticsSongsDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Contributors analytics\",\n\t\ttype: RoomAnalyticsContributorsDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsContributorsDto)\n\tcontributors: RoomAnalyticsContributorsDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoomAnalyticsDto.html":{"url":"classes/RoomAnalyticsDto.html","title":"class - RoomAnalyticsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoomAnalyticsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/dto/roomanalytics.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                contributors\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                interactions\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                participation\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                queue\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                songs\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                votes\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        contributors\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RoomAnalyticsContributorsDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Contributors analytics', type: RoomAnalyticsContributorsDto})@IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:432\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        interactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RoomAnalyticsInteractionsDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Interactions analytics', type: RoomAnalyticsInteractionsDto})@IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:411\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        participation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RoomAnalyticsParticipationDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Participation analytics', type: RoomAnalyticsParticipationDto})@IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:402\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        queue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RoomAnalyticsQueueDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Queue analytics', type: RoomAnalyticsQueueDto})@IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:393\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        songs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RoomAnalyticsSongsDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Songs analytics', type: RoomAnalyticsSongsDto})@IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:423\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        votes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RoomAnalyticsVotesDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Votes analytics', type: RoomAnalyticsVotesDto})@IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:417\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n\tIsArray,\n\tIsDate,\n\tIsNumber,\n\tIsObject,\n\tIsString,\n\tValidateNested,\n} from \"class-validator\";\nimport { UserDto } from \"../../users/dto/user.dto\";\nimport { Type } from \"class-transformer\";\nexport class RoomAnalyticsKeyMetricsDto {\n\t// an object called unique visitors with two properties, count and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"UniqueVisitors\",\n\t\tdescription: \"Unique visitors to the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tcount: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tunique_visitors: {\n\t\tcount: number;\n\t\tpercentage_change: number;\n\t};\n\n\t// an object called returning_visitors with two properties, count and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"ReturningVisitors\",\n\t\tdescription: \"Returning visitors to the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tcount: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\treturning_visitors: {\n\t\tcount: number;\n\t\tpercentage_change: number;\n\t};\n\n\t// an object called average_session_duration with two properties, duration and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"AverageSessionDuration\",\n\t\tdescription: \"Average session duration in the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tduration: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\taverage_session_duration: {\n\t\tduration: number;\n\t\tpercentage_change: number;\n\t};\n}\n\nexport class RoomAnalyticsQueueDto {\n\t@ApiProperty({ description: \"Total number of songs ever queued in the room\" })\n\t@IsNumber()\n\ttotal_songs_queued: number;\n\n\t@ApiProperty({\n\t\tdescription: \"Number of times the room's queue was exported as a playlist\",\n\t})\n\t@IsNumber()\n\ttotal_queue_exports: number;\n}\n\nexport class ParticipantsPerHourDto {\n\t@ApiProperty({\n\t\tdescription: \"The number of participants in the room at the given hour\",\n\t})\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The specific hour for participant count\",\n\t\ttype: Date,\n\t})\n\t@IsDate()\n\tinstance: Date;\n}\n\nexport class AllTimeSessionDataDto {\n\t@ApiProperty({\n\t\tdescription: \"The average session duration of the room\",\n\t})\n\t@IsNumber()\n\tavg_duration: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The minimum session duration of the room\",\n\t})\n\t@IsNumber()\n\tmin_duration: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The maximum session duration of the room\",\n\t})\n\t@IsNumber()\n\tmax_duration: number;\n}\n\nexport class SessionDurationPerDayDto {\n\t@ApiProperty({ type: \"number\" })\n\tduration: number;\n\n\t@ApiProperty({ type: Date })\n\tday: Date;\n}\n\nexport class SessionDataPerDayDto {\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tavg_duration: SessionDurationPerDayDto[];\n\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tmin_duration: SessionDurationPerDayDto[];\n\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tmax_duration: SessionDurationPerDayDto[];\n}\n\nexport class JoinsCount {\n\t@ApiProperty({ type: \"number\" })\n\tcount: number;\n\n\t@ApiProperty({ type: Date })\n\tday: Date;\n}\n\nexport class JoinsPerDay {\n\ttotal_joins: JoinsCount[];\n\tunique_joins: JoinsCount[];\n}\n\nexport class RoomAnalyticsParticipationDto {\n\t@ApiProperty({\n\t\ttitle: \"Joins\",\n\t\tdescription:\n\t\t\t\"Join statistics, including total and unique joins per day and all-time\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tper_day: {\n\t\t\t\ttitle: \"JoinsPerDay\",\n\t\t\t\ttype: \"object\",\n\t\t\t},\n\t\t\tall_time: {\n\t\t\t\ttitle: \"JoinsAllTime\",\n\t\t\t\ttype: \"object\",\n\t\t\t\tproperties: {\n\t\t\t\t\ttotal_joins: { type: \"number\" },\n\t\t\t\t\tunique_joins: { type: \"number\" },\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tjoins: {\n\t\tper_day: JoinsPerDay;\n\t\tall_time: {\n\t\t\ttotal_joins: number;\n\t\t\tunique_joins: number;\n\t\t};\n\t};\n\n\t@ApiProperty({\n\t\tdescription: \"Participants per hour data\",\n\t\ttype: ParticipantsPerHourDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => ParticipantsPerHourDto)\n\tparticipants_per_hour: ParticipantsPerHourDto[];\n\n\t@ApiProperty({\n\t\ttitle: \"SessionData\",\n\t\tdescription:\n\t\t\t\"Session data including average, minimum, and maximum duration all-time and per day\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tall_time: {\n\t\t\t\ttype: \"object\",\n\t\t\t\ttitle: \"AllTimeSessionDataDto\",\n\t\t\t},\n\t\t\tper_day: {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: {\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\ttitle: \"SessionDurationPerDayDto\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tsession_data: {\n\t\tall_time: AllTimeSessionDataDto;\n\t\tper_day: SessionDurationPerDayDto[];\n\t};\n\n\t@ApiProperty({\n\t\ttitle: \"ReturnVisits\",\n\t\tdescription: \"Expected return visits and probability of return\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\texpected_return_count: { type: \"number\" },\n\t\t\tprobability_of_return: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\treturn_visits: {\n\t\texpected_return_count: number;\n\t\tprobability_of_return: number;\n\t};\n\n\t@ApiProperty({\n\t\tdescription: \"Number of previews of the room, i.e. without joining\",\n\t})\n\t@IsNumber()\n\troom_previews: number;\n}\n\nexport class MessagesPerHour {\n\t@ApiProperty({ type: \"number\" })\n\tcount: number;\n\n\t@ApiProperty({ type: Date })\n\thour: Date;\n}\n\nexport class RoomAnalyticsInteractionsDto {\n\t@ApiProperty({\n\t\ttitle: \"Messages\",\n\t\tdescription: \"Total messages sent and messages sent per hour\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\ttotal: { type: \"number\" },\n\t\t\tper_hour: {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: {\n\t\t\t\t\ttitle: \"MessagesPerHour\",\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tmessages: {\n\t\ttotal: number;\n\t\tper_hour: MessagesPerHour[];\n\t};\n\n\t@ApiProperty({ description: \"Total number of reactions sent in the room\" })\n\t@IsNumber()\n\treactions_sent: number;\n\n\t@ApiProperty({ description: \"Number of times the room was bookmarked\" })\n\t@IsNumber()\n\tbookmarked_count: number;\n}\n\nexport class SongAnalyticsDto {\n\t@ApiProperty({ description: \"Spotify ID of the song\" })\n\t@IsString()\n\tspotify_id: string;\n\n\t@ApiProperty({ description: \"Internal song ID\" })\n\tsong_id: string;\n\n\t@ApiProperty({ description: \"Number of times the song was played\" })\n\t@IsNumber()\n\tplays: number;\n\n\t@ApiProperty({ description: \"Number of upvotes the song received\" })\n\t@IsNumber()\n\tupvotes: number;\n\n\t@ApiProperty({ description: \"Number of downvotes the song received\" })\n\t@IsNumber()\n\tdownvotes: number;\n\n\t@ApiProperty({ description: \"Rank of the song based on some criteria\" })\n\t@IsNumber()\n\trank: number;\n\n\t@ApiProperty({ description: \"Global rank of the song across all rooms\" })\n\t@IsNumber()\n\tglobal_rank: number;\n}\n\nexport class RoomAnalyticsVotesDto {\n\t@ApiProperty({ description: \"Total number of upvotes for songs in the room\" })\n\t@IsNumber()\n\ttotal_upvotes: number;\n\n\t@ApiProperty({\n\t\tdescription: \"Total number of downvotes for songs in the room\",\n\t})\n\t@IsNumber()\n\ttotal_downvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Daily percentage change in upvotes for songs in the room. (last 24 hours)\",\n\t})\n\t@IsNumber()\n\tdaily_percentage_change_in_upvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Daily percentage change in downvotes for songs in the room. (last 24 hours)\",\n\t})\n\t@IsNumber()\n\tdaily_percentage_change_in_downvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Details of songs including Spotify ID, song ID, upvotes, and downvotes\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\tsongs: SongAnalyticsDto[];\n}\n\nexport class RoomAnalyticsSongsDto {\n\t@ApiProperty({\n\t\ttitle: \"MostPlayed\",\n\t\tdescription: \"Most played songs in the room\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\tmost_played: SongAnalyticsDto[];\n\n\t@ApiProperty({\n\t\tdescription: \"Top voted songs in the room\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\ttop_voted: SongAnalyticsDto[];\n}\n\nexport class RoomAnalyticsContributorsDto {\n\t@ApiProperty({\n\t\ttitle: \"TopContributors\",\n\t\tdescription: \"Top contributors to the room's queue\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tuser: { title: \"UserDto\", type: \"object\" },\n\t\t\trank: { type: \"number\" },\n\t\t\tnum_songs: { type: \"number\" },\n\t\t\tnum_upvotes: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\ttop_contributors: {\n\t\tuser: UserDto;\n\t\trank: number;\n\t\tnum_songs: number;\n\t\tnum_upvotes: number;\n\t};\n}\n\nexport class RoomAnalyticsDto {\n\t@ApiProperty({ description: \"Queue analytics\", type: RoomAnalyticsQueueDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsQueueDto)\n\tqueue: RoomAnalyticsQueueDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Participation analytics\",\n\t\ttype: RoomAnalyticsParticipationDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsParticipationDto)\n\tparticipation: RoomAnalyticsParticipationDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Interactions analytics\",\n\t\ttype: RoomAnalyticsInteractionsDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsInteractionsDto)\n\tinteractions: RoomAnalyticsInteractionsDto;\n\n\t@ApiProperty({ description: \"Votes analytics\", type: RoomAnalyticsVotesDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsVotesDto)\n\tvotes: RoomAnalyticsVotesDto;\n\n\t@ApiProperty({ description: \"Songs analytics\", type: RoomAnalyticsSongsDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsSongsDto)\n\tsongs: RoomAnalyticsSongsDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Contributors analytics\",\n\t\ttype: RoomAnalyticsContributorsDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsContributorsDto)\n\tcontributors: RoomAnalyticsContributorsDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoomAnalyticsInteractionsDto.html":{"url":"classes/RoomAnalyticsInteractionsDto.html","title":"class - RoomAnalyticsInteractionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoomAnalyticsInteractionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/dto/roomanalytics.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                bookmarked_count\n                            \n                            \n                                    \n                                    \n                                    \n                                messages\n                            \n                            \n                                    \n                                    \n                                reactions_sent\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        bookmarked_count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Number of times the room was bookmarked'})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:274\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        messages\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Messages', description: 'Total messages sent and messages sent per hour', type: 'object', properties: undefined})@IsObject()@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:263\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reactions_sent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Total number of reactions sent in the room'})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:270\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n\tIsArray,\n\tIsDate,\n\tIsNumber,\n\tIsObject,\n\tIsString,\n\tValidateNested,\n} from \"class-validator\";\nimport { UserDto } from \"../../users/dto/user.dto\";\nimport { Type } from \"class-transformer\";\nexport class RoomAnalyticsKeyMetricsDto {\n\t// an object called unique visitors with two properties, count and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"UniqueVisitors\",\n\t\tdescription: \"Unique visitors to the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tcount: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tunique_visitors: {\n\t\tcount: number;\n\t\tpercentage_change: number;\n\t};\n\n\t// an object called returning_visitors with two properties, count and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"ReturningVisitors\",\n\t\tdescription: \"Returning visitors to the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tcount: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\treturning_visitors: {\n\t\tcount: number;\n\t\tpercentage_change: number;\n\t};\n\n\t// an object called average_session_duration with two properties, duration and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"AverageSessionDuration\",\n\t\tdescription: \"Average session duration in the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tduration: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\taverage_session_duration: {\n\t\tduration: number;\n\t\tpercentage_change: number;\n\t};\n}\n\nexport class RoomAnalyticsQueueDto {\n\t@ApiProperty({ description: \"Total number of songs ever queued in the room\" })\n\t@IsNumber()\n\ttotal_songs_queued: number;\n\n\t@ApiProperty({\n\t\tdescription: \"Number of times the room's queue was exported as a playlist\",\n\t})\n\t@IsNumber()\n\ttotal_queue_exports: number;\n}\n\nexport class ParticipantsPerHourDto {\n\t@ApiProperty({\n\t\tdescription: \"The number of participants in the room at the given hour\",\n\t})\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The specific hour for participant count\",\n\t\ttype: Date,\n\t})\n\t@IsDate()\n\tinstance: Date;\n}\n\nexport class AllTimeSessionDataDto {\n\t@ApiProperty({\n\t\tdescription: \"The average session duration of the room\",\n\t})\n\t@IsNumber()\n\tavg_duration: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The minimum session duration of the room\",\n\t})\n\t@IsNumber()\n\tmin_duration: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The maximum session duration of the room\",\n\t})\n\t@IsNumber()\n\tmax_duration: number;\n}\n\nexport class SessionDurationPerDayDto {\n\t@ApiProperty({ type: \"number\" })\n\tduration: number;\n\n\t@ApiProperty({ type: Date })\n\tday: Date;\n}\n\nexport class SessionDataPerDayDto {\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tavg_duration: SessionDurationPerDayDto[];\n\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tmin_duration: SessionDurationPerDayDto[];\n\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tmax_duration: SessionDurationPerDayDto[];\n}\n\nexport class JoinsCount {\n\t@ApiProperty({ type: \"number\" })\n\tcount: number;\n\n\t@ApiProperty({ type: Date })\n\tday: Date;\n}\n\nexport class JoinsPerDay {\n\ttotal_joins: JoinsCount[];\n\tunique_joins: JoinsCount[];\n}\n\nexport class RoomAnalyticsParticipationDto {\n\t@ApiProperty({\n\t\ttitle: \"Joins\",\n\t\tdescription:\n\t\t\t\"Join statistics, including total and unique joins per day and all-time\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tper_day: {\n\t\t\t\ttitle: \"JoinsPerDay\",\n\t\t\t\ttype: \"object\",\n\t\t\t},\n\t\t\tall_time: {\n\t\t\t\ttitle: \"JoinsAllTime\",\n\t\t\t\ttype: \"object\",\n\t\t\t\tproperties: {\n\t\t\t\t\ttotal_joins: { type: \"number\" },\n\t\t\t\t\tunique_joins: { type: \"number\" },\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tjoins: {\n\t\tper_day: JoinsPerDay;\n\t\tall_time: {\n\t\t\ttotal_joins: number;\n\t\t\tunique_joins: number;\n\t\t};\n\t};\n\n\t@ApiProperty({\n\t\tdescription: \"Participants per hour data\",\n\t\ttype: ParticipantsPerHourDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => ParticipantsPerHourDto)\n\tparticipants_per_hour: ParticipantsPerHourDto[];\n\n\t@ApiProperty({\n\t\ttitle: \"SessionData\",\n\t\tdescription:\n\t\t\t\"Session data including average, minimum, and maximum duration all-time and per day\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tall_time: {\n\t\t\t\ttype: \"object\",\n\t\t\t\ttitle: \"AllTimeSessionDataDto\",\n\t\t\t},\n\t\t\tper_day: {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: {\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\ttitle: \"SessionDurationPerDayDto\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tsession_data: {\n\t\tall_time: AllTimeSessionDataDto;\n\t\tper_day: SessionDurationPerDayDto[];\n\t};\n\n\t@ApiProperty({\n\t\ttitle: \"ReturnVisits\",\n\t\tdescription: \"Expected return visits and probability of return\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\texpected_return_count: { type: \"number\" },\n\t\t\tprobability_of_return: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\treturn_visits: {\n\t\texpected_return_count: number;\n\t\tprobability_of_return: number;\n\t};\n\n\t@ApiProperty({\n\t\tdescription: \"Number of previews of the room, i.e. without joining\",\n\t})\n\t@IsNumber()\n\troom_previews: number;\n}\n\nexport class MessagesPerHour {\n\t@ApiProperty({ type: \"number\" })\n\tcount: number;\n\n\t@ApiProperty({ type: Date })\n\thour: Date;\n}\n\nexport class RoomAnalyticsInteractionsDto {\n\t@ApiProperty({\n\t\ttitle: \"Messages\",\n\t\tdescription: \"Total messages sent and messages sent per hour\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\ttotal: { type: \"number\" },\n\t\t\tper_hour: {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: {\n\t\t\t\t\ttitle: \"MessagesPerHour\",\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tmessages: {\n\t\ttotal: number;\n\t\tper_hour: MessagesPerHour[];\n\t};\n\n\t@ApiProperty({ description: \"Total number of reactions sent in the room\" })\n\t@IsNumber()\n\treactions_sent: number;\n\n\t@ApiProperty({ description: \"Number of times the room was bookmarked\" })\n\t@IsNumber()\n\tbookmarked_count: number;\n}\n\nexport class SongAnalyticsDto {\n\t@ApiProperty({ description: \"Spotify ID of the song\" })\n\t@IsString()\n\tspotify_id: string;\n\n\t@ApiProperty({ description: \"Internal song ID\" })\n\tsong_id: string;\n\n\t@ApiProperty({ description: \"Number of times the song was played\" })\n\t@IsNumber()\n\tplays: number;\n\n\t@ApiProperty({ description: \"Number of upvotes the song received\" })\n\t@IsNumber()\n\tupvotes: number;\n\n\t@ApiProperty({ description: \"Number of downvotes the song received\" })\n\t@IsNumber()\n\tdownvotes: number;\n\n\t@ApiProperty({ description: \"Rank of the song based on some criteria\" })\n\t@IsNumber()\n\trank: number;\n\n\t@ApiProperty({ description: \"Global rank of the song across all rooms\" })\n\t@IsNumber()\n\tglobal_rank: number;\n}\n\nexport class RoomAnalyticsVotesDto {\n\t@ApiProperty({ description: \"Total number of upvotes for songs in the room\" })\n\t@IsNumber()\n\ttotal_upvotes: number;\n\n\t@ApiProperty({\n\t\tdescription: \"Total number of downvotes for songs in the room\",\n\t})\n\t@IsNumber()\n\ttotal_downvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Daily percentage change in upvotes for songs in the room. (last 24 hours)\",\n\t})\n\t@IsNumber()\n\tdaily_percentage_change_in_upvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Daily percentage change in downvotes for songs in the room. (last 24 hours)\",\n\t})\n\t@IsNumber()\n\tdaily_percentage_change_in_downvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Details of songs including Spotify ID, song ID, upvotes, and downvotes\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\tsongs: SongAnalyticsDto[];\n}\n\nexport class RoomAnalyticsSongsDto {\n\t@ApiProperty({\n\t\ttitle: \"MostPlayed\",\n\t\tdescription: \"Most played songs in the room\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\tmost_played: SongAnalyticsDto[];\n\n\t@ApiProperty({\n\t\tdescription: \"Top voted songs in the room\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\ttop_voted: SongAnalyticsDto[];\n}\n\nexport class RoomAnalyticsContributorsDto {\n\t@ApiProperty({\n\t\ttitle: \"TopContributors\",\n\t\tdescription: \"Top contributors to the room's queue\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tuser: { title: \"UserDto\", type: \"object\" },\n\t\t\trank: { type: \"number\" },\n\t\t\tnum_songs: { type: \"number\" },\n\t\t\tnum_upvotes: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\ttop_contributors: {\n\t\tuser: UserDto;\n\t\trank: number;\n\t\tnum_songs: number;\n\t\tnum_upvotes: number;\n\t};\n}\n\nexport class RoomAnalyticsDto {\n\t@ApiProperty({ description: \"Queue analytics\", type: RoomAnalyticsQueueDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsQueueDto)\n\tqueue: RoomAnalyticsQueueDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Participation analytics\",\n\t\ttype: RoomAnalyticsParticipationDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsParticipationDto)\n\tparticipation: RoomAnalyticsParticipationDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Interactions analytics\",\n\t\ttype: RoomAnalyticsInteractionsDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsInteractionsDto)\n\tinteractions: RoomAnalyticsInteractionsDto;\n\n\t@ApiProperty({ description: \"Votes analytics\", type: RoomAnalyticsVotesDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsVotesDto)\n\tvotes: RoomAnalyticsVotesDto;\n\n\t@ApiProperty({ description: \"Songs analytics\", type: RoomAnalyticsSongsDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsSongsDto)\n\tsongs: RoomAnalyticsSongsDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Contributors analytics\",\n\t\ttype: RoomAnalyticsContributorsDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsContributorsDto)\n\tcontributors: RoomAnalyticsContributorsDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoomAnalyticsKeyMetricsDto.html":{"url":"classes/RoomAnalyticsKeyMetricsDto.html","title":"class - RoomAnalyticsKeyMetricsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoomAnalyticsKeyMetricsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/dto/roomanalytics.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                average_session_duration\n                            \n                            \n                                    \n                                    \n                                    \n                                returning_visitors\n                            \n                            \n                                    \n                                    \n                                    \n                                unique_visitors\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        average_session_duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'AverageSessionDuration', description: 'Average session duration in the user's rooms', type: 'object', properties: undefined})@IsObject()@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        returning_visitors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'ReturningVisitors', description: 'Returning visitors to the user's rooms', type: 'object', properties: undefined})@IsObject()@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        unique_visitors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'UniqueVisitors', description: 'Unique visitors to the user's rooms', type: 'object', properties: undefined})@IsObject()@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n\tIsArray,\n\tIsDate,\n\tIsNumber,\n\tIsObject,\n\tIsString,\n\tValidateNested,\n} from \"class-validator\";\nimport { UserDto } from \"../../users/dto/user.dto\";\nimport { Type } from \"class-transformer\";\nexport class RoomAnalyticsKeyMetricsDto {\n\t// an object called unique visitors with two properties, count and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"UniqueVisitors\",\n\t\tdescription: \"Unique visitors to the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tcount: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tunique_visitors: {\n\t\tcount: number;\n\t\tpercentage_change: number;\n\t};\n\n\t// an object called returning_visitors with two properties, count and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"ReturningVisitors\",\n\t\tdescription: \"Returning visitors to the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tcount: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\treturning_visitors: {\n\t\tcount: number;\n\t\tpercentage_change: number;\n\t};\n\n\t// an object called average_session_duration with two properties, duration and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"AverageSessionDuration\",\n\t\tdescription: \"Average session duration in the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tduration: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\taverage_session_duration: {\n\t\tduration: number;\n\t\tpercentage_change: number;\n\t};\n}\n\nexport class RoomAnalyticsQueueDto {\n\t@ApiProperty({ description: \"Total number of songs ever queued in the room\" })\n\t@IsNumber()\n\ttotal_songs_queued: number;\n\n\t@ApiProperty({\n\t\tdescription: \"Number of times the room's queue was exported as a playlist\",\n\t})\n\t@IsNumber()\n\ttotal_queue_exports: number;\n}\n\nexport class ParticipantsPerHourDto {\n\t@ApiProperty({\n\t\tdescription: \"The number of participants in the room at the given hour\",\n\t})\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The specific hour for participant count\",\n\t\ttype: Date,\n\t})\n\t@IsDate()\n\tinstance: Date;\n}\n\nexport class AllTimeSessionDataDto {\n\t@ApiProperty({\n\t\tdescription: \"The average session duration of the room\",\n\t})\n\t@IsNumber()\n\tavg_duration: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The minimum session duration of the room\",\n\t})\n\t@IsNumber()\n\tmin_duration: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The maximum session duration of the room\",\n\t})\n\t@IsNumber()\n\tmax_duration: number;\n}\n\nexport class SessionDurationPerDayDto {\n\t@ApiProperty({ type: \"number\" })\n\tduration: number;\n\n\t@ApiProperty({ type: Date })\n\tday: Date;\n}\n\nexport class SessionDataPerDayDto {\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tavg_duration: SessionDurationPerDayDto[];\n\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tmin_duration: SessionDurationPerDayDto[];\n\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tmax_duration: SessionDurationPerDayDto[];\n}\n\nexport class JoinsCount {\n\t@ApiProperty({ type: \"number\" })\n\tcount: number;\n\n\t@ApiProperty({ type: Date })\n\tday: Date;\n}\n\nexport class JoinsPerDay {\n\ttotal_joins: JoinsCount[];\n\tunique_joins: JoinsCount[];\n}\n\nexport class RoomAnalyticsParticipationDto {\n\t@ApiProperty({\n\t\ttitle: \"Joins\",\n\t\tdescription:\n\t\t\t\"Join statistics, including total and unique joins per day and all-time\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tper_day: {\n\t\t\t\ttitle: \"JoinsPerDay\",\n\t\t\t\ttype: \"object\",\n\t\t\t},\n\t\t\tall_time: {\n\t\t\t\ttitle: \"JoinsAllTime\",\n\t\t\t\ttype: \"object\",\n\t\t\t\tproperties: {\n\t\t\t\t\ttotal_joins: { type: \"number\" },\n\t\t\t\t\tunique_joins: { type: \"number\" },\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tjoins: {\n\t\tper_day: JoinsPerDay;\n\t\tall_time: {\n\t\t\ttotal_joins: number;\n\t\t\tunique_joins: number;\n\t\t};\n\t};\n\n\t@ApiProperty({\n\t\tdescription: \"Participants per hour data\",\n\t\ttype: ParticipantsPerHourDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => ParticipantsPerHourDto)\n\tparticipants_per_hour: ParticipantsPerHourDto[];\n\n\t@ApiProperty({\n\t\ttitle: \"SessionData\",\n\t\tdescription:\n\t\t\t\"Session data including average, minimum, and maximum duration all-time and per day\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tall_time: {\n\t\t\t\ttype: \"object\",\n\t\t\t\ttitle: \"AllTimeSessionDataDto\",\n\t\t\t},\n\t\t\tper_day: {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: {\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\ttitle: \"SessionDurationPerDayDto\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tsession_data: {\n\t\tall_time: AllTimeSessionDataDto;\n\t\tper_day: SessionDurationPerDayDto[];\n\t};\n\n\t@ApiProperty({\n\t\ttitle: \"ReturnVisits\",\n\t\tdescription: \"Expected return visits and probability of return\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\texpected_return_count: { type: \"number\" },\n\t\t\tprobability_of_return: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\treturn_visits: {\n\t\texpected_return_count: number;\n\t\tprobability_of_return: number;\n\t};\n\n\t@ApiProperty({\n\t\tdescription: \"Number of previews of the room, i.e. without joining\",\n\t})\n\t@IsNumber()\n\troom_previews: number;\n}\n\nexport class MessagesPerHour {\n\t@ApiProperty({ type: \"number\" })\n\tcount: number;\n\n\t@ApiProperty({ type: Date })\n\thour: Date;\n}\n\nexport class RoomAnalyticsInteractionsDto {\n\t@ApiProperty({\n\t\ttitle: \"Messages\",\n\t\tdescription: \"Total messages sent and messages sent per hour\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\ttotal: { type: \"number\" },\n\t\t\tper_hour: {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: {\n\t\t\t\t\ttitle: \"MessagesPerHour\",\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tmessages: {\n\t\ttotal: number;\n\t\tper_hour: MessagesPerHour[];\n\t};\n\n\t@ApiProperty({ description: \"Total number of reactions sent in the room\" })\n\t@IsNumber()\n\treactions_sent: number;\n\n\t@ApiProperty({ description: \"Number of times the room was bookmarked\" })\n\t@IsNumber()\n\tbookmarked_count: number;\n}\n\nexport class SongAnalyticsDto {\n\t@ApiProperty({ description: \"Spotify ID of the song\" })\n\t@IsString()\n\tspotify_id: string;\n\n\t@ApiProperty({ description: \"Internal song ID\" })\n\tsong_id: string;\n\n\t@ApiProperty({ description: \"Number of times the song was played\" })\n\t@IsNumber()\n\tplays: number;\n\n\t@ApiProperty({ description: \"Number of upvotes the song received\" })\n\t@IsNumber()\n\tupvotes: number;\n\n\t@ApiProperty({ description: \"Number of downvotes the song received\" })\n\t@IsNumber()\n\tdownvotes: number;\n\n\t@ApiProperty({ description: \"Rank of the song based on some criteria\" })\n\t@IsNumber()\n\trank: number;\n\n\t@ApiProperty({ description: \"Global rank of the song across all rooms\" })\n\t@IsNumber()\n\tglobal_rank: number;\n}\n\nexport class RoomAnalyticsVotesDto {\n\t@ApiProperty({ description: \"Total number of upvotes for songs in the room\" })\n\t@IsNumber()\n\ttotal_upvotes: number;\n\n\t@ApiProperty({\n\t\tdescription: \"Total number of downvotes for songs in the room\",\n\t})\n\t@IsNumber()\n\ttotal_downvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Daily percentage change in upvotes for songs in the room. (last 24 hours)\",\n\t})\n\t@IsNumber()\n\tdaily_percentage_change_in_upvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Daily percentage change in downvotes for songs in the room. (last 24 hours)\",\n\t})\n\t@IsNumber()\n\tdaily_percentage_change_in_downvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Details of songs including Spotify ID, song ID, upvotes, and downvotes\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\tsongs: SongAnalyticsDto[];\n}\n\nexport class RoomAnalyticsSongsDto {\n\t@ApiProperty({\n\t\ttitle: \"MostPlayed\",\n\t\tdescription: \"Most played songs in the room\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\tmost_played: SongAnalyticsDto[];\n\n\t@ApiProperty({\n\t\tdescription: \"Top voted songs in the room\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\ttop_voted: SongAnalyticsDto[];\n}\n\nexport class RoomAnalyticsContributorsDto {\n\t@ApiProperty({\n\t\ttitle: \"TopContributors\",\n\t\tdescription: \"Top contributors to the room's queue\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tuser: { title: \"UserDto\", type: \"object\" },\n\t\t\trank: { type: \"number\" },\n\t\t\tnum_songs: { type: \"number\" },\n\t\t\tnum_upvotes: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\ttop_contributors: {\n\t\tuser: UserDto;\n\t\trank: number;\n\t\tnum_songs: number;\n\t\tnum_upvotes: number;\n\t};\n}\n\nexport class RoomAnalyticsDto {\n\t@ApiProperty({ description: \"Queue analytics\", type: RoomAnalyticsQueueDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsQueueDto)\n\tqueue: RoomAnalyticsQueueDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Participation analytics\",\n\t\ttype: RoomAnalyticsParticipationDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsParticipationDto)\n\tparticipation: RoomAnalyticsParticipationDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Interactions analytics\",\n\t\ttype: RoomAnalyticsInteractionsDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsInteractionsDto)\n\tinteractions: RoomAnalyticsInteractionsDto;\n\n\t@ApiProperty({ description: \"Votes analytics\", type: RoomAnalyticsVotesDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsVotesDto)\n\tvotes: RoomAnalyticsVotesDto;\n\n\t@ApiProperty({ description: \"Songs analytics\", type: RoomAnalyticsSongsDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsSongsDto)\n\tsongs: RoomAnalyticsSongsDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Contributors analytics\",\n\t\ttype: RoomAnalyticsContributorsDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsContributorsDto)\n\tcontributors: RoomAnalyticsContributorsDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoomAnalyticsParticipationDto.html":{"url":"classes/RoomAnalyticsParticipationDto.html","title":"class - RoomAnalyticsParticipationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoomAnalyticsParticipationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/dto/roomanalytics.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                joins\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                participants_per_hour\n                            \n                            \n                                    \n                                    \n                                    \n                                return_visits\n                            \n                            \n                                    \n                                    \n                                room_previews\n                            \n                            \n                                    \n                                    \n                                    \n                                session_data\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        joins\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Joins', description: 'Join statistics, including total and unique joins per day and all-time', type: 'object', properties: undefined})@IsObject()@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:170\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        participants_per_hour\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ParticipantsPerHourDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Participants per hour data', type: ParticipantsPerHourDto, isArray: true})@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:186\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        return_visits\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'ReturnVisits', description: 'Expected return visits and probability of return', type: 'object', properties: undefined})@IsObject()@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:225\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        room_previews\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Number of previews of the room, i.e. without joining'})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:234\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        session_data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'SessionData', description: 'Session data including average, minimum, and maximum duration all-time and per day', type: 'object', properties: undefined})@IsObject()@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:209\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n\tIsArray,\n\tIsDate,\n\tIsNumber,\n\tIsObject,\n\tIsString,\n\tValidateNested,\n} from \"class-validator\";\nimport { UserDto } from \"../../users/dto/user.dto\";\nimport { Type } from \"class-transformer\";\nexport class RoomAnalyticsKeyMetricsDto {\n\t// an object called unique visitors with two properties, count and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"UniqueVisitors\",\n\t\tdescription: \"Unique visitors to the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tcount: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tunique_visitors: {\n\t\tcount: number;\n\t\tpercentage_change: number;\n\t};\n\n\t// an object called returning_visitors with two properties, count and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"ReturningVisitors\",\n\t\tdescription: \"Returning visitors to the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tcount: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\treturning_visitors: {\n\t\tcount: number;\n\t\tpercentage_change: number;\n\t};\n\n\t// an object called average_session_duration with two properties, duration and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"AverageSessionDuration\",\n\t\tdescription: \"Average session duration in the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tduration: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\taverage_session_duration: {\n\t\tduration: number;\n\t\tpercentage_change: number;\n\t};\n}\n\nexport class RoomAnalyticsQueueDto {\n\t@ApiProperty({ description: \"Total number of songs ever queued in the room\" })\n\t@IsNumber()\n\ttotal_songs_queued: number;\n\n\t@ApiProperty({\n\t\tdescription: \"Number of times the room's queue was exported as a playlist\",\n\t})\n\t@IsNumber()\n\ttotal_queue_exports: number;\n}\n\nexport class ParticipantsPerHourDto {\n\t@ApiProperty({\n\t\tdescription: \"The number of participants in the room at the given hour\",\n\t})\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The specific hour for participant count\",\n\t\ttype: Date,\n\t})\n\t@IsDate()\n\tinstance: Date;\n}\n\nexport class AllTimeSessionDataDto {\n\t@ApiProperty({\n\t\tdescription: \"The average session duration of the room\",\n\t})\n\t@IsNumber()\n\tavg_duration: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The minimum session duration of the room\",\n\t})\n\t@IsNumber()\n\tmin_duration: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The maximum session duration of the room\",\n\t})\n\t@IsNumber()\n\tmax_duration: number;\n}\n\nexport class SessionDurationPerDayDto {\n\t@ApiProperty({ type: \"number\" })\n\tduration: number;\n\n\t@ApiProperty({ type: Date })\n\tday: Date;\n}\n\nexport class SessionDataPerDayDto {\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tavg_duration: SessionDurationPerDayDto[];\n\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tmin_duration: SessionDurationPerDayDto[];\n\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tmax_duration: SessionDurationPerDayDto[];\n}\n\nexport class JoinsCount {\n\t@ApiProperty({ type: \"number\" })\n\tcount: number;\n\n\t@ApiProperty({ type: Date })\n\tday: Date;\n}\n\nexport class JoinsPerDay {\n\ttotal_joins: JoinsCount[];\n\tunique_joins: JoinsCount[];\n}\n\nexport class RoomAnalyticsParticipationDto {\n\t@ApiProperty({\n\t\ttitle: \"Joins\",\n\t\tdescription:\n\t\t\t\"Join statistics, including total and unique joins per day and all-time\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tper_day: {\n\t\t\t\ttitle: \"JoinsPerDay\",\n\t\t\t\ttype: \"object\",\n\t\t\t},\n\t\t\tall_time: {\n\t\t\t\ttitle: \"JoinsAllTime\",\n\t\t\t\ttype: \"object\",\n\t\t\t\tproperties: {\n\t\t\t\t\ttotal_joins: { type: \"number\" },\n\t\t\t\t\tunique_joins: { type: \"number\" },\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tjoins: {\n\t\tper_day: JoinsPerDay;\n\t\tall_time: {\n\t\t\ttotal_joins: number;\n\t\t\tunique_joins: number;\n\t\t};\n\t};\n\n\t@ApiProperty({\n\t\tdescription: \"Participants per hour data\",\n\t\ttype: ParticipantsPerHourDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => ParticipantsPerHourDto)\n\tparticipants_per_hour: ParticipantsPerHourDto[];\n\n\t@ApiProperty({\n\t\ttitle: \"SessionData\",\n\t\tdescription:\n\t\t\t\"Session data including average, minimum, and maximum duration all-time and per day\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tall_time: {\n\t\t\t\ttype: \"object\",\n\t\t\t\ttitle: \"AllTimeSessionDataDto\",\n\t\t\t},\n\t\t\tper_day: {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: {\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\ttitle: \"SessionDurationPerDayDto\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tsession_data: {\n\t\tall_time: AllTimeSessionDataDto;\n\t\tper_day: SessionDurationPerDayDto[];\n\t};\n\n\t@ApiProperty({\n\t\ttitle: \"ReturnVisits\",\n\t\tdescription: \"Expected return visits and probability of return\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\texpected_return_count: { type: \"number\" },\n\t\t\tprobability_of_return: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\treturn_visits: {\n\t\texpected_return_count: number;\n\t\tprobability_of_return: number;\n\t};\n\n\t@ApiProperty({\n\t\tdescription: \"Number of previews of the room, i.e. without joining\",\n\t})\n\t@IsNumber()\n\troom_previews: number;\n}\n\nexport class MessagesPerHour {\n\t@ApiProperty({ type: \"number\" })\n\tcount: number;\n\n\t@ApiProperty({ type: Date })\n\thour: Date;\n}\n\nexport class RoomAnalyticsInteractionsDto {\n\t@ApiProperty({\n\t\ttitle: \"Messages\",\n\t\tdescription: \"Total messages sent and messages sent per hour\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\ttotal: { type: \"number\" },\n\t\t\tper_hour: {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: {\n\t\t\t\t\ttitle: \"MessagesPerHour\",\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tmessages: {\n\t\ttotal: number;\n\t\tper_hour: MessagesPerHour[];\n\t};\n\n\t@ApiProperty({ description: \"Total number of reactions sent in the room\" })\n\t@IsNumber()\n\treactions_sent: number;\n\n\t@ApiProperty({ description: \"Number of times the room was bookmarked\" })\n\t@IsNumber()\n\tbookmarked_count: number;\n}\n\nexport class SongAnalyticsDto {\n\t@ApiProperty({ description: \"Spotify ID of the song\" })\n\t@IsString()\n\tspotify_id: string;\n\n\t@ApiProperty({ description: \"Internal song ID\" })\n\tsong_id: string;\n\n\t@ApiProperty({ description: \"Number of times the song was played\" })\n\t@IsNumber()\n\tplays: number;\n\n\t@ApiProperty({ description: \"Number of upvotes the song received\" })\n\t@IsNumber()\n\tupvotes: number;\n\n\t@ApiProperty({ description: \"Number of downvotes the song received\" })\n\t@IsNumber()\n\tdownvotes: number;\n\n\t@ApiProperty({ description: \"Rank of the song based on some criteria\" })\n\t@IsNumber()\n\trank: number;\n\n\t@ApiProperty({ description: \"Global rank of the song across all rooms\" })\n\t@IsNumber()\n\tglobal_rank: number;\n}\n\nexport class RoomAnalyticsVotesDto {\n\t@ApiProperty({ description: \"Total number of upvotes for songs in the room\" })\n\t@IsNumber()\n\ttotal_upvotes: number;\n\n\t@ApiProperty({\n\t\tdescription: \"Total number of downvotes for songs in the room\",\n\t})\n\t@IsNumber()\n\ttotal_downvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Daily percentage change in upvotes for songs in the room. (last 24 hours)\",\n\t})\n\t@IsNumber()\n\tdaily_percentage_change_in_upvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Daily percentage change in downvotes for songs in the room. (last 24 hours)\",\n\t})\n\t@IsNumber()\n\tdaily_percentage_change_in_downvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Details of songs including Spotify ID, song ID, upvotes, and downvotes\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\tsongs: SongAnalyticsDto[];\n}\n\nexport class RoomAnalyticsSongsDto {\n\t@ApiProperty({\n\t\ttitle: \"MostPlayed\",\n\t\tdescription: \"Most played songs in the room\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\tmost_played: SongAnalyticsDto[];\n\n\t@ApiProperty({\n\t\tdescription: \"Top voted songs in the room\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\ttop_voted: SongAnalyticsDto[];\n}\n\nexport class RoomAnalyticsContributorsDto {\n\t@ApiProperty({\n\t\ttitle: \"TopContributors\",\n\t\tdescription: \"Top contributors to the room's queue\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tuser: { title: \"UserDto\", type: \"object\" },\n\t\t\trank: { type: \"number\" },\n\t\t\tnum_songs: { type: \"number\" },\n\t\t\tnum_upvotes: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\ttop_contributors: {\n\t\tuser: UserDto;\n\t\trank: number;\n\t\tnum_songs: number;\n\t\tnum_upvotes: number;\n\t};\n}\n\nexport class RoomAnalyticsDto {\n\t@ApiProperty({ description: \"Queue analytics\", type: RoomAnalyticsQueueDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsQueueDto)\n\tqueue: RoomAnalyticsQueueDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Participation analytics\",\n\t\ttype: RoomAnalyticsParticipationDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsParticipationDto)\n\tparticipation: RoomAnalyticsParticipationDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Interactions analytics\",\n\t\ttype: RoomAnalyticsInteractionsDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsInteractionsDto)\n\tinteractions: RoomAnalyticsInteractionsDto;\n\n\t@ApiProperty({ description: \"Votes analytics\", type: RoomAnalyticsVotesDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsVotesDto)\n\tvotes: RoomAnalyticsVotesDto;\n\n\t@ApiProperty({ description: \"Songs analytics\", type: RoomAnalyticsSongsDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsSongsDto)\n\tsongs: RoomAnalyticsSongsDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Contributors analytics\",\n\t\ttype: RoomAnalyticsContributorsDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsContributorsDto)\n\tcontributors: RoomAnalyticsContributorsDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoomAnalyticsQueueDto.html":{"url":"classes/RoomAnalyticsQueueDto.html","title":"class - RoomAnalyticsQueueDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoomAnalyticsQueueDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/dto/roomanalytics.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                total_queue_exports\n                            \n                            \n                                    \n                                    \n                                total_songs_queued\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        total_queue_exports\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Number of times the room's queue was exported as a playlist'})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        total_songs_queued\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Total number of songs ever queued in the room'})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:68\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n\tIsArray,\n\tIsDate,\n\tIsNumber,\n\tIsObject,\n\tIsString,\n\tValidateNested,\n} from \"class-validator\";\nimport { UserDto } from \"../../users/dto/user.dto\";\nimport { Type } from \"class-transformer\";\nexport class RoomAnalyticsKeyMetricsDto {\n\t// an object called unique visitors with two properties, count and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"UniqueVisitors\",\n\t\tdescription: \"Unique visitors to the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tcount: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tunique_visitors: {\n\t\tcount: number;\n\t\tpercentage_change: number;\n\t};\n\n\t// an object called returning_visitors with two properties, count and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"ReturningVisitors\",\n\t\tdescription: \"Returning visitors to the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tcount: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\treturning_visitors: {\n\t\tcount: number;\n\t\tpercentage_change: number;\n\t};\n\n\t// an object called average_session_duration with two properties, duration and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"AverageSessionDuration\",\n\t\tdescription: \"Average session duration in the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tduration: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\taverage_session_duration: {\n\t\tduration: number;\n\t\tpercentage_change: number;\n\t};\n}\n\nexport class RoomAnalyticsQueueDto {\n\t@ApiProperty({ description: \"Total number of songs ever queued in the room\" })\n\t@IsNumber()\n\ttotal_songs_queued: number;\n\n\t@ApiProperty({\n\t\tdescription: \"Number of times the room's queue was exported as a playlist\",\n\t})\n\t@IsNumber()\n\ttotal_queue_exports: number;\n}\n\nexport class ParticipantsPerHourDto {\n\t@ApiProperty({\n\t\tdescription: \"The number of participants in the room at the given hour\",\n\t})\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The specific hour for participant count\",\n\t\ttype: Date,\n\t})\n\t@IsDate()\n\tinstance: Date;\n}\n\nexport class AllTimeSessionDataDto {\n\t@ApiProperty({\n\t\tdescription: \"The average session duration of the room\",\n\t})\n\t@IsNumber()\n\tavg_duration: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The minimum session duration of the room\",\n\t})\n\t@IsNumber()\n\tmin_duration: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The maximum session duration of the room\",\n\t})\n\t@IsNumber()\n\tmax_duration: number;\n}\n\nexport class SessionDurationPerDayDto {\n\t@ApiProperty({ type: \"number\" })\n\tduration: number;\n\n\t@ApiProperty({ type: Date })\n\tday: Date;\n}\n\nexport class SessionDataPerDayDto {\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tavg_duration: SessionDurationPerDayDto[];\n\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tmin_duration: SessionDurationPerDayDto[];\n\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tmax_duration: SessionDurationPerDayDto[];\n}\n\nexport class JoinsCount {\n\t@ApiProperty({ type: \"number\" })\n\tcount: number;\n\n\t@ApiProperty({ type: Date })\n\tday: Date;\n}\n\nexport class JoinsPerDay {\n\ttotal_joins: JoinsCount[];\n\tunique_joins: JoinsCount[];\n}\n\nexport class RoomAnalyticsParticipationDto {\n\t@ApiProperty({\n\t\ttitle: \"Joins\",\n\t\tdescription:\n\t\t\t\"Join statistics, including total and unique joins per day and all-time\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tper_day: {\n\t\t\t\ttitle: \"JoinsPerDay\",\n\t\t\t\ttype: \"object\",\n\t\t\t},\n\t\t\tall_time: {\n\t\t\t\ttitle: \"JoinsAllTime\",\n\t\t\t\ttype: \"object\",\n\t\t\t\tproperties: {\n\t\t\t\t\ttotal_joins: { type: \"number\" },\n\t\t\t\t\tunique_joins: { type: \"number\" },\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tjoins: {\n\t\tper_day: JoinsPerDay;\n\t\tall_time: {\n\t\t\ttotal_joins: number;\n\t\t\tunique_joins: number;\n\t\t};\n\t};\n\n\t@ApiProperty({\n\t\tdescription: \"Participants per hour data\",\n\t\ttype: ParticipantsPerHourDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => ParticipantsPerHourDto)\n\tparticipants_per_hour: ParticipantsPerHourDto[];\n\n\t@ApiProperty({\n\t\ttitle: \"SessionData\",\n\t\tdescription:\n\t\t\t\"Session data including average, minimum, and maximum duration all-time and per day\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tall_time: {\n\t\t\t\ttype: \"object\",\n\t\t\t\ttitle: \"AllTimeSessionDataDto\",\n\t\t\t},\n\t\t\tper_day: {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: {\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\ttitle: \"SessionDurationPerDayDto\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tsession_data: {\n\t\tall_time: AllTimeSessionDataDto;\n\t\tper_day: SessionDurationPerDayDto[];\n\t};\n\n\t@ApiProperty({\n\t\ttitle: \"ReturnVisits\",\n\t\tdescription: \"Expected return visits and probability of return\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\texpected_return_count: { type: \"number\" },\n\t\t\tprobability_of_return: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\treturn_visits: {\n\t\texpected_return_count: number;\n\t\tprobability_of_return: number;\n\t};\n\n\t@ApiProperty({\n\t\tdescription: \"Number of previews of the room, i.e. without joining\",\n\t})\n\t@IsNumber()\n\troom_previews: number;\n}\n\nexport class MessagesPerHour {\n\t@ApiProperty({ type: \"number\" })\n\tcount: number;\n\n\t@ApiProperty({ type: Date })\n\thour: Date;\n}\n\nexport class RoomAnalyticsInteractionsDto {\n\t@ApiProperty({\n\t\ttitle: \"Messages\",\n\t\tdescription: \"Total messages sent and messages sent per hour\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\ttotal: { type: \"number\" },\n\t\t\tper_hour: {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: {\n\t\t\t\t\ttitle: \"MessagesPerHour\",\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tmessages: {\n\t\ttotal: number;\n\t\tper_hour: MessagesPerHour[];\n\t};\n\n\t@ApiProperty({ description: \"Total number of reactions sent in the room\" })\n\t@IsNumber()\n\treactions_sent: number;\n\n\t@ApiProperty({ description: \"Number of times the room was bookmarked\" })\n\t@IsNumber()\n\tbookmarked_count: number;\n}\n\nexport class SongAnalyticsDto {\n\t@ApiProperty({ description: \"Spotify ID of the song\" })\n\t@IsString()\n\tspotify_id: string;\n\n\t@ApiProperty({ description: \"Internal song ID\" })\n\tsong_id: string;\n\n\t@ApiProperty({ description: \"Number of times the song was played\" })\n\t@IsNumber()\n\tplays: number;\n\n\t@ApiProperty({ description: \"Number of upvotes the song received\" })\n\t@IsNumber()\n\tupvotes: number;\n\n\t@ApiProperty({ description: \"Number of downvotes the song received\" })\n\t@IsNumber()\n\tdownvotes: number;\n\n\t@ApiProperty({ description: \"Rank of the song based on some criteria\" })\n\t@IsNumber()\n\trank: number;\n\n\t@ApiProperty({ description: \"Global rank of the song across all rooms\" })\n\t@IsNumber()\n\tglobal_rank: number;\n}\n\nexport class RoomAnalyticsVotesDto {\n\t@ApiProperty({ description: \"Total number of upvotes for songs in the room\" })\n\t@IsNumber()\n\ttotal_upvotes: number;\n\n\t@ApiProperty({\n\t\tdescription: \"Total number of downvotes for songs in the room\",\n\t})\n\t@IsNumber()\n\ttotal_downvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Daily percentage change in upvotes for songs in the room. (last 24 hours)\",\n\t})\n\t@IsNumber()\n\tdaily_percentage_change_in_upvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Daily percentage change in downvotes for songs in the room. (last 24 hours)\",\n\t})\n\t@IsNumber()\n\tdaily_percentage_change_in_downvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Details of songs including Spotify ID, song ID, upvotes, and downvotes\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\tsongs: SongAnalyticsDto[];\n}\n\nexport class RoomAnalyticsSongsDto {\n\t@ApiProperty({\n\t\ttitle: \"MostPlayed\",\n\t\tdescription: \"Most played songs in the room\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\tmost_played: SongAnalyticsDto[];\n\n\t@ApiProperty({\n\t\tdescription: \"Top voted songs in the room\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\ttop_voted: SongAnalyticsDto[];\n}\n\nexport class RoomAnalyticsContributorsDto {\n\t@ApiProperty({\n\t\ttitle: \"TopContributors\",\n\t\tdescription: \"Top contributors to the room's queue\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tuser: { title: \"UserDto\", type: \"object\" },\n\t\t\trank: { type: \"number\" },\n\t\t\tnum_songs: { type: \"number\" },\n\t\t\tnum_upvotes: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\ttop_contributors: {\n\t\tuser: UserDto;\n\t\trank: number;\n\t\tnum_songs: number;\n\t\tnum_upvotes: number;\n\t};\n}\n\nexport class RoomAnalyticsDto {\n\t@ApiProperty({ description: \"Queue analytics\", type: RoomAnalyticsQueueDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsQueueDto)\n\tqueue: RoomAnalyticsQueueDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Participation analytics\",\n\t\ttype: RoomAnalyticsParticipationDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsParticipationDto)\n\tparticipation: RoomAnalyticsParticipationDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Interactions analytics\",\n\t\ttype: RoomAnalyticsInteractionsDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsInteractionsDto)\n\tinteractions: RoomAnalyticsInteractionsDto;\n\n\t@ApiProperty({ description: \"Votes analytics\", type: RoomAnalyticsVotesDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsVotesDto)\n\tvotes: RoomAnalyticsVotesDto;\n\n\t@ApiProperty({ description: \"Songs analytics\", type: RoomAnalyticsSongsDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsSongsDto)\n\tsongs: RoomAnalyticsSongsDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Contributors analytics\",\n\t\ttype: RoomAnalyticsContributorsDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsContributorsDto)\n\tcontributors: RoomAnalyticsContributorsDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoomAnalyticsSongsDto.html":{"url":"classes/RoomAnalyticsSongsDto.html","title":"class - RoomAnalyticsSongsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoomAnalyticsSongsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/dto/roomanalytics.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                most_played\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                top_voted\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        most_played\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SongAnalyticsDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'MostPlayed', description: 'Most played songs in the room', type: SongAnalyticsDto, isArray: true})@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:353\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        top_voted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SongAnalyticsDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Top voted songs in the room', type: SongAnalyticsDto, isArray: true})@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:363\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n\tIsArray,\n\tIsDate,\n\tIsNumber,\n\tIsObject,\n\tIsString,\n\tValidateNested,\n} from \"class-validator\";\nimport { UserDto } from \"../../users/dto/user.dto\";\nimport { Type } from \"class-transformer\";\nexport class RoomAnalyticsKeyMetricsDto {\n\t// an object called unique visitors with two properties, count and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"UniqueVisitors\",\n\t\tdescription: \"Unique visitors to the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tcount: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tunique_visitors: {\n\t\tcount: number;\n\t\tpercentage_change: number;\n\t};\n\n\t// an object called returning_visitors with two properties, count and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"ReturningVisitors\",\n\t\tdescription: \"Returning visitors to the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tcount: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\treturning_visitors: {\n\t\tcount: number;\n\t\tpercentage_change: number;\n\t};\n\n\t// an object called average_session_duration with two properties, duration and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"AverageSessionDuration\",\n\t\tdescription: \"Average session duration in the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tduration: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\taverage_session_duration: {\n\t\tduration: number;\n\t\tpercentage_change: number;\n\t};\n}\n\nexport class RoomAnalyticsQueueDto {\n\t@ApiProperty({ description: \"Total number of songs ever queued in the room\" })\n\t@IsNumber()\n\ttotal_songs_queued: number;\n\n\t@ApiProperty({\n\t\tdescription: \"Number of times the room's queue was exported as a playlist\",\n\t})\n\t@IsNumber()\n\ttotal_queue_exports: number;\n}\n\nexport class ParticipantsPerHourDto {\n\t@ApiProperty({\n\t\tdescription: \"The number of participants in the room at the given hour\",\n\t})\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The specific hour for participant count\",\n\t\ttype: Date,\n\t})\n\t@IsDate()\n\tinstance: Date;\n}\n\nexport class AllTimeSessionDataDto {\n\t@ApiProperty({\n\t\tdescription: \"The average session duration of the room\",\n\t})\n\t@IsNumber()\n\tavg_duration: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The minimum session duration of the room\",\n\t})\n\t@IsNumber()\n\tmin_duration: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The maximum session duration of the room\",\n\t})\n\t@IsNumber()\n\tmax_duration: number;\n}\n\nexport class SessionDurationPerDayDto {\n\t@ApiProperty({ type: \"number\" })\n\tduration: number;\n\n\t@ApiProperty({ type: Date })\n\tday: Date;\n}\n\nexport class SessionDataPerDayDto {\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tavg_duration: SessionDurationPerDayDto[];\n\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tmin_duration: SessionDurationPerDayDto[];\n\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tmax_duration: SessionDurationPerDayDto[];\n}\n\nexport class JoinsCount {\n\t@ApiProperty({ type: \"number\" })\n\tcount: number;\n\n\t@ApiProperty({ type: Date })\n\tday: Date;\n}\n\nexport class JoinsPerDay {\n\ttotal_joins: JoinsCount[];\n\tunique_joins: JoinsCount[];\n}\n\nexport class RoomAnalyticsParticipationDto {\n\t@ApiProperty({\n\t\ttitle: \"Joins\",\n\t\tdescription:\n\t\t\t\"Join statistics, including total and unique joins per day and all-time\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tper_day: {\n\t\t\t\ttitle: \"JoinsPerDay\",\n\t\t\t\ttype: \"object\",\n\t\t\t},\n\t\t\tall_time: {\n\t\t\t\ttitle: \"JoinsAllTime\",\n\t\t\t\ttype: \"object\",\n\t\t\t\tproperties: {\n\t\t\t\t\ttotal_joins: { type: \"number\" },\n\t\t\t\t\tunique_joins: { type: \"number\" },\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tjoins: {\n\t\tper_day: JoinsPerDay;\n\t\tall_time: {\n\t\t\ttotal_joins: number;\n\t\t\tunique_joins: number;\n\t\t};\n\t};\n\n\t@ApiProperty({\n\t\tdescription: \"Participants per hour data\",\n\t\ttype: ParticipantsPerHourDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => ParticipantsPerHourDto)\n\tparticipants_per_hour: ParticipantsPerHourDto[];\n\n\t@ApiProperty({\n\t\ttitle: \"SessionData\",\n\t\tdescription:\n\t\t\t\"Session data including average, minimum, and maximum duration all-time and per day\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tall_time: {\n\t\t\t\ttype: \"object\",\n\t\t\t\ttitle: \"AllTimeSessionDataDto\",\n\t\t\t},\n\t\t\tper_day: {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: {\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\ttitle: \"SessionDurationPerDayDto\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tsession_data: {\n\t\tall_time: AllTimeSessionDataDto;\n\t\tper_day: SessionDurationPerDayDto[];\n\t};\n\n\t@ApiProperty({\n\t\ttitle: \"ReturnVisits\",\n\t\tdescription: \"Expected return visits and probability of return\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\texpected_return_count: { type: \"number\" },\n\t\t\tprobability_of_return: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\treturn_visits: {\n\t\texpected_return_count: number;\n\t\tprobability_of_return: number;\n\t};\n\n\t@ApiProperty({\n\t\tdescription: \"Number of previews of the room, i.e. without joining\",\n\t})\n\t@IsNumber()\n\troom_previews: number;\n}\n\nexport class MessagesPerHour {\n\t@ApiProperty({ type: \"number\" })\n\tcount: number;\n\n\t@ApiProperty({ type: Date })\n\thour: Date;\n}\n\nexport class RoomAnalyticsInteractionsDto {\n\t@ApiProperty({\n\t\ttitle: \"Messages\",\n\t\tdescription: \"Total messages sent and messages sent per hour\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\ttotal: { type: \"number\" },\n\t\t\tper_hour: {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: {\n\t\t\t\t\ttitle: \"MessagesPerHour\",\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tmessages: {\n\t\ttotal: number;\n\t\tper_hour: MessagesPerHour[];\n\t};\n\n\t@ApiProperty({ description: \"Total number of reactions sent in the room\" })\n\t@IsNumber()\n\treactions_sent: number;\n\n\t@ApiProperty({ description: \"Number of times the room was bookmarked\" })\n\t@IsNumber()\n\tbookmarked_count: number;\n}\n\nexport class SongAnalyticsDto {\n\t@ApiProperty({ description: \"Spotify ID of the song\" })\n\t@IsString()\n\tspotify_id: string;\n\n\t@ApiProperty({ description: \"Internal song ID\" })\n\tsong_id: string;\n\n\t@ApiProperty({ description: \"Number of times the song was played\" })\n\t@IsNumber()\n\tplays: number;\n\n\t@ApiProperty({ description: \"Number of upvotes the song received\" })\n\t@IsNumber()\n\tupvotes: number;\n\n\t@ApiProperty({ description: \"Number of downvotes the song received\" })\n\t@IsNumber()\n\tdownvotes: number;\n\n\t@ApiProperty({ description: \"Rank of the song based on some criteria\" })\n\t@IsNumber()\n\trank: number;\n\n\t@ApiProperty({ description: \"Global rank of the song across all rooms\" })\n\t@IsNumber()\n\tglobal_rank: number;\n}\n\nexport class RoomAnalyticsVotesDto {\n\t@ApiProperty({ description: \"Total number of upvotes for songs in the room\" })\n\t@IsNumber()\n\ttotal_upvotes: number;\n\n\t@ApiProperty({\n\t\tdescription: \"Total number of downvotes for songs in the room\",\n\t})\n\t@IsNumber()\n\ttotal_downvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Daily percentage change in upvotes for songs in the room. (last 24 hours)\",\n\t})\n\t@IsNumber()\n\tdaily_percentage_change_in_upvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Daily percentage change in downvotes for songs in the room. (last 24 hours)\",\n\t})\n\t@IsNumber()\n\tdaily_percentage_change_in_downvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Details of songs including Spotify ID, song ID, upvotes, and downvotes\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\tsongs: SongAnalyticsDto[];\n}\n\nexport class RoomAnalyticsSongsDto {\n\t@ApiProperty({\n\t\ttitle: \"MostPlayed\",\n\t\tdescription: \"Most played songs in the room\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\tmost_played: SongAnalyticsDto[];\n\n\t@ApiProperty({\n\t\tdescription: \"Top voted songs in the room\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\ttop_voted: SongAnalyticsDto[];\n}\n\nexport class RoomAnalyticsContributorsDto {\n\t@ApiProperty({\n\t\ttitle: \"TopContributors\",\n\t\tdescription: \"Top contributors to the room's queue\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tuser: { title: \"UserDto\", type: \"object\" },\n\t\t\trank: { type: \"number\" },\n\t\t\tnum_songs: { type: \"number\" },\n\t\t\tnum_upvotes: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\ttop_contributors: {\n\t\tuser: UserDto;\n\t\trank: number;\n\t\tnum_songs: number;\n\t\tnum_upvotes: number;\n\t};\n}\n\nexport class RoomAnalyticsDto {\n\t@ApiProperty({ description: \"Queue analytics\", type: RoomAnalyticsQueueDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsQueueDto)\n\tqueue: RoomAnalyticsQueueDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Participation analytics\",\n\t\ttype: RoomAnalyticsParticipationDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsParticipationDto)\n\tparticipation: RoomAnalyticsParticipationDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Interactions analytics\",\n\t\ttype: RoomAnalyticsInteractionsDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsInteractionsDto)\n\tinteractions: RoomAnalyticsInteractionsDto;\n\n\t@ApiProperty({ description: \"Votes analytics\", type: RoomAnalyticsVotesDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsVotesDto)\n\tvotes: RoomAnalyticsVotesDto;\n\n\t@ApiProperty({ description: \"Songs analytics\", type: RoomAnalyticsSongsDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsSongsDto)\n\tsongs: RoomAnalyticsSongsDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Contributors analytics\",\n\t\ttype: RoomAnalyticsContributorsDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsContributorsDto)\n\tcontributors: RoomAnalyticsContributorsDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoomAnalyticsVotesDto.html":{"url":"classes/RoomAnalyticsVotesDto.html","title":"class - RoomAnalyticsVotesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoomAnalyticsVotesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/dto/roomanalytics.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                daily_percentage_change_in_downvotes\n                            \n                            \n                                    \n                                    \n                                daily_percentage_change_in_upvotes\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                songs\n                            \n                            \n                                    \n                                    \n                                total_downvotes\n                            \n                            \n                                    \n                                    \n                                total_upvotes\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        daily_percentage_change_in_downvotes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Daily percentage change in downvotes for songs in the room. (last 24 hours)'})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:329\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        daily_percentage_change_in_upvotes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Daily percentage change in upvotes for songs in the room. (last 24 hours)'})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:322\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        songs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SongAnalyticsDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Details of songs including Spotify ID, song ID, upvotes, and downvotes', type: SongAnalyticsDto, isArray: true})@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:340\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        total_downvotes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Total number of downvotes for songs in the room'})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:315\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        total_upvotes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Total number of upvotes for songs in the room'})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:309\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n\tIsArray,\n\tIsDate,\n\tIsNumber,\n\tIsObject,\n\tIsString,\n\tValidateNested,\n} from \"class-validator\";\nimport { UserDto } from \"../../users/dto/user.dto\";\nimport { Type } from \"class-transformer\";\nexport class RoomAnalyticsKeyMetricsDto {\n\t// an object called unique visitors with two properties, count and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"UniqueVisitors\",\n\t\tdescription: \"Unique visitors to the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tcount: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tunique_visitors: {\n\t\tcount: number;\n\t\tpercentage_change: number;\n\t};\n\n\t// an object called returning_visitors with two properties, count and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"ReturningVisitors\",\n\t\tdescription: \"Returning visitors to the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tcount: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\treturning_visitors: {\n\t\tcount: number;\n\t\tpercentage_change: number;\n\t};\n\n\t// an object called average_session_duration with two properties, duration and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"AverageSessionDuration\",\n\t\tdescription: \"Average session duration in the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tduration: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\taverage_session_duration: {\n\t\tduration: number;\n\t\tpercentage_change: number;\n\t};\n}\n\nexport class RoomAnalyticsQueueDto {\n\t@ApiProperty({ description: \"Total number of songs ever queued in the room\" })\n\t@IsNumber()\n\ttotal_songs_queued: number;\n\n\t@ApiProperty({\n\t\tdescription: \"Number of times the room's queue was exported as a playlist\",\n\t})\n\t@IsNumber()\n\ttotal_queue_exports: number;\n}\n\nexport class ParticipantsPerHourDto {\n\t@ApiProperty({\n\t\tdescription: \"The number of participants in the room at the given hour\",\n\t})\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The specific hour for participant count\",\n\t\ttype: Date,\n\t})\n\t@IsDate()\n\tinstance: Date;\n}\n\nexport class AllTimeSessionDataDto {\n\t@ApiProperty({\n\t\tdescription: \"The average session duration of the room\",\n\t})\n\t@IsNumber()\n\tavg_duration: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The minimum session duration of the room\",\n\t})\n\t@IsNumber()\n\tmin_duration: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The maximum session duration of the room\",\n\t})\n\t@IsNumber()\n\tmax_duration: number;\n}\n\nexport class SessionDurationPerDayDto {\n\t@ApiProperty({ type: \"number\" })\n\tduration: number;\n\n\t@ApiProperty({ type: Date })\n\tday: Date;\n}\n\nexport class SessionDataPerDayDto {\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tavg_duration: SessionDurationPerDayDto[];\n\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tmin_duration: SessionDurationPerDayDto[];\n\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tmax_duration: SessionDurationPerDayDto[];\n}\n\nexport class JoinsCount {\n\t@ApiProperty({ type: \"number\" })\n\tcount: number;\n\n\t@ApiProperty({ type: Date })\n\tday: Date;\n}\n\nexport class JoinsPerDay {\n\ttotal_joins: JoinsCount[];\n\tunique_joins: JoinsCount[];\n}\n\nexport class RoomAnalyticsParticipationDto {\n\t@ApiProperty({\n\t\ttitle: \"Joins\",\n\t\tdescription:\n\t\t\t\"Join statistics, including total and unique joins per day and all-time\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tper_day: {\n\t\t\t\ttitle: \"JoinsPerDay\",\n\t\t\t\ttype: \"object\",\n\t\t\t},\n\t\t\tall_time: {\n\t\t\t\ttitle: \"JoinsAllTime\",\n\t\t\t\ttype: \"object\",\n\t\t\t\tproperties: {\n\t\t\t\t\ttotal_joins: { type: \"number\" },\n\t\t\t\t\tunique_joins: { type: \"number\" },\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tjoins: {\n\t\tper_day: JoinsPerDay;\n\t\tall_time: {\n\t\t\ttotal_joins: number;\n\t\t\tunique_joins: number;\n\t\t};\n\t};\n\n\t@ApiProperty({\n\t\tdescription: \"Participants per hour data\",\n\t\ttype: ParticipantsPerHourDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => ParticipantsPerHourDto)\n\tparticipants_per_hour: ParticipantsPerHourDto[];\n\n\t@ApiProperty({\n\t\ttitle: \"SessionData\",\n\t\tdescription:\n\t\t\t\"Session data including average, minimum, and maximum duration all-time and per day\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tall_time: {\n\t\t\t\ttype: \"object\",\n\t\t\t\ttitle: \"AllTimeSessionDataDto\",\n\t\t\t},\n\t\t\tper_day: {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: {\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\ttitle: \"SessionDurationPerDayDto\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tsession_data: {\n\t\tall_time: AllTimeSessionDataDto;\n\t\tper_day: SessionDurationPerDayDto[];\n\t};\n\n\t@ApiProperty({\n\t\ttitle: \"ReturnVisits\",\n\t\tdescription: \"Expected return visits and probability of return\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\texpected_return_count: { type: \"number\" },\n\t\t\tprobability_of_return: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\treturn_visits: {\n\t\texpected_return_count: number;\n\t\tprobability_of_return: number;\n\t};\n\n\t@ApiProperty({\n\t\tdescription: \"Number of previews of the room, i.e. without joining\",\n\t})\n\t@IsNumber()\n\troom_previews: number;\n}\n\nexport class MessagesPerHour {\n\t@ApiProperty({ type: \"number\" })\n\tcount: number;\n\n\t@ApiProperty({ type: Date })\n\thour: Date;\n}\n\nexport class RoomAnalyticsInteractionsDto {\n\t@ApiProperty({\n\t\ttitle: \"Messages\",\n\t\tdescription: \"Total messages sent and messages sent per hour\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\ttotal: { type: \"number\" },\n\t\t\tper_hour: {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: {\n\t\t\t\t\ttitle: \"MessagesPerHour\",\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tmessages: {\n\t\ttotal: number;\n\t\tper_hour: MessagesPerHour[];\n\t};\n\n\t@ApiProperty({ description: \"Total number of reactions sent in the room\" })\n\t@IsNumber()\n\treactions_sent: number;\n\n\t@ApiProperty({ description: \"Number of times the room was bookmarked\" })\n\t@IsNumber()\n\tbookmarked_count: number;\n}\n\nexport class SongAnalyticsDto {\n\t@ApiProperty({ description: \"Spotify ID of the song\" })\n\t@IsString()\n\tspotify_id: string;\n\n\t@ApiProperty({ description: \"Internal song ID\" })\n\tsong_id: string;\n\n\t@ApiProperty({ description: \"Number of times the song was played\" })\n\t@IsNumber()\n\tplays: number;\n\n\t@ApiProperty({ description: \"Number of upvotes the song received\" })\n\t@IsNumber()\n\tupvotes: number;\n\n\t@ApiProperty({ description: \"Number of downvotes the song received\" })\n\t@IsNumber()\n\tdownvotes: number;\n\n\t@ApiProperty({ description: \"Rank of the song based on some criteria\" })\n\t@IsNumber()\n\trank: number;\n\n\t@ApiProperty({ description: \"Global rank of the song across all rooms\" })\n\t@IsNumber()\n\tglobal_rank: number;\n}\n\nexport class RoomAnalyticsVotesDto {\n\t@ApiProperty({ description: \"Total number of upvotes for songs in the room\" })\n\t@IsNumber()\n\ttotal_upvotes: number;\n\n\t@ApiProperty({\n\t\tdescription: \"Total number of downvotes for songs in the room\",\n\t})\n\t@IsNumber()\n\ttotal_downvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Daily percentage change in upvotes for songs in the room. (last 24 hours)\",\n\t})\n\t@IsNumber()\n\tdaily_percentage_change_in_upvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Daily percentage change in downvotes for songs in the room. (last 24 hours)\",\n\t})\n\t@IsNumber()\n\tdaily_percentage_change_in_downvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Details of songs including Spotify ID, song ID, upvotes, and downvotes\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\tsongs: SongAnalyticsDto[];\n}\n\nexport class RoomAnalyticsSongsDto {\n\t@ApiProperty({\n\t\ttitle: \"MostPlayed\",\n\t\tdescription: \"Most played songs in the room\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\tmost_played: SongAnalyticsDto[];\n\n\t@ApiProperty({\n\t\tdescription: \"Top voted songs in the room\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\ttop_voted: SongAnalyticsDto[];\n}\n\nexport class RoomAnalyticsContributorsDto {\n\t@ApiProperty({\n\t\ttitle: \"TopContributors\",\n\t\tdescription: \"Top contributors to the room's queue\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tuser: { title: \"UserDto\", type: \"object\" },\n\t\t\trank: { type: \"number\" },\n\t\t\tnum_songs: { type: \"number\" },\n\t\t\tnum_upvotes: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\ttop_contributors: {\n\t\tuser: UserDto;\n\t\trank: number;\n\t\tnum_songs: number;\n\t\tnum_upvotes: number;\n\t};\n}\n\nexport class RoomAnalyticsDto {\n\t@ApiProperty({ description: \"Queue analytics\", type: RoomAnalyticsQueueDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsQueueDto)\n\tqueue: RoomAnalyticsQueueDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Participation analytics\",\n\t\ttype: RoomAnalyticsParticipationDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsParticipationDto)\n\tparticipation: RoomAnalyticsParticipationDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Interactions analytics\",\n\t\ttype: RoomAnalyticsInteractionsDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsInteractionsDto)\n\tinteractions: RoomAnalyticsInteractionsDto;\n\n\t@ApiProperty({ description: \"Votes analytics\", type: RoomAnalyticsVotesDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsVotesDto)\n\tvotes: RoomAnalyticsVotesDto;\n\n\t@ApiProperty({ description: \"Songs analytics\", type: RoomAnalyticsSongsDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsSongsDto)\n\tsongs: RoomAnalyticsSongsDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Contributors analytics\",\n\t\ttype: RoomAnalyticsContributorsDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsContributorsDto)\n\tcontributors: RoomAnalyticsContributorsDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoomDto.html":{"url":"classes/RoomDto.html","title":"class - RoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/dto/room.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                childrenRoomIDs\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                creator\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                current_song\n                            \n                            \n                                    \n                                    \n                                date_created\n                            \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                end_date\n                            \n                            \n                                    \n                                    \n                                has_explicit_content\n                            \n                            \n                                    \n                                    \n                                has_nsfw_content\n                            \n                            \n                                    \n                                    \n                                is_private\n                            \n                            \n                                    \n                                    \n                                is_scheduled\n                            \n                            \n                                    \n                                    \n                                is_temporary\n                            \n                            \n                                    \n                                    \n                                language\n                            \n                            \n                                    \n                                    Optional\n                                parentRoomID\n                            \n                            \n                                    \n                                    \n                                participant_count\n                            \n                            \n                                    \n                                    \n                                room_image\n                            \n                            \n                                    \n                                    \n                                room_name\n                            \n                            \n                                    \n                                    \n                                room_size\n                            \n                            \n                                    \n                                    \n                                roomID\n                            \n                            \n                                    \n                                    \n                                spotifyPlaylistID\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                start_date\n                            \n                            \n                                    \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        childrenRoomIDs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Rooms created by splitting this room.', type: String, isArray: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:115\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: UserDto})@IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        current_song\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RoomSongDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The current song playing in the room', type: RoomSongDto})@IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        date_created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        end_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | undefined\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        has_explicit_content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        has_nsfw_content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        is_private\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        is_scheduled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        is_temporary\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        parentRoomID\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | undefined\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The parent of this room, if this room was created by splitting another', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:108\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        participant_count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        room_image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        room_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        room_size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        roomID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        spotifyPlaylistID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | undefined\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The tags that describe the room', type: String, isArray: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:101\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport {\n\tIsString,\n\tIsBoolean,\n\tIsNumber,\n\tIsObject,\n\tIsDate,\n\tValidateNested,\n} from \"class-validator\";\nimport { UserDto } from \"../../users/dto/user.dto\";\nimport { Type } from \"class-transformer\";\nimport { RoomSongDto } from \"./roomsong.dto\";\n\nexport class RoomDto {\n\t@ApiProperty({\n\t\ttype: UserDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => UserDto)\n\tcreator: UserDto;\n\n\t@ApiProperty()\n\t@IsString()\n\troomID: string;\n\n\t@ApiProperty()\n\t@IsNumber()\n\troom_size: number;\n\n\t@ApiProperty()\n\t@IsString()\n\tspotifyPlaylistID: string;\n\n\t@ApiProperty()\n\t@IsNumber()\n\tparticipant_count: number;\n\n\t@ApiProperty()\n\t@IsString()\n\troom_name: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tdescription: string;\n\n\t@ApiProperty()\n\t@IsBoolean()\n\tis_temporary: boolean;\n\n\t@ApiProperty()\n\t@IsBoolean()\n\tis_private: boolean;\n\n\t@ApiProperty()\n\t@IsBoolean()\n\tis_scheduled: boolean;\n\n\t@ApiPropertyOptional()\n\t@IsDate()\n\tstart_date?: Date | undefined;\n\n\t@ApiPropertyOptional()\n\t@IsDate()\n\tend_date?: Date | undefined;\n\n\t@ApiProperty()\n\t@IsDate()\n\tdate_created: Date;\n\n\t@ApiProperty()\n\t@IsString()\n\tlanguage: string;\n\n\t@ApiProperty()\n\t@IsBoolean()\n\thas_explicit_content: boolean;\n\n\t@ApiProperty()\n\t@IsBoolean()\n\thas_nsfw_content: boolean;\n\n\t@ApiProperty()\n\t@IsString()\n\troom_image: string;\n\n\t@ApiPropertyOptional({\n\t\tdescription: \"The current song playing in the room\",\n\t\ttype: RoomSongDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomSongDto)\n\tcurrent_song?: RoomSongDto;\n\n\t@ApiProperty({\n\t\tdescription: \"The tags that describe the room\",\n\t\ttype: String,\n\t\tisArray: true,\n\t})\n\ttags: string[];\n\n\t@ApiPropertyOptional({\n\t\tdescription:\n\t\t\t\"The parent of this room, if this room was created by splitting another\",\n\t\ttype: String,\n\t})\n\tparentRoomID?: string | undefined;\n\n\t@ApiProperty({\n\t\tdescription: \"Rooms created by splitting this room.\",\n\t\ttype: String,\n\t\tisArray: true,\n\t})\n\tchildrenRoomIDs: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoomEntity.html":{"url":"classes/RoomEntity.html","title":"class - RoomEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoomEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            archive/modules/rooms/entities/room.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                creator\n                            \n                            \n                                    \n                                current_song\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                end_date\n                            \n                            \n                                    \n                                has_explicit_content\n                            \n                            \n                                    \n                                has_nsfw_content\n                            \n                            \n                                    \n                                is_private\n                            \n                            \n                                    \n                                is_scheduled\n                            \n                            \n                                    \n                                is_temporary\n                            \n                            \n                                    \n                                language\n                            \n                            \n                                    \n                                participant_count\n                            \n                            \n                                    \n                                room_image\n                            \n                            \n                                    \n                                room_name\n                            \n                            \n                                    \n                                roomID\n                            \n                            \n                                    \n                                start_date\n                            \n                            \n                                    \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: UserDto})\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/rooms/entities/room.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        current_song\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SongInfoDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: SongInfoDto})\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/rooms/entities/room.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/rooms/entities/room.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        end_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Date})\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/rooms/entities/room.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        has_explicit_content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/rooms/entities/room.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        has_nsfw_content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/rooms/entities/room.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        is_private\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/rooms/entities/room.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        is_scheduled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/rooms/entities/room.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        is_temporary\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/rooms/entities/room.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/rooms/entities/room.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        participant_count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/rooms/entities/room.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        room_image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/rooms/entities/room.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        room_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/rooms/entities/room.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        roomID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/rooms/entities/room.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Date})\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/rooms/entities/room.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/rooms/entities/room.entity.ts:52\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { UserDto } from \"../../users/dto/user.dto\";\nimport { SongInfoDto } from \"../dto/songinfo.dto\";\n\nexport class RoomEntity {\n\t@ApiProperty({ type: UserDto })\n\tcreator: UserDto;\n\n\t@ApiProperty()\n\troomID: string;\n\n\t@ApiProperty()\n\tparticipant_count: number;\n\n\t@ApiProperty()\n\troom_name: string;\n\n\t@ApiProperty()\n\tdescription: string;\n\n\t@ApiProperty()\n\tis_temporary: boolean;\n\n\t@ApiProperty()\n\tis_private: boolean;\n\n\t@ApiProperty()\n\tis_scheduled: boolean;\n\n\t@ApiProperty({ type: Date })\n\tstart_date: Date;\n\n\t@ApiProperty({ type: Date })\n\tend_date: Date;\n\n\t@ApiProperty()\n\tlanguage: string;\n\n\t@ApiProperty()\n\thas_explicit_content: boolean;\n\n\t@ApiProperty()\n\thas_nsfw_content: boolean;\n\n\t@ApiProperty()\n\troom_image: string;\n\n\t@ApiProperty({ type: SongInfoDto })\n\tcurrent_song: SongInfoDto;\n\n\t@ApiProperty({ type: [String] })\n\ttags: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RoomQueueModule.html":{"url":"modules/RoomQueueModule.html","title":"module - RoomQueueModule","body":"\n                   \n\n\n\n\n    Modules\n    RoomQueueModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RoomQueueModule\n\n\n\ncluster_RoomQueueModule_imports\n\n\n\ncluster_RoomQueueModule_providers\n\n\n\ncluster_RoomQueueModule_exports\n\n\n\n\nDbUtilsModule\n\nDbUtilsModule\n\n\n\nRoomQueueModule\n\nRoomQueueModule\n\nRoomQueueModule -->\n\nDbUtilsModule->RoomQueueModule\n\n\n\n\n\nDtoGenModule\n\nDtoGenModule\n\nRoomQueueModule -->\n\nDtoGenModule->RoomQueueModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nRoomQueueModule -->\n\nPrismaModule->RoomQueueModule\n\n\n\n\n\nSpotifyAuthModule\n\nSpotifyAuthModule\n\nRoomQueueModule -->\n\nSpotifyAuthModule->RoomQueueModule\n\n\n\n\n\nSpotifyModule\n\nSpotifyModule\n\nRoomQueueModule -->\n\nSpotifyModule->RoomQueueModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nRoomQueueModule -->\n\nTasksModule->RoomQueueModule\n\n\n\n\n\nRoomQueueService \n\nRoomQueueService \n\nRoomQueueService  -->\n\nRoomQueueModule->RoomQueueService \n\n\n\n\n\nRoomQueueService\n\nRoomQueueService\n\nRoomQueueModule -->\n\nRoomQueueService->RoomQueueModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/rooms/roomqueue/roomqueue.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RoomQueueService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DbUtilsModule\n                        \n                        \n                            DtoGenModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            SpotifyAuthModule\n                        \n                        \n                            SpotifyModule\n                        \n                        \n                            TasksModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RoomQueueService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { RoomQueueService } from \"./roomqueue.service\";\nimport { PrismaModule } from \"../../../../prisma/prisma.module\";\nimport { DtoGenModule } from \"../../dto-gen/dto-gen.module\";\nimport { DbUtilsModule } from \"../../db-utils/db-utils.module\";\nimport { SpotifyModule } from \"../../../spotify/spotify.module\";\nimport { SpotifyAuthModule } from \"../../../auth/spotify/spotifyauth.module\";\nimport { MurLockModule } from \"murlock\";\nimport { TasksModule } from \"../../../tasks/tasks.module\";\n\n@Module({\n\timports: [\n\t\tPrismaModule,\n\t\tDtoGenModule,\n\t\tDbUtilsModule,\n\t\tSpotifyModule,\n\t\tSpotifyAuthModule,\n\t\tMurLockModule,\n\t\tTasksModule,\n\t],\n\tproviders: [RoomQueueService],\n\texports: [RoomQueueService],\n})\nexport class RoomQueueModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoomSongDto.html":{"url":"classes/RoomSongDto.html","title":"class - RoomSongDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoomSongDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/dto/roomsong.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                index\n                            \n                            \n                                    \n                                    \n                                insertTime\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                pauseTime\n                            \n                            \n                                    \n                                    \n                                playlistIndex\n                            \n                            \n                                    \n                                    \n                                score\n                            \n                            \n                                    \n                                    \n                                spotifyID\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                startTime\n                            \n                            \n                                    \n                                    \n                                userID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomsong.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        insertTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomsong.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        pauseTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomsong.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        playlistIndex\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomsong.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        score\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomsong.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        spotifyID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomsong.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        startTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomsong.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomsong.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsString, IsNumber } from \"class-validator\";\n\nexport class RoomSongDto {\n\t@ApiProperty()\n\t@IsString()\n\tspotifyID: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tuserID: string;\n\n\t@ApiProperty()\n\t@IsNumber()\n\tscore: number;\n\n\t@ApiProperty()\n\t@IsNumber()\n\tindex: number;\n\n\t@ApiPropertyOptional()\n\t@IsNumber()\n\tstartTime?: number;\n\n\t@ApiProperty()\n\t@IsNumber()\n\tinsertTime: number;\n\n\t@ApiPropertyOptional()\n\t@IsNumber()\n\tpauseTime?: number;\n\n\t@ApiProperty()\n\t@IsNumber()\n\tplaylistIndex: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RoomUsersModule.html":{"url":"modules/RoomUsersModule.html","title":"module - RoomUsersModule","body":"\n                   \n\n\n\n\n    Modules\n    RoomUsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RoomUsersModule\n\n\n\ncluster_RoomUsersModule_imports\n\n\n\ncluster_RoomUsersModule_providers\n\n\n\ncluster_RoomUsersModule_exports\n\n\n\n\nAutoModerationModule\n\nAutoModerationModule\n\n\n\nRoomUsersModule\n\nRoomUsersModule\n\nRoomUsersModule -->\n\nAutoModerationModule->RoomUsersModule\n\n\n\n\n\nDbUtilsModule\n\nDbUtilsModule\n\nRoomUsersModule -->\n\nDbUtilsModule->RoomUsersModule\n\n\n\n\n\nDtoGenModule\n\nDtoGenModule\n\nRoomUsersModule -->\n\nDtoGenModule->RoomUsersModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nRoomUsersModule -->\n\nPrismaModule->RoomUsersModule\n\n\n\n\n\nRoomUsersService \n\nRoomUsersService \n\nRoomUsersService  -->\n\nRoomUsersModule->RoomUsersService \n\n\n\n\n\nRoomUsersService\n\nRoomUsersService\n\nRoomUsersModule -->\n\nRoomUsersService->RoomUsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/live/roomusers/roomuser.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RoomUsersService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AutoModerationModule\n                        \n                        \n                            DbUtilsModule\n                        \n                        \n                            DtoGenModule\n                        \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RoomUsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { RoomUsersService } from \"./roomuser.service\";\nimport { PrismaModule } from \"../../../prisma/prisma.module\";\nimport { DtoGenModule } from \"../../modules/dto-gen/dto-gen.module\";\nimport { DbUtilsModule } from \"../../modules/db-utils/db-utils.module\";\nimport { AutoModerationModule } from \"../automod/automod.module\";\n\n@Module({\n\timports: [PrismaModule, DtoGenModule, DbUtilsModule, AutoModerationModule],\n\tproviders: [RoomUsersService],\n\texports: [RoomUsersService],\n})\nexport class RoomUsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RoomUsersService.html":{"url":"injectables/RoomUsersService.html","title":"injectable - RoomUsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RoomUsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/live/roomusers/roomuser.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                connectedUsers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addConnectedUser\n                            \n                            \n                                getConnectedUser\n                            \n                            \n                                getRoomId\n                            \n                            \n                                getRoomUsers\n                            \n                            \n                                getUserId\n                            \n                            \n                                    Async\n                                leaveRoom\n                            \n                            \n                                removeConnectedUser\n                            \n                            \n                                    Async\n                                setRoomId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dbUtils: DbUtilsService, dtogen: DtoGenService)\n                    \n                \n                        \n                            \n                                Defined in src/live/roomusers/roomuser.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dbUtils\n                                                  \n                                                        \n                                                                        DbUtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dtogen\n                                                  \n                                                        \n                                                                        DtoGenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addConnectedUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    addConnectedUser(socketID: string, userId: string, roomID?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/live/roomusers/roomuser.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                socketID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getConnectedUser\n                        \n                    \n                \n            \n            \n                \ngetConnectedUser(socketID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/live/roomusers/roomuser.service.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                socketID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         liveChatUser | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRoomId\n                        \n                    \n                \n            \n            \n                \ngetRoomId(socketID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/live/roomusers/roomuser.service.ts:147\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                socketID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRoomUsers\n                        \n                    \n                \n            \n            \n                \ngetRoomUsers(roomID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/live/roomusers/roomuser.service.ts:166\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserDto[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserId\n                        \n                    \n                \n            \n            \n                \ngetUserId(socketID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/live/roomusers/roomuser.service.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                socketID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        leaveRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    leaveRoom(socketID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/live/roomusers/roomuser.service.ts:131\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                socketID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeConnectedUser\n                        \n                    \n                \n            \n            \n                \nremoveConnectedUser(socketID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/live/roomusers/roomuser.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                socketID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setRoomId\n                        \n                    \n                \n            \n            \n                \n                        \n                    setRoomId(socketID: string, roomID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/live/roomusers/roomuser.service.ts:115\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                socketID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        connectedUsers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/live/roomusers/roomuser.service.ts:21\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { DbUtilsService } from \"../../modules/db-utils/db-utils.service\";\nimport { DtoGenService } from \"../../modules/dto-gen/dto-gen.service\";\nimport { UserDto } from \"../../modules/users/dto/user.dto\";\n// import { PrismaService } from \"../../../prisma/prisma.service\";\n// import * as PrismaTypes from \"@prisma/client\";\n\ninterface liveChatUser {\n\tuser: UserDto;\n\troomID: string | undefined;\n\tsocketIDs: string[];\n}\n\n@Injectable()\nexport class RoomUsersService {\n\tconstructor(\n\t\tprivate readonly dbUtils: DbUtilsService,\n\t\tprivate readonly dtogen: DtoGenService, // private readonly prisma: PrismaService,\n\t) {}\n\n\tprivate connectedUsers = new Map();\n\n\tasync addConnectedUser(\n\t\tsocketID: string,\n\t\tuserId: string,\n\t\troomID?: string,\n\t): Promise {\n\t\tif (this.connectedUsers.has(userId)) {\n\t\t\tif (!(await this.dbUtils.userExists(userId))) {\n\t\t\t\tthrow new Error(\"User with ID \" + userId + \" does not exist\");\n\t\t\t}\n\t\t\tconst u = this.connectedUsers.get(userId);\n\t\t\tif (u) {\n\t\t\t\tu.socketIDs.push(socketID);\n\t\t\t\tif (roomID && roomID !== undefined) {\n\t\t\t\t\tif (!(await this.dbUtils.roomExists(roomID))) {\n\t\t\t\t\t\tthrow new Error(\"Room with ID \" + roomID + \" does not exist\");\n\t\t\t\t\t}\n\t\t\t\t\tu.roomID = roomID;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst [user]: UserDto[] = await this.dtogen.generateMultipleUserDto([\n\t\t\t\tuserId,\n\t\t\t]);\n\n\t\t\tif (roomID && roomID !== undefined) {\n\t\t\t\tif (!(await this.dbUtils.roomExists(roomID))) {\n\t\t\t\t\tthrow new Error(\"Room with ID \" + roomID + \" does not exist\");\n\t\t\t\t}\n\t\t\t\tthis.connectedUsers.set(userId, {\n\t\t\t\t\tuser,\n\t\t\t\t\troomID,\n\t\t\t\t\tsocketIDs: [socketID],\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.connectedUsers.set(userId, {\n\t\t\t\t\tuser,\n\t\t\t\t\troomID: undefined,\n\t\t\t\t\tsocketIDs: [socketID],\n\t\t\t\t});\n\t\t\t}\n\t\t\tconsole.log(\"Added connected user: \" + user);\n\t\t\tconsole.log(\"Connected users: \" + this.connectedUsers);\n\t\t}\n\t}\n\n\tremoveConnectedUser(socketID: string) {\n\t\t// this.connectedUsers.delete(socketID);\n\t\tfor (const [key, value] of this.connectedUsers) {\n\t\t\twhile (value.socketIDs.includes(socketID)) {\n\t\t\t\tvalue.socketIDs.splice(value.socketIDs.indexOf(socketID), 1);\n\t\t\t\tif (value.socketIDs.length === 0) {\n\t\t\t\t\tthis.connectedUsers.delete(key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tgetConnectedUser(socketID: string): liveChatUser | null {\n\t\t// const u = this.connectedUsers.get(socketID);\n\t\t// if (!u || u === undefined) {\n\t\t// \treturn null;\n\t\t// }\n\t\t// return u;\n\t\tfor (const [, value] of this.connectedUsers) {\n\t\t\tif (value.socketIDs.includes(socketID)) {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetUserId(socketID: string): string | null {\n\t\t// const u = this.connectedUsers.get(socketID);\n\t\t// if (!u || u === undefined) {\n\t\t// \treturn null;\n\t\t// }\n\t\t// const user = u.user;\n\t\t// if (!user || user === undefined) {\n\t\t// \tthrow new Error(\"Connected user does not have a user object\");\n\t\t// }\n\t\t// if (!user.userID || user.userID === undefined) {\n\t\t// \tthrow new Error(\"Connected user does not have a userID\");\n\t\t// }\n\t\t// return user.userID;\n\t\tfor (const [key, value] of this.connectedUsers) {\n\t\t\tif (value.socketIDs.includes(socketID)) {\n\t\t\t\treturn key;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tasync setRoomId(socketID: string, roomID: string) {\n\t\t// const u = this.connectedUsers.get(socketID);\n\t\t// if (!u || u === undefined) {\n\t\t// \tthrow new Error(\"Connected user does not exist\");\n\t\t// }\n\t\t// if (!(await this.dbUtils.roomExists(roomID))) {\n\t\t// \tthrow new Error(\"Room with ID \" + roomID + \" does not exist\");\n\t\t// }\n\t\t// u.roomID = roomID;\n\t\tfor (const [key, value] of this.connectedUsers) {\n\t\t\tif (value.socketIDs.includes(socketID)) {\n\t\t\t\tthis.connectedUsers.set(key, { ...value, roomID });\n\t\t\t}\n\t\t}\n\t}\n\n\tasync leaveRoom(socketID: string) {\n\t\t// const u = this.connectedUsers.get(socketID);\n\t\t// if (!u || u === undefined) {\n\t\t// \tthrow new Error(\"Connected user does not exist\");\n\t\t// }\n\t\t// if (!u.roomID || u.roomID === undefined) {\n\t\t// \t//throw new Error(\"Connected user does not have a roomID\");\n\t\t// }\n\t\t// u.roomID = undefined;\n\t\tfor (const [key, value] of this.connectedUsers) {\n\t\t\tif (value.socketIDs.includes(socketID)) {\n\t\t\t\tthis.connectedUsers.set(key, { ...value, roomID: undefined });\n\t\t\t}\n\t\t}\n\t}\n\n\tgetRoomId(socketID: string): string | null {\n\t\t// const u = this.connectedUsers.get(socketID);\n\t\t// if (!u || u === undefined) {\n\t\t// \treturn null;\n\t\t// }\n\t\t// if (!u.roomID || u.roomID === undefined) {\n\t\t// \tthrow new Error(\"Connected user does not have a roomID\");\n\t\t// }\n\t\t// return u.roomID;\n\t\tfor (const [, value] of this.connectedUsers) {\n\t\t\tif (value.socketIDs.includes(socketID)) {\n\t\t\t\tif (value.roomID) {\n\t\t\t\t\treturn value.roomID;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetRoomUsers(roomID: string): UserDto[] {\n\t\tconst users: UserDto[] = [];\n\t\tthis.connectedUsers.forEach((value) => {\n\t\t\tif (value.roomID === roomID) {\n\t\t\t\tusers.push(value.user);\n\t\t\t}\n\t\t});\n\t\treturn users;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoomsData.html":{"url":"classes/RoomsData.html","title":"class - RoomsData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoomsData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                count\n                            \n                            \n                                    \n                                    \n                                    \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, isArray: true})@IsArray()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/user.dto.ts:40\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport {\n\tIsString,\n\tValidateNested,\n\tIsObject,\n\tIsNumber,\n\tIsArray,\n\tIsBoolean,\n} from \"class-validator\";\nimport { SongInfoDto } from \"../../rooms/dto/songinfo.dto\";\nimport { Type } from \"class-transformer\";\n\nexport class FollowersAndFollowing {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({ type: () => UserDto, isArray: true })\n\t@IsArray()\n\t@ValidateNested()\n\t@Type(() => UserDto)\n\tdata: UserDto[];\n}\n\nexport class RoomsData {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t/*\n\t@ApiProperty({ type: () => RoomDto, isArray: true })\n\t@IsArray()\n\t@ValidateNested()\n\t@Type(() => RoomDto)\n\tdata: RoomDto[];\n\t*/\n\t@ApiProperty({ type: String, isArray: true })\n\t@IsArray()\n\t@IsString({ each: true })\n\tdata: string[];\n}\n\nexport class SongInfosWithCount {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({ type: () => SongInfoDto, isArray: true })\n\t@IsArray()\n\t@ValidateNested()\n\t@Type(() => SongInfoDto)\n\tdata: SongInfoDto[];\n}\n\nexport class LinksWithCount {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({\n\t\ttype: \"object\",\n\t\tadditionalProperties: {\n\t\t\ttype: \"array\",\n\t\t\titems: { type: \"string\" },\n\t\t},\n\t})\n\t@IsObject()\n\tdata: Record;\n}\n\nexport class GenresWithCount {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({ type: String, isArray: true })\n\t@IsArray()\n\t@IsString({ each: true })\n\tdata: string[];\n}\n\nexport class UserFriendship {\n\t@ApiProperty()\n\t@IsBoolean()\n\tstatus: boolean;\n\n\t@ApiProperty()\n\t@IsString()\n\taccept_url: string;\n\n\t@ApiProperty()\n\t@IsString()\n\treject_url: string;\n}\n\nexport class UserDto {\n\t@ApiProperty()\n\t@IsString()\n\tprofile_name: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tuserID: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tusername: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tprofile_picture_url: string;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's followers\",\n\t\ttitle: \"FollowersAndFollowing\",\n\t\ttype: FollowersAndFollowing,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => FollowersAndFollowing)\n\tfollowers: FollowersAndFollowing;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's following\",\n\t\ttitle: \"FollowersAndFollowing\",\n\t\ttype: FollowersAndFollowing,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => FollowersAndFollowing)\n\tfollowing: FollowersAndFollowing;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's links\",\n\t\ttype: LinksWithCount,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => LinksWithCount)\n\tlinks: LinksWithCount;\n\n\t@ApiPropertyOptional()\n\t@IsString()\n\tbio: string;\n\n\t@ApiPropertyOptional({\n\t\tdescription: \"The current song the user is listening to, if applicable\",\n\t\ttype: SongInfoDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => SongInfoDto)\n\tcurrent_song?: SongInfoDto;\n\n\t@ApiPropertyOptional({\n\t\tdescription:\n\t\t\t\"The roomID of the room that the user is currently in, if applicable\",\n\t})\n\t@IsString()\n\t@ValidateNested()\n\tcurrent_room_id?: string;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's favorite genres\",\n\t\ttype: GenresWithCount,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => GenresWithCount)\n\tfav_genres: GenresWithCount;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's favorite songs\",\n\t\ttype: SongInfosWithCount,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => SongInfosWithCount)\n\tfav_songs: SongInfosWithCount;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's favorite rooms\",\n\t\ttype: RoomsData,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomsData)\n\tfav_rooms: RoomsData;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's recent rooms\",\n\t\ttype: RoomsData,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomsData)\n\trecent_rooms: RoomsData;\n\n\t@ApiProperty()\n\t@IsBoolean()\n\thasSpotifyAccount: boolean;\n\n\t@ApiPropertyOptional({\n\t\tdescription:\n\t\t\t\"The relationship status between the current user and the user in question\",\n\t\ttype: String,\n\t})\n\t@Type(() => String)\n\t@IsString()\n\trelationship?:\n\t\t| \"following\"\n\t\t| \"follower\"\n\t\t| \"mutual\"\n\t\t| \"friend\"\n\t\t| \"pending\"\n\t\t| \"none\"\n\t\t| \"blocked\";\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RoomsModule.html":{"url":"modules/RoomsModule.html","title":"module - RoomsModule","body":"\n                   \n\n\n\n\n    Modules\n    RoomsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RoomsModule\n\n\n\ncluster_RoomsModule_imports\n\n\n\ncluster_RoomsModule_exports\n\n\n\ncluster_RoomsModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nRoomsModule\n\nRoomsModule\n\nRoomsModule -->\n\nAuthModule->RoomsModule\n\n\n\n\n\nDbUtilsModule\n\nDbUtilsModule\n\nRoomsModule -->\n\nDbUtilsModule->RoomsModule\n\n\n\n\n\nDmUsersModule\n\nDmUsersModule\n\nRoomsModule -->\n\nDmUsersModule->RoomsModule\n\n\n\n\n\nDtoGenModule\n\nDtoGenModule\n\nRoomsModule -->\n\nDtoGenModule->RoomsModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nRoomsModule -->\n\nPrismaModule->RoomsModule\n\n\n\n\n\nRecommendationsModule\n\nRecommendationsModule\n\nRoomsModule -->\n\nRecommendationsModule->RoomsModule\n\n\n\n\n\nRoomQueueModule\n\nRoomQueueModule\n\nRoomsModule -->\n\nRoomQueueModule->RoomsModule\n\n\n\n\n\nSpotifyModule\n\nSpotifyModule\n\nRoomsModule -->\n\nSpotifyModule->RoomsModule\n\n\n\n\n\nRoomAnalyticsService \n\nRoomAnalyticsService \n\nRoomAnalyticsService  -->\n\nRoomsModule->RoomAnalyticsService \n\n\n\n\n\nRoomsService \n\nRoomsService \n\nRoomsService  -->\n\nRoomsModule->RoomsService \n\n\n\n\n\nRoomAnalyticsService\n\nRoomAnalyticsService\n\nRoomsModule -->\n\nRoomAnalyticsService->RoomsModule\n\n\n\n\n\nRoomsService\n\nRoomsService\n\nRoomsModule -->\n\nRoomsService->RoomsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/rooms/rooms.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RoomAnalyticsService\n                        \n                        \n                            RoomsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RoomsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            DbUtilsModule\n                        \n                        \n                            DmUsersModule\n                        \n                        \n                            DtoGenModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            RecommendationsModule\n                        \n                        \n                            RoomQueueModule\n                        \n                        \n                            SpotifyModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RoomAnalyticsService\n                        \n                        \n                            RoomsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { RoomsController } from \"./rooms.controller\";\nimport { RoomsService } from \"./rooms.service\";\nimport { PrismaModule } from \"../../../prisma/prisma.module\";\nimport { DtoGenModule } from \"../dto-gen/dto-gen.module\";\nimport { DbUtilsModule } from \"../db-utils/db-utils.module\";\nimport { AuthModule } from \"../../auth/auth.module\";\nimport { RoomQueueModule } from \"./roomqueue/roomqueue.module\";\nimport { RoomAnalyticsService } from \"./roomanalytics.service\";\nimport { RecommendationsModule } from \"../../recommendations/recommendations.module\";\nimport { SpotifyModule } from \"../../spotify/spotify.module\";\nimport { DmUsersModule } from \"../../live/dmusers/dmusers.module\";\n\n@Module({\n\timports: [\n\t\tPrismaModule,\n\t\tDtoGenModule,\n\t\tDbUtilsModule,\n\t\tAuthModule,\n\t\tRoomQueueModule,\n\t\tRecommendationsModule,\n\t\tSpotifyModule,\n\t\tDmUsersModule,\n\t],\n\tcontrollers: [RoomsController],\n\tproviders: [RoomsService, RoomAnalyticsService],\n\texports: [RoomsService, RoomAnalyticsService],\n})\nexport class RoomsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/S3Module.html":{"url":"modules/S3Module.html","title":"module - S3Module","body":"\n                   \n\n\n\n\n    Modules\n    S3Module\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_S3Module\n\n\n\ncluster_S3Module_exports\n\n\n\ncluster_S3Module_providers\n\n\n\n\nS3Service \n\nS3Service \n\n\n\nS3Module\n\nS3Module\n\nS3Service  -->\n\nS3Module->S3Service \n\n\n\n\n\nS3Service\n\nS3Service\n\nS3Module -->\n\nS3Service->S3Module\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/s3/s3.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            S3Service\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            S3Service\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { S3Service } from \"./s3.service\";\n\n@Module({\n\tproviders: [S3Service],\n\texports: [S3Service],\n})\nexport class S3Module {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/S3Service.html":{"url":"injectables/S3Service.html","title":"injectable - S3Service","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  S3Service\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/s3/s3.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                accessKeyId\n                            \n                            \n                                    Private\n                                bucketName\n                            \n                            \n                                    Private\n                                region\n                            \n                            \n                                    Private\n                                s3\n                            \n                            \n                                    Private\n                                secretAccessKey\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getFileUrl\n                            \n                            \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/s3/s3.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getFileUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFileUrl(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/s3/s3.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/s3/s3.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        accessKeyId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/s3/s3.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        bucketName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/s3/s3.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        region\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/s3/s3.service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        s3\n                        \n                    \n                \n            \n                \n                    \n                        Type :     S3\n\n                    \n                \n                    \n                        \n                                Defined in src/s3/s3.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        secretAccessKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/s3/s3.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\nimport { Upload } from \"@aws-sdk/lib-storage\";\nimport { GetObjectCommand, S3 } from \"@aws-sdk/client-s3\";\nimport * as awsS3 from \"@aws-sdk/client-s3\";\nimport { ConfigService } from \"@nestjs/config\";\n\n@Injectable()\nexport class S3Service {\n\tprivate s3: S3;\n\tprivate bucketName: string;\n\tprivate accessKeyId: string;\n\tprivate secretAccessKey: string;\n\tprivate region: string;\n\n\tconstructor(private configService: ConfigService) {\n\t\tconst bucketName = this.configService.get(\"AWS_S3_BUCKET_NAME\");\n\t\tif (!bucketName) {\n\t\t\tthrow new Error(\"AWS_S3_BUCKET_NAME is not defined\");\n\t\t}\n\t\tthis.bucketName = bucketName;\n\n\t\tconst accessKeyId = this.configService.get(\"AWS_ACCESS_KEY_ID\");\n\t\tif (!accessKeyId) {\n\t\t\tthrow new Error(\"AWS_ACCESS_KEY_ID is not defined\");\n\t\t}\n\t\tthis.accessKeyId = accessKeyId;\n\n\t\tconst secretAccessKey = this.configService.get(\n\t\t\t\"AWS_SECRET_ACCESS_KEY\",\n\t\t);\n\t\tif (!secretAccessKey) {\n\t\t\tthrow new Error(\"AWS_SECRET_ACCESS_KEY is not defined\");\n\t\t}\n\t\tthis.secretAccessKey = secretAccessKey;\n\n\t\tconst region = this.configService.get(\"AWS_S3_REGION\");\n\t\tif (!region) {\n\t\t\tthrow new Error(\"AWS_S3_REGION is not defined\");\n\t\t}\n\t\tthis.region = region;\n\n\t\tthis.s3 = new S3({\n\t\t\tcredentials: {\n\t\t\t\taccessKeyId: this.accessKeyId,\n\t\t\t\tsecretAccessKey: this.secretAccessKey,\n\t\t\t},\n\n\t\t\tregion: this.region,\n\t\t});\n\t\tthis.bucketName = bucketName;\n\t}\n\n\tasync uploadFile(\n\t\tfile: Express.Multer.File,\n\t): Promise {\n\t\tconsole.log(\"Uploading file to S3\");\n\t\tconsole.log(file);\n\t\tconst params = {\n\t\t\tBucket: this.bucketName,\n\t\t\tKey: `${Date.now()}-${file.originalname}`,\n\t\t\tBody: file.buffer,\n\t\t\tContentType: file.mimetype,\n\t\t};\n\n\t\tconst va = await new Upload({\n\t\t\tclient: this.s3,\n\t\t\tparams,\n\t\t}).done();\n\t\tif (!va.Location) {\n\t\t\tthrow new Error(\"Failed to upload file to S3\");\n\t\t}\n\t\tconsole.log(\"File uploaded to S3\");\n\t\tconsole.log(va);\n\t\treturn va;\n\t}\n\n\tasync getFileUrl(key: string): Promise {\n\t\tconst params = { Bucket: this.bucketName, Key: key };\n\t\treturn getSignedUrl(this.s3, new GetObjectCommand(params));\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchHistoryDto.html":{"url":"classes/SearchHistoryDto.html","title":"class - SearchHistoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchHistoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/search/dto/searchhistorydto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                search_term\n                            \n                            \n                                    \n                                    \n                                search_time\n                            \n                            \n                                    \n                                    \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        search_term\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/search/dto/searchhistorydto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        search_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/search/dto/searchhistorydto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/search/dto/searchhistorydto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsDate } from \"class-validator\";\n\nexport class SearchHistoryDto {\n\t@ApiProperty()\n\t@IsString()\n\tsearch_term: string;\n\n\t@ApiProperty()\n\t@IsDate()\n\tsearch_time: Date;\n\n\t@ApiProperty()\n\t@IsString()\n\turl: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SearchModule.html":{"url":"modules/SearchModule.html","title":"module - SearchModule","body":"\n                   \n\n\n\n\n    Modules\n    SearchModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SearchModule\n\n\n\ncluster_SearchModule_imports\n\n\n\ncluster_SearchModule_exports\n\n\n\ncluster_SearchModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nSearchModule\n\nSearchModule\n\nSearchModule -->\n\nAuthModule->SearchModule\n\n\n\n\n\nDbUtilsModule\n\nDbUtilsModule\n\nSearchModule -->\n\nDbUtilsModule->SearchModule\n\n\n\n\n\nDtoGenModule\n\nDtoGenModule\n\nSearchModule -->\n\nDtoGenModule->SearchModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nSearchModule -->\n\nPrismaModule->SearchModule\n\n\n\n\n\nSearchService \n\nSearchService \n\nSearchService  -->\n\nSearchModule->SearchService \n\n\n\n\n\nSearchService\n\nSearchService\n\nSearchModule -->\n\nSearchService->SearchModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/search/search.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SearchService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SearchController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            DbUtilsModule\n                        \n                        \n                            DtoGenModule\n                        \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SearchService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { SearchController } from \"./search.controller\";\nimport { SearchService } from \"./search.service\";\nimport { PrismaModule } from \"../../../prisma/prisma.module\";\nimport { AuthModule } from \"../../auth/auth.module\";\nimport { DtoGenModule } from \"../dto-gen/dto-gen.module\";\nimport { DbUtilsModule } from \"../db-utils/db-utils.module\";\n\n@Module({\n\timports: [PrismaModule, AuthModule, DtoGenModule, DbUtilsModule],\n\tcontrollers: [SearchController],\n\tproviders: [SearchService],\n\texports: [SearchService],\n})\nexport class SearchModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SessionDataPerDayDto.html":{"url":"classes/SessionDataPerDayDto.html","title":"class - SessionDataPerDayDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SessionDataPerDayDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/dto/roomanalytics.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                avg_duration\n                            \n                            \n                                    \n                                    \n                                max_duration\n                            \n                            \n                                    \n                                    \n                                min_duration\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        avg_duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SessionDurationPerDayDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: SessionDurationPerDayDto, isArray: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:123\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        max_duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SessionDurationPerDayDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: SessionDurationPerDayDto, isArray: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:131\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        min_duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SessionDurationPerDayDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: SessionDurationPerDayDto, isArray: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:127\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n\tIsArray,\n\tIsDate,\n\tIsNumber,\n\tIsObject,\n\tIsString,\n\tValidateNested,\n} from \"class-validator\";\nimport { UserDto } from \"../../users/dto/user.dto\";\nimport { Type } from \"class-transformer\";\nexport class RoomAnalyticsKeyMetricsDto {\n\t// an object called unique visitors with two properties, count and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"UniqueVisitors\",\n\t\tdescription: \"Unique visitors to the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tcount: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tunique_visitors: {\n\t\tcount: number;\n\t\tpercentage_change: number;\n\t};\n\n\t// an object called returning_visitors with two properties, count and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"ReturningVisitors\",\n\t\tdescription: \"Returning visitors to the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tcount: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\treturning_visitors: {\n\t\tcount: number;\n\t\tpercentage_change: number;\n\t};\n\n\t// an object called average_session_duration with two properties, duration and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"AverageSessionDuration\",\n\t\tdescription: \"Average session duration in the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tduration: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\taverage_session_duration: {\n\t\tduration: number;\n\t\tpercentage_change: number;\n\t};\n}\n\nexport class RoomAnalyticsQueueDto {\n\t@ApiProperty({ description: \"Total number of songs ever queued in the room\" })\n\t@IsNumber()\n\ttotal_songs_queued: number;\n\n\t@ApiProperty({\n\t\tdescription: \"Number of times the room's queue was exported as a playlist\",\n\t})\n\t@IsNumber()\n\ttotal_queue_exports: number;\n}\n\nexport class ParticipantsPerHourDto {\n\t@ApiProperty({\n\t\tdescription: \"The number of participants in the room at the given hour\",\n\t})\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The specific hour for participant count\",\n\t\ttype: Date,\n\t})\n\t@IsDate()\n\tinstance: Date;\n}\n\nexport class AllTimeSessionDataDto {\n\t@ApiProperty({\n\t\tdescription: \"The average session duration of the room\",\n\t})\n\t@IsNumber()\n\tavg_duration: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The minimum session duration of the room\",\n\t})\n\t@IsNumber()\n\tmin_duration: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The maximum session duration of the room\",\n\t})\n\t@IsNumber()\n\tmax_duration: number;\n}\n\nexport class SessionDurationPerDayDto {\n\t@ApiProperty({ type: \"number\" })\n\tduration: number;\n\n\t@ApiProperty({ type: Date })\n\tday: Date;\n}\n\nexport class SessionDataPerDayDto {\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tavg_duration: SessionDurationPerDayDto[];\n\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tmin_duration: SessionDurationPerDayDto[];\n\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tmax_duration: SessionDurationPerDayDto[];\n}\n\nexport class JoinsCount {\n\t@ApiProperty({ type: \"number\" })\n\tcount: number;\n\n\t@ApiProperty({ type: Date })\n\tday: Date;\n}\n\nexport class JoinsPerDay {\n\ttotal_joins: JoinsCount[];\n\tunique_joins: JoinsCount[];\n}\n\nexport class RoomAnalyticsParticipationDto {\n\t@ApiProperty({\n\t\ttitle: \"Joins\",\n\t\tdescription:\n\t\t\t\"Join statistics, including total and unique joins per day and all-time\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tper_day: {\n\t\t\t\ttitle: \"JoinsPerDay\",\n\t\t\t\ttype: \"object\",\n\t\t\t},\n\t\t\tall_time: {\n\t\t\t\ttitle: \"JoinsAllTime\",\n\t\t\t\ttype: \"object\",\n\t\t\t\tproperties: {\n\t\t\t\t\ttotal_joins: { type: \"number\" },\n\t\t\t\t\tunique_joins: { type: \"number\" },\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tjoins: {\n\t\tper_day: JoinsPerDay;\n\t\tall_time: {\n\t\t\ttotal_joins: number;\n\t\t\tunique_joins: number;\n\t\t};\n\t};\n\n\t@ApiProperty({\n\t\tdescription: \"Participants per hour data\",\n\t\ttype: ParticipantsPerHourDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => ParticipantsPerHourDto)\n\tparticipants_per_hour: ParticipantsPerHourDto[];\n\n\t@ApiProperty({\n\t\ttitle: \"SessionData\",\n\t\tdescription:\n\t\t\t\"Session data including average, minimum, and maximum duration all-time and per day\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tall_time: {\n\t\t\t\ttype: \"object\",\n\t\t\t\ttitle: \"AllTimeSessionDataDto\",\n\t\t\t},\n\t\t\tper_day: {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: {\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\ttitle: \"SessionDurationPerDayDto\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tsession_data: {\n\t\tall_time: AllTimeSessionDataDto;\n\t\tper_day: SessionDurationPerDayDto[];\n\t};\n\n\t@ApiProperty({\n\t\ttitle: \"ReturnVisits\",\n\t\tdescription: \"Expected return visits and probability of return\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\texpected_return_count: { type: \"number\" },\n\t\t\tprobability_of_return: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\treturn_visits: {\n\t\texpected_return_count: number;\n\t\tprobability_of_return: number;\n\t};\n\n\t@ApiProperty({\n\t\tdescription: \"Number of previews of the room, i.e. without joining\",\n\t})\n\t@IsNumber()\n\troom_previews: number;\n}\n\nexport class MessagesPerHour {\n\t@ApiProperty({ type: \"number\" })\n\tcount: number;\n\n\t@ApiProperty({ type: Date })\n\thour: Date;\n}\n\nexport class RoomAnalyticsInteractionsDto {\n\t@ApiProperty({\n\t\ttitle: \"Messages\",\n\t\tdescription: \"Total messages sent and messages sent per hour\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\ttotal: { type: \"number\" },\n\t\t\tper_hour: {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: {\n\t\t\t\t\ttitle: \"MessagesPerHour\",\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tmessages: {\n\t\ttotal: number;\n\t\tper_hour: MessagesPerHour[];\n\t};\n\n\t@ApiProperty({ description: \"Total number of reactions sent in the room\" })\n\t@IsNumber()\n\treactions_sent: number;\n\n\t@ApiProperty({ description: \"Number of times the room was bookmarked\" })\n\t@IsNumber()\n\tbookmarked_count: number;\n}\n\nexport class SongAnalyticsDto {\n\t@ApiProperty({ description: \"Spotify ID of the song\" })\n\t@IsString()\n\tspotify_id: string;\n\n\t@ApiProperty({ description: \"Internal song ID\" })\n\tsong_id: string;\n\n\t@ApiProperty({ description: \"Number of times the song was played\" })\n\t@IsNumber()\n\tplays: number;\n\n\t@ApiProperty({ description: \"Number of upvotes the song received\" })\n\t@IsNumber()\n\tupvotes: number;\n\n\t@ApiProperty({ description: \"Number of downvotes the song received\" })\n\t@IsNumber()\n\tdownvotes: number;\n\n\t@ApiProperty({ description: \"Rank of the song based on some criteria\" })\n\t@IsNumber()\n\trank: number;\n\n\t@ApiProperty({ description: \"Global rank of the song across all rooms\" })\n\t@IsNumber()\n\tglobal_rank: number;\n}\n\nexport class RoomAnalyticsVotesDto {\n\t@ApiProperty({ description: \"Total number of upvotes for songs in the room\" })\n\t@IsNumber()\n\ttotal_upvotes: number;\n\n\t@ApiProperty({\n\t\tdescription: \"Total number of downvotes for songs in the room\",\n\t})\n\t@IsNumber()\n\ttotal_downvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Daily percentage change in upvotes for songs in the room. (last 24 hours)\",\n\t})\n\t@IsNumber()\n\tdaily_percentage_change_in_upvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Daily percentage change in downvotes for songs in the room. (last 24 hours)\",\n\t})\n\t@IsNumber()\n\tdaily_percentage_change_in_downvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Details of songs including Spotify ID, song ID, upvotes, and downvotes\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\tsongs: SongAnalyticsDto[];\n}\n\nexport class RoomAnalyticsSongsDto {\n\t@ApiProperty({\n\t\ttitle: \"MostPlayed\",\n\t\tdescription: \"Most played songs in the room\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\tmost_played: SongAnalyticsDto[];\n\n\t@ApiProperty({\n\t\tdescription: \"Top voted songs in the room\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\ttop_voted: SongAnalyticsDto[];\n}\n\nexport class RoomAnalyticsContributorsDto {\n\t@ApiProperty({\n\t\ttitle: \"TopContributors\",\n\t\tdescription: \"Top contributors to the room's queue\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tuser: { title: \"UserDto\", type: \"object\" },\n\t\t\trank: { type: \"number\" },\n\t\t\tnum_songs: { type: \"number\" },\n\t\t\tnum_upvotes: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\ttop_contributors: {\n\t\tuser: UserDto;\n\t\trank: number;\n\t\tnum_songs: number;\n\t\tnum_upvotes: number;\n\t};\n}\n\nexport class RoomAnalyticsDto {\n\t@ApiProperty({ description: \"Queue analytics\", type: RoomAnalyticsQueueDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsQueueDto)\n\tqueue: RoomAnalyticsQueueDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Participation analytics\",\n\t\ttype: RoomAnalyticsParticipationDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsParticipationDto)\n\tparticipation: RoomAnalyticsParticipationDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Interactions analytics\",\n\t\ttype: RoomAnalyticsInteractionsDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsInteractionsDto)\n\tinteractions: RoomAnalyticsInteractionsDto;\n\n\t@ApiProperty({ description: \"Votes analytics\", type: RoomAnalyticsVotesDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsVotesDto)\n\tvotes: RoomAnalyticsVotesDto;\n\n\t@ApiProperty({ description: \"Songs analytics\", type: RoomAnalyticsSongsDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsSongsDto)\n\tsongs: RoomAnalyticsSongsDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Contributors analytics\",\n\t\ttype: RoomAnalyticsContributorsDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsContributorsDto)\n\tcontributors: RoomAnalyticsContributorsDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SessionDurationPerDayDto.html":{"url":"classes/SessionDurationPerDayDto.html","title":"class - SessionDurationPerDayDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SessionDurationPerDayDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/dto/roomanalytics.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                day\n                            \n                            \n                                    \n                                duration\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        day\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Date})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:117\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:114\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n\tIsArray,\n\tIsDate,\n\tIsNumber,\n\tIsObject,\n\tIsString,\n\tValidateNested,\n} from \"class-validator\";\nimport { UserDto } from \"../../users/dto/user.dto\";\nimport { Type } from \"class-transformer\";\nexport class RoomAnalyticsKeyMetricsDto {\n\t// an object called unique visitors with two properties, count and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"UniqueVisitors\",\n\t\tdescription: \"Unique visitors to the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tcount: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tunique_visitors: {\n\t\tcount: number;\n\t\tpercentage_change: number;\n\t};\n\n\t// an object called returning_visitors with two properties, count and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"ReturningVisitors\",\n\t\tdescription: \"Returning visitors to the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tcount: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\treturning_visitors: {\n\t\tcount: number;\n\t\tpercentage_change: number;\n\t};\n\n\t// an object called average_session_duration with two properties, duration and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"AverageSessionDuration\",\n\t\tdescription: \"Average session duration in the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tduration: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\taverage_session_duration: {\n\t\tduration: number;\n\t\tpercentage_change: number;\n\t};\n}\n\nexport class RoomAnalyticsQueueDto {\n\t@ApiProperty({ description: \"Total number of songs ever queued in the room\" })\n\t@IsNumber()\n\ttotal_songs_queued: number;\n\n\t@ApiProperty({\n\t\tdescription: \"Number of times the room's queue was exported as a playlist\",\n\t})\n\t@IsNumber()\n\ttotal_queue_exports: number;\n}\n\nexport class ParticipantsPerHourDto {\n\t@ApiProperty({\n\t\tdescription: \"The number of participants in the room at the given hour\",\n\t})\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The specific hour for participant count\",\n\t\ttype: Date,\n\t})\n\t@IsDate()\n\tinstance: Date;\n}\n\nexport class AllTimeSessionDataDto {\n\t@ApiProperty({\n\t\tdescription: \"The average session duration of the room\",\n\t})\n\t@IsNumber()\n\tavg_duration: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The minimum session duration of the room\",\n\t})\n\t@IsNumber()\n\tmin_duration: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The maximum session duration of the room\",\n\t})\n\t@IsNumber()\n\tmax_duration: number;\n}\n\nexport class SessionDurationPerDayDto {\n\t@ApiProperty({ type: \"number\" })\n\tduration: number;\n\n\t@ApiProperty({ type: Date })\n\tday: Date;\n}\n\nexport class SessionDataPerDayDto {\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tavg_duration: SessionDurationPerDayDto[];\n\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tmin_duration: SessionDurationPerDayDto[];\n\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tmax_duration: SessionDurationPerDayDto[];\n}\n\nexport class JoinsCount {\n\t@ApiProperty({ type: \"number\" })\n\tcount: number;\n\n\t@ApiProperty({ type: Date })\n\tday: Date;\n}\n\nexport class JoinsPerDay {\n\ttotal_joins: JoinsCount[];\n\tunique_joins: JoinsCount[];\n}\n\nexport class RoomAnalyticsParticipationDto {\n\t@ApiProperty({\n\t\ttitle: \"Joins\",\n\t\tdescription:\n\t\t\t\"Join statistics, including total and unique joins per day and all-time\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tper_day: {\n\t\t\t\ttitle: \"JoinsPerDay\",\n\t\t\t\ttype: \"object\",\n\t\t\t},\n\t\t\tall_time: {\n\t\t\t\ttitle: \"JoinsAllTime\",\n\t\t\t\ttype: \"object\",\n\t\t\t\tproperties: {\n\t\t\t\t\ttotal_joins: { type: \"number\" },\n\t\t\t\t\tunique_joins: { type: \"number\" },\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tjoins: {\n\t\tper_day: JoinsPerDay;\n\t\tall_time: {\n\t\t\ttotal_joins: number;\n\t\t\tunique_joins: number;\n\t\t};\n\t};\n\n\t@ApiProperty({\n\t\tdescription: \"Participants per hour data\",\n\t\ttype: ParticipantsPerHourDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => ParticipantsPerHourDto)\n\tparticipants_per_hour: ParticipantsPerHourDto[];\n\n\t@ApiProperty({\n\t\ttitle: \"SessionData\",\n\t\tdescription:\n\t\t\t\"Session data including average, minimum, and maximum duration all-time and per day\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tall_time: {\n\t\t\t\ttype: \"object\",\n\t\t\t\ttitle: \"AllTimeSessionDataDto\",\n\t\t\t},\n\t\t\tper_day: {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: {\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\ttitle: \"SessionDurationPerDayDto\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tsession_data: {\n\t\tall_time: AllTimeSessionDataDto;\n\t\tper_day: SessionDurationPerDayDto[];\n\t};\n\n\t@ApiProperty({\n\t\ttitle: \"ReturnVisits\",\n\t\tdescription: \"Expected return visits and probability of return\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\texpected_return_count: { type: \"number\" },\n\t\t\tprobability_of_return: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\treturn_visits: {\n\t\texpected_return_count: number;\n\t\tprobability_of_return: number;\n\t};\n\n\t@ApiProperty({\n\t\tdescription: \"Number of previews of the room, i.e. without joining\",\n\t})\n\t@IsNumber()\n\troom_previews: number;\n}\n\nexport class MessagesPerHour {\n\t@ApiProperty({ type: \"number\" })\n\tcount: number;\n\n\t@ApiProperty({ type: Date })\n\thour: Date;\n}\n\nexport class RoomAnalyticsInteractionsDto {\n\t@ApiProperty({\n\t\ttitle: \"Messages\",\n\t\tdescription: \"Total messages sent and messages sent per hour\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\ttotal: { type: \"number\" },\n\t\t\tper_hour: {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: {\n\t\t\t\t\ttitle: \"MessagesPerHour\",\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tmessages: {\n\t\ttotal: number;\n\t\tper_hour: MessagesPerHour[];\n\t};\n\n\t@ApiProperty({ description: \"Total number of reactions sent in the room\" })\n\t@IsNumber()\n\treactions_sent: number;\n\n\t@ApiProperty({ description: \"Number of times the room was bookmarked\" })\n\t@IsNumber()\n\tbookmarked_count: number;\n}\n\nexport class SongAnalyticsDto {\n\t@ApiProperty({ description: \"Spotify ID of the song\" })\n\t@IsString()\n\tspotify_id: string;\n\n\t@ApiProperty({ description: \"Internal song ID\" })\n\tsong_id: string;\n\n\t@ApiProperty({ description: \"Number of times the song was played\" })\n\t@IsNumber()\n\tplays: number;\n\n\t@ApiProperty({ description: \"Number of upvotes the song received\" })\n\t@IsNumber()\n\tupvotes: number;\n\n\t@ApiProperty({ description: \"Number of downvotes the song received\" })\n\t@IsNumber()\n\tdownvotes: number;\n\n\t@ApiProperty({ description: \"Rank of the song based on some criteria\" })\n\t@IsNumber()\n\trank: number;\n\n\t@ApiProperty({ description: \"Global rank of the song across all rooms\" })\n\t@IsNumber()\n\tglobal_rank: number;\n}\n\nexport class RoomAnalyticsVotesDto {\n\t@ApiProperty({ description: \"Total number of upvotes for songs in the room\" })\n\t@IsNumber()\n\ttotal_upvotes: number;\n\n\t@ApiProperty({\n\t\tdescription: \"Total number of downvotes for songs in the room\",\n\t})\n\t@IsNumber()\n\ttotal_downvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Daily percentage change in upvotes for songs in the room. (last 24 hours)\",\n\t})\n\t@IsNumber()\n\tdaily_percentage_change_in_upvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Daily percentage change in downvotes for songs in the room. (last 24 hours)\",\n\t})\n\t@IsNumber()\n\tdaily_percentage_change_in_downvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Details of songs including Spotify ID, song ID, upvotes, and downvotes\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\tsongs: SongAnalyticsDto[];\n}\n\nexport class RoomAnalyticsSongsDto {\n\t@ApiProperty({\n\t\ttitle: \"MostPlayed\",\n\t\tdescription: \"Most played songs in the room\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\tmost_played: SongAnalyticsDto[];\n\n\t@ApiProperty({\n\t\tdescription: \"Top voted songs in the room\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\ttop_voted: SongAnalyticsDto[];\n}\n\nexport class RoomAnalyticsContributorsDto {\n\t@ApiProperty({\n\t\ttitle: \"TopContributors\",\n\t\tdescription: \"Top contributors to the room's queue\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tuser: { title: \"UserDto\", type: \"object\" },\n\t\t\trank: { type: \"number\" },\n\t\t\tnum_songs: { type: \"number\" },\n\t\t\tnum_upvotes: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\ttop_contributors: {\n\t\tuser: UserDto;\n\t\trank: number;\n\t\tnum_songs: number;\n\t\tnum_upvotes: number;\n\t};\n}\n\nexport class RoomAnalyticsDto {\n\t@ApiProperty({ description: \"Queue analytics\", type: RoomAnalyticsQueueDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsQueueDto)\n\tqueue: RoomAnalyticsQueueDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Participation analytics\",\n\t\ttype: RoomAnalyticsParticipationDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsParticipationDto)\n\tparticipation: RoomAnalyticsParticipationDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Interactions analytics\",\n\t\ttype: RoomAnalyticsInteractionsDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsInteractionsDto)\n\tinteractions: RoomAnalyticsInteractionsDto;\n\n\t@ApiProperty({ description: \"Votes analytics\", type: RoomAnalyticsVotesDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsVotesDto)\n\tvotes: RoomAnalyticsVotesDto;\n\n\t@ApiProperty({ description: \"Songs analytics\", type: RoomAnalyticsSongsDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsSongsDto)\n\tsongs: RoomAnalyticsSongsDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Contributors analytics\",\n\t\ttype: RoomAnalyticsContributorsDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsContributorsDto)\n\tcontributors: RoomAnalyticsContributorsDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SongAnalyticsDto.html":{"url":"classes/SongAnalyticsDto.html","title":"class - SongAnalyticsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SongAnalyticsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/dto/roomanalytics.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                downvotes\n                            \n                            \n                                    \n                                    \n                                global_rank\n                            \n                            \n                                    \n                                    \n                                plays\n                            \n                            \n                                    \n                                    \n                                rank\n                            \n                            \n                                    \n                                song_id\n                            \n                            \n                                    \n                                    \n                                spotify_id\n                            \n                            \n                                    \n                                    \n                                upvotes\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        downvotes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Number of downvotes the song received'})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:295\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        global_rank\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Global rank of the song across all rooms'})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:303\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        plays\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Number of times the song was played'})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:287\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        rank\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Rank of the song based on some criteria'})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:299\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        song_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Internal song ID'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:283\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        spotify_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Spotify ID of the song'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:280\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        upvotes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Number of upvotes the song received'})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/roomanalytics.dto.ts:291\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n\tIsArray,\n\tIsDate,\n\tIsNumber,\n\tIsObject,\n\tIsString,\n\tValidateNested,\n} from \"class-validator\";\nimport { UserDto } from \"../../users/dto/user.dto\";\nimport { Type } from \"class-transformer\";\nexport class RoomAnalyticsKeyMetricsDto {\n\t// an object called unique visitors with two properties, count and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"UniqueVisitors\",\n\t\tdescription: \"Unique visitors to the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tcount: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tunique_visitors: {\n\t\tcount: number;\n\t\tpercentage_change: number;\n\t};\n\n\t// an object called returning_visitors with two properties, count and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"ReturningVisitors\",\n\t\tdescription: \"Returning visitors to the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tcount: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\treturning_visitors: {\n\t\tcount: number;\n\t\tpercentage_change: number;\n\t};\n\n\t// an object called average_session_duration with two properties, duration and percentage_change. both are numbers\n\t@ApiProperty({\n\t\ttitle: \"AverageSessionDuration\",\n\t\tdescription: \"Average session duration in the user's rooms\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tduration: { type: \"number\" },\n\t\t\tpercentage_change: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\taverage_session_duration: {\n\t\tduration: number;\n\t\tpercentage_change: number;\n\t};\n}\n\nexport class RoomAnalyticsQueueDto {\n\t@ApiProperty({ description: \"Total number of songs ever queued in the room\" })\n\t@IsNumber()\n\ttotal_songs_queued: number;\n\n\t@ApiProperty({\n\t\tdescription: \"Number of times the room's queue was exported as a playlist\",\n\t})\n\t@IsNumber()\n\ttotal_queue_exports: number;\n}\n\nexport class ParticipantsPerHourDto {\n\t@ApiProperty({\n\t\tdescription: \"The number of participants in the room at the given hour\",\n\t})\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The specific hour for participant count\",\n\t\ttype: Date,\n\t})\n\t@IsDate()\n\tinstance: Date;\n}\n\nexport class AllTimeSessionDataDto {\n\t@ApiProperty({\n\t\tdescription: \"The average session duration of the room\",\n\t})\n\t@IsNumber()\n\tavg_duration: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The minimum session duration of the room\",\n\t})\n\t@IsNumber()\n\tmin_duration: number;\n\n\t@ApiProperty({\n\t\tdescription: \"The maximum session duration of the room\",\n\t})\n\t@IsNumber()\n\tmax_duration: number;\n}\n\nexport class SessionDurationPerDayDto {\n\t@ApiProperty({ type: \"number\" })\n\tduration: number;\n\n\t@ApiProperty({ type: Date })\n\tday: Date;\n}\n\nexport class SessionDataPerDayDto {\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tavg_duration: SessionDurationPerDayDto[];\n\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tmin_duration: SessionDurationPerDayDto[];\n\n\t@ApiProperty({ type: SessionDurationPerDayDto, isArray: true })\n\t@Type(() => SessionDurationPerDayDto)\n\tmax_duration: SessionDurationPerDayDto[];\n}\n\nexport class JoinsCount {\n\t@ApiProperty({ type: \"number\" })\n\tcount: number;\n\n\t@ApiProperty({ type: Date })\n\tday: Date;\n}\n\nexport class JoinsPerDay {\n\ttotal_joins: JoinsCount[];\n\tunique_joins: JoinsCount[];\n}\n\nexport class RoomAnalyticsParticipationDto {\n\t@ApiProperty({\n\t\ttitle: \"Joins\",\n\t\tdescription:\n\t\t\t\"Join statistics, including total and unique joins per day and all-time\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tper_day: {\n\t\t\t\ttitle: \"JoinsPerDay\",\n\t\t\t\ttype: \"object\",\n\t\t\t},\n\t\t\tall_time: {\n\t\t\t\ttitle: \"JoinsAllTime\",\n\t\t\t\ttype: \"object\",\n\t\t\t\tproperties: {\n\t\t\t\t\ttotal_joins: { type: \"number\" },\n\t\t\t\t\tunique_joins: { type: \"number\" },\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tjoins: {\n\t\tper_day: JoinsPerDay;\n\t\tall_time: {\n\t\t\ttotal_joins: number;\n\t\t\tunique_joins: number;\n\t\t};\n\t};\n\n\t@ApiProperty({\n\t\tdescription: \"Participants per hour data\",\n\t\ttype: ParticipantsPerHourDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => ParticipantsPerHourDto)\n\tparticipants_per_hour: ParticipantsPerHourDto[];\n\n\t@ApiProperty({\n\t\ttitle: \"SessionData\",\n\t\tdescription:\n\t\t\t\"Session data including average, minimum, and maximum duration all-time and per day\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tall_time: {\n\t\t\t\ttype: \"object\",\n\t\t\t\ttitle: \"AllTimeSessionDataDto\",\n\t\t\t},\n\t\t\tper_day: {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: {\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\ttitle: \"SessionDurationPerDayDto\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tsession_data: {\n\t\tall_time: AllTimeSessionDataDto;\n\t\tper_day: SessionDurationPerDayDto[];\n\t};\n\n\t@ApiProperty({\n\t\ttitle: \"ReturnVisits\",\n\t\tdescription: \"Expected return visits and probability of return\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\texpected_return_count: { type: \"number\" },\n\t\t\tprobability_of_return: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\treturn_visits: {\n\t\texpected_return_count: number;\n\t\tprobability_of_return: number;\n\t};\n\n\t@ApiProperty({\n\t\tdescription: \"Number of previews of the room, i.e. without joining\",\n\t})\n\t@IsNumber()\n\troom_previews: number;\n}\n\nexport class MessagesPerHour {\n\t@ApiProperty({ type: \"number\" })\n\tcount: number;\n\n\t@ApiProperty({ type: Date })\n\thour: Date;\n}\n\nexport class RoomAnalyticsInteractionsDto {\n\t@ApiProperty({\n\t\ttitle: \"Messages\",\n\t\tdescription: \"Total messages sent and messages sent per hour\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\ttotal: { type: \"number\" },\n\t\t\tper_hour: {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: {\n\t\t\t\t\ttitle: \"MessagesPerHour\",\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\tmessages: {\n\t\ttotal: number;\n\t\tper_hour: MessagesPerHour[];\n\t};\n\n\t@ApiProperty({ description: \"Total number of reactions sent in the room\" })\n\t@IsNumber()\n\treactions_sent: number;\n\n\t@ApiProperty({ description: \"Number of times the room was bookmarked\" })\n\t@IsNumber()\n\tbookmarked_count: number;\n}\n\nexport class SongAnalyticsDto {\n\t@ApiProperty({ description: \"Spotify ID of the song\" })\n\t@IsString()\n\tspotify_id: string;\n\n\t@ApiProperty({ description: \"Internal song ID\" })\n\tsong_id: string;\n\n\t@ApiProperty({ description: \"Number of times the song was played\" })\n\t@IsNumber()\n\tplays: number;\n\n\t@ApiProperty({ description: \"Number of upvotes the song received\" })\n\t@IsNumber()\n\tupvotes: number;\n\n\t@ApiProperty({ description: \"Number of downvotes the song received\" })\n\t@IsNumber()\n\tdownvotes: number;\n\n\t@ApiProperty({ description: \"Rank of the song based on some criteria\" })\n\t@IsNumber()\n\trank: number;\n\n\t@ApiProperty({ description: \"Global rank of the song across all rooms\" })\n\t@IsNumber()\n\tglobal_rank: number;\n}\n\nexport class RoomAnalyticsVotesDto {\n\t@ApiProperty({ description: \"Total number of upvotes for songs in the room\" })\n\t@IsNumber()\n\ttotal_upvotes: number;\n\n\t@ApiProperty({\n\t\tdescription: \"Total number of downvotes for songs in the room\",\n\t})\n\t@IsNumber()\n\ttotal_downvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Daily percentage change in upvotes for songs in the room. (last 24 hours)\",\n\t})\n\t@IsNumber()\n\tdaily_percentage_change_in_upvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Daily percentage change in downvotes for songs in the room. (last 24 hours)\",\n\t})\n\t@IsNumber()\n\tdaily_percentage_change_in_downvotes: number;\n\n\t@ApiProperty({\n\t\tdescription:\n\t\t\t\"Details of songs including Spotify ID, song ID, upvotes, and downvotes\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\tsongs: SongAnalyticsDto[];\n}\n\nexport class RoomAnalyticsSongsDto {\n\t@ApiProperty({\n\t\ttitle: \"MostPlayed\",\n\t\tdescription: \"Most played songs in the room\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\tmost_played: SongAnalyticsDto[];\n\n\t@ApiProperty({\n\t\tdescription: \"Top voted songs in the room\",\n\t\ttype: SongAnalyticsDto,\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => SongAnalyticsDto)\n\ttop_voted: SongAnalyticsDto[];\n}\n\nexport class RoomAnalyticsContributorsDto {\n\t@ApiProperty({\n\t\ttitle: \"TopContributors\",\n\t\tdescription: \"Top contributors to the room's queue\",\n\t\ttype: \"object\",\n\t\tproperties: {\n\t\t\tuser: { title: \"UserDto\", type: \"object\" },\n\t\t\trank: { type: \"number\" },\n\t\t\tnum_songs: { type: \"number\" },\n\t\t\tnum_upvotes: { type: \"number\" },\n\t\t},\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\ttop_contributors: {\n\t\tuser: UserDto;\n\t\trank: number;\n\t\tnum_songs: number;\n\t\tnum_upvotes: number;\n\t};\n}\n\nexport class RoomAnalyticsDto {\n\t@ApiProperty({ description: \"Queue analytics\", type: RoomAnalyticsQueueDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsQueueDto)\n\tqueue: RoomAnalyticsQueueDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Participation analytics\",\n\t\ttype: RoomAnalyticsParticipationDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsParticipationDto)\n\tparticipation: RoomAnalyticsParticipationDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Interactions analytics\",\n\t\ttype: RoomAnalyticsInteractionsDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsInteractionsDto)\n\tinteractions: RoomAnalyticsInteractionsDto;\n\n\t@ApiProperty({ description: \"Votes analytics\", type: RoomAnalyticsVotesDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsVotesDto)\n\tvotes: RoomAnalyticsVotesDto;\n\n\t@ApiProperty({ description: \"Songs analytics\", type: RoomAnalyticsSongsDto })\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsSongsDto)\n\tsongs: RoomAnalyticsSongsDto;\n\n\t@ApiProperty({\n\t\tdescription: \"Contributors analytics\",\n\t\ttype: RoomAnalyticsContributorsDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomAnalyticsContributorsDto)\n\tcontributors: RoomAnalyticsContributorsDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SongInfoDto.html":{"url":"classes/SongInfoDto.html","title":"class - SongInfoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SongInfoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/dto/songinfo.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                artists\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                cover\n                            \n                            \n                                    \n                                    \n                                duration\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                songID\n                            \n                            \n                                    \n                                    \n                                spotify_id\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                start_time\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        artists\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'The artists that performed the song', isArray: true})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/songinfo.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/songinfo.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/songinfo.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        songID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/songinfo.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        spotify_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/songinfo.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        start_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The time the song started playing', type: Date, nullable: true})@IsOptional()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/songinfo.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/songinfo.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport {\n\tIsString,\n\tIsArray,\n\tIsDate,\n\tIsNumber,\n\tIsOptional,\n} from \"class-validator\";\n\n/*\nCREATE TABLE IF NOT EXISTS public.song\n(\n    song_id uuid NOT NULL DEFAULT uuid_generate_v4(),\n    name text COLLATE pg_catalog.\"default\" NOT NULL,\n    artist text COLLATE pg_catalog.\"default\" NOT NULL,\n    genre text COLLATE pg_catalog.\"default\",\n    lyrics_url text COLLATE pg_catalog.\"default\",\n    duration integer DEFAULT 0,\n    genres text[] COLLATE pg_catalog.\"default\",\n    artwork_url text COLLATE pg_catalog.\"default\",\n    spotify_id text COLLATE pg_catalog.\"default\",\n    CONSTRAINT song_pkey PRIMARY KEY (song_id)\n)\n*/\n\nexport class SongInfoDto {\n\t@ApiPropertyOptional()\n\t@IsOptional()\n\t@IsString()\n\tsongID?: string;\n\n\t@ApiProperty()\n\t@IsString()\n\ttitle: string;\n\n\t@ApiProperty({\n\t\ttype: String,\n\t\tdescription: \"The artists that performed the song\",\n\t\tisArray: true,\n\t})\n\t@IsArray()\n\tartists: string[];\n\n\t@ApiPropertyOptional()\n\t@IsOptional()\n\t@IsString()\n\tcover?: string;\n\n\t@ApiProperty()\n\t@IsNumber()\n\tduration: number;\n\n\t@ApiProperty()\n\t@IsString()\n\tspotify_id: string;\n\n\t@ApiPropertyOptional({\n\t\tdescription: \"The time the song started playing\",\n\t\ttype: Date,\n\t\tnullable: true,\n\t})\n\t@IsOptional()\n\t@IsDate()\n\tstart_time?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SongInfoEntity.html":{"url":"classes/SongInfoEntity.html","title":"class - SongInfoEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SongInfoEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            archive/modules/rooms/entities/songinfo.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                artists\n                            \n                            \n                                    \n                                cover\n                            \n                            \n                                    \n                                start_time\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        artists\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/rooms/entities/songinfo.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/rooms/entities/songinfo.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        start_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Date})\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/rooms/entities/songinfo.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/rooms/entities/songinfo.entity.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\n\nexport class SongInfoEntity {\n\t@ApiProperty()\n\ttitle: string;\n\n\t@ApiProperty({ type: [String] })\n\tartists: string[];\n\n\t@ApiProperty()\n\tcover: string;\n\n\t@ApiProperty({ type: Date })\n\tstart_time: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SongInfosWithCount.html":{"url":"classes/SongInfosWithCount.html","title":"class - SongInfosWithCount","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SongInfosWithCount\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                count\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/user.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SongInfoDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: () => SongInfoDto, isArray: true})@IsArray()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/user.dto.ts:52\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport {\n\tIsString,\n\tValidateNested,\n\tIsObject,\n\tIsNumber,\n\tIsArray,\n\tIsBoolean,\n} from \"class-validator\";\nimport { SongInfoDto } from \"../../rooms/dto/songinfo.dto\";\nimport { Type } from \"class-transformer\";\n\nexport class FollowersAndFollowing {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({ type: () => UserDto, isArray: true })\n\t@IsArray()\n\t@ValidateNested()\n\t@Type(() => UserDto)\n\tdata: UserDto[];\n}\n\nexport class RoomsData {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t/*\n\t@ApiProperty({ type: () => RoomDto, isArray: true })\n\t@IsArray()\n\t@ValidateNested()\n\t@Type(() => RoomDto)\n\tdata: RoomDto[];\n\t*/\n\t@ApiProperty({ type: String, isArray: true })\n\t@IsArray()\n\t@IsString({ each: true })\n\tdata: string[];\n}\n\nexport class SongInfosWithCount {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({ type: () => SongInfoDto, isArray: true })\n\t@IsArray()\n\t@ValidateNested()\n\t@Type(() => SongInfoDto)\n\tdata: SongInfoDto[];\n}\n\nexport class LinksWithCount {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({\n\t\ttype: \"object\",\n\t\tadditionalProperties: {\n\t\t\ttype: \"array\",\n\t\t\titems: { type: \"string\" },\n\t\t},\n\t})\n\t@IsObject()\n\tdata: Record;\n}\n\nexport class GenresWithCount {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({ type: String, isArray: true })\n\t@IsArray()\n\t@IsString({ each: true })\n\tdata: string[];\n}\n\nexport class UserFriendship {\n\t@ApiProperty()\n\t@IsBoolean()\n\tstatus: boolean;\n\n\t@ApiProperty()\n\t@IsString()\n\taccept_url: string;\n\n\t@ApiProperty()\n\t@IsString()\n\treject_url: string;\n}\n\nexport class UserDto {\n\t@ApiProperty()\n\t@IsString()\n\tprofile_name: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tuserID: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tusername: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tprofile_picture_url: string;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's followers\",\n\t\ttitle: \"FollowersAndFollowing\",\n\t\ttype: FollowersAndFollowing,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => FollowersAndFollowing)\n\tfollowers: FollowersAndFollowing;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's following\",\n\t\ttitle: \"FollowersAndFollowing\",\n\t\ttype: FollowersAndFollowing,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => FollowersAndFollowing)\n\tfollowing: FollowersAndFollowing;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's links\",\n\t\ttype: LinksWithCount,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => LinksWithCount)\n\tlinks: LinksWithCount;\n\n\t@ApiPropertyOptional()\n\t@IsString()\n\tbio: string;\n\n\t@ApiPropertyOptional({\n\t\tdescription: \"The current song the user is listening to, if applicable\",\n\t\ttype: SongInfoDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => SongInfoDto)\n\tcurrent_song?: SongInfoDto;\n\n\t@ApiPropertyOptional({\n\t\tdescription:\n\t\t\t\"The roomID of the room that the user is currently in, if applicable\",\n\t})\n\t@IsString()\n\t@ValidateNested()\n\tcurrent_room_id?: string;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's favorite genres\",\n\t\ttype: GenresWithCount,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => GenresWithCount)\n\tfav_genres: GenresWithCount;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's favorite songs\",\n\t\ttype: SongInfosWithCount,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => SongInfosWithCount)\n\tfav_songs: SongInfosWithCount;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's favorite rooms\",\n\t\ttype: RoomsData,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomsData)\n\tfav_rooms: RoomsData;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's recent rooms\",\n\t\ttype: RoomsData,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomsData)\n\trecent_rooms: RoomsData;\n\n\t@ApiProperty()\n\t@IsBoolean()\n\thasSpotifyAccount: boolean;\n\n\t@ApiPropertyOptional({\n\t\tdescription:\n\t\t\t\"The relationship status between the current user and the user in question\",\n\t\ttype: String,\n\t})\n\t@Type(() => String)\n\t@IsString()\n\trelationship?:\n\t\t| \"following\"\n\t\t| \"follower\"\n\t\t| \"mutual\"\n\t\t| \"friend\"\n\t\t| \"pending\"\n\t\t| \"none\"\n\t\t| \"blocked\";\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SongsController.html":{"url":"controllers/SongsController.html","title":"controller - SongsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SongsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/songs/songs.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                songs\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from \"@nestjs/common\";\n// import { SongsService } from \"./songs.service\";\n// import {\n// \tApiOkResponse,\n// \tApiOperation,\n// \tApiParam,\n// \tApiTags,\n// } from \"@nestjs/swagger\";\n\n@Controller(\"songs\")\nexport class SongsController {\n\t/*\n\tconstructor(private readonly songsService: SongsService) {}\n\n\t@Get(\":songID/spotify\")\n\t@ApiTags(\"songs\")\n\t@ApiOkResponse({\n\t\tdescription: \"The spotify id of the song.\",\n\t\ttype: \"string | null\",\n\t})\n\t@ApiParam({ name: \"songID\", required: true })\n\t@ApiOperation({ summary: \"Get the Spotify ID of a song with given ID\" })\n\tasync getSpotifyId(@Param(\"songID\") songID: string): Promise {\n\t\treturn await this.songsService.getSpotifyId(songID);\n\t}\n\t*/\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SongsModule.html":{"url":"modules/SongsModule.html","title":"module - SongsModule","body":"\n                   \n\n\n\n\n    Modules\n    SongsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SongsModule\n\n\n\ncluster_SongsModule_exports\n\n\n\ncluster_SongsModule_imports\n\n\n\ncluster_SongsModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nSongsModule\n\nSongsModule\n\nSongsModule -->\n\nAuthModule->SongsModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nSongsModule -->\n\nPrismaModule->SongsModule\n\n\n\n\n\nSongsService \n\nSongsService \n\nSongsService  -->\n\nSongsModule->SongsService \n\n\n\n\n\nSongsService\n\nSongsService\n\nSongsModule -->\n\nSongsService->SongsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/songs/songs.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SongsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SongsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SongsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { SongsService } from \"./songs.service\";\nimport { SongsController } from \"./songs.controller\";\nimport { PrismaModule } from \"../../../prisma/prisma.module\";\nimport { AuthModule } from \"../../auth/auth.module\";\n\n@Module({\n\timports: [PrismaModule, AuthModule],\n\tproviders: [SongsService],\n\tcontrollers: [SongsController],\n\texports: [SongsService],\n})\nexport class SongsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SongsService.html":{"url":"injectables/SongsService.html","title":"injectable - SongsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SongsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/songs/songs.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getSpotifyId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/songs/songs.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSpotifyId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSpotifyId(songID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/songs/songs.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                songID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\nimport * as PrismaTypes from \"@prisma/client\";\n\n@Injectable()\nexport class SongsService {\n\tconstructor(private readonly prisma: PrismaService) {}\n\n\tasync getSpotifyId(songID: string): Promise {\n\t\tconst song: PrismaTypes.song | null = await this.prisma.song.findUnique({\n\t\t\twhere: {\n\t\t\t\tsong_id: songID,\n\t\t\t},\n\t\t});\n\t\tif (!song || !song.spotify_id) {\n\t\t\treturn { id: \"null\" };\n\t\t}\n\t\treturn { id: song.spotify_id };\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SpotifyAuthController.html":{"url":"controllers/SpotifyAuthController.html","title":"controller - SpotifyAuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SpotifyAuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/spotify/spotifyauth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth/spotify\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                handleSpotifyAuthCallback\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                handleSpotifyRefresh\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                handleSpotifyTokens\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        handleSpotifyAuthCallback\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleSpotifyAuthCallback(code: string, state: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('callback')@ApiTags('auth')@ApiOperation({summary: 'Callback for Spotify Auth', description: 'Handles the Spotify auth callback, creates an account for the user (if necessary), authenticates the user, and returns a JWT token', operationId: 'spotifyCallback'})@ApiQuery({name: 'code', description: 'The authorization code returned by Spotify after user consent', required: true, type: String, example: 'NApCCg..BkWtQ', allowEmptyValue: false})@ApiQuery({name: 'state', description: 'A unique state value to prevent CSRF attacks', required: true, type: String, example: '34fFs29kd09', allowEmptyValue: false})@ApiResponse({status: 201, description: 'The record has been successfully created.', type: SpotifyCallbackResponse})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/spotify/spotifyauth.controller.ts:107\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        handleSpotifyRefresh\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleSpotifyRefresh(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@ApiSecurity('bearer')@UseGuards(JwtAuthGuard)@Get('refresh')@ApiTags('auth')@ApiOperation({summary: 'Manually Refresh Spotify Auth Tokens', description: 'This method will manually refresh the user's Spotify Auth Tokens and return the new tokens', operationId: 'refreshSpotifyTokens'})@ApiResponse({status: 200, description: 'The user's new Spotify Auth Tokens', type: SpotifyTokenResponse})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/spotify/spotifyauth.controller.ts:186\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        handleSpotifyTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleSpotifyTokens(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@ApiSecurity('bearer')@UseGuards(JwtAuthGuard)@Get('tokens')@ApiTags('auth')@ApiOperation({summary: 'Get Spotify Auth Tokens', description: 'Returns the user's Spotify Auth Tokens', operationId: 'getSpotifyTokens'})@ApiResponse({status: 200, description: 'The user's Spotify Auth Tokens', type: SpotifyTokenPair})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/spotify/spotifyauth.controller.ts:153\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query, Request, UseGuards } from \"@nestjs/common\";\nimport {\n\tSpotifyAuthService,\n\tSpotifyCallbackResponse,\n\tSpotifyTokenPair,\n\tSpotifyTokenResponse,\n} from \"./spotifyauth.service\";\nimport {\n\tApiBearerAuth,\n\tApiOperation,\n\tApiQuery,\n\tApiResponse,\n\tApiSecurity,\n\tApiTags,\n} from \"@nestjs/swagger\";\nimport * as PrismaTypes from \"@prisma/client\";\nimport { AuthService, JWTPayload } from \"../auth.service\";\nimport { JwtAuthGuard } from \"../jwt-auth.guard\";\n\n@Controller(\"auth/spotify\")\nexport class SpotifyAuthController {\n\tconstructor(\n\t\tprivate readonly spotifyAuth: SpotifyAuthService,\n\t\tprivate readonly auth: AuthService,\n\t) {}\n\n\t/*\n\t@Get(\"redirect\")\n\t@Redirect()\n\t@ApiTags(\"auth\")\n\t@ApiQuery({\n\t\tname: \"code\",\n\t\tdescription:\n\t\t\t\"The authorization code returned by Spotify after user consent\",\n\t\trequired: true,\n\t\ttype: String,\n\t\texample: \"NApCCg..BkWtQ\",\n\t\tallowEmptyValue: false,\n\t})\n\t@ApiQuery({\n\t\tname: \"state\",\n\t\tdescription: \"A unique state value to prevent CSRF attacks\",\n\t\trequired: true,\n\t\ttype: String,\n\t\texample: \"34fFs29kd09\",\n\t\tallowEmptyValue: false,\n\t})\n\t@ApiOperation({\n\t\tsummary: \"Spotify OAuth Redirect\",\n\t\tdescription: \"Redirects to the Expo app with the Spotify auth code\",\n\t\toperationId: \"spotifyRedirect\",\n\t})\n\t@ApiResponse({\n\t\tstatus: 302,\n\t\tdescription: \"Redirects to the Expo app with the Spotify auth code\",\n\t})\n\tasync performRedirect(\n\t\t@Query(\"code\") code: string,\n\t\t@Query(\"state\") state: string,\n\t) {\n\t\t//expecting \"/auth/redirect?code={code}&state={state}\" from Spotify OAuth\n\t\tconst stateObj: {\n\t\t\t\"expo-redirect\": string;\n\t\t\t\"ip-address\": string;\n\t\t\t\"redirect-used\": string;\n\t\t} = this.spotifyAuth.getStateObject(state);\n\n\t\t//now, redirect to the expo-redirect\n\t\tconst redirectURI: string = stateObj[\"expo-redirect\"];\n\t\treturn {\n\t\t\turl: redirectURI,\n\t\t};\n\t}\n\t*/\n\n\t@Get(\"callback\")\n\t@ApiTags(\"auth\")\n\t@ApiOperation({\n\t\tsummary: \"Callback for Spotify Auth\",\n\t\tdescription:\n\t\t\t\"Handles the Spotify auth callback, creates an account for the user (if necessary), authenticates the user, and returns a JWT token\",\n\t\toperationId: \"spotifyCallback\",\n\t})\n\t@ApiQuery({\n\t\tname: \"code\",\n\t\tdescription:\n\t\t\t\"The authorization code returned by Spotify after user consent\",\n\t\trequired: true,\n\t\ttype: String,\n\t\texample: \"NApCCg..BkWtQ\",\n\t\tallowEmptyValue: false,\n\t})\n\t@ApiQuery({\n\t\tname: \"state\",\n\t\tdescription: \"A unique state value to prevent CSRF attacks\",\n\t\trequired: true,\n\t\ttype: String,\n\t\texample: \"34fFs29kd09\",\n\t\tallowEmptyValue: false,\n\t})\n\t@ApiResponse({\n\t\tstatus: 201,\n\t\tdescription: \"The record has been successfully created.\",\n\t\ttype: SpotifyCallbackResponse,\n\t})\n\t@ApiResponse({ status: 403, description: \"Forbidden.\" })\n\tasync handleSpotifyAuthCallback(\n\t\t@Query(\"code\") code: string,\n\t\t@Query(\"state\") state: string,\n\t): Promise {\n\t\t//expecting \"/auth/callback?code={code}&state={state}\"\n\t\t//`http://localhost:3000/auth/spotify/callback?code=${code}&state=${state}`,\n\t\tconst tokens: SpotifyTokenResponse =\n\t\t\tawait this.spotifyAuth.exchangeCodeForToken(code, state);\n\t\tconst tp: SpotifyTokenPair = {\n\t\t\ttokens: tokens,\n\t\t\tepoch_expiry: new Date().getTime() + (tokens.expires_in - 300) * 1000,\n\t\t};\n\t\tconsole.log(tokens);\n\t\tconst user: PrismaTypes.users = await this.spotifyAuth.createUser(tp);\n\t\tawait this.spotifyAuth.saveUserSpotifyTokens(tp, user.user_id);\n\t\tconst jwt: string = await this.spotifyAuth.generateJWT(user);\n\n\t\tconst response: SpotifyCallbackResponse = {\n\t\t\ttoken: jwt,\n\t\t\tspotifyTokens: tp,\n\t\t};\n\t\treturn response;\n\t}\n\n\t@ApiBearerAuth()\n\t@ApiSecurity(\"bearer\")\n\t@UseGuards(JwtAuthGuard)\n\t/*\n\t@ApiHeader({\n\t\tname: \"Authorization\",\n\t\tdescription: \"Bearer token for authentication\",\n\t})\n\t*/\n\t@Get(\"tokens\")\n\t@ApiTags(\"auth\")\n\t@ApiOperation({\n\t\tsummary: \"Get Spotify Auth Tokens\",\n\t\tdescription: \"Returns the user's Spotify Auth Tokens\",\n\t\toperationId: \"getSpotifyTokens\",\n\t})\n\t@ApiResponse({\n\t\tstatus: 200,\n\t\tdescription: \"The user's Spotify Auth Tokens\",\n\t\ttype: SpotifyTokenPair,\n\t})\n\t@ApiResponse({ status: 404, description: \"User not found\" })\n\tasync handleSpotifyTokens(\n\t\t@Request() req: Request,\n\t): Promise {\n\t\tconst userInfo: JWTPayload = this.auth.getUserInfo(req);\n\t\tconst tokens: SpotifyTokenPair = await this.spotifyAuth.getSpotifyTokens(\n\t\t\tuserInfo.id,\n\t\t);\n\t\treturn tokens;\n\t}\n\n\t@ApiBearerAuth()\n\t@ApiSecurity(\"bearer\")\n\t@UseGuards(JwtAuthGuard)\n\t/*\n\t@ApiHeader({\n\t\tname: \"Authorization\",\n\t\tdescription: \"Bearer token for authentication\",\n\t})\n\t*/\n\t@Get(\"refresh\")\n\t@ApiTags(\"auth\")\n\t@ApiOperation({\n\t\tsummary: \"Manually Refresh Spotify Auth Tokens\",\n\t\tdescription:\n\t\t\t\"This method will manually refresh the user's Spotify Auth Tokens and return the new tokens\",\n\t\toperationId: \"refreshSpotifyTokens\",\n\t})\n\t@ApiResponse({\n\t\tstatus: 200,\n\t\tdescription: \"The user's new Spotify Auth Tokens\",\n\t\ttype: SpotifyTokenResponse,\n\t})\n\t@ApiResponse({ status: 404, description: \"User not found\" })\n\tasync handleSpotifyRefresh(\n\t\t@Request() req: Request,\n\t): Promise {\n\t\tconst userInfo: JWTPayload = this.auth.getUserInfo(req);\n\t\tconst currentTokens: SpotifyTokenPair =\n\t\t\tawait this.spotifyAuth.getSpotifyTokens(userInfo.id);\n\t\tconst refreshedTokens: SpotifyTokenResponse =\n\t\t\tawait this.spotifyAuth.refreshAccessToken(currentTokens.tokens);\n\t\tconst tk: SpotifyTokenPair = {\n\t\t\ttokens: refreshedTokens,\n\t\t\tepoch_expiry:\n\t\t\t\tnew Date().getTime() + (refreshedTokens.expires_in - 300) * 1000,\n\t\t};\n\t\tawait this.spotifyAuth.saveUserSpotifyTokens(tk, userInfo.id);\n\t\treturn refreshedTokens;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SpotifyAuthModule.html":{"url":"modules/SpotifyAuthModule.html","title":"module - SpotifyAuthModule","body":"\n                   \n\n\n\n\n    Modules\n    SpotifyAuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SpotifyAuthModule\n\n\n\ncluster_SpotifyAuthModule_providers\n\n\n\ncluster_SpotifyAuthModule_imports\n\n\n\ncluster_SpotifyAuthModule_exports\n\n\n\n\nDbUtilsModule\n\nDbUtilsModule\n\n\n\nSpotifyAuthModule\n\nSpotifyAuthModule\n\nSpotifyAuthModule -->\n\nDbUtilsModule->SpotifyAuthModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nSpotifyAuthModule -->\n\nPrismaModule->SpotifyAuthModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nSpotifyAuthModule -->\n\nTasksModule->SpotifyAuthModule\n\n\n\n\n\nSpotifyAuthService \n\nSpotifyAuthService \n\nSpotifyAuthService  -->\n\nSpotifyAuthModule->SpotifyAuthService \n\n\n\n\n\nSpotifyAuthService\n\nSpotifyAuthService\n\nSpotifyAuthModule -->\n\nSpotifyAuthService->SpotifyAuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/spotify/spotifyauth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SpotifyAuthService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DbUtilsModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            TasksModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SpotifyAuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { Module } from \"@nestjs/common\";\nimport { SpotifyAuthService } from \"./spotifyauth.service\";\nimport { PrismaModule } from \"../../../prisma/prisma.module\";\nimport { DbUtilsModule } from \"../../modules/db-utils/db-utils.module\";\nimport { TasksModule } from \"../../tasks/tasks.module\";\n@Module({\n\timports: [HttpModule, PrismaModule, DbUtilsModule, TasksModule],\n\tcontrollers: [],\n\tproviders: [SpotifyAuthService],\n\texports: [SpotifyAuthService],\n})\nexport class SpotifyAuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SpotifyAuthService.html":{"url":"injectables/SpotifyAuthService.html","title":"injectable - SpotifyAuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SpotifyAuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/spotify/spotifyauth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                authHeader\n                            \n                            \n                                    Private\n                                clientId\n                            \n                            \n                                    Private\n                                clientSecret\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                exchangeCodeForToken\n                            \n                            \n                                    Async\n                                generateJWT\n                            \n                            \n                                    Async\n                                getSelf\n                            \n                            \n                                    Async\n                                getSpotifyTokens\n                            \n                            \n                                getStateObject\n                            \n                            \n                                    Async\n                                refreshAccessToken\n                            \n                            \n                                    Async\n                                saveUserSpotifyTokens\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, httpService: HttpService, prisma: PrismaService, tasksService: TasksService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/spotify/spotifyauth.service.ts:86\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tasksService\n                                                  \n                                                        \n                                                                        TasksService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(tk: SpotifyTokenPair)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/spotify/spotifyauth.service.ts:307\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tk\n                                            \n                                                            SpotifyTokenPair\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        exchangeCodeForToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    exchangeCodeForToken(code: string, state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/spotify/spotifyauth.service.ts:164\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateJWT(user: PrismaTypes.users)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/spotify/spotifyauth.service.ts:256\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                        PrismaTypes.users\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSelf\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSelf(token: SpotifyTokenResponse)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/spotify/spotifyauth.service.ts:286\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            SpotifyTokenResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSpotifyTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSpotifyTokens(userID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/spotify/spotifyauth.service.ts:409\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStateObject\n                        \n                    \n                \n            \n            \n                \ngetStateObject(state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/spotify/spotifyauth.service.ts:141\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refreshAccessToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshAccessToken(tk: SpotifyTokenResponse)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/spotify/spotifyauth.service.ts:214\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tk\n                                            \n                                                            SpotifyTokenResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        saveUserSpotifyTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveUserSpotifyTokens(tk: SpotifyTokenPair, userID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/spotify/spotifyauth.service.ts:377\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tk\n                                            \n                                                            SpotifyTokenPair\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        authHeader\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/spotify/spotifyauth.service.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        clientId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/spotify/spotifyauth.service.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        clientSecret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/spotify/spotifyauth.service.ts:84\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, Injectable } from \"@nestjs/common\";\nimport * as Spotify from \"@spotify/web-api-ts-sdk\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { HttpService } from \"@nestjs/axios\";\nimport { firstValueFrom } from \"rxjs\";\nimport { Prisma } from \"@prisma/client\";\nimport * as PrismaTypes from \"@prisma/client\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\nimport { JWTPayload } from \"../auth.service\";\nimport * as jwt from \"jsonwebtoken\";\nimport { IsNumber, IsObject, IsString, ValidateNested } from \"class-validator\";\nimport { ApiProperty } from \"@nestjs/swagger\";\nimport { AxiosError } from \"axios\";\nimport { Type } from \"class-transformer\";\nimport { TasksService } from \"../../tasks/tasks.service\";\n\nexport class SpotifyTokenResponse {\n\t@ApiProperty()\n\t@IsString()\n\taccess_token: string;\n\n\t@ApiProperty()\n\t@IsString()\n\ttoken_type: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tscope: string;\n\n\t@ApiProperty()\n\t@IsNumber()\n\texpires_in: number;\n\n\t@ApiProperty()\n\t@IsString()\n\trefresh_token: string;\n}\n\nexport class SpotifyTokenRefreshResponse {\n\t@ApiProperty()\n\t@IsString()\n\taccess_token: string;\n\n\t@ApiProperty()\n\t@IsString()\n\ttoken_type: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tscope: string;\n\n\t@ApiProperty()\n\t@IsNumber()\n\texpires_in: number;\n}\n\nexport class SpotifyTokenPair {\n\t@ApiProperty()\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => SpotifyTokenResponse)\n\ttokens: SpotifyTokenResponse;\n\n\t@ApiProperty()\n\t@IsNumber()\n\tepoch_expiry: number;\n}\n\nexport class SpotifyCallbackResponse {\n\t@ApiProperty()\n\t@IsString()\n\ttoken: string;\n\n\t@ApiProperty()\n\t@IsObject()\n\t@Type(() => SpotifyTokenPair)\n\t@ValidateNested()\n\tspotifyTokens: SpotifyTokenPair;\n}\n\n@Injectable()\nexport class SpotifyAuthService {\n\tprivate clientId: string;\n\tprivate clientSecret: string;\n\t// private redirectUri: string;\n\tprivate authHeader: string;\n\t// private selfAuthorisedAPI: Spotify.SpotifyApi;\n\n\tconstructor(\n\t\tprivate readonly configService: ConfigService,\n\t\tprivate readonly httpService: HttpService,\n\t\tprivate readonly prisma: PrismaService,\n\t\t// private readonly dbUtils: DbUtilsService,\n\t\tprivate readonly tasksService: TasksService,\n\t) {\n\t\tconst clientId = this.configService.get(\"SPOTIFY_CLIENT_ID\");\n\t\tif (!clientId) {\n\t\t\tthrow new Error(\"Missing SPOTIFY_CLIENT_ID\");\n\t\t}\n\t\tthis.clientId = clientId;\n\n\t\tconst clientSecret = this.configService.get(\n\t\t\t\"SPOTIFY_CLIENT_SECRET\",\n\t\t);\n\t\tif (!clientSecret) {\n\t\t\tthrow new Error(\"Missing SPOTIFY_CLIENT_SECRET\");\n\t\t}\n\t\tthis.clientSecret = clientSecret;\n\n\t\t// const redirectUri = this.configService.get(\"SPOTIFY_REDIRECT_URI\");\n\t\t// if (!redirectUri) {\n\t\t// \tthrow new Error(\"Missing SPOTIFY_REDIRECT_URI\");\n\t\t// }\n\t\t// this.redirectUri = redirectUri;\n\n\t\tthis.authHeader = Buffer.from(\n\t\t\t`${this.clientId}:${this.clientSecret}`,\n\t\t).toString(\"base64\");\n\n\t\t// this.selfAuthorisedAPI = Spotify.SpotifyApi.withClientCredentials(\n\t\t// \tthis.clientId,\n\t\t// \tthis.clientSecret,\n\t\t// );\n\t}\n\n\t//how state is constructed in frontend\n\t/*\n\tconst makeStateVariable = (redirectURI: string) => {\n\t\tconst state = {\n\t\t\t\"unique-pre-padding\": generateRandom(10),\n\t\t\t\"expo-redirect\": redirectURI,\n\t\t\t\"ip-address\": utils.API_BASE_NO_PORT,\n\t\t\t\"redirect-used\": SPOTIFY_REDIRECT_URI,\n\t\t\t\"unique-post-padding\": generateRandom(10),\n\t\t};\n\t\tconst bytes = new TextEncoder().encode(JSON.stringify(state));\n\t\tconst b64 = utils.bytesToBase64(bytes);\n\t\treturn b64;\n\t};\n\t*/\n\tgetStateObject(state: string): {\n\t\t\"expo-redirect\": string;\n\t\t\"ip-address\": string;\n\t\t\"redirect-used\": string;\n\t} {\n\t\tconst decodedState = Buffer.from(state, \"base64\").toString(\"utf-8\");\n\t\tconst obj = JSON.parse(decodedState);\n\t\tif (!obj[\"expo-redirect\"]) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Invalid state parameter. Does not contain expo-redirect\",\n\t\t\t);\n\t\t}\n\t\tif (!obj[\"ip-address\"]) {\n\t\t\tthrow new Error(\"Invalid state parameter. Does not contain ip-address\");\n\t\t}\n\t\tif (!obj[\"redirect-used\"]) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Invalid state parameter. Does not contain redirect-used\",\n\t\t\t);\n\t\t}\n\t\treturn obj;\n\t}\n\n\tasync exchangeCodeForToken(\n\t\tcode: string,\n\t\tstate: string,\n\t): Promise {\n\t\ttry {\n\t\t\t//Step 0: Get the redirect URI\n\t\t\tconst stateObj = this.getStateObject(state);\n\t\t\tconst redirectURI = stateObj[\"expo-redirect\"];\n\n\t\t\t// Step 1: Create the request options object\n\t\t\tconst requestOptions = {\n\t\t\t\turl: \"https://accounts.spotify.com/api/token\",\n\t\t\t\tbody: {\n\t\t\t\t\tgrant_type: \"authorization_code\",\n\t\t\t\t\tcode: code,\n\t\t\t\t\tredirect_uri: decodeURIComponent(redirectURI),\n\t\t\t\t},\n\t\t\t\theaders: {\n\t\t\t\t\t\"Content-Type\": \"application/x-www-form-urlencoded\",\n\t\t\t\t\tAuthorization: `Basic ${this.authHeader}`,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\t// Step 2: Log or inspect the request options\n\t\t\tconsole.log(\"Request options:\", requestOptions);\n\n\t\t\t// Step 3: Send the request\n\t\t\tconst response = await firstValueFrom(\n\t\t\t\tthis.httpService.post(\n\t\t\t\t\trequestOptions.url,\n\t\t\t\t\tnew URLSearchParams(requestOptions.body).toString(), // Convert the body to URL-encoded string\n\t\t\t\t\t{ headers: requestOptions.headers },\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tconsole.log(response);\n\n\t\t\tif (!response || !response.data) {\n\t\t\t\tthrow new Error(\"Failed to exchange code for token\");\n\t\t\t}\n\n\t\t\treturn response.data as SpotifyTokenResponse;\n\t\t} catch (err) {\n\t\t\tif (err instanceof AxiosError) {\n\t\t\t\tconsole.log(err.response?.data);\n\t\t\t}\n\t\t\tthrow new Error(\"Failed to exchange code for token\");\n\t\t}\n\t}\n\n\tasync refreshAccessToken(\n\t\ttk: SpotifyTokenResponse,\n\t): Promise {\n\t\ttry {\n\t\t\tconst response = await firstValueFrom(\n\t\t\t\tthis.httpService.post(\n\t\t\t\t\t\"https://accounts.spotify.com/api/token\",\n\t\t\t\t\t{\n\t\t\t\t\t\tgrant_type: \"refresh_token\",\n\t\t\t\t\t\trefresh_token: tk.refresh_token,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\"Content-Type\": \"application/x-www-form-urlencoded\",\n\t\t\t\t\t\t\tAuthorization: `Basic ${this.authHeader}`,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tif (!response || !response.data) {\n\t\t\t\tthrow new Error(\"Failed to refresh token\");\n\t\t\t}\n\n\t\t\tconst refreshToken: SpotifyTokenRefreshResponse =\n\t\t\t\tresponse.data as SpotifyTokenRefreshResponse;\n\t\t\tconst result: SpotifyTokenResponse = {\n\t\t\t\taccess_token: refreshToken.access_token,\n\t\t\t\ttoken_type: refreshToken.token_type,\n\t\t\t\tscope: refreshToken.scope,\n\t\t\t\texpires_in: refreshToken.expires_in,\n\t\t\t\trefresh_token: tk.refresh_token,\n\t\t\t};\n\t\t\treturn result;\n\t\t} catch (err) {\n\t\t\tif (err instanceof AxiosError) {\n\t\t\t\tconsole.log(err.response?.data);\n\t\t\t}\n\t\t\tthrow new Error(\"Failed to refresh token\");\n\t\t}\n\t}\n\n\tasync generateJWT(user: PrismaTypes.users): Promise {\n\t\tconst secretKey = this.configService.get(\"JWT_SECRET_KEY\");\n\t\tconst expiresIn = this.configService.get(\"JWT_EXPIRATION_TIME\");\n\n\t\tif (!secretKey || secretKey === undefined || secretKey === \"\") {\n\t\t\tthrow new Error(\"Missing JWT secret key\");\n\t\t}\n\n\t\tif (!expiresIn || expiresIn === undefined || expiresIn === \"\") {\n\t\t\tthrow new Error(\"Missing JWT expiration time\");\n\t\t}\n\n\t\tif (!user || user === null) {\n\t\t\tthrow new Error(\"Cannot generate JWT for null user\");\n\t\t}\n\n\t\tif (!user.email || user.email === null) {\n\t\t\tthrow new Error(\"Cannot generate JWT for user without email\");\n\t\t}\n\n\t\tconst payload: JWTPayload = {\n\t\t\tusername: user.username,\n\t\t\tid: user.user_id,\n\t\t\temail: user.email,\n\t\t};\n\n\t\tconst token = jwt.sign(payload, secretKey, { expiresIn });\n\t\treturn token;\n\t}\n\n\tasync getSelf(token: SpotifyTokenResponse): Promise {\n\t\tlet attempts = 0;\n\t\tlet error: Error | undefined;\n\t\tfor (let i = 0; i  setTimeout(resolve, 5000 * attempts));\n\t\t\t}\n\t\t}\n\t\tif (error) {\n\t\t\tthrow error;\n\t\t}\n\t\tthrow new Error(\"Failed to get user profile\");\n\t}\n\n\tasync createUser(tk: SpotifyTokenPair): Promise {\n\t\tif (tk.epoch_expiry  user.email === spotifyUser.email,\n\t\t);\n\t\tif (!existingUser) {\n\t\t\t//try to find by username\n\t\t\texistingUser = users.find((user) => user.username === spotifyUser.id);\n\t\t}\n\t\tif (existingUser) {\n\t\t\treturn existingUser;\n\t\t}\n\n\t\tconst user: Prisma.usersCreateInput = {\n\t\t\tusername: spotifyUser.id,\n\t\t\tfull_name: spotifyUser.display_name,\n\t\t\texternal_links: {\n\t\t\t\tspotify: [spotifyUser.external_urls.spotify],\n\t\t\t},\n\t\t\temail: spotifyUser.email,\n\t\t};\n\n\t\tif (spotifyUser.images && spotifyUser.images.length > 0) {\n\t\t\t//find largest profile picture\n\t\t\tlet largest = -1;\n\t\t\tfor (let i = 0; i  largest\n\t\t\t\t) {\n\t\t\t\t\tlargest = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet imageURL = \"\";\n\t\t\tif (\n\t\t\t\tlargest >= 0 &&\n\t\t\t\tspotifyUser.images[largest] !== undefined &&\n\t\t\t\tspotifyUser.images[largest] !== undefined\n\t\t\t) {\n\t\t\t\timageURL = spotifyUser.images[largest]?.url || \"\";\n\t\t\t}\n\n\t\t\tconsole.log(\"spotifyUser image : \" + spotifyUser.images);\n\t\t\tconsole.log(\"\\nimage size: \" + largest);\n\n\t\t\tuser.profile_picture =\n\t\t\t\timageURL !== \"\"\n\t\t\t\t\t? imageURL\n\t\t\t\t\t: \"https://example.com/default-profile-picture.png\";\n\t\t}\n\n\t\ttry {\n\t\t\tconst response = await this.prisma.users.create({ data: user });\n\t\t\tconsole.log(response);\n\t\t\tawait this.tasksService.addImportLibraryTask(tk, response.user_id);\n\t\t\treturn response;\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\tthrow new Error(\"Failed to create user\");\n\t\t}\n\t}\n\n\tasync saveUserSpotifyTokens(tk: SpotifyTokenPair, userID: string) {\n\t\tconst user = await this.prisma.users.findFirst({\n\t\t\twhere: { user_id: userID },\n\t\t\tinclude: { authentication: true },\n\t\t});\n\n\t\tif (!user) {\n\t\t\tthrow new Error(\"User not found\");\n\t\t}\n\n\t\ttry {\n\t\t\tif (user.authentication !== null) {\n\t\t\t\tawait this.prisma.authentication.update({\n\t\t\t\t\twhere: { user_id: user.user_id },\n\t\t\t\t\tdata: {\n\t\t\t\t\t\ttoken: JSON.stringify(tk),\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tawait this.prisma.authentication.create({\n\t\t\t\t\tdata: {\n\t\t\t\t\t\ttoken: JSON.stringify(tk),\n\t\t\t\t\t\tuser_id: user.user_id,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\tthrow new Error(\"Failed to save tokens\");\n\t\t}\n\t}\n\n\tasync getSpotifyTokens(userID: string): Promise {\n\t\tconst tokens = await this.prisma.authentication.findFirst({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\n\t\tif (!tokens) {\n\t\t\tthrow new HttpException(\"User's Spotify tokens not found\", 404);\n\t\t}\n\n\t\tconst tk: SpotifyTokenPair = JSON.parse(tokens.token) as SpotifyTokenPair;\n\t\tif (tk.epoch_expiry \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SpotifyCallbackResponse.html":{"url":"classes/SpotifyCallbackResponse.html","title":"class - SpotifyCallbackResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SpotifyCallbackResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/spotify/spotifyauth.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                spotifyTokens\n                            \n                            \n                                    \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        spotifyTokens\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SpotifyTokenPair\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsObject()@Type(undefined)@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/spotify/spotifyauth.service.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/spotify/spotifyauth.service.ts:72\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, Injectable } from \"@nestjs/common\";\nimport * as Spotify from \"@spotify/web-api-ts-sdk\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { HttpService } from \"@nestjs/axios\";\nimport { firstValueFrom } from \"rxjs\";\nimport { Prisma } from \"@prisma/client\";\nimport * as PrismaTypes from \"@prisma/client\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\nimport { JWTPayload } from \"../auth.service\";\nimport * as jwt from \"jsonwebtoken\";\nimport { IsNumber, IsObject, IsString, ValidateNested } from \"class-validator\";\nimport { ApiProperty } from \"@nestjs/swagger\";\nimport { AxiosError } from \"axios\";\nimport { Type } from \"class-transformer\";\nimport { TasksService } from \"../../tasks/tasks.service\";\n\nexport class SpotifyTokenResponse {\n\t@ApiProperty()\n\t@IsString()\n\taccess_token: string;\n\n\t@ApiProperty()\n\t@IsString()\n\ttoken_type: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tscope: string;\n\n\t@ApiProperty()\n\t@IsNumber()\n\texpires_in: number;\n\n\t@ApiProperty()\n\t@IsString()\n\trefresh_token: string;\n}\n\nexport class SpotifyTokenRefreshResponse {\n\t@ApiProperty()\n\t@IsString()\n\taccess_token: string;\n\n\t@ApiProperty()\n\t@IsString()\n\ttoken_type: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tscope: string;\n\n\t@ApiProperty()\n\t@IsNumber()\n\texpires_in: number;\n}\n\nexport class SpotifyTokenPair {\n\t@ApiProperty()\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => SpotifyTokenResponse)\n\ttokens: SpotifyTokenResponse;\n\n\t@ApiProperty()\n\t@IsNumber()\n\tepoch_expiry: number;\n}\n\nexport class SpotifyCallbackResponse {\n\t@ApiProperty()\n\t@IsString()\n\ttoken: string;\n\n\t@ApiProperty()\n\t@IsObject()\n\t@Type(() => SpotifyTokenPair)\n\t@ValidateNested()\n\tspotifyTokens: SpotifyTokenPair;\n}\n\n@Injectable()\nexport class SpotifyAuthService {\n\tprivate clientId: string;\n\tprivate clientSecret: string;\n\t// private redirectUri: string;\n\tprivate authHeader: string;\n\t// private selfAuthorisedAPI: Spotify.SpotifyApi;\n\n\tconstructor(\n\t\tprivate readonly configService: ConfigService,\n\t\tprivate readonly httpService: HttpService,\n\t\tprivate readonly prisma: PrismaService,\n\t\t// private readonly dbUtils: DbUtilsService,\n\t\tprivate readonly tasksService: TasksService,\n\t) {\n\t\tconst clientId = this.configService.get(\"SPOTIFY_CLIENT_ID\");\n\t\tif (!clientId) {\n\t\t\tthrow new Error(\"Missing SPOTIFY_CLIENT_ID\");\n\t\t}\n\t\tthis.clientId = clientId;\n\n\t\tconst clientSecret = this.configService.get(\n\t\t\t\"SPOTIFY_CLIENT_SECRET\",\n\t\t);\n\t\tif (!clientSecret) {\n\t\t\tthrow new Error(\"Missing SPOTIFY_CLIENT_SECRET\");\n\t\t}\n\t\tthis.clientSecret = clientSecret;\n\n\t\t// const redirectUri = this.configService.get(\"SPOTIFY_REDIRECT_URI\");\n\t\t// if (!redirectUri) {\n\t\t// \tthrow new Error(\"Missing SPOTIFY_REDIRECT_URI\");\n\t\t// }\n\t\t// this.redirectUri = redirectUri;\n\n\t\tthis.authHeader = Buffer.from(\n\t\t\t`${this.clientId}:${this.clientSecret}`,\n\t\t).toString(\"base64\");\n\n\t\t// this.selfAuthorisedAPI = Spotify.SpotifyApi.withClientCredentials(\n\t\t// \tthis.clientId,\n\t\t// \tthis.clientSecret,\n\t\t// );\n\t}\n\n\t//how state is constructed in frontend\n\t/*\n\tconst makeStateVariable = (redirectURI: string) => {\n\t\tconst state = {\n\t\t\t\"unique-pre-padding\": generateRandom(10),\n\t\t\t\"expo-redirect\": redirectURI,\n\t\t\t\"ip-address\": utils.API_BASE_NO_PORT,\n\t\t\t\"redirect-used\": SPOTIFY_REDIRECT_URI,\n\t\t\t\"unique-post-padding\": generateRandom(10),\n\t\t};\n\t\tconst bytes = new TextEncoder().encode(JSON.stringify(state));\n\t\tconst b64 = utils.bytesToBase64(bytes);\n\t\treturn b64;\n\t};\n\t*/\n\tgetStateObject(state: string): {\n\t\t\"expo-redirect\": string;\n\t\t\"ip-address\": string;\n\t\t\"redirect-used\": string;\n\t} {\n\t\tconst decodedState = Buffer.from(state, \"base64\").toString(\"utf-8\");\n\t\tconst obj = JSON.parse(decodedState);\n\t\tif (!obj[\"expo-redirect\"]) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Invalid state parameter. Does not contain expo-redirect\",\n\t\t\t);\n\t\t}\n\t\tif (!obj[\"ip-address\"]) {\n\t\t\tthrow new Error(\"Invalid state parameter. Does not contain ip-address\");\n\t\t}\n\t\tif (!obj[\"redirect-used\"]) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Invalid state parameter. Does not contain redirect-used\",\n\t\t\t);\n\t\t}\n\t\treturn obj;\n\t}\n\n\tasync exchangeCodeForToken(\n\t\tcode: string,\n\t\tstate: string,\n\t): Promise {\n\t\ttry {\n\t\t\t//Step 0: Get the redirect URI\n\t\t\tconst stateObj = this.getStateObject(state);\n\t\t\tconst redirectURI = stateObj[\"expo-redirect\"];\n\n\t\t\t// Step 1: Create the request options object\n\t\t\tconst requestOptions = {\n\t\t\t\turl: \"https://accounts.spotify.com/api/token\",\n\t\t\t\tbody: {\n\t\t\t\t\tgrant_type: \"authorization_code\",\n\t\t\t\t\tcode: code,\n\t\t\t\t\tredirect_uri: decodeURIComponent(redirectURI),\n\t\t\t\t},\n\t\t\t\theaders: {\n\t\t\t\t\t\"Content-Type\": \"application/x-www-form-urlencoded\",\n\t\t\t\t\tAuthorization: `Basic ${this.authHeader}`,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\t// Step 2: Log or inspect the request options\n\t\t\tconsole.log(\"Request options:\", requestOptions);\n\n\t\t\t// Step 3: Send the request\n\t\t\tconst response = await firstValueFrom(\n\t\t\t\tthis.httpService.post(\n\t\t\t\t\trequestOptions.url,\n\t\t\t\t\tnew URLSearchParams(requestOptions.body).toString(), // Convert the body to URL-encoded string\n\t\t\t\t\t{ headers: requestOptions.headers },\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tconsole.log(response);\n\n\t\t\tif (!response || !response.data) {\n\t\t\t\tthrow new Error(\"Failed to exchange code for token\");\n\t\t\t}\n\n\t\t\treturn response.data as SpotifyTokenResponse;\n\t\t} catch (err) {\n\t\t\tif (err instanceof AxiosError) {\n\t\t\t\tconsole.log(err.response?.data);\n\t\t\t}\n\t\t\tthrow new Error(\"Failed to exchange code for token\");\n\t\t}\n\t}\n\n\tasync refreshAccessToken(\n\t\ttk: SpotifyTokenResponse,\n\t): Promise {\n\t\ttry {\n\t\t\tconst response = await firstValueFrom(\n\t\t\t\tthis.httpService.post(\n\t\t\t\t\t\"https://accounts.spotify.com/api/token\",\n\t\t\t\t\t{\n\t\t\t\t\t\tgrant_type: \"refresh_token\",\n\t\t\t\t\t\trefresh_token: tk.refresh_token,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\"Content-Type\": \"application/x-www-form-urlencoded\",\n\t\t\t\t\t\t\tAuthorization: `Basic ${this.authHeader}`,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tif (!response || !response.data) {\n\t\t\t\tthrow new Error(\"Failed to refresh token\");\n\t\t\t}\n\n\t\t\tconst refreshToken: SpotifyTokenRefreshResponse =\n\t\t\t\tresponse.data as SpotifyTokenRefreshResponse;\n\t\t\tconst result: SpotifyTokenResponse = {\n\t\t\t\taccess_token: refreshToken.access_token,\n\t\t\t\ttoken_type: refreshToken.token_type,\n\t\t\t\tscope: refreshToken.scope,\n\t\t\t\texpires_in: refreshToken.expires_in,\n\t\t\t\trefresh_token: tk.refresh_token,\n\t\t\t};\n\t\t\treturn result;\n\t\t} catch (err) {\n\t\t\tif (err instanceof AxiosError) {\n\t\t\t\tconsole.log(err.response?.data);\n\t\t\t}\n\t\t\tthrow new Error(\"Failed to refresh token\");\n\t\t}\n\t}\n\n\tasync generateJWT(user: PrismaTypes.users): Promise {\n\t\tconst secretKey = this.configService.get(\"JWT_SECRET_KEY\");\n\t\tconst expiresIn = this.configService.get(\"JWT_EXPIRATION_TIME\");\n\n\t\tif (!secretKey || secretKey === undefined || secretKey === \"\") {\n\t\t\tthrow new Error(\"Missing JWT secret key\");\n\t\t}\n\n\t\tif (!expiresIn || expiresIn === undefined || expiresIn === \"\") {\n\t\t\tthrow new Error(\"Missing JWT expiration time\");\n\t\t}\n\n\t\tif (!user || user === null) {\n\t\t\tthrow new Error(\"Cannot generate JWT for null user\");\n\t\t}\n\n\t\tif (!user.email || user.email === null) {\n\t\t\tthrow new Error(\"Cannot generate JWT for user without email\");\n\t\t}\n\n\t\tconst payload: JWTPayload = {\n\t\t\tusername: user.username,\n\t\t\tid: user.user_id,\n\t\t\temail: user.email,\n\t\t};\n\n\t\tconst token = jwt.sign(payload, secretKey, { expiresIn });\n\t\treturn token;\n\t}\n\n\tasync getSelf(token: SpotifyTokenResponse): Promise {\n\t\tlet attempts = 0;\n\t\tlet error: Error | undefined;\n\t\tfor (let i = 0; i  setTimeout(resolve, 5000 * attempts));\n\t\t\t}\n\t\t}\n\t\tif (error) {\n\t\t\tthrow error;\n\t\t}\n\t\tthrow new Error(\"Failed to get user profile\");\n\t}\n\n\tasync createUser(tk: SpotifyTokenPair): Promise {\n\t\tif (tk.epoch_expiry  user.email === spotifyUser.email,\n\t\t);\n\t\tif (!existingUser) {\n\t\t\t//try to find by username\n\t\t\texistingUser = users.find((user) => user.username === spotifyUser.id);\n\t\t}\n\t\tif (existingUser) {\n\t\t\treturn existingUser;\n\t\t}\n\n\t\tconst user: Prisma.usersCreateInput = {\n\t\t\tusername: spotifyUser.id,\n\t\t\tfull_name: spotifyUser.display_name,\n\t\t\texternal_links: {\n\t\t\t\tspotify: [spotifyUser.external_urls.spotify],\n\t\t\t},\n\t\t\temail: spotifyUser.email,\n\t\t};\n\n\t\tif (spotifyUser.images && spotifyUser.images.length > 0) {\n\t\t\t//find largest profile picture\n\t\t\tlet largest = -1;\n\t\t\tfor (let i = 0; i  largest\n\t\t\t\t) {\n\t\t\t\t\tlargest = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet imageURL = \"\";\n\t\t\tif (\n\t\t\t\tlargest >= 0 &&\n\t\t\t\tspotifyUser.images[largest] !== undefined &&\n\t\t\t\tspotifyUser.images[largest] !== undefined\n\t\t\t) {\n\t\t\t\timageURL = spotifyUser.images[largest]?.url || \"\";\n\t\t\t}\n\n\t\t\tconsole.log(\"spotifyUser image : \" + spotifyUser.images);\n\t\t\tconsole.log(\"\\nimage size: \" + largest);\n\n\t\t\tuser.profile_picture =\n\t\t\t\timageURL !== \"\"\n\t\t\t\t\t? imageURL\n\t\t\t\t\t: \"https://example.com/default-profile-picture.png\";\n\t\t}\n\n\t\ttry {\n\t\t\tconst response = await this.prisma.users.create({ data: user });\n\t\t\tconsole.log(response);\n\t\t\tawait this.tasksService.addImportLibraryTask(tk, response.user_id);\n\t\t\treturn response;\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\tthrow new Error(\"Failed to create user\");\n\t\t}\n\t}\n\n\tasync saveUserSpotifyTokens(tk: SpotifyTokenPair, userID: string) {\n\t\tconst user = await this.prisma.users.findFirst({\n\t\t\twhere: { user_id: userID },\n\t\t\tinclude: { authentication: true },\n\t\t});\n\n\t\tif (!user) {\n\t\t\tthrow new Error(\"User not found\");\n\t\t}\n\n\t\ttry {\n\t\t\tif (user.authentication !== null) {\n\t\t\t\tawait this.prisma.authentication.update({\n\t\t\t\t\twhere: { user_id: user.user_id },\n\t\t\t\t\tdata: {\n\t\t\t\t\t\ttoken: JSON.stringify(tk),\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tawait this.prisma.authentication.create({\n\t\t\t\t\tdata: {\n\t\t\t\t\t\ttoken: JSON.stringify(tk),\n\t\t\t\t\t\tuser_id: user.user_id,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\tthrow new Error(\"Failed to save tokens\");\n\t\t}\n\t}\n\n\tasync getSpotifyTokens(userID: string): Promise {\n\t\tconst tokens = await this.prisma.authentication.findFirst({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\n\t\tif (!tokens) {\n\t\t\tthrow new HttpException(\"User's Spotify tokens not found\", 404);\n\t\t}\n\n\t\tconst tk: SpotifyTokenPair = JSON.parse(tokens.token) as SpotifyTokenPair;\n\t\tif (tk.epoch_expiry \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SpotifyModule.html":{"url":"modules/SpotifyModule.html","title":"module - SpotifyModule","body":"\n                   \n\n\n\n\n    Modules\n    SpotifyModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SpotifyModule\n\n\n\ncluster_SpotifyModule_imports\n\n\n\ncluster_SpotifyModule_exports\n\n\n\ncluster_SpotifyModule_providers\n\n\n\n\nImageModule\n\nImageModule\n\n\n\nSpotifyModule\n\nSpotifyModule\n\nSpotifyModule -->\n\nImageModule->SpotifyModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nSpotifyModule -->\n\nPrismaModule->SpotifyModule\n\n\n\n\n\nRetryModule\n\nRetryModule\n\nSpotifyModule -->\n\nRetryModule->SpotifyModule\n\n\n\n\n\nSpotifyService \n\nSpotifyService \n\nSpotifyService  -->\n\nSpotifyModule->SpotifyService \n\n\n\n\n\nSpotifyService\n\nSpotifyService\n\nSpotifyModule -->\n\nSpotifyService->SpotifyModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/spotify/spotify.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SpotifyService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ImageModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            RetryModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SpotifyService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { SpotifyService } from \"./spotify.service\";\nimport { HttpModule } from \"@nestjs/axios\";\nimport { PrismaModule } from \"./../../prisma/prisma.module\";\nimport { MurLockModule } from \"murlock\";\nimport { ImageModule } from \"../image/image.module\";\nimport { RetryModule } from \"../retry/retry.module\";\n\n@Module({\n\timports: [HttpModule, PrismaModule, MurLockModule, ImageModule, RetryModule],\n\tcontrollers: [],\n\tproviders: [SpotifyService],\n\texports: [SpotifyService],\n})\nexport class SpotifyModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SpotifyTokenPair.html":{"url":"classes/SpotifyTokenPair.html","title":"class - SpotifyTokenPair","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SpotifyTokenPair\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/spotify/spotifyauth.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                epoch_expiry\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                tokens\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        epoch_expiry\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/spotify/spotifyauth.service.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        tokens\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SpotifyTokenResponse\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/spotify/spotifyauth.service.ts:62\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, Injectable } from \"@nestjs/common\";\nimport * as Spotify from \"@spotify/web-api-ts-sdk\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { HttpService } from \"@nestjs/axios\";\nimport { firstValueFrom } from \"rxjs\";\nimport { Prisma } from \"@prisma/client\";\nimport * as PrismaTypes from \"@prisma/client\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\nimport { JWTPayload } from \"../auth.service\";\nimport * as jwt from \"jsonwebtoken\";\nimport { IsNumber, IsObject, IsString, ValidateNested } from \"class-validator\";\nimport { ApiProperty } from \"@nestjs/swagger\";\nimport { AxiosError } from \"axios\";\nimport { Type } from \"class-transformer\";\nimport { TasksService } from \"../../tasks/tasks.service\";\n\nexport class SpotifyTokenResponse {\n\t@ApiProperty()\n\t@IsString()\n\taccess_token: string;\n\n\t@ApiProperty()\n\t@IsString()\n\ttoken_type: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tscope: string;\n\n\t@ApiProperty()\n\t@IsNumber()\n\texpires_in: number;\n\n\t@ApiProperty()\n\t@IsString()\n\trefresh_token: string;\n}\n\nexport class SpotifyTokenRefreshResponse {\n\t@ApiProperty()\n\t@IsString()\n\taccess_token: string;\n\n\t@ApiProperty()\n\t@IsString()\n\ttoken_type: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tscope: string;\n\n\t@ApiProperty()\n\t@IsNumber()\n\texpires_in: number;\n}\n\nexport class SpotifyTokenPair {\n\t@ApiProperty()\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => SpotifyTokenResponse)\n\ttokens: SpotifyTokenResponse;\n\n\t@ApiProperty()\n\t@IsNumber()\n\tepoch_expiry: number;\n}\n\nexport class SpotifyCallbackResponse {\n\t@ApiProperty()\n\t@IsString()\n\ttoken: string;\n\n\t@ApiProperty()\n\t@IsObject()\n\t@Type(() => SpotifyTokenPair)\n\t@ValidateNested()\n\tspotifyTokens: SpotifyTokenPair;\n}\n\n@Injectable()\nexport class SpotifyAuthService {\n\tprivate clientId: string;\n\tprivate clientSecret: string;\n\t// private redirectUri: string;\n\tprivate authHeader: string;\n\t// private selfAuthorisedAPI: Spotify.SpotifyApi;\n\n\tconstructor(\n\t\tprivate readonly configService: ConfigService,\n\t\tprivate readonly httpService: HttpService,\n\t\tprivate readonly prisma: PrismaService,\n\t\t// private readonly dbUtils: DbUtilsService,\n\t\tprivate readonly tasksService: TasksService,\n\t) {\n\t\tconst clientId = this.configService.get(\"SPOTIFY_CLIENT_ID\");\n\t\tif (!clientId) {\n\t\t\tthrow new Error(\"Missing SPOTIFY_CLIENT_ID\");\n\t\t}\n\t\tthis.clientId = clientId;\n\n\t\tconst clientSecret = this.configService.get(\n\t\t\t\"SPOTIFY_CLIENT_SECRET\",\n\t\t);\n\t\tif (!clientSecret) {\n\t\t\tthrow new Error(\"Missing SPOTIFY_CLIENT_SECRET\");\n\t\t}\n\t\tthis.clientSecret = clientSecret;\n\n\t\t// const redirectUri = this.configService.get(\"SPOTIFY_REDIRECT_URI\");\n\t\t// if (!redirectUri) {\n\t\t// \tthrow new Error(\"Missing SPOTIFY_REDIRECT_URI\");\n\t\t// }\n\t\t// this.redirectUri = redirectUri;\n\n\t\tthis.authHeader = Buffer.from(\n\t\t\t`${this.clientId}:${this.clientSecret}`,\n\t\t).toString(\"base64\");\n\n\t\t// this.selfAuthorisedAPI = Spotify.SpotifyApi.withClientCredentials(\n\t\t// \tthis.clientId,\n\t\t// \tthis.clientSecret,\n\t\t// );\n\t}\n\n\t//how state is constructed in frontend\n\t/*\n\tconst makeStateVariable = (redirectURI: string) => {\n\t\tconst state = {\n\t\t\t\"unique-pre-padding\": generateRandom(10),\n\t\t\t\"expo-redirect\": redirectURI,\n\t\t\t\"ip-address\": utils.API_BASE_NO_PORT,\n\t\t\t\"redirect-used\": SPOTIFY_REDIRECT_URI,\n\t\t\t\"unique-post-padding\": generateRandom(10),\n\t\t};\n\t\tconst bytes = new TextEncoder().encode(JSON.stringify(state));\n\t\tconst b64 = utils.bytesToBase64(bytes);\n\t\treturn b64;\n\t};\n\t*/\n\tgetStateObject(state: string): {\n\t\t\"expo-redirect\": string;\n\t\t\"ip-address\": string;\n\t\t\"redirect-used\": string;\n\t} {\n\t\tconst decodedState = Buffer.from(state, \"base64\").toString(\"utf-8\");\n\t\tconst obj = JSON.parse(decodedState);\n\t\tif (!obj[\"expo-redirect\"]) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Invalid state parameter. Does not contain expo-redirect\",\n\t\t\t);\n\t\t}\n\t\tif (!obj[\"ip-address\"]) {\n\t\t\tthrow new Error(\"Invalid state parameter. Does not contain ip-address\");\n\t\t}\n\t\tif (!obj[\"redirect-used\"]) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Invalid state parameter. Does not contain redirect-used\",\n\t\t\t);\n\t\t}\n\t\treturn obj;\n\t}\n\n\tasync exchangeCodeForToken(\n\t\tcode: string,\n\t\tstate: string,\n\t): Promise {\n\t\ttry {\n\t\t\t//Step 0: Get the redirect URI\n\t\t\tconst stateObj = this.getStateObject(state);\n\t\t\tconst redirectURI = stateObj[\"expo-redirect\"];\n\n\t\t\t// Step 1: Create the request options object\n\t\t\tconst requestOptions = {\n\t\t\t\turl: \"https://accounts.spotify.com/api/token\",\n\t\t\t\tbody: {\n\t\t\t\t\tgrant_type: \"authorization_code\",\n\t\t\t\t\tcode: code,\n\t\t\t\t\tredirect_uri: decodeURIComponent(redirectURI),\n\t\t\t\t},\n\t\t\t\theaders: {\n\t\t\t\t\t\"Content-Type\": \"application/x-www-form-urlencoded\",\n\t\t\t\t\tAuthorization: `Basic ${this.authHeader}`,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\t// Step 2: Log or inspect the request options\n\t\t\tconsole.log(\"Request options:\", requestOptions);\n\n\t\t\t// Step 3: Send the request\n\t\t\tconst response = await firstValueFrom(\n\t\t\t\tthis.httpService.post(\n\t\t\t\t\trequestOptions.url,\n\t\t\t\t\tnew URLSearchParams(requestOptions.body).toString(), // Convert the body to URL-encoded string\n\t\t\t\t\t{ headers: requestOptions.headers },\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tconsole.log(response);\n\n\t\t\tif (!response || !response.data) {\n\t\t\t\tthrow new Error(\"Failed to exchange code for token\");\n\t\t\t}\n\n\t\t\treturn response.data as SpotifyTokenResponse;\n\t\t} catch (err) {\n\t\t\tif (err instanceof AxiosError) {\n\t\t\t\tconsole.log(err.response?.data);\n\t\t\t}\n\t\t\tthrow new Error(\"Failed to exchange code for token\");\n\t\t}\n\t}\n\n\tasync refreshAccessToken(\n\t\ttk: SpotifyTokenResponse,\n\t): Promise {\n\t\ttry {\n\t\t\tconst response = await firstValueFrom(\n\t\t\t\tthis.httpService.post(\n\t\t\t\t\t\"https://accounts.spotify.com/api/token\",\n\t\t\t\t\t{\n\t\t\t\t\t\tgrant_type: \"refresh_token\",\n\t\t\t\t\t\trefresh_token: tk.refresh_token,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\"Content-Type\": \"application/x-www-form-urlencoded\",\n\t\t\t\t\t\t\tAuthorization: `Basic ${this.authHeader}`,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tif (!response || !response.data) {\n\t\t\t\tthrow new Error(\"Failed to refresh token\");\n\t\t\t}\n\n\t\t\tconst refreshToken: SpotifyTokenRefreshResponse =\n\t\t\t\tresponse.data as SpotifyTokenRefreshResponse;\n\t\t\tconst result: SpotifyTokenResponse = {\n\t\t\t\taccess_token: refreshToken.access_token,\n\t\t\t\ttoken_type: refreshToken.token_type,\n\t\t\t\tscope: refreshToken.scope,\n\t\t\t\texpires_in: refreshToken.expires_in,\n\t\t\t\trefresh_token: tk.refresh_token,\n\t\t\t};\n\t\t\treturn result;\n\t\t} catch (err) {\n\t\t\tif (err instanceof AxiosError) {\n\t\t\t\tconsole.log(err.response?.data);\n\t\t\t}\n\t\t\tthrow new Error(\"Failed to refresh token\");\n\t\t}\n\t}\n\n\tasync generateJWT(user: PrismaTypes.users): Promise {\n\t\tconst secretKey = this.configService.get(\"JWT_SECRET_KEY\");\n\t\tconst expiresIn = this.configService.get(\"JWT_EXPIRATION_TIME\");\n\n\t\tif (!secretKey || secretKey === undefined || secretKey === \"\") {\n\t\t\tthrow new Error(\"Missing JWT secret key\");\n\t\t}\n\n\t\tif (!expiresIn || expiresIn === undefined || expiresIn === \"\") {\n\t\t\tthrow new Error(\"Missing JWT expiration time\");\n\t\t}\n\n\t\tif (!user || user === null) {\n\t\t\tthrow new Error(\"Cannot generate JWT for null user\");\n\t\t}\n\n\t\tif (!user.email || user.email === null) {\n\t\t\tthrow new Error(\"Cannot generate JWT for user without email\");\n\t\t}\n\n\t\tconst payload: JWTPayload = {\n\t\t\tusername: user.username,\n\t\t\tid: user.user_id,\n\t\t\temail: user.email,\n\t\t};\n\n\t\tconst token = jwt.sign(payload, secretKey, { expiresIn });\n\t\treturn token;\n\t}\n\n\tasync getSelf(token: SpotifyTokenResponse): Promise {\n\t\tlet attempts = 0;\n\t\tlet error: Error | undefined;\n\t\tfor (let i = 0; i  setTimeout(resolve, 5000 * attempts));\n\t\t\t}\n\t\t}\n\t\tif (error) {\n\t\t\tthrow error;\n\t\t}\n\t\tthrow new Error(\"Failed to get user profile\");\n\t}\n\n\tasync createUser(tk: SpotifyTokenPair): Promise {\n\t\tif (tk.epoch_expiry  user.email === spotifyUser.email,\n\t\t);\n\t\tif (!existingUser) {\n\t\t\t//try to find by username\n\t\t\texistingUser = users.find((user) => user.username === spotifyUser.id);\n\t\t}\n\t\tif (existingUser) {\n\t\t\treturn existingUser;\n\t\t}\n\n\t\tconst user: Prisma.usersCreateInput = {\n\t\t\tusername: spotifyUser.id,\n\t\t\tfull_name: spotifyUser.display_name,\n\t\t\texternal_links: {\n\t\t\t\tspotify: [spotifyUser.external_urls.spotify],\n\t\t\t},\n\t\t\temail: spotifyUser.email,\n\t\t};\n\n\t\tif (spotifyUser.images && spotifyUser.images.length > 0) {\n\t\t\t//find largest profile picture\n\t\t\tlet largest = -1;\n\t\t\tfor (let i = 0; i  largest\n\t\t\t\t) {\n\t\t\t\t\tlargest = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet imageURL = \"\";\n\t\t\tif (\n\t\t\t\tlargest >= 0 &&\n\t\t\t\tspotifyUser.images[largest] !== undefined &&\n\t\t\t\tspotifyUser.images[largest] !== undefined\n\t\t\t) {\n\t\t\t\timageURL = spotifyUser.images[largest]?.url || \"\";\n\t\t\t}\n\n\t\t\tconsole.log(\"spotifyUser image : \" + spotifyUser.images);\n\t\t\tconsole.log(\"\\nimage size: \" + largest);\n\n\t\t\tuser.profile_picture =\n\t\t\t\timageURL !== \"\"\n\t\t\t\t\t? imageURL\n\t\t\t\t\t: \"https://example.com/default-profile-picture.png\";\n\t\t}\n\n\t\ttry {\n\t\t\tconst response = await this.prisma.users.create({ data: user });\n\t\t\tconsole.log(response);\n\t\t\tawait this.tasksService.addImportLibraryTask(tk, response.user_id);\n\t\t\treturn response;\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\tthrow new Error(\"Failed to create user\");\n\t\t}\n\t}\n\n\tasync saveUserSpotifyTokens(tk: SpotifyTokenPair, userID: string) {\n\t\tconst user = await this.prisma.users.findFirst({\n\t\t\twhere: { user_id: userID },\n\t\t\tinclude: { authentication: true },\n\t\t});\n\n\t\tif (!user) {\n\t\t\tthrow new Error(\"User not found\");\n\t\t}\n\n\t\ttry {\n\t\t\tif (user.authentication !== null) {\n\t\t\t\tawait this.prisma.authentication.update({\n\t\t\t\t\twhere: { user_id: user.user_id },\n\t\t\t\t\tdata: {\n\t\t\t\t\t\ttoken: JSON.stringify(tk),\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tawait this.prisma.authentication.create({\n\t\t\t\t\tdata: {\n\t\t\t\t\t\ttoken: JSON.stringify(tk),\n\t\t\t\t\t\tuser_id: user.user_id,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\tthrow new Error(\"Failed to save tokens\");\n\t\t}\n\t}\n\n\tasync getSpotifyTokens(userID: string): Promise {\n\t\tconst tokens = await this.prisma.authentication.findFirst({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\n\t\tif (!tokens) {\n\t\t\tthrow new HttpException(\"User's Spotify tokens not found\", 404);\n\t\t}\n\n\t\tconst tk: SpotifyTokenPair = JSON.parse(tokens.token) as SpotifyTokenPair;\n\t\tif (tk.epoch_expiry \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SpotifyTokenRefreshResponse.html":{"url":"classes/SpotifyTokenRefreshResponse.html","title":"class - SpotifyTokenRefreshResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SpotifyTokenRefreshResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/spotify/spotifyauth.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                access_token\n                            \n                            \n                                    \n                                    \n                                expires_in\n                            \n                            \n                                    \n                                    \n                                scope\n                            \n                            \n                                    \n                                    \n                                token_type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        access_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/spotify/spotifyauth.service.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/spotify/spotifyauth.service.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        scope\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/spotify/spotifyauth.service.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        token_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/spotify/spotifyauth.service.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, Injectable } from \"@nestjs/common\";\nimport * as Spotify from \"@spotify/web-api-ts-sdk\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { HttpService } from \"@nestjs/axios\";\nimport { firstValueFrom } from \"rxjs\";\nimport { Prisma } from \"@prisma/client\";\nimport * as PrismaTypes from \"@prisma/client\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\nimport { JWTPayload } from \"../auth.service\";\nimport * as jwt from \"jsonwebtoken\";\nimport { IsNumber, IsObject, IsString, ValidateNested } from \"class-validator\";\nimport { ApiProperty } from \"@nestjs/swagger\";\nimport { AxiosError } from \"axios\";\nimport { Type } from \"class-transformer\";\nimport { TasksService } from \"../../tasks/tasks.service\";\n\nexport class SpotifyTokenResponse {\n\t@ApiProperty()\n\t@IsString()\n\taccess_token: string;\n\n\t@ApiProperty()\n\t@IsString()\n\ttoken_type: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tscope: string;\n\n\t@ApiProperty()\n\t@IsNumber()\n\texpires_in: number;\n\n\t@ApiProperty()\n\t@IsString()\n\trefresh_token: string;\n}\n\nexport class SpotifyTokenRefreshResponse {\n\t@ApiProperty()\n\t@IsString()\n\taccess_token: string;\n\n\t@ApiProperty()\n\t@IsString()\n\ttoken_type: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tscope: string;\n\n\t@ApiProperty()\n\t@IsNumber()\n\texpires_in: number;\n}\n\nexport class SpotifyTokenPair {\n\t@ApiProperty()\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => SpotifyTokenResponse)\n\ttokens: SpotifyTokenResponse;\n\n\t@ApiProperty()\n\t@IsNumber()\n\tepoch_expiry: number;\n}\n\nexport class SpotifyCallbackResponse {\n\t@ApiProperty()\n\t@IsString()\n\ttoken: string;\n\n\t@ApiProperty()\n\t@IsObject()\n\t@Type(() => SpotifyTokenPair)\n\t@ValidateNested()\n\tspotifyTokens: SpotifyTokenPair;\n}\n\n@Injectable()\nexport class SpotifyAuthService {\n\tprivate clientId: string;\n\tprivate clientSecret: string;\n\t// private redirectUri: string;\n\tprivate authHeader: string;\n\t// private selfAuthorisedAPI: Spotify.SpotifyApi;\n\n\tconstructor(\n\t\tprivate readonly configService: ConfigService,\n\t\tprivate readonly httpService: HttpService,\n\t\tprivate readonly prisma: PrismaService,\n\t\t// private readonly dbUtils: DbUtilsService,\n\t\tprivate readonly tasksService: TasksService,\n\t) {\n\t\tconst clientId = this.configService.get(\"SPOTIFY_CLIENT_ID\");\n\t\tif (!clientId) {\n\t\t\tthrow new Error(\"Missing SPOTIFY_CLIENT_ID\");\n\t\t}\n\t\tthis.clientId = clientId;\n\n\t\tconst clientSecret = this.configService.get(\n\t\t\t\"SPOTIFY_CLIENT_SECRET\",\n\t\t);\n\t\tif (!clientSecret) {\n\t\t\tthrow new Error(\"Missing SPOTIFY_CLIENT_SECRET\");\n\t\t}\n\t\tthis.clientSecret = clientSecret;\n\n\t\t// const redirectUri = this.configService.get(\"SPOTIFY_REDIRECT_URI\");\n\t\t// if (!redirectUri) {\n\t\t// \tthrow new Error(\"Missing SPOTIFY_REDIRECT_URI\");\n\t\t// }\n\t\t// this.redirectUri = redirectUri;\n\n\t\tthis.authHeader = Buffer.from(\n\t\t\t`${this.clientId}:${this.clientSecret}`,\n\t\t).toString(\"base64\");\n\n\t\t// this.selfAuthorisedAPI = Spotify.SpotifyApi.withClientCredentials(\n\t\t// \tthis.clientId,\n\t\t// \tthis.clientSecret,\n\t\t// );\n\t}\n\n\t//how state is constructed in frontend\n\t/*\n\tconst makeStateVariable = (redirectURI: string) => {\n\t\tconst state = {\n\t\t\t\"unique-pre-padding\": generateRandom(10),\n\t\t\t\"expo-redirect\": redirectURI,\n\t\t\t\"ip-address\": utils.API_BASE_NO_PORT,\n\t\t\t\"redirect-used\": SPOTIFY_REDIRECT_URI,\n\t\t\t\"unique-post-padding\": generateRandom(10),\n\t\t};\n\t\tconst bytes = new TextEncoder().encode(JSON.stringify(state));\n\t\tconst b64 = utils.bytesToBase64(bytes);\n\t\treturn b64;\n\t};\n\t*/\n\tgetStateObject(state: string): {\n\t\t\"expo-redirect\": string;\n\t\t\"ip-address\": string;\n\t\t\"redirect-used\": string;\n\t} {\n\t\tconst decodedState = Buffer.from(state, \"base64\").toString(\"utf-8\");\n\t\tconst obj = JSON.parse(decodedState);\n\t\tif (!obj[\"expo-redirect\"]) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Invalid state parameter. Does not contain expo-redirect\",\n\t\t\t);\n\t\t}\n\t\tif (!obj[\"ip-address\"]) {\n\t\t\tthrow new Error(\"Invalid state parameter. Does not contain ip-address\");\n\t\t}\n\t\tif (!obj[\"redirect-used\"]) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Invalid state parameter. Does not contain redirect-used\",\n\t\t\t);\n\t\t}\n\t\treturn obj;\n\t}\n\n\tasync exchangeCodeForToken(\n\t\tcode: string,\n\t\tstate: string,\n\t): Promise {\n\t\ttry {\n\t\t\t//Step 0: Get the redirect URI\n\t\t\tconst stateObj = this.getStateObject(state);\n\t\t\tconst redirectURI = stateObj[\"expo-redirect\"];\n\n\t\t\t// Step 1: Create the request options object\n\t\t\tconst requestOptions = {\n\t\t\t\turl: \"https://accounts.spotify.com/api/token\",\n\t\t\t\tbody: {\n\t\t\t\t\tgrant_type: \"authorization_code\",\n\t\t\t\t\tcode: code,\n\t\t\t\t\tredirect_uri: decodeURIComponent(redirectURI),\n\t\t\t\t},\n\t\t\t\theaders: {\n\t\t\t\t\t\"Content-Type\": \"application/x-www-form-urlencoded\",\n\t\t\t\t\tAuthorization: `Basic ${this.authHeader}`,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\t// Step 2: Log or inspect the request options\n\t\t\tconsole.log(\"Request options:\", requestOptions);\n\n\t\t\t// Step 3: Send the request\n\t\t\tconst response = await firstValueFrom(\n\t\t\t\tthis.httpService.post(\n\t\t\t\t\trequestOptions.url,\n\t\t\t\t\tnew URLSearchParams(requestOptions.body).toString(), // Convert the body to URL-encoded string\n\t\t\t\t\t{ headers: requestOptions.headers },\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tconsole.log(response);\n\n\t\t\tif (!response || !response.data) {\n\t\t\t\tthrow new Error(\"Failed to exchange code for token\");\n\t\t\t}\n\n\t\t\treturn response.data as SpotifyTokenResponse;\n\t\t} catch (err) {\n\t\t\tif (err instanceof AxiosError) {\n\t\t\t\tconsole.log(err.response?.data);\n\t\t\t}\n\t\t\tthrow new Error(\"Failed to exchange code for token\");\n\t\t}\n\t}\n\n\tasync refreshAccessToken(\n\t\ttk: SpotifyTokenResponse,\n\t): Promise {\n\t\ttry {\n\t\t\tconst response = await firstValueFrom(\n\t\t\t\tthis.httpService.post(\n\t\t\t\t\t\"https://accounts.spotify.com/api/token\",\n\t\t\t\t\t{\n\t\t\t\t\t\tgrant_type: \"refresh_token\",\n\t\t\t\t\t\trefresh_token: tk.refresh_token,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\"Content-Type\": \"application/x-www-form-urlencoded\",\n\t\t\t\t\t\t\tAuthorization: `Basic ${this.authHeader}`,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tif (!response || !response.data) {\n\t\t\t\tthrow new Error(\"Failed to refresh token\");\n\t\t\t}\n\n\t\t\tconst refreshToken: SpotifyTokenRefreshResponse =\n\t\t\t\tresponse.data as SpotifyTokenRefreshResponse;\n\t\t\tconst result: SpotifyTokenResponse = {\n\t\t\t\taccess_token: refreshToken.access_token,\n\t\t\t\ttoken_type: refreshToken.token_type,\n\t\t\t\tscope: refreshToken.scope,\n\t\t\t\texpires_in: refreshToken.expires_in,\n\t\t\t\trefresh_token: tk.refresh_token,\n\t\t\t};\n\t\t\treturn result;\n\t\t} catch (err) {\n\t\t\tif (err instanceof AxiosError) {\n\t\t\t\tconsole.log(err.response?.data);\n\t\t\t}\n\t\t\tthrow new Error(\"Failed to refresh token\");\n\t\t}\n\t}\n\n\tasync generateJWT(user: PrismaTypes.users): Promise {\n\t\tconst secretKey = this.configService.get(\"JWT_SECRET_KEY\");\n\t\tconst expiresIn = this.configService.get(\"JWT_EXPIRATION_TIME\");\n\n\t\tif (!secretKey || secretKey === undefined || secretKey === \"\") {\n\t\t\tthrow new Error(\"Missing JWT secret key\");\n\t\t}\n\n\t\tif (!expiresIn || expiresIn === undefined || expiresIn === \"\") {\n\t\t\tthrow new Error(\"Missing JWT expiration time\");\n\t\t}\n\n\t\tif (!user || user === null) {\n\t\t\tthrow new Error(\"Cannot generate JWT for null user\");\n\t\t}\n\n\t\tif (!user.email || user.email === null) {\n\t\t\tthrow new Error(\"Cannot generate JWT for user without email\");\n\t\t}\n\n\t\tconst payload: JWTPayload = {\n\t\t\tusername: user.username,\n\t\t\tid: user.user_id,\n\t\t\temail: user.email,\n\t\t};\n\n\t\tconst token = jwt.sign(payload, secretKey, { expiresIn });\n\t\treturn token;\n\t}\n\n\tasync getSelf(token: SpotifyTokenResponse): Promise {\n\t\tlet attempts = 0;\n\t\tlet error: Error | undefined;\n\t\tfor (let i = 0; i  setTimeout(resolve, 5000 * attempts));\n\t\t\t}\n\t\t}\n\t\tif (error) {\n\t\t\tthrow error;\n\t\t}\n\t\tthrow new Error(\"Failed to get user profile\");\n\t}\n\n\tasync createUser(tk: SpotifyTokenPair): Promise {\n\t\tif (tk.epoch_expiry  user.email === spotifyUser.email,\n\t\t);\n\t\tif (!existingUser) {\n\t\t\t//try to find by username\n\t\t\texistingUser = users.find((user) => user.username === spotifyUser.id);\n\t\t}\n\t\tif (existingUser) {\n\t\t\treturn existingUser;\n\t\t}\n\n\t\tconst user: Prisma.usersCreateInput = {\n\t\t\tusername: spotifyUser.id,\n\t\t\tfull_name: spotifyUser.display_name,\n\t\t\texternal_links: {\n\t\t\t\tspotify: [spotifyUser.external_urls.spotify],\n\t\t\t},\n\t\t\temail: spotifyUser.email,\n\t\t};\n\n\t\tif (spotifyUser.images && spotifyUser.images.length > 0) {\n\t\t\t//find largest profile picture\n\t\t\tlet largest = -1;\n\t\t\tfor (let i = 0; i  largest\n\t\t\t\t) {\n\t\t\t\t\tlargest = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet imageURL = \"\";\n\t\t\tif (\n\t\t\t\tlargest >= 0 &&\n\t\t\t\tspotifyUser.images[largest] !== undefined &&\n\t\t\t\tspotifyUser.images[largest] !== undefined\n\t\t\t) {\n\t\t\t\timageURL = spotifyUser.images[largest]?.url || \"\";\n\t\t\t}\n\n\t\t\tconsole.log(\"spotifyUser image : \" + spotifyUser.images);\n\t\t\tconsole.log(\"\\nimage size: \" + largest);\n\n\t\t\tuser.profile_picture =\n\t\t\t\timageURL !== \"\"\n\t\t\t\t\t? imageURL\n\t\t\t\t\t: \"https://example.com/default-profile-picture.png\";\n\t\t}\n\n\t\ttry {\n\t\t\tconst response = await this.prisma.users.create({ data: user });\n\t\t\tconsole.log(response);\n\t\t\tawait this.tasksService.addImportLibraryTask(tk, response.user_id);\n\t\t\treturn response;\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\tthrow new Error(\"Failed to create user\");\n\t\t}\n\t}\n\n\tasync saveUserSpotifyTokens(tk: SpotifyTokenPair, userID: string) {\n\t\tconst user = await this.prisma.users.findFirst({\n\t\t\twhere: { user_id: userID },\n\t\t\tinclude: { authentication: true },\n\t\t});\n\n\t\tif (!user) {\n\t\t\tthrow new Error(\"User not found\");\n\t\t}\n\n\t\ttry {\n\t\t\tif (user.authentication !== null) {\n\t\t\t\tawait this.prisma.authentication.update({\n\t\t\t\t\twhere: { user_id: user.user_id },\n\t\t\t\t\tdata: {\n\t\t\t\t\t\ttoken: JSON.stringify(tk),\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tawait this.prisma.authentication.create({\n\t\t\t\t\tdata: {\n\t\t\t\t\t\ttoken: JSON.stringify(tk),\n\t\t\t\t\t\tuser_id: user.user_id,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\tthrow new Error(\"Failed to save tokens\");\n\t\t}\n\t}\n\n\tasync getSpotifyTokens(userID: string): Promise {\n\t\tconst tokens = await this.prisma.authentication.findFirst({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\n\t\tif (!tokens) {\n\t\t\tthrow new HttpException(\"User's Spotify tokens not found\", 404);\n\t\t}\n\n\t\tconst tk: SpotifyTokenPair = JSON.parse(tokens.token) as SpotifyTokenPair;\n\t\tif (tk.epoch_expiry \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SpotifyTokenResponse.html":{"url":"classes/SpotifyTokenResponse.html","title":"class - SpotifyTokenResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SpotifyTokenResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/spotify/spotifyauth.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                access_token\n                            \n                            \n                                    \n                                    \n                                expires_in\n                            \n                            \n                                    \n                                    \n                                refresh_token\n                            \n                            \n                                    \n                                    \n                                scope\n                            \n                            \n                                    \n                                    \n                                token_type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        access_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/spotify/spotifyauth.service.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/spotify/spotifyauth.service.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refresh_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/spotify/spotifyauth.service.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        scope\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/spotify/spotifyauth.service.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        token_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/spotify/spotifyauth.service.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, Injectable } from \"@nestjs/common\";\nimport * as Spotify from \"@spotify/web-api-ts-sdk\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { HttpService } from \"@nestjs/axios\";\nimport { firstValueFrom } from \"rxjs\";\nimport { Prisma } from \"@prisma/client\";\nimport * as PrismaTypes from \"@prisma/client\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\nimport { JWTPayload } from \"../auth.service\";\nimport * as jwt from \"jsonwebtoken\";\nimport { IsNumber, IsObject, IsString, ValidateNested } from \"class-validator\";\nimport { ApiProperty } from \"@nestjs/swagger\";\nimport { AxiosError } from \"axios\";\nimport { Type } from \"class-transformer\";\nimport { TasksService } from \"../../tasks/tasks.service\";\n\nexport class SpotifyTokenResponse {\n\t@ApiProperty()\n\t@IsString()\n\taccess_token: string;\n\n\t@ApiProperty()\n\t@IsString()\n\ttoken_type: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tscope: string;\n\n\t@ApiProperty()\n\t@IsNumber()\n\texpires_in: number;\n\n\t@ApiProperty()\n\t@IsString()\n\trefresh_token: string;\n}\n\nexport class SpotifyTokenRefreshResponse {\n\t@ApiProperty()\n\t@IsString()\n\taccess_token: string;\n\n\t@ApiProperty()\n\t@IsString()\n\ttoken_type: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tscope: string;\n\n\t@ApiProperty()\n\t@IsNumber()\n\texpires_in: number;\n}\n\nexport class SpotifyTokenPair {\n\t@ApiProperty()\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => SpotifyTokenResponse)\n\ttokens: SpotifyTokenResponse;\n\n\t@ApiProperty()\n\t@IsNumber()\n\tepoch_expiry: number;\n}\n\nexport class SpotifyCallbackResponse {\n\t@ApiProperty()\n\t@IsString()\n\ttoken: string;\n\n\t@ApiProperty()\n\t@IsObject()\n\t@Type(() => SpotifyTokenPair)\n\t@ValidateNested()\n\tspotifyTokens: SpotifyTokenPair;\n}\n\n@Injectable()\nexport class SpotifyAuthService {\n\tprivate clientId: string;\n\tprivate clientSecret: string;\n\t// private redirectUri: string;\n\tprivate authHeader: string;\n\t// private selfAuthorisedAPI: Spotify.SpotifyApi;\n\n\tconstructor(\n\t\tprivate readonly configService: ConfigService,\n\t\tprivate readonly httpService: HttpService,\n\t\tprivate readonly prisma: PrismaService,\n\t\t// private readonly dbUtils: DbUtilsService,\n\t\tprivate readonly tasksService: TasksService,\n\t) {\n\t\tconst clientId = this.configService.get(\"SPOTIFY_CLIENT_ID\");\n\t\tif (!clientId) {\n\t\t\tthrow new Error(\"Missing SPOTIFY_CLIENT_ID\");\n\t\t}\n\t\tthis.clientId = clientId;\n\n\t\tconst clientSecret = this.configService.get(\n\t\t\t\"SPOTIFY_CLIENT_SECRET\",\n\t\t);\n\t\tif (!clientSecret) {\n\t\t\tthrow new Error(\"Missing SPOTIFY_CLIENT_SECRET\");\n\t\t}\n\t\tthis.clientSecret = clientSecret;\n\n\t\t// const redirectUri = this.configService.get(\"SPOTIFY_REDIRECT_URI\");\n\t\t// if (!redirectUri) {\n\t\t// \tthrow new Error(\"Missing SPOTIFY_REDIRECT_URI\");\n\t\t// }\n\t\t// this.redirectUri = redirectUri;\n\n\t\tthis.authHeader = Buffer.from(\n\t\t\t`${this.clientId}:${this.clientSecret}`,\n\t\t).toString(\"base64\");\n\n\t\t// this.selfAuthorisedAPI = Spotify.SpotifyApi.withClientCredentials(\n\t\t// \tthis.clientId,\n\t\t// \tthis.clientSecret,\n\t\t// );\n\t}\n\n\t//how state is constructed in frontend\n\t/*\n\tconst makeStateVariable = (redirectURI: string) => {\n\t\tconst state = {\n\t\t\t\"unique-pre-padding\": generateRandom(10),\n\t\t\t\"expo-redirect\": redirectURI,\n\t\t\t\"ip-address\": utils.API_BASE_NO_PORT,\n\t\t\t\"redirect-used\": SPOTIFY_REDIRECT_URI,\n\t\t\t\"unique-post-padding\": generateRandom(10),\n\t\t};\n\t\tconst bytes = new TextEncoder().encode(JSON.stringify(state));\n\t\tconst b64 = utils.bytesToBase64(bytes);\n\t\treturn b64;\n\t};\n\t*/\n\tgetStateObject(state: string): {\n\t\t\"expo-redirect\": string;\n\t\t\"ip-address\": string;\n\t\t\"redirect-used\": string;\n\t} {\n\t\tconst decodedState = Buffer.from(state, \"base64\").toString(\"utf-8\");\n\t\tconst obj = JSON.parse(decodedState);\n\t\tif (!obj[\"expo-redirect\"]) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Invalid state parameter. Does not contain expo-redirect\",\n\t\t\t);\n\t\t}\n\t\tif (!obj[\"ip-address\"]) {\n\t\t\tthrow new Error(\"Invalid state parameter. Does not contain ip-address\");\n\t\t}\n\t\tif (!obj[\"redirect-used\"]) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Invalid state parameter. Does not contain redirect-used\",\n\t\t\t);\n\t\t}\n\t\treturn obj;\n\t}\n\n\tasync exchangeCodeForToken(\n\t\tcode: string,\n\t\tstate: string,\n\t): Promise {\n\t\ttry {\n\t\t\t//Step 0: Get the redirect URI\n\t\t\tconst stateObj = this.getStateObject(state);\n\t\t\tconst redirectURI = stateObj[\"expo-redirect\"];\n\n\t\t\t// Step 1: Create the request options object\n\t\t\tconst requestOptions = {\n\t\t\t\turl: \"https://accounts.spotify.com/api/token\",\n\t\t\t\tbody: {\n\t\t\t\t\tgrant_type: \"authorization_code\",\n\t\t\t\t\tcode: code,\n\t\t\t\t\tredirect_uri: decodeURIComponent(redirectURI),\n\t\t\t\t},\n\t\t\t\theaders: {\n\t\t\t\t\t\"Content-Type\": \"application/x-www-form-urlencoded\",\n\t\t\t\t\tAuthorization: `Basic ${this.authHeader}`,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\t// Step 2: Log or inspect the request options\n\t\t\tconsole.log(\"Request options:\", requestOptions);\n\n\t\t\t// Step 3: Send the request\n\t\t\tconst response = await firstValueFrom(\n\t\t\t\tthis.httpService.post(\n\t\t\t\t\trequestOptions.url,\n\t\t\t\t\tnew URLSearchParams(requestOptions.body).toString(), // Convert the body to URL-encoded string\n\t\t\t\t\t{ headers: requestOptions.headers },\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tconsole.log(response);\n\n\t\t\tif (!response || !response.data) {\n\t\t\t\tthrow new Error(\"Failed to exchange code for token\");\n\t\t\t}\n\n\t\t\treturn response.data as SpotifyTokenResponse;\n\t\t} catch (err) {\n\t\t\tif (err instanceof AxiosError) {\n\t\t\t\tconsole.log(err.response?.data);\n\t\t\t}\n\t\t\tthrow new Error(\"Failed to exchange code for token\");\n\t\t}\n\t}\n\n\tasync refreshAccessToken(\n\t\ttk: SpotifyTokenResponse,\n\t): Promise {\n\t\ttry {\n\t\t\tconst response = await firstValueFrom(\n\t\t\t\tthis.httpService.post(\n\t\t\t\t\t\"https://accounts.spotify.com/api/token\",\n\t\t\t\t\t{\n\t\t\t\t\t\tgrant_type: \"refresh_token\",\n\t\t\t\t\t\trefresh_token: tk.refresh_token,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\"Content-Type\": \"application/x-www-form-urlencoded\",\n\t\t\t\t\t\t\tAuthorization: `Basic ${this.authHeader}`,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tif (!response || !response.data) {\n\t\t\t\tthrow new Error(\"Failed to refresh token\");\n\t\t\t}\n\n\t\t\tconst refreshToken: SpotifyTokenRefreshResponse =\n\t\t\t\tresponse.data as SpotifyTokenRefreshResponse;\n\t\t\tconst result: SpotifyTokenResponse = {\n\t\t\t\taccess_token: refreshToken.access_token,\n\t\t\t\ttoken_type: refreshToken.token_type,\n\t\t\t\tscope: refreshToken.scope,\n\t\t\t\texpires_in: refreshToken.expires_in,\n\t\t\t\trefresh_token: tk.refresh_token,\n\t\t\t};\n\t\t\treturn result;\n\t\t} catch (err) {\n\t\t\tif (err instanceof AxiosError) {\n\t\t\t\tconsole.log(err.response?.data);\n\t\t\t}\n\t\t\tthrow new Error(\"Failed to refresh token\");\n\t\t}\n\t}\n\n\tasync generateJWT(user: PrismaTypes.users): Promise {\n\t\tconst secretKey = this.configService.get(\"JWT_SECRET_KEY\");\n\t\tconst expiresIn = this.configService.get(\"JWT_EXPIRATION_TIME\");\n\n\t\tif (!secretKey || secretKey === undefined || secretKey === \"\") {\n\t\t\tthrow new Error(\"Missing JWT secret key\");\n\t\t}\n\n\t\tif (!expiresIn || expiresIn === undefined || expiresIn === \"\") {\n\t\t\tthrow new Error(\"Missing JWT expiration time\");\n\t\t}\n\n\t\tif (!user || user === null) {\n\t\t\tthrow new Error(\"Cannot generate JWT for null user\");\n\t\t}\n\n\t\tif (!user.email || user.email === null) {\n\t\t\tthrow new Error(\"Cannot generate JWT for user without email\");\n\t\t}\n\n\t\tconst payload: JWTPayload = {\n\t\t\tusername: user.username,\n\t\t\tid: user.user_id,\n\t\t\temail: user.email,\n\t\t};\n\n\t\tconst token = jwt.sign(payload, secretKey, { expiresIn });\n\t\treturn token;\n\t}\n\n\tasync getSelf(token: SpotifyTokenResponse): Promise {\n\t\tlet attempts = 0;\n\t\tlet error: Error | undefined;\n\t\tfor (let i = 0; i  setTimeout(resolve, 5000 * attempts));\n\t\t\t}\n\t\t}\n\t\tif (error) {\n\t\t\tthrow error;\n\t\t}\n\t\tthrow new Error(\"Failed to get user profile\");\n\t}\n\n\tasync createUser(tk: SpotifyTokenPair): Promise {\n\t\tif (tk.epoch_expiry  user.email === spotifyUser.email,\n\t\t);\n\t\tif (!existingUser) {\n\t\t\t//try to find by username\n\t\t\texistingUser = users.find((user) => user.username === spotifyUser.id);\n\t\t}\n\t\tif (existingUser) {\n\t\t\treturn existingUser;\n\t\t}\n\n\t\tconst user: Prisma.usersCreateInput = {\n\t\t\tusername: spotifyUser.id,\n\t\t\tfull_name: spotifyUser.display_name,\n\t\t\texternal_links: {\n\t\t\t\tspotify: [spotifyUser.external_urls.spotify],\n\t\t\t},\n\t\t\temail: spotifyUser.email,\n\t\t};\n\n\t\tif (spotifyUser.images && spotifyUser.images.length > 0) {\n\t\t\t//find largest profile picture\n\t\t\tlet largest = -1;\n\t\t\tfor (let i = 0; i  largest\n\t\t\t\t) {\n\t\t\t\t\tlargest = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet imageURL = \"\";\n\t\t\tif (\n\t\t\t\tlargest >= 0 &&\n\t\t\t\tspotifyUser.images[largest] !== undefined &&\n\t\t\t\tspotifyUser.images[largest] !== undefined\n\t\t\t) {\n\t\t\t\timageURL = spotifyUser.images[largest]?.url || \"\";\n\t\t\t}\n\n\t\t\tconsole.log(\"spotifyUser image : \" + spotifyUser.images);\n\t\t\tconsole.log(\"\\nimage size: \" + largest);\n\n\t\t\tuser.profile_picture =\n\t\t\t\timageURL !== \"\"\n\t\t\t\t\t? imageURL\n\t\t\t\t\t: \"https://example.com/default-profile-picture.png\";\n\t\t}\n\n\t\ttry {\n\t\t\tconst response = await this.prisma.users.create({ data: user });\n\t\t\tconsole.log(response);\n\t\t\tawait this.tasksService.addImportLibraryTask(tk, response.user_id);\n\t\t\treturn response;\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\tthrow new Error(\"Failed to create user\");\n\t\t}\n\t}\n\n\tasync saveUserSpotifyTokens(tk: SpotifyTokenPair, userID: string) {\n\t\tconst user = await this.prisma.users.findFirst({\n\t\t\twhere: { user_id: userID },\n\t\t\tinclude: { authentication: true },\n\t\t});\n\n\t\tif (!user) {\n\t\t\tthrow new Error(\"User not found\");\n\t\t}\n\n\t\ttry {\n\t\t\tif (user.authentication !== null) {\n\t\t\t\tawait this.prisma.authentication.update({\n\t\t\t\t\twhere: { user_id: user.user_id },\n\t\t\t\t\tdata: {\n\t\t\t\t\t\ttoken: JSON.stringify(tk),\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tawait this.prisma.authentication.create({\n\t\t\t\t\tdata: {\n\t\t\t\t\t\ttoken: JSON.stringify(tk),\n\t\t\t\t\t\tuser_id: user.user_id,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\tthrow new Error(\"Failed to save tokens\");\n\t\t}\n\t}\n\n\tasync getSpotifyTokens(userID: string): Promise {\n\t\tconst tokens = await this.prisma.authentication.findFirst({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\n\t\tif (!tokens) {\n\t\t\tthrow new HttpException(\"User's Spotify tokens not found\", 404);\n\t\t}\n\n\t\tconst tk: SpotifyTokenPair = JSON.parse(tokens.token) as SpotifyTokenPair;\n\t\tif (tk.epoch_expiry \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SpotifyUser.html":{"url":"classes/SpotifyUser.html","title":"class - SpotifyUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SpotifyUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            archive/spotify/models/user.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                country\n                            \n                            \n                                    Optional\n                                display_name\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                explicit_content\n                            \n                            \n                                external_urls\n                            \n                            \n                                    Optional\n                                followers\n                            \n                            \n                                href\n                            \n                            \n                                id\n                            \n                            \n                                images\n                            \n                            \n                                    Optional\n                                product\n                            \n                            \n                                type\n                            \n                            \n                                uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: literal type)\n                    \n                \n                        \n                            \n                                Defined in archive/spotify/models/user.ts:65\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in archive/spotify/models/user.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        display_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in archive/spotify/models/user.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in archive/spotify/models/user.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        explicit_content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ExplicitContentSettings\n\n                    \n                \n                    \n                        \n                                Defined in archive/spotify/models/user.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        external_urls\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ExternalUrls\n\n                    \n                \n                    \n                        \n                                Defined in archive/spotify/models/user.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        followers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Followers\n\n                    \n                \n                    \n                        \n                                Defined in archive/spotify/models/user.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        href\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in archive/spotify/models/user.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in archive/spotify/models/user.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        images\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Image[]\n\n                    \n                \n                    \n                        \n                                Defined in archive/spotify/models/user.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        product\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in archive/spotify/models/user.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in archive/spotify/models/user.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in archive/spotify/models/user.ts:65\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export type ExplicitContentSettings = {\n\tfilter_enabled: boolean;\n\tfilter_locked: boolean;\n};\n\nexport type ExternalUrls = {\n\tspotify: string;\n};\n\nexport type Followers = {\n\thref: string;\n\ttotal: number;\n};\n\nexport type Image = {\n\turl: string;\n\theight: number;\n\twidth: number;\n};\n\nexport class SpotifyUser {\n\tcountry?: string;\n\tdisplay_name?: string;\n\temail: string;\n\texplicit_content?: ExplicitContentSettings;\n\texternal_urls: ExternalUrls;\n\tfollowers?: Followers;\n\thref: string;\n\tid: string;\n\timages: Image[];\n\tproduct?: string;\n\ttype: string;\n\turi: string;\n\n\tconstructor(data: {\n\t\tcountry?: string;\n\t\tdisplay_name?: string;\n\t\temail: string;\n\t\texplicit_content?: ExplicitContentSettings;\n\t\texternal_urls: ExternalUrls;\n\t\tfollowers: Followers;\n\t\thref: string;\n\t\tid: string;\n\t\timages: Image[];\n\t\tproduct?: string;\n\t\ttype: string;\n\t\turi: string;\n\t}) {\n\t\tthis.country = data.country;\n\t\tthis.display_name = data.display_name;\n\t\tthis.email = data.email;\n\t\tthis.explicit_content = data.explicit_content;\n\t\tthis.external_urls = data.external_urls;\n\t\tthis.followers = data.followers;\n\t\tthis.href = data.href;\n\t\tthis.id = data.id;\n\t\tthis.images = data.images;\n\t\tthis.product = data.product;\n\t\tthis.type = data.type;\n\t\tthis.uri = data.uri;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksModule.html":{"url":"modules/TasksModule.html","title":"module - TasksModule","body":"\n                   \n\n\n\n\n    Modules\n    TasksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_imports\n\n\n\ncluster_TasksModule_providers\n\n\n\ncluster_TasksModule_exports\n\n\n\n\nBullBoardModule\n\nBullBoardModule\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nBullBoardModule->TasksModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nTasksModule -->\n\nPrismaModule->TasksModule\n\n\n\n\n\nSpotifyModule\n\nSpotifyModule\n\nTasksModule -->\n\nSpotifyModule->TasksModule\n\n\n\n\n\nTasksService \n\nTasksService \n\nTasksService  -->\n\nTasksModule->TasksService \n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tasks/tasks.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TasksService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BullBoardModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            SpotifyModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TasksService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // tasks.module.ts\nimport { Module } from \"@nestjs/common\";\nimport { TasksService } from \"./tasks.service\";\nimport { TasksProcessor } from \"./tasks.processor\";\nimport { PrismaModule } from \"../../prisma/prisma.module\";\nimport { SpotifyModule } from \"../spotify/spotify.module\";\nimport { BullBoardModule } from \"../bull-board/bull-board.module\";\nimport { BullModule } from \"@nestjs/bull\";\nimport { MurLockModule } from \"murlock\";\n\n@Module({\n\timports: [\n\t\tBullModule.registerQueue({\n\t\t\tname: \"task-queue\",\n\t\t}),\n\t\tPrismaModule,\n\t\tSpotifyModule,\n\t\tBullBoardModule,\n\t\tMurLockModule,\n\t],\n\tproviders: [TasksService, TasksProcessor],\n\texports: [TasksService],\n})\nexport class TasksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TasksProcessor.html":{"url":"classes/TasksProcessor.html","title":"class - TasksProcessor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TasksProcessor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/tasks.processor.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                fixSpotifyInfo\n                            \n                            \n                                    \n                                    Async\n                                handleTask\n                            \n                            \n                                    \n                                    Async\n                                importUserLibrary\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(spotifyService: SpotifyService, prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/tasks/tasks.processor.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        spotifyService\n                                                  \n                                                        \n                                                                        SpotifyService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        fixSpotifyInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    fixSpotifyInfo(job: Job)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Process('fix-spotify-info')\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.processor.ts:187\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                job\n                                            \n                                                        Job\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleTask(job: Job)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Process('process-task')\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.processor.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                job\n                                            \n                                                        Job\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        importUserLibrary\n                        \n                    \n                \n            \n            \n                \n                        \n                    importUserLibrary(job: Job)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Process('import-library')\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.processor.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                job\n                                            \n                                                        Job\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Processor, Process } from \"@nestjs/bull\";\nimport { Job } from \"bull\";\nimport { SpotifyTokenPair } from \"../auth/spotify/spotifyauth.service\";\nimport { SpotifyService } from \"../spotify/spotify.service\";\nimport { Prisma } from \"@prisma/client\";\nimport * as PrismaTypes from \"@prisma/client\";\nimport * as Spotify from \"@spotify/web-api-ts-sdk\";\nimport { PrismaService } from \"../../prisma/prisma.service\";\n// import { MurLockService } from \"murlock\";\n\n@Processor(\"task-queue\")\nexport class TasksProcessor {\n\tconstructor(\n\t\tprivate readonly spotifyService: SpotifyService,\n\t\tprivate readonly prisma: PrismaService, // private readonly murLockService: MurLockService,\n\t) {}\n\n\t@Process(\"process-task\")\n\tasync handleTask(job: Job) {\n\t\tconsole.log(\"Processing task:\", job.data);\n\t\t// Your background task processing logic here\n\t}\n\n\t@Process(\"import-library\")\n\tasync importUserLibrary(job: Job) {\n\t\tconsole.log(`${job.name} job started`);\n\t\tconst tk: SpotifyTokenPair = job.data.token;\n\t\tconst userID: string = job.data.user_id;\n\t\tif (new Date().getTime() > tk.epoch_expiry) {\n\t\t\tthrow new Error(\"Token has expired\");\n\t\t}\n\t\tconsole.log(`Importing user library for user: ${userID}`);\n\n\t\tconst userPlaylists: PrismaTypes.playlist[] =\n\t\t\tawait this.prisma.playlist.findMany({\n\t\t\t\twhere: {\n\t\t\t\t\tuser_id: userID,\n\t\t\t\t},\n\t\t\t});\n\n\t\t// handle user's liked songs\n\t\tlet start = new Date().valueOf();\n\t\tconsole.log(`Getting liked songs...`);\n\t\tconst likedSongs: Spotify.SavedTrack[] =\n\t\t\tawait this.spotifyService.getAllLikedSongs(userID);\n\t\tconsole.log(`Got liked songs in ${new Date().valueOf() - start}ms`);\n\t\tstart = new Date().valueOf();\n\t\tconst likedTracks: Spotify.Track[] = likedSongs.map((track) => track.track);\n\t\tconst likedSongsDB: PrismaTypes.song[] =\n\t\t\tawait this.spotifyService.addTracksToDB(likedTracks);\n\t\tconsole.log(`Added liked songs to DB in ${new Date().valueOf() - start}ms`);\n\t\tconst likedSongIDs: string[] = likedSongsDB.map((song) => song.song_id);\n\t\tconst likedSongsPlaylistInDB: PrismaTypes.playlist | undefined =\n\t\t\tuserPlaylists.find(\n\t\t\t\t(userPlaylist) =>\n\t\t\t\t\tuserPlaylist.name === \"Liked Songs (generated by TuneIn)\",\n\t\t\t);\n\t\tif (likedSongsPlaylistInDB) {\n\t\t\tawait this.prisma.playlist.update({\n\t\t\t\twhere: {\n\t\t\t\t\tplaylist_id: likedSongsPlaylistInDB.playlist_id,\n\t\t\t\t},\n\t\t\t\tdata: {\n\t\t\t\t\tplaylist: likedSongIDs,\n\t\t\t\t},\n\t\t\t});\n\t\t} else {\n\t\t\tconst likedSongsPlaylist: Prisma.playlistCreateInput = {\n\t\t\t\tname: \"Liked Songs (generated by TuneIn)\",\n\t\t\t\tusers: {\n\t\t\t\t\tconnect: { user_id: userID },\n\t\t\t\t},\n\t\t\t\tplaylist: likedSongIDs,\n\t\t\t};\n\t\t\tawait this.prisma.playlist.create({\n\t\t\t\tdata: likedSongsPlaylist,\n\t\t\t});\n\t\t}\n\t\tconsole.log(`Finished importing liked songs`);\n\n\t\t// handle user's playlists\n\t\tconsole.log(`Getting user playlists...`);\n\t\tstart = new Date().valueOf();\n\t\tconst playlists: Spotify.SimplifiedPlaylist[] =\n\t\t\tawait this.spotifyService.getUserPlaylists(userID);\n\t\tconsole.log(`Got user playlists in ${new Date().valueOf() - start}ms`);\n\t\tconsole.log(`Getting playlist tracks...`);\n\t\tstart = new Date().valueOf();\n\t\tconst playlistTracksPromises = playlists.map(async (playlist) => {\n\t\t\treturn this.spotifyService.getUserPlaylistTracks(userID, playlist.id);\n\t\t});\n\t\tconst playlistTracks: Spotify.Track[][] = await Promise.all(\n\t\t\tplaylistTracksPromises,\n\t\t).then((tracks) => {\n\t\t\tconst totalTracks: number = tracks.reduce(\n\t\t\t\t(acc, val) => acc + val.length,\n\t\t\t\t0,\n\t\t\t);\n\t\t\tconsole.log(\n\t\t\t\t`Got all playlist tracks (${totalTracks}) for ${\n\t\t\t\t\tplaylists.length\n\t\t\t\t} playlists in ${new Date().valueOf() - start}ms`,\n\t\t\t);\n\t\t\treturn tracks;\n\t\t});\n\t\tconsole.log(`Adding playlist songs to DB...`);\n\t\tstart = new Date().valueOf();\n\t\tawait this.spotifyService.addTracksToDB(playlistTracks.flat());\n\t\tconsole.log(\n\t\t\t`Added all playlist songs to DB in ${new Date().valueOf() - start}ms`,\n\t\t);\n\t\tconsole.log(`Creating playlists in DB...`);\n\t\tstart = new Date().valueOf();\n\t\tconst playlistsCreationPromises: Prisma.PrismaPromise[] =\n\t\t\t[];\n\t\tfor (let i = 0; i  track.id,\n\t\t\t);\n\t\t\tconst userPlaylistInDB: PrismaTypes.playlist | undefined =\n\t\t\t\tuserPlaylists.find(\n\t\t\t\t\t(userPlaylist) => userPlaylist.name === playlist.name,\n\t\t\t\t);\n\t\t\tif (userPlaylistInDB) {\n\t\t\t\tplaylistsCreationPromises.push(\n\t\t\t\t\tthis.prisma.playlist.update({\n\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\tplaylist_id: userPlaylistInDB.playlist_id,\n\t\t\t\t\t\t\tdescription: playlist.description,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tplaylist: playlistTrackIDs,\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst newPlaylist: Prisma.playlistCreateInput = {\n\t\t\t\t\tname: playlist.name,\n\t\t\t\t\tusers: {\n\t\t\t\t\t\tconnect: { user_id: userID },\n\t\t\t\t\t},\n\t\t\t\t\tplaylist: playlistTrackIDs,\n\t\t\t\t\tdescription: playlist.description,\n\t\t\t\t};\n\t\t\t\tplaylistsCreationPromises.push(\n\t\t\t\t\tthis.prisma.playlist.create({\n\t\t\t\t\t\tdata: newPlaylist,\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tawait Promise.all(playlistsCreationPromises);\n\t\tconsole.log(\n\t\t\t`Finished creating playlists in DB in ${new Date().valueOf() - start}ms`,\n\t\t);\n\t}\n\n\t// @Process(\"get-room-spotify-info\")\n\t// async getRoomSpotifyInfo(job: Job) {\n\t// \tconsole.log(`${job.name} job started`);\n\t// \tconst {\n\t// \t\troom,\n\t// \t}: {\n\t// \t\troom: ActiveRoom;\n\t// \t} = job.data;\n\t// \tconst api: Spotify.SpotifyApi = this.spotifyService.getUserlessAPI();\n\t// \tconsole.log(\n\t// \t\t`Getting Spotify info for room '${room.room.room_name}' (${room.room.roomID})`,\n\t// \t);\n\t// \tconst start = new Date().valueOf();\n\t// \tawait room.getSpotifyInfo(api, this.prisma, this.murLockService);\n\t// \tawait room.flushtoDB(\n\t// \t\tthis.spotifyService,\n\t// \t\tthis.prisma,\n\t// \t\tthis.murLockService,\n\t// \t);\n\t// \tconst end = new Date().valueOf();\n\t// \tconst milliseconds = end - start;\n\t// \tconsole.log(\n\t// \t\t`Finished getting Spotify info for room '${room.room.room_name}' (${room.room.roomID}) in ${milliseconds}ms`,\n\t// \t);\n\t// }\n\n\t@Process(\"fix-spotify-info\")\n\tasync fixSpotifyInfo(job: Job) {\n\t\tconsole.log(`${job.name} job started`);\n\t\tawait this.spotifyService.fixSpotifyInfo();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/tasks.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addImportLibraryTask\n                            \n                            \n                                    Async\n                                addTask\n                            \n                            \n                                    \n                                    Async\n                                fixSpotifyInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskQueue: Queue)\n                    \n                \n                        \n                            \n                                Defined in src/tasks/tasks.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskQueue\n                                                  \n                                                        \n                                                                    Queue\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addImportLibraryTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    addImportLibraryTask(tk: SpotifyTokenPair, userID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tk\n                                            \n                                                            SpotifyTokenPair\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    addTask(taskData: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                taskData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        fixSpotifyInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    fixSpotifyInfo()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('0 0 * * * *')\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectQueue } from \"@nestjs/bull\";\nimport { Queue } from \"bull\";\nimport { SpotifyTokenPair } from \"../auth/spotify/spotifyauth.service\";\n// import { ActiveRoom } from \"../modules/rooms/roomqueue/roomqueue.service\";\n// import * as Spotify from \"@spotify/web-api-ts-sdk\";\nimport { Cron } from \"@nestjs/schedule\";\n\n@Injectable()\nexport class TasksService {\n\tconstructor(@InjectQueue(\"task-queue\") private readonly taskQueue: Queue) {}\n\n\tasync addTask(taskData: any) {\n\t\tawait this.taskQueue.add(\"process-task\", taskData);\n\t}\n\n\tasync addImportLibraryTask(\n\t\ttk: SpotifyTokenPair,\n\t\tuserID: string,\n\t): Promise {\n\t\tawait this.taskQueue.add(\"import-library\", { token: tk, user_id: userID });\n\t}\n\n\t// async getRoomSpotifyInfo(room: ActiveRoom) {\n\t// \tawait this.taskQueue.add(\"get-room-spotify-info\", {\n\t// \t\troom: room,\n\t// \t});\n\t// }\n\n\t@Cron(\"0 0 * * * *\") // Run this task every hour\n\tasync fixSpotifyInfo() {\n\t\tconsole.log(\"Running 'fixSpotifyInfo' based on CRON job\");\n\t\tawait this.taskQueue.add(\"fix-spotify-info\", {});\n\t\tconsole.log(\"Added 'fixSpotifyInfo' task to queue\");\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRoomDto.html":{"url":"classes/UpdateRoomDto.html","title":"class - UpdateRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/dto/updateroomdto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateRoomDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/swagger\";\nimport { CreateRoomDto } from \"./createroomdto\";\n\nexport class UpdateRoomDto extends PartialType(CreateRoomDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            archive/modules/users/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/swagger\";\nimport { CreateUserDto } from \"./create-user.dto\";\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto-1.html":{"url":"classes/UpdateUserDto-1.html","title":"class - UpdateUserDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            archive/modules/users/dto/updateuser.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(UserDto)\n            \n\n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in archive/modules/users/dto/updateuser.dto.ts:4\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/swagger\";\nimport { UserDto } from \"./user.dto\";\n\nexport class UpdateUserDto extends PartialType(UserDto) {\n\t[key: string]: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto-2.html":{"url":"classes/UpdateUserDto-2.html","title":"class - UpdateUserDto-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/updateuser.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(UserDto)\n            \n\n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/dto/updateuser.dto.ts:4\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/swagger\";\nimport { UserDto } from \"./user.dto\";\n\nexport class UpdateUserDto extends PartialType(UserDto) {\n\t[key: string]: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserProfileDto.html":{"url":"classes/UpdateUserProfileDto.html","title":"class - UpdateUserProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            archive/modules/profile/dto/updateuserprofile.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(UserProfileDto)\n            \n\n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in archive/modules/profile/dto/updateuserprofile.dto.ts:4\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/swagger\";\nimport { UserProfileDto } from \"./userprofile.dto\";\n\nexport class UpdateUserProfileDto extends PartialType(UserProfileDto) {\n\t[key: string]: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserActionDto.html":{"url":"classes/UserActionDto.html","title":"class - UserActionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserActionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/rooms.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                userID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The user ID of the user that the action was performed on', type: 'string', example: '123e4567-e89b-12d3-a456-426614174000', format: 'uuid'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/rooms.service.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from \"@nestjs/common\";\nimport { RoomDto } from \"./dto/room.dto\";\nimport { UpdateRoomDto } from \"./dto/updateroomdto\";\nimport { UserDto } from \"../users/dto/user.dto\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\nimport * as PrismaTypes from \"@prisma/client\";\nimport { Prisma } from \"@prisma/client\";\nimport { DtoGenService } from \"../dto-gen/dto-gen.service\";\nimport {\n\tDbUtilsService,\n\tFullyQualifiedRoom,\n} from \"../db-utils/db-utils.service\";\nimport { LiveChatMessageDto } from \"../../live/dto/livechatmessage.dto\";\nimport { EmojiReactionDto } from \"../../live/dto/emojireaction.dto\";\nimport { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString } from \"class-validator\";\nimport { SpotifyService } from \"../../spotify/spotify.service\";\nimport { RoomQueueService, ActiveRoom } from \"./roomqueue/roomqueue.service\";\nimport { RoomSongDto } from \"./dto/roomsong.dto\";\nimport { kmeans } from \"ml-kmeans\";\nimport { KMeansResult } from \"ml-kmeans/lib/KMeansResult\";\nimport * as Spotify from \"@spotify/web-api-ts-sdk\";\nimport { Server } from \"socket.io\";\nimport { DirectMessageDto } from \"../users/dto/dm.dto\";\nimport { DmUsersService } from \"../../live/dmusers/dmusers.service\";\n\nexport class UserActionDto {\n\t@ApiProperty({\n\t\tdescription: \"The user ID of the user that the action was performed on\",\n\t\ttype: \"string\",\n\t\texample: \"123e4567-e89b-12d3-a456-426614174000\",\n\t\tformat: \"uuid\",\n\t})\n\t@IsString()\n\tuserID: string;\n}\n\n@Injectable()\nexport class RoomsService {\n\t// DUMBroomQueues: Map = new Map();\n\tpublic server: Server | undefined;\n\n\tconstructor(\n\t\tprivate readonly prisma: PrismaService,\n\t\tprivate readonly dtogen: DtoGenService,\n\t\tprivate readonly dbUtils: DbUtilsService,\n\t\tprivate readonly spotifyService: SpotifyService,\n\t\tprivate readonly roomQueueService: RoomQueueService,\n\t\tprivate readonly dmUsersService: DmUsersService,\n\t) {}\n\n\tasync getNewRooms(limit = -1): Promise {\n\t\tconst rooms: FullyQualifiedRoom[] = await this.prisma.room.findMany({\n\t\t\twhere: {\n\t\t\t\tNOT: {\n\t\t\t\t\tpublic_room: null,\n\t\t\t\t},\n\t\t\t},\n\t\t\tinclude: {\n\t\t\t\tchild_room_child_room_parent_room_idToroom: true,\n\t\t\t\tparticipate: true,\n\t\t\t\tprivate_room: true,\n\t\t\t\tpublic_room: true,\n\t\t\t\tscheduled_room: true,\n\t\t\t},\n\t\t\torderBy: {\n\t\t\t\tdate_created: \"desc\",\n\t\t\t},\n\t\t});\n\t\tif (rooms.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tif (limit > 0) {\n\t\t\trooms.splice(limit);\n\t\t}\n\t\treturn await this.dtogen.generateMultipleRoomDtoFromRoom(rooms);\n\t}\n\n\tasync getRoomInfo(roomID: string): Promise {\n\t\tconsole.log(\"Getting room info for room\", roomID);\n\t\tconst room: FullyQualifiedRoom | null = await this.prisma.room.findFirst({\n\t\t\twhere: {\n\t\t\t\troom_id: roomID,\n\t\t\t},\n\t\t\tinclude: {\n\t\t\t\tchild_room_child_room_parent_room_idToroom: true,\n\t\t\t\tparticipate: true,\n\t\t\t\tprivate_room: true,\n\t\t\t\tpublic_room: true,\n\t\t\t\tscheduled_room: true,\n\t\t\t},\n\t\t});\n\t\tif (room === null) {\n\t\t\tthrow new Error(\"Room does not exist\");\n\t\t}\n\t\t// filter out null values\n\t\tconst rooms: RoomDto[] = await this.dtogen.generateMultipleRoomDtoFromRoom([\n\t\t\troom,\n\t\t]);\n\t\tconst result: RoomDto = rooms[0];\n\t\tconst currentSong: RoomSongDto | undefined = await this.getCurrentSong(\n\t\t\troomID,\n\t\t);\n\t\tif (currentSong) {\n\t\t\tresult.current_song = currentSong;\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync getMultipleRoomInfo(roomIDs: string[]): Promise {\n\t\tconsole.log(\"Getting room info for rooms\", roomIDs);\n\t\tconst rooms: FullyQualifiedRoom[] =\n\t\t\tawait this.dbUtils.getFullyQualifiedRooms(roomIDs);\n\t\troomIDs.map((roomID) => {\n\t\t\tif (!rooms.find((r) => r.room_id === roomID)) {\n\t\t\t\tthrow new HttpException(\n\t\t\t\t\t\"Room with id '\" + roomID + \"' does not exist\",\n\t\t\t\t\tHttpStatus.NOT_FOUND,\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t\tconst result: RoomDto[] = await this.dtogen.generateMultipleRoomDtoFromRoom(\n\t\t\trooms,\n\t\t);\n\t\tconst currentSongs: (RoomSongDto | undefined)[] =\n\t\t\tthis.getCurrentSongs(roomIDs);\n\t\tfor (let i = 0; i  {\n\t\tif (!(await this.dbUtils.userExists(userID))) {\n\t\t\tthrow new HttpException(\"User does not exist\", HttpStatus.NOT_FOUND);\n\t\t}\n\n\t\tconst r = await this.prisma.room.findFirst({\n\t\t\twhere: {\n\t\t\t\troom_id: roomID,\n\t\t\t},\n\t\t\tinclude: {\n\t\t\t\tprivate_room: true,\n\t\t\t\tpublic_room: true,\n\t\t\t\tscheduled_room: true,\n\t\t\t},\n\t\t});\n\n\t\tif (!r) {\n\t\t\tthrow new HttpException(\"Room does not exist\", HttpStatus.NOT_FOUND);\n\t\t}\n\n\t\tif (r.room_creator !== userID) {\n\t\t\tthrow new HttpException(\n\t\t\t\t\"User is not the owner of the room\",\n\t\t\t\tHttpStatus.FORBIDDEN,\n\t\t\t);\n\t\t}\n\n\t\tconst updatedRoom: Prisma.roomUpdateInput = {\n\t\t\troom_id: roomID,\n\t\t};\n\n\t\tif (updateRoomDto.room_name !== undefined) {\n\t\t\tupdatedRoom.name = updateRoomDto.room_name;\n\t\t}\n\n\t\tif (updateRoomDto.description) {\n\t\t\tupdatedRoom.description = updateRoomDto.description;\n\t\t}\n\n\t\tif (updateRoomDto.room_image !== undefined) {\n\t\t\tupdatedRoom.playlist_photo = updateRoomDto.room_image;\n\t\t}\n\n\t\tif (updateRoomDto.room_size !== undefined) {\n\t\t\tupdatedRoom.room_size = updateRoomDto.room_size as unknown as number;\n\t\t}\n\n\t\tif (updateRoomDto.tags !== undefined) {\n\t\t\tupdatedRoom.tags = updateRoomDto.tags;\n\t\t}\n\n\t\tif (updateRoomDto.has_explicit_content !== undefined) {\n\t\t\tupdatedRoom.explicit = updateRoomDto.has_explicit_content;\n\t\t}\n\n\t\tif (updateRoomDto.has_nsfw_content !== undefined) {\n\t\t\tupdatedRoom.nsfw = updateRoomDto.has_nsfw_content;\n\t\t}\n\n\t\tif (updateRoomDto.language) {\n\t\t\tupdatedRoom.room_language = updateRoomDto.language;\n\t\t}\n\n\t\tif (updateRoomDto.is_temporary !== undefined) {\n\t\t\tupdatedRoom.is_temporary = updateRoomDto.is_temporary;\n\t\t}\n\n\t\tif (updateRoomDto.is_scheduled !== undefined) {\n\t\t\tif (updateRoomDto.is_scheduled) {\n\t\t\t\t// update if the room already is a scheduled room, else create a new scheduled room\n\t\t\t\tupdatedRoom.scheduled_room = {\n\t\t\t\t\tupsert: {\n\t\t\t\t\t\tcreate: {\n\t\t\t\t\t\t\tstart_date: updateRoomDto.start_date ?? null,\n\t\t\t\t\t\t\tend_date: updateRoomDto.end_date ?? null,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tupdate: {\n\t\t\t\t\t\t\tstart_date: updateRoomDto.start_date ?? null,\n\t\t\t\t\t\t\tend_date: updateRoomDto.end_date ?? null,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tif (r.scheduled_room) {\n\t\t\t\t\tupdatedRoom.scheduled_room = {\n\t\t\t\t\t\tdelete: true,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (updateRoomDto.is_private !== undefined) {\n\t\t\tif (updateRoomDto.is_private) {\n\t\t\t\tif (r.public_room) {\n\t\t\t\t\tupdatedRoom.public_room = {\n\t\t\t\t\t\tdelete: true,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tupdatedRoom.private_room = {\n\t\t\t\t\tupsert: {\n\t\t\t\t\t\tcreate: {},\n\t\t\t\t\t\tupdate: {},\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tif (r.private_room) {\n\t\t\t\t\tupdatedRoom.private_room = {\n\t\t\t\t\t\tdelete: true,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tupdatedRoom.public_room = {\n\t\t\t\t\tupsert: {\n\t\t\t\t\t\tcreate: {},\n\t\t\t\t\t\tupdate: {},\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tconst room: FullyQualifiedRoom = await this.prisma.room.update({\n\t\t\t\twhere: {\n\t\t\t\t\troom_id: roomID,\n\t\t\t\t},\n\t\t\t\tdata: updatedRoom,\n\t\t\t\tinclude: {\n\t\t\t\t\tchild_room_child_room_parent_room_idToroom: true,\n\t\t\t\t\tparticipate: true,\n\t\t\t\t\tprivate_room: true,\n\t\t\t\t\tpublic_room: true,\n\t\t\t\t\tscheduled_room: true,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tconst rooms = await this.dtogen.generateMultipleRoomDtoFromRoom([room]);\n\t\t\treturn rooms[0];\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Error updating room info:\", error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync deleteRoom(room_id: string, room_creator: string): Promise {\n\t\t// Check if the room exists\n\t\t// delete the room user is the owner\n\t\tlet isDeleted = false;\n\t\ttry {\n\t\t\tawait this.prisma.room\n\t\t\t\t.delete({\n\t\t\t\t\twhere: { room_id, room_creator },\n\t\t\t\t})\n\t\t\t\t.then((room) => {\n\t\t\t\t\tconsole.log(\"deleting\", room);\n\t\t\t\t\tisDeleted = true;\n\t\t\t\t});\n\t\t\t// console.log(isDeleted);\n\t\t\treturn isDeleted;\n\t\t} catch (error) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tasync joinRoom(_room_id: string, user_id: string): Promise {\n\t\tconsole.log(\"user\", user_id, \"joining room\", _room_id);\n\t\ttry {\n\t\t\t// check if room creator blocked the user\n\t\t\tconst _room = await this.prisma.room.findFirst({\n\t\t\t\twhere: {\n\t\t\t\t\troom_id: _room_id,\n\t\t\t\t},\n\t\t\t\tinclude: {\n\t\t\t\t\tparticipate: true,\n\t\t\t\t\tbanned: true,\n\t\t\t\t},\n\t\t\t});\n\t\t\tif (!_room || _room === null) {\n\t\t\t\tthrow new HttpException(\"Room does not exist\", HttpStatus.NOT_FOUND);\n\t\t\t}\n\t\t\t// check if room is at capacity\n\t\t\tif (_room.participate.length >= Number(_room.room_size)) {\n\t\t\t\tthrow new HttpException(\"Room is at capacity\", HttpStatus.FORBIDDEN);\n\t\t\t}\n\n\t\t\tif (_room.banned.find((banned) => banned.user_id === user_id)) {\n\t\t\t\tthrow new HttpException(\n\t\t\t\t\t\"User is banned from joining the room\",\n\t\t\t\t\tHttpStatus.FORBIDDEN,\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst blocked = await this.prisma.blocked.findFirst({\n\t\t\t\twhere: {\n\t\t\t\t\tblocker: _room.room_creator,\n\t\t\t\t\tblockee: user_id,\n\t\t\t\t},\n\t\t\t});\n\t\t\tif (blocked) {\n\t\t\t\tthrow new HttpException(\n\t\t\t\t\t\"User is blocked from joining the room\",\n\t\t\t\t\tHttpStatus.FORBIDDEN,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Check if the user is already in the room\n\t\t\tconst room = await this.prisma.participate.findFirst({\n\t\t\t\twhere: {\n\t\t\t\t\tuser_id: user_id,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tif (room) {\n\t\t\t\tawait this.leaveRoom(room.room_id, user_id);\n\t\t\t}\n\t\t\t// Add the user to the room\n\t\t\tawait this.prisma.participate.create({\n\t\t\t\tdata: {\n\t\t\t\t\troom_id: _room_id,\n\t\t\t\t\tuser_id: user_id,\n\t\t\t\t},\n\t\t\t});\n\t\t\t// add user to the user_activity table\n\t\t\tawait this.prisma.user_activity.create({\n\t\t\t\tdata: {\n\t\t\t\t\troom_id: _room_id,\n\t\t\t\t\tuser_id: user_id,\n\t\t\t\t\troom_join_time: new Date(),\n\t\t\t\t},\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Error joining room:\", error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync leaveRoom(room_id: string, user_id: string): Promise {\n\t\t// TODO: Implement logic to leave room\n\t\tconsole.log(\"user\", user_id, \"leaving room\", room_id);\n\t\ttry {\n\t\t\t// Check if the user is already in the room\n\t\t\tconst room = await this.prisma.participate.findFirst({\n\t\t\t\twhere: {\n\t\t\t\t\troom_id: room_id,\n\t\t\t\t\tuser_id: user_id,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\t// If the user is already in the room, return false\n\t\t\tif (!room || room === null) {\n\t\t\t\tthrow new HttpException(\n\t\t\t\t\t\"User is not in the room\",\n\t\t\t\t\tHttpStatus.NOT_FOUND,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Add the user to the room\n\t\t\tawait this.prisma.participate.delete({\n\t\t\t\twhere: {\n\t\t\t\t\tparticipate_id: room.participate_id,\n\t\t\t\t},\n\t\t\t});\n\t\t\tconst user = await this.prisma.user_activity.findFirst({\n\t\t\t\twhere: {\n\t\t\t\t\troom_id: room_id,\n\t\t\t\t\tuser_id: user_id,\n\t\t\t\t\troom_leave_time: null,\n\t\t\t\t},\n\t\t\t});\n\t\t\tif (!user || user === null) {\n\t\t\t\tthrow new HttpException(\n\t\t\t\t\t\"User is not in the room\",\n\t\t\t\t\tHttpStatus.NOT_FOUND,\n\t\t\t\t);\n\t\t\t}\n\t\t\t// if the user has been successfully remove from the room, then update the room_leave_time to the user_activity table\n\t\t\tawait this.prisma.user_activity.update({\n\t\t\t\twhere: {\n\t\t\t\t\tactivity_id: user.activity_id,\n\t\t\t\t},\n\t\t\t\tdata: {\n\t\t\t\t\troom_leave_time: new Date(),\n\t\t\t\t},\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Error leaving room:\", error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync getNumFollowers(\n\t\tuser_id: string,\n\t\tgetFollowers: boolean,\n\t): Promise {\n\t\ttry {\n\t\t\tconst _where: object = getFollowers\n\t\t\t\t? {\n\t\t\t\t\t\tfollower: user_id,\n\t\t\t\t  }\n\t\t\t\t: {\n\t\t\t\t\t\tfollowee: user_id,\n\t\t\t\t  };\n\t\t\tconst followers: number = await this.prisma.follows.count({\n\t\t\t\twhere: _where,\n\t\t\t});\n\t\t\treturn followers;\n\t\t} catch (error) {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tasync getRoomUsers(room_id: string): Promise {\n\t\ttry {\n\t\t\t// write a query to get all the users in the room\n\t\t\tconst users = await this.prisma.participate.findMany({\n\t\t\t\twhere: {\n\t\t\t\t\troom_id: room_id,\n\t\t\t\t},\n\t\t\t\tinclude: {\n\t\t\t\t\tusers: true,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\t// map all the users to the userdto\n\t\t\tconsole.log(\"Users in room\", users);\n\t\t\tconst ids: string[] = users.map((user) => user.user_id);\n\t\t\tconst userDtos: UserDto[] = await this.dtogen.generateMultipleUserDto(\n\t\t\t\tids,\n\t\t\t);\n\t\t\treturn userDtos;\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Error getting room users:\", error);\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tasync getRoomUserCount(room_id: string): Promise {\n\t\ttry {\n\t\t\tconst count = await this.prisma.participate.count({\n\t\t\t\twhere: {\n\t\t\t\t\troom_id: room_id,\n\t\t\t\t},\n\t\t\t});\n\t\t\treturn count;\n\t\t} catch (error) {\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\tgetRoomQueue(roomID: string): RoomSongDto[] {\n\t\tconst room: ActiveRoom | undefined =\n\t\t\tthis.roomQueueService.roomQueues.get(roomID);\n\t\tif (!room) {\n\t\t\t//room is inactive\n\t\t\treturn [];\n\t\t} else {\n\t\t\treturn room.queueAsRoomSongDto();\n\t\t}\n\t}\n\n\tasync getCurrentSong(roomID: string): Promise {\n\t\tconst queue: RoomSongDto[] = await this.getRoomQueue(roomID);\n\t\tif (queue.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst result: RoomSongDto = queue[0];\n\t\treturn result;\n\t}\n\n\tgetCurrentSongs(roomIDs: string[]): (RoomSongDto | undefined)[] {\n\t\tconst queues: RoomSongDto[][] = roomIDs.map((roomID) => {\n\t\t\treturn this.getRoomQueue(roomID);\n\t\t});\n\t\treturn queues.map((queue) => {\n\t\t\tif (queue.length === 0) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\treturn queue[0];\n\t\t});\n\t}\n\n\tasync getLiveChatHistory(roomID: string): Promise {\n\t\tif (!(await this.dbUtils.roomExists(roomID))) {\n\t\t\tthrow new HttpException(\n\t\t\t\t\"Room with id '\" + roomID + \"' does not exist\",\n\t\t\t\tHttpStatus.NOT_FOUND,\n\t\t\t);\n\t\t}\n\n\t\tconst roomMessages: PrismaTypes.room_message[] =\n\t\t\tawait this.prisma.room_message.findMany({\n\t\t\t\twhere: {\n\t\t\t\t\troom_id: roomID,\n\t\t\t\t},\n\t\t\t});\n\n\t\tif (roomMessages.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst ids: string[] = [];\n\t\tfor (const message of roomMessages) {\n\t\t\tids.push(message.message_id);\n\t\t}\n\n\t\tconst messages: PrismaTypes.message[] = await this.prisma.message.findMany({\n\t\t\twhere: {\n\t\t\t\tmessage_id: {\n\t\t\t\t\tin: ids,\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\tif (messages.length === 0) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Failed to get chat history (no messages found) matching IDs for room with id '\" +\n\t\t\t\t\troomID +\n\t\t\t\t\t\"'. DB may be corrupted.\",\n\t\t\t);\n\t\t}\n\t\treturn messages;\n\t}\n\n\tasync getLiveChatHistoryDto(roomID: string): Promise {\n\t\tconst messages: PrismaTypes.message[] = await this.getLiveChatHistory(\n\t\t\troomID,\n\t\t);\n\t\tconst result: LiveChatMessageDto[] =\n\t\t\tawait this.dtogen.generateMultipleLiveChatMessageDto(messages);\n\t\treturn result;\n\t}\n\n\tasync createMessage(message: Prisma.messageCreateInput): Promise {\n\t\tconst newMessage: PrismaTypes.message = await this.prisma.message.create({\n\t\t\tdata: message,\n\t\t});\n\t\treturn newMessage.message_id;\n\t}\n\n\tasync createLiveChatMessage(\n\t\tmessage: LiveChatMessageDto,\n\t\tuserID?: string,\n\t): Promise {\n\t\tif (!(await this.dbUtils.roomExists(message.roomID))) {\n\t\t\tthrow new Error(\"Room with id '\" + message.roomID + \"' does not exist\");\n\t\t}\n\n\t\tlet u: string = message.sender.userID;\n\t\tif (userID) {\n\t\t\tu = userID;\n\t\t}\n\t\tconst sender: PrismaTypes.users | null = await this.prisma.users.findUnique(\n\t\t\t{\n\t\t\t\twhere: {\n\t\t\t\t\tuser_id: u,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (sender === null) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Failed to get user with id '\" +\n\t\t\t\t\tu +\n\t\t\t\t\t\"' and name '\" +\n\t\t\t\t\tmessage.sender.username +\n\t\t\t\t\t\"'\",\n\t\t\t);\n\t\t}\n\n\t\tconst newMessage: Prisma.messageCreateInput = {\n\t\t\tcontents: message.messageBody,\n\t\t\tusers: {\n\t\t\t\tconnect: {\n\t\t\t\t\tuser_id: sender.user_id,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\tconst messageID: string = await this.createMessage(newMessage);\n\n\t\tconst roomMessage: PrismaTypes.room_message | null =\n\t\t\tawait this.prisma.room_message.create({\n\t\t\t\tdata: {\n\t\t\t\t\troom_id: message.roomID,\n\t\t\t\t\tmessage_id: messageID,\n\t\t\t\t},\n\t\t\t});\n\n\t\tif (roomMessage === null) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Failed to create room message for room with id '\" +\n\t\t\t\t\tmessage.roomID +\n\t\t\t\t\t\"'. Unknown database error\",\n\t\t\t);\n\t\t}\n\t\treturn messageID;\n\t}\n\n\tasync bookmarkRoom(roomID: string, userID: string): Promise {\n\t\tif (!(await this.dbUtils.userExists(userID))) {\n\t\t\tthrow new HttpException(\"User does not exist\", HttpStatus.NOT_FOUND);\n\t\t}\n\n\t\tif (!(await this.dbUtils.roomExists(roomID))) {\n\t\t\tthrow new HttpException(\"Room does not exist\", HttpStatus.NOT_FOUND);\n\t\t}\n\n\t\tconst existingBookmark: PrismaTypes.bookmark | null =\n\t\t\tawait this.prisma.bookmark.findFirst({\n\t\t\t\twhere: {\n\t\t\t\t\troom_id: roomID,\n\t\t\t\t\tuser_id: userID,\n\t\t\t\t},\n\t\t\t});\n\n\t\tif (existingBookmark) {\n\t\t\tthrow new HttpException(\n\t\t\t\t\"User has already bookmarked this room\",\n\t\t\t\tHttpStatus.CONFLICT,\n\t\t\t);\n\t\t}\n\n\t\tconst b: Prisma.bookmarkCreateInput = {\n\t\t\tusers: {\n\t\t\t\tconnect: {\n\t\t\t\t\tuser_id: userID,\n\t\t\t\t},\n\t\t\t},\n\t\t\troom: {\n\t\t\t\tconnect: {\n\t\t\t\t\troom_id: roomID,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst newBookmark: PrismaTypes.bookmark | null =\n\t\t\tawait this.prisma.bookmark.create({\n\t\t\t\tdata: b,\n\t\t\t});\n\t\tif (newBookmark === null) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Failed to bookmark room. Database returned null after insert.\",\n\t\t\t);\n\t\t}\n\t}\n\n\tasync unbookmarkRoom(roomID: string, userID: string): Promise {\n\t\tif (!(await this.dbUtils.userExists(userID))) {\n\t\t\tthrow new HttpException(\"User does not exist\", HttpStatus.NOT_FOUND);\n\t\t}\n\n\t\tif (!(await this.dbUtils.roomExists(roomID))) {\n\t\t\tthrow new HttpException(\"Room does not exist\", HttpStatus.NOT_FOUND);\n\t\t}\n\n\t\tconst existingBookmark: PrismaTypes.bookmark | null =\n\t\t\tawait this.prisma.bookmark.findFirst({\n\t\t\t\twhere: {\n\t\t\t\t\troom_id: roomID,\n\t\t\t\t\tuser_id: userID,\n\t\t\t\t},\n\t\t\t});\n\t\tif (!existingBookmark) {\n\t\t\tthrow new HttpException(\n\t\t\t\t\"User has not bookmarked this room\",\n\t\t\t\tHttpStatus.NOT_FOUND,\n\t\t\t);\n\t\t}\n\n\t\tconst b: Prisma.bookmarkDeleteManyArgs = {\n\t\t\twhere: {\n\t\t\t\troom_id: roomID,\n\t\t\t\tuser_id: userID,\n\t\t\t},\n\t\t};\n\t\tconst delBookmark: Prisma.BatchPayload =\n\t\t\tawait this.prisma.bookmark.deleteMany(b);\n\t\tconsole.log(delBookmark);\n\t}\n\n\tasync saveReaction(\n\t\troomID: string,\n\t\temojiReactionDto: EmojiReactionDto,\n\t): Promise {\n\t\tif (!(await this.dbUtils.roomExists(roomID))) {\n\t\t\tthrow new Error(\"Room with id '\" + roomID + \"' does not exist\");\n\t\t}\n\n\t\tconst userID = emojiReactionDto.userID;\n\t\tif (!(await this.dbUtils.userExists(userID))) {\n\t\t\tthrow new Error(\"User with id '\" + userID + \"' does not exist\");\n\t\t}\n\n\t\tconst newReaction: PrismaTypes.chat_reactions | null =\n\t\t\tawait this.prisma.chat_reactions.create({\n\t\t\t\tdata: {\n\t\t\t\t\tuser_id: userID,\n\t\t\t\t\troom_id: roomID,\n\t\t\t\t\treaction: emojiReactionDto.body,\n\t\t\t\t},\n\t\t\t});\n\t\tif (newReaction === null) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Failed to save reaction. Database returned null after insert.\",\n\t\t\t);\n\t\t}\n\t}\n\n\tasync getKickedUsers(roomID: string): Promise {\n\t\tconsole.log(roomID);\n\t\t// Implement the logic to get the kicked users for the room\n\t\t// if (true) {\n\t\t// \t// room does not exist\n\t\t// \tthrow new HttpException(\"Room does not exist\", HttpStatus.NOT_FOUND);\n\t\t// }\n\t\treturn [];\n\t}\n\n\tasync kickUser(\n\t\troomID: string,\n\t\tinitiatorID: string,\n\t\tkickedUserID: string,\n\t): Promise {\n\t\tconsole.log(roomID);\n\t\tconsole.log(initiatorID);\n\t\tconsole.log(kickedUserID);\n\t\t// Implement the logic to kick a user from the room\n\t\tif (true) {\n\t\t\t// room does not exist\n\t\t\tthrow new HttpException(\"Room does not exist\", HttpStatus.NOT_FOUND);\n\t\t}\n\n\t\t// if (true) {\n\t\t// \t// user does not exist\n\t\t// \tthrow new HttpException(\"User does not exist\", HttpStatus.NOT_FOUND);\n\t\t// }\n\n\t\t// if (true) {\n\t\t// \t// user does not have permission to kick\n\t\t// \tthrow new HttpException(\"User is not in the room\", HttpStatus.FORBIDDEN);\n\t\t// }\n\n\t\t// if (true) {\n\t\t// \t// user is not in the room\n\t\t// \tthrow new HttpException(\n\t\t// \t\t\"User is not in the room\",\n\t\t// \t\tHttpStatus.BAD_REQUEST,\n\t\t// \t);\n\t\t// }\n\n\t\t// if (true) {\n\t\t// \t// user is trying to kick themselves\n\t\t// \tthrow new HttpException(\"User is the initiator\", HttpStatus.BAD_REQUEST);\n\t\t// }\n\t}\n\n\tasync undoKick(\n\t\troomID: string,\n\t\tinitiatorID: string,\n\t\tkickedUserID: string,\n\t): Promise {\n\t\tconsole.log(roomID);\n\t\tconsole.log(initiatorID);\n\t\tconsole.log(kickedUserID);\n\t\t// Implement the logic to undo the kick of a participant in the room\n\t\tif (true) {\n\t\t\t// room does not exist\n\t\t\tthrow new HttpException(\"Room does not exist\", HttpStatus.NOT_FOUND);\n\t\t}\n\n\t\t// if (true) {\n\t\t// \t// user does not exist\n\t\t// \tthrow new HttpException(\"User does not exist\", HttpStatus.NOT_FOUND);\n\t\t// }\n\n\t\t// if (true) {\n\t\t// \t// user does not have permission to kick\n\t\t// \tthrow new HttpException(\"User is not in the room\", HttpStatus.FORBIDDEN);\n\t\t// }\n\n\t\t// if (true) {\n\t\t// \t// user is trying to undo their own kick\n\t\t// \tthrow new HttpException(\"User is the initiator\", HttpStatus.BAD_REQUEST);\n\t\t// }\n\t}\n\n\tasync getBannedUsers(\n\t\troomID: string,\n\t\tuserID: string | undefined,\n\t): Promise {\n\t\t// Implement the logic to get the banned users for the room\n\t\tconsole.log(roomID);\n\t\tconst bannedUsers = await this.prisma.banned.findMany({\n\t\t\twhere: {\n\t\t\t\troom_id: roomID,\n\t\t\t},\n\t\t});\n\t\tconst bannedUserIDs: string[] = bannedUsers.map((banned) => banned.user_id);\n\t\tconst bannedUserDtos: UserDto[] = await this.dtogen.generateMultipleUserDto(\n\t\t\tbannedUserIDs,\n\t\t\tuserID,\n\t\t);\n\t\treturn bannedUserDtos;\n\t}\n\n\tasync banUser(\n\t\troomID: string,\n\t\tinitiatorID: string,\n\t\tbannedUserID: string,\n\t): Promise {\n\t\t// Implement the logic to ban a user from the room\n\t\tconsole.log(roomID);\n\t\tconsole.log(initiatorID);\n\t\tconsole.log(bannedUserID);\n\t\ttry {\n\t\t\tawait this.leaveRoom(roomID, bannedUserID);\n\t\t\tawait this.prisma.banned.create({\n\t\t\t\tdata: {\n\t\t\t\t\troom_id: roomID,\n\t\t\t\t\tuser_id: bannedUserID,\n\t\t\t\t},\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tthrow error;\n\t\t}\n\t\tthrow new HttpException(\"User banned\", HttpStatus.OK);\n\t}\n\n\tasync undoBan(\n\t\troomID: string,\n\t\tinitiatorID: string,\n\t\tbannedUserID: string,\n\t): Promise {\n\t\t// Implement the logic to undo the ban of a participant in the room\n\t\tconsole.log(roomID);\n\t\tconsole.log(initiatorID);\n\t\tconsole.log(bannedUserID);\n\t\ttry {\n\t\t\tawait this.prisma.banned.deleteMany({\n\t\t\t\twhere: {\n\t\t\t\t\troom_id: roomID,\n\t\t\t\t\tuser_id: bannedUserID,\n\t\t\t\t},\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tthrow error;\n\t\t}\n\t\tthrow new HttpException(\"User unbanned\", HttpStatus.OK);\n\t}\n\n\tasync getCalendarFile(roomID: string): Promise {\n\t\t// Implement the logic to get the calendar file for the room\n\t\t// if (true) {\n\t\t// \t// room does not exist\n\t\t// \tthrow new HttpException(\"Room does not exist\", HttpStatus.NOT_FOUND);\n\t\t// }\n\t\t// if (true) {\n\t\t// \t// room does not have any events\n\t\t// \tthrow new HttpException(\n\t\t// \t\t\"Room does not have any events\",\n\t\t// \t\tHttpStatus.NOT_FOUND,\n\t\t// \t);\n\t\t// }\n\t\tconsole.log(roomID);\n\t\tconst bytes: BlobPart[] = [];\n\t\treturn new File(bytes, \"calendar.ics\");\n\t}\n\n\tasync splitRoom(roomID: string): Promise {\n\t\ttry {\n\t\t\t// Fetch audio features of the songs in the room queue\n\t\t\t// check if the room already has child rooms\n\t\t\tconst childRooms: PrismaTypes.child_room[] | null =\n\t\t\t\tawait this.prisma.child_room.findMany({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tparent_room_id: roomID,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\tconsole.log(\"Child rooms\", childRooms);\n\t\t\tif (!childRooms || childRooms.length !== 0) {\n\t\t\t\tthrow new HttpException(\n\t\t\t\t\t\"Room already has child rooms\",\n\t\t\t\t\tHttpStatus.BAD_REQUEST,\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst audioFeatures: (Spotify.AudioFeatures & {\n\t\t\t\tgenre: string;\n\t\t\t\tsongID: string;\n\t\t\t})[] = await this.getAudioFeatures(roomID);\n\t\t\tif (!audioFeatures || audioFeatures.length === 0) {\n\t\t\t\tthrow new HttpException(\n\t\t\t\t\t\"Room does not have any events\",\n\t\t\t\t\tHttpStatus.NOT_FOUND,\n\t\t\t\t);\n\t\t\t}\n\t\t\tconsole.log(\"Audio features\");\n\n\t\t\tconst features: number[][] = audioFeatures.map((song) => [\n\t\t\t\tsong.danceability,\n\t\t\t\tsong.energy,\n\t\t\t\tsong.key,\n\t\t\t\tsong.loudness,\n\t\t\t\tsong.mode,\n\t\t\t\tsong.speechiness,\n\t\t\t\tsong.acousticness,\n\t\t\t\tsong.instrumentalness,\n\t\t\t\tsong.liveness,\n\t\t\t\tsong.valence,\n\t\t\t\tsong.tempo,\n\t\t\t]);\n\n\t\t\t// Apply K-means clustering with convergence check\n\t\t\tconst maxIterations = 100;\n\t\t\tconst distinctivenessThreshold = 0.5; // Define your threshold\n\t\t\tlet clusters: KMeansResult = kmeans(features, 2, { maxIterations: 20 });\n\t\t\tlet canSplit = false;\n\t\t\tfor (let i = 0; i  {\n\t\t\t\treturn audioFeatures.filter(\n\t\t\t\t\t(_, index) => clusters.clusters[index] === cluster,\n\t\t\t\t);\n\t\t\t});\n\t\t\tconsole.log(\"Sub-rooms\", subRooms);\n\t\t\tconst childGenres = subRooms.map((subRoom) =>\n\t\t\t\tthis.genresFromCluster(subRoom.map((song) => song.genre)),\n\t\t\t);\n\n\t\t\tconsole.log(childGenres);\n\t\t\tif (childGenres.length  {\n\t\t\t\t\treturn {\n\t\t\t\t\t\troom_id: childRoom0.room_id,\n\t\t\t\t\t\tsong_id: song.songID,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t\tconst childRoom1Songs:\n\t\t\t\t\t| { room_id: string; song_id: string }[]\n\t\t\t\t\t| undefined = subRooms[1]?.map((song) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\troom_id: childRoom1.room_id,\n\t\t\t\t\t\tsong_id: song.songID,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t\tif (childRoom0Songs) {\n\t\t\t\t\tconsole.log(\"Child room 0 songs\", childRoom0Songs);\n\t\t\t\t\tawait this.prisma.queue.createMany({\n\t\t\t\t\t\tdata: childRoom0Songs,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif (childRoom1Songs) {\n\t\t\t\t\tawait this.prisma.queue.createMany({\n\t\t\t\t\t\tdata: childRoom1Songs,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tconst [parentRoomDto]: RoomDto[] =\n\t\t\t\t\tawait this.dtogen.generateMultipleRoomDto([roomID]);\n\t\t\t\tparentRoomDto.childrenRoomIDs = [\n\t\t\t\t\tchildRoom0.room_id,\n\t\t\t\t\tchildRoom1.room_id,\n\t\t\t\t];\n\t\t\t\treturn parentRoomDto;\n\t\t\t} catch (error) {\n\t\t\t\tthrow new HttpException(\n\t\t\t\t\t\"Failed to create child rooms\",\n\t\t\t\t\tHttpStatus.INTERNAL_SERVER_ERROR,\n\t\t\t\t);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Error splitting room:\", error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\tasync canSplitRoom(roomID: string): Promise {\n\t\ttry {\n\t\t\t// Fetch audio features of the songs in the room queue\n\t\t\tconst childrenRoom: PrismaTypes.child_room[] | null =\n\t\t\t\tawait this.prisma.child_room.findMany({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tparent_room_id: roomID,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\tif (!childrenRoom || childrenRoom.length !== 0) {\n\t\t\t\tthrow new HttpException(\n\t\t\t\t\t\"Room already has child rooms\",\n\t\t\t\t\tHttpStatus.BAD_REQUEST,\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst audioFeatures: (Spotify.AudioFeatures & { genre: string })[] =\n\t\t\t\tawait this.getAudioFeatures(roomID);\n\t\t\tif (!audioFeatures || audioFeatures.length === 0) {\n\t\t\t\tthrow new HttpException(\n\t\t\t\t\t\"Room does not have any events\",\n\t\t\t\t\tHttpStatus.NOT_FOUND,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst features: number[][] = audioFeatures.map((song) => [\n\t\t\t\tsong.danceability,\n\t\t\t\tsong.energy,\n\t\t\t\tsong.key,\n\t\t\t\tsong.loudness,\n\t\t\t\tsong.mode,\n\t\t\t\tsong.speechiness,\n\t\t\t\tsong.acousticness,\n\t\t\t\tsong.instrumentalness,\n\t\t\t\tsong.liveness,\n\t\t\t\tsong.valence,\n\t\t\t\tsong.tempo,\n\t\t\t]);\n\n\t\t\t// Apply K-means clustering with convergence check\n\t\t\tconst maxIterations = 100;\n\t\t\tconst distinctivenessThreshold = 0.5; // Define your threshold\n\t\t\tlet clusters: KMeansResult = kmeans(features, 2, { maxIterations: 20 });\n\t\t\tlet canSplit = false;\n\t\t\tfor (let i = 0; i  {\n\t\t\t\treturn audioFeatures.filter(\n\t\t\t\t\t(_, index) => clusters.clusters[index] === cluster,\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tconst childGenres = subRooms.map((subRoom) =>\n\t\t\t\tthis.genresFromCluster(subRoom.map((song) => song.genre)),\n\t\t\t);\n\n\t\t\tconsole.log(childGenres);\n\t\t\tconst distinctGenres = [...new Set(childGenres)];\n\t\t\tif (distinctGenres.length  threshold;\n\t}\n\n\teuclideanDistance(point1: number[], point2: number[]): number {\n\t\tlet sum = 0;\n\t\tconsole.log(point1);\n\t\tfor (let i = 0; i  {\n\t\t// Implement the logic to get the audio features for a song\n\t\tconst songs: (PrismaTypes.queue & { song: PrismaTypes.song })[] =\n\t\t\tawait this.prisma.queue.findMany({\n\t\t\t\twhere: {\n\t\t\t\t\troom_id: roomID,\n\t\t\t\t},\n\t\t\t\tinclude: {\n\t\t\t\t\tsong: true,\n\t\t\t\t},\n\t\t\t});\n\t\tconsole.log(\"Songs\", songs);\n\t\treturn songs.map((song) => {\n\t\t\treturn {\n\t\t\t\t...(JSON.parse(\n\t\t\t\t\tsong.song.audio_features as unknown as string,\n\t\t\t\t) as unknown as Spotify.AudioFeatures),\n\t\t\t\tgenre: song.song.genre ?? \"Unknown\",\n\t\t\t\tsongID: song.song.song_id,\n\t\t\t};\n\t\t});\n\t}\n\tgenresFromCluster(cluster: string[]): string {\n\t\tconst genreCounts: { [genre: string]: number } = {};\n\t\tcluster.forEach((genre) => {\n\t\t\tif (genre in genreCounts && genreCounts[genre]) {\n\t\t\t\tgenreCounts[genre]++;\n\t\t\t} else {\n\t\t\t\tgenreCounts[genre] = 1;\n\t\t\t}\n\t\t});\n\n\t\tconst sortedGenres = Object.keys(genreCounts).sort(\n\t\t\t(genre1, genre2) =>\n\t\t\t\t(genreCounts[genre2] ?? 0) - (genreCounts[genre1] ?? 0),\n\t\t);\n\n\t\treturn sortedGenres[0] ?? \"Unknown\";\n\t}\n\n\tasync saveRoomPlaylist(roomID: string, userID: string): Promise {\n\t\tif (!(await this.dbUtils.userExists(userID))) {\n\t\t\tthrow new HttpException(\"User does not exist\", HttpStatus.NOT_FOUND);\n\t\t}\n\t\tif (!(await this.dbUtils.roomExists(roomID))) {\n\t\t\tthrow new HttpException(\"Room does not exist\", HttpStatus.NOT_FOUND);\n\t\t}\n\t\tconst room: RoomDto = await this.getRoomInfo(roomID);\n\t\tawait this.spotifyService.saveRoomPlaylist(room, userID);\n\t}\n\n\tasync unsaveRoomPlaylist(roomID: string, userID: string): Promise {\n\t\tif (!(await this.dbUtils.userExists(userID))) {\n\t\t\tthrow new HttpException(\"User does not exist\", HttpStatus.NOT_FOUND);\n\t\t}\n\t\tif (!(await this.dbUtils.roomExists(roomID))) {\n\t\t\tthrow new HttpException(\"Room does not exist\", HttpStatus.NOT_FOUND);\n\t\t}\n\t\tconst room: RoomDto = await this.getRoomInfo(roomID);\n\t\tawait this.spotifyService.unsaveRoomPlaylist(room, userID);\n\t}\n\n\t// async shareRoom(@Request() req: Request, @Param(\"roomID\") roomID: string, @Body() users: string[]) {\n\t// \tconst userInfo: JWTPayload = this.auth.getUserInfo(req);\n\t// \treturn await this.roomsService.shareRoom(roomID, userInfo.id, users);\n\t// }\n\t/*\n\tasync sendMessage(message: DirectMessageDto): Promise {\n\t\t//send message to user\n\t\ttry {\n\t\t\tconst newMessage = await this.prisma.message.create({\n\t\t\t\tdata: {\n\t\t\t\t\tcontents: message.messageBody,\n\t\t\t\t\tdate_sent: message.dateSent,\n\t\t\t\t\tsender: message.sender.userID,\n\t\t\t\t},\n\t\t\t});\n\t\t\tconst m: PrismaTypes.private_message =\n\t\t\t\tawait this.prisma.private_message.create({\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tusers: {\n\t\t\t\t\t\t\tconnect: {\n\t\t\t\t\t\t\t\tuser_id: message.recipient.userID,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmessage: {\n\t\t\t\t\t\t\tconnect: {\n\t\t\t\t\t\t\t\tmessage_id: newMessage.message_id,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\tconsole.log(\"new DM: \");\n\t\t\tconsole.log(m);\n\t\t\treturn await this.dtogen.generateDirectMessageDto(m.p_message_id);\n\t\t} catch (e) {\n\t\t\tthrow new Error(\"Failed to send message\");\n\t\t}\n\t}\n\t*/\n\tasync shareRoom(\n\t\troomID: string,\n\t\tuserID: string,\n\t\tusers: string[],\n\t): Promise {\n\t\tif (users.length === 0) {\n\t\t\tthrow new HttpException(\"User list is empty\", HttpStatus.BAD_REQUEST);\n\t\t}\n\t\tawait this.dbUtils.usersExist([userID, ...users]).then((users) => {\n\t\t\tusers.forEach((user) => {\n\t\t\t\tif (!user.exists) {\n\t\t\t\t\tthrow new HttpException(\n\t\t\t\t\t\t`User (with id '${user.userID}') does not exist`,\n\t\t\t\t\t\tHttpStatus.NOT_FOUND,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tif (!(await this.dbUtils.roomExists(roomID))) {\n\t\t\tthrow new HttpException(\"Room does not exist\", HttpStatus.NOT_FOUND);\n\t\t}\n\t\tconst room: RoomDto = await this.getRoomInfo(roomID);\n\t\tconst roomShares: ({\n\t\t\tprivate_message: {\n\t\t\t\tp_message_id: string;\n\t\t\t\trecipient: string;\n\t\t\t} | null;\n\t\t} & {\n\t\t\tmessage_id: string;\n\t\t\tcontents: string;\n\t\t\tdate_sent: Date;\n\t\t\tsender: string;\n\t\t})[] = await this.prisma.$transaction(\n\t\t\tusers.map((user) => {\n\t\t\t\treturn this.prisma.message.create({\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tcontents: `##${room.roomID}##`,\n\t\t\t\t\t\tdate_sent: new Date(),\n\t\t\t\t\t\tusers: {\n\t\t\t\t\t\t\tconnect: {\n\t\t\t\t\t\t\t\tuser_id: userID, // sender\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tprivate_message: {\n\t\t\t\t\t\t\tcreate: {\n\t\t\t\t\t\t\t\tusers: {\n\t\t\t\t\t\t\t\t\tconnect: {\n\t\t\t\t\t\t\t\t\t\tuser_id: user, // recipient\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tinclude: {\n\t\t\t\t\t\tprivate_message: true,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}),\n\t\t);\n\t\tif (this.server) {\n\t\t\tconst roomShareMessages: ({\n\t\t\t\tmessage: {\n\t\t\t\t\tmessage_id: string;\n\t\t\t\t\tcontents: string;\n\t\t\t\t\tdate_sent: Date;\n\t\t\t\t\tsender: string;\n\t\t\t\t};\n\t\t\t} & {\n\t\t\t\tp_message_id: string;\n\t\t\t\trecipient: string;\n\t\t\t})[] = [];\n\t\t\tfor (const rs of roomShares) {\n\t\t\t\tif (rs.private_message !== null) {\n\t\t\t\t\troomShareMessages.push({\n\t\t\t\t\t\tmessage: {\n\t\t\t\t\t\t\tmessage_id: rs.message_id,\n\t\t\t\t\t\t\tcontents: rs.contents,\n\t\t\t\t\t\t\tdate_sent: rs.date_sent,\n\t\t\t\t\t\t\tsender: rs.sender,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tp_message_id: rs.private_message.p_message_id,\n\t\t\t\t\t\trecipient: rs.private_message.recipient,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst roomShareDMs: DirectMessageDto[] =\n\t\t\t\tawait this.dtogen.generateMultipleDirectMessageDto(roomShareMessages);\n\t\t\tthis.dmUsersService.shareRoom(this.server, roomShareDMs);\n\t\t}\n\t\tthrow new HttpException(`Room shared`, HttpStatus.CREATED);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                bio\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                current_room_id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                current_song\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                fav_genres\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                fav_rooms\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                fav_songs\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                followers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                following\n                            \n                            \n                                    \n                                    \n                                hasSpotifyAccount\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                links\n                            \n                            \n                                    \n                                    \n                                profile_name\n                            \n                            \n                                    \n                                    \n                                profile_picture_url\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                recent_rooms\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                relationship\n                            \n                            \n                                    \n                                    \n                                userID\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/user.dto.ts:144\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        current_room_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The roomID of the room that the user is currently in, if applicable'})@IsString()@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/user.dto.ts:161\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        current_song\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SongInfoDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The current song the user is listening to, if applicable', type: SongInfoDto})@IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/user.dto.ts:153\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        fav_genres\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GenresWithCount\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The user's favorite genres', type: GenresWithCount})@IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/user.dto.ts:170\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        fav_rooms\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RoomsData\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The user's favorite rooms', type: RoomsData})@IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/user.dto.ts:188\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        fav_songs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SongInfosWithCount\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The user's favorite songs', type: SongInfosWithCount})@IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/user.dto.ts:179\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        followers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FollowersAndFollowing\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The user's followers', title: 'FollowersAndFollowing', type: FollowersAndFollowing})@IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/user.dto.ts:121\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        following\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FollowersAndFollowing\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The user's following', title: 'FollowersAndFollowing', type: FollowersAndFollowing})@IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/user.dto.ts:131\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        hasSpotifyAccount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/user.dto.ts:201\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        links\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LinksWithCount\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The user's links', type: LinksWithCount})@IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/user.dto.ts:140\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        profile_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/user.dto.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        profile_picture_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/user.dto.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        recent_rooms\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RoomsData\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The user's recent rooms', type: RoomsData})@IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/user.dto.ts:197\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        relationship\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"following\" | \"follower\" | \"mutual\" | \"friend\" | \"pending\" | \"none\" | \"blocked\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The relationship status between the current user and the user in question', type: String})@Type(undefined)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/user.dto.ts:210\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/user.dto.ts:103\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/user.dto.ts:107\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport {\n\tIsString,\n\tValidateNested,\n\tIsObject,\n\tIsNumber,\n\tIsArray,\n\tIsBoolean,\n} from \"class-validator\";\nimport { SongInfoDto } from \"../../rooms/dto/songinfo.dto\";\nimport { Type } from \"class-transformer\";\n\nexport class FollowersAndFollowing {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({ type: () => UserDto, isArray: true })\n\t@IsArray()\n\t@ValidateNested()\n\t@Type(() => UserDto)\n\tdata: UserDto[];\n}\n\nexport class RoomsData {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t/*\n\t@ApiProperty({ type: () => RoomDto, isArray: true })\n\t@IsArray()\n\t@ValidateNested()\n\t@Type(() => RoomDto)\n\tdata: RoomDto[];\n\t*/\n\t@ApiProperty({ type: String, isArray: true })\n\t@IsArray()\n\t@IsString({ each: true })\n\tdata: string[];\n}\n\nexport class SongInfosWithCount {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({ type: () => SongInfoDto, isArray: true })\n\t@IsArray()\n\t@ValidateNested()\n\t@Type(() => SongInfoDto)\n\tdata: SongInfoDto[];\n}\n\nexport class LinksWithCount {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({\n\t\ttype: \"object\",\n\t\tadditionalProperties: {\n\t\t\ttype: \"array\",\n\t\t\titems: { type: \"string\" },\n\t\t},\n\t})\n\t@IsObject()\n\tdata: Record;\n}\n\nexport class GenresWithCount {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({ type: String, isArray: true })\n\t@IsArray()\n\t@IsString({ each: true })\n\tdata: string[];\n}\n\nexport class UserFriendship {\n\t@ApiProperty()\n\t@IsBoolean()\n\tstatus: boolean;\n\n\t@ApiProperty()\n\t@IsString()\n\taccept_url: string;\n\n\t@ApiProperty()\n\t@IsString()\n\treject_url: string;\n}\n\nexport class UserDto {\n\t@ApiProperty()\n\t@IsString()\n\tprofile_name: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tuserID: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tusername: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tprofile_picture_url: string;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's followers\",\n\t\ttitle: \"FollowersAndFollowing\",\n\t\ttype: FollowersAndFollowing,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => FollowersAndFollowing)\n\tfollowers: FollowersAndFollowing;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's following\",\n\t\ttitle: \"FollowersAndFollowing\",\n\t\ttype: FollowersAndFollowing,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => FollowersAndFollowing)\n\tfollowing: FollowersAndFollowing;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's links\",\n\t\ttype: LinksWithCount,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => LinksWithCount)\n\tlinks: LinksWithCount;\n\n\t@ApiPropertyOptional()\n\t@IsString()\n\tbio: string;\n\n\t@ApiPropertyOptional({\n\t\tdescription: \"The current song the user is listening to, if applicable\",\n\t\ttype: SongInfoDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => SongInfoDto)\n\tcurrent_song?: SongInfoDto;\n\n\t@ApiPropertyOptional({\n\t\tdescription:\n\t\t\t\"The roomID of the room that the user is currently in, if applicable\",\n\t})\n\t@IsString()\n\t@ValidateNested()\n\tcurrent_room_id?: string;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's favorite genres\",\n\t\ttype: GenresWithCount,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => GenresWithCount)\n\tfav_genres: GenresWithCount;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's favorite songs\",\n\t\ttype: SongInfosWithCount,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => SongInfosWithCount)\n\tfav_songs: SongInfosWithCount;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's favorite rooms\",\n\t\ttype: RoomsData,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomsData)\n\tfav_rooms: RoomsData;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's recent rooms\",\n\t\ttype: RoomsData,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomsData)\n\trecent_rooms: RoomsData;\n\n\t@ApiProperty()\n\t@IsBoolean()\n\thasSpotifyAccount: boolean;\n\n\t@ApiPropertyOptional({\n\t\tdescription:\n\t\t\t\"The relationship status between the current user and the user in question\",\n\t\ttype: String,\n\t})\n\t@Type(() => String)\n\t@IsString()\n\trelationship?:\n\t\t| \"following\"\n\t\t| \"follower\"\n\t\t| \"mutual\"\n\t\t| \"friend\"\n\t\t| \"pending\"\n\t\t| \"none\"\n\t\t| \"blocked\";\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            archive/modules/profile/entities/userprofile.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                bio\n                            \n                            \n                                    \n                                current_song\n                            \n                            \n                                    \n                                fav_genres\n                            \n                            \n                                    \n                                fav_rooms\n                            \n                            \n                                    \n                                fav_songs\n                            \n                            \n                                    \n                                followers\n                            \n                            \n                                    \n                                following\n                            \n                            \n                                    \n                                links\n                            \n                            \n                                    \n                                profile_name\n                            \n                            \n                                    \n                                profile_picture_url\n                            \n                            \n                                    \n                                recent_rooms\n                            \n                            \n                                    \n                                userID\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/profile/entities/userprofile.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        current_song\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SongInfoDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/profile/entities/userprofile.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fav_genres\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/profile/entities/userprofile.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fav_rooms\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/profile/entities/userprofile.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fav_songs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/profile/entities/userprofile.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        followers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/profile/entities/userprofile.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        following\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/profile/entities/userprofile.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        links\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/profile/entities/userprofile.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        profile_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/profile/entities/userprofile.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        profile_picture_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/profile/entities/userprofile.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        recent_rooms\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/profile/entities/userprofile.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/profile/entities/userprofile.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/profile/entities/userprofile.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { UserProfileDto } from \"../dto/userprofile.dto\";\nimport { RoomDto } from \"../../rooms/dto/room.dto\";\nimport { SongInfoDto } from \"../../rooms/dto/songinfo.dto\";\n\nexport class UserEntity {\n\t@ApiProperty()\n\tprofile_name: string;\n\n\t@ApiProperty()\n\tuserID: string;\n\n\t@ApiProperty()\n\tusername: string;\n\n\t@ApiProperty()\n\tprofile_picture_url: string;\n\n\t@ApiProperty()\n\tfollowers: {\n\t\tcount: number;\n\t\tdata: UserProfileDto[];\n\t};\n\n\t@ApiProperty()\n\tfollowing: {\n\t\tcount: number;\n\t\tdata: UserProfileDto[];\n\t};\n\n\t@ApiProperty()\n\tlinks: {\n\t\tcount: number;\n\t\tdata: string[];\n\t};\n\n\t@ApiProperty()\n\tbio: string;\n\n\t@ApiProperty()\n\tcurrent_song: SongInfoDto;\n\n\t@ApiProperty()\n\tfav_genres: {\n\t\tcount: number;\n\t\tdata: string[];\n\t};\n\n\t@ApiProperty()\n\tfav_songs: {\n\t\tcount: number;\n\t\tdata: SongInfoDto[];\n\t};\n\n\t@ApiProperty()\n\tfav_rooms: {\n\t\tcount: number;\n\t\tdata: RoomDto[];\n\t};\n\n\t@ApiProperty()\n\trecent_rooms: {\n\t\tcount: number;\n\t\tdata: RoomDto[];\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserError.html":{"url":"classes/UserError.html","title":"class - UserError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/user-error.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/user-error.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UserError extends Error {\n\tconstructor(message: string) {\n\t\tsuper(message);\n\t\tthis.name = \"UserError\";\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserFriendship.html":{"url":"classes/UserFriendship.html","title":"class - UserFriendship","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserFriendship\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                accept_url\n                            \n                            \n                                    \n                                    \n                                reject_url\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        accept_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/user.dto.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reject_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/user.dto.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/user.dto.ts:85\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport {\n\tIsString,\n\tValidateNested,\n\tIsObject,\n\tIsNumber,\n\tIsArray,\n\tIsBoolean,\n} from \"class-validator\";\nimport { SongInfoDto } from \"../../rooms/dto/songinfo.dto\";\nimport { Type } from \"class-transformer\";\n\nexport class FollowersAndFollowing {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({ type: () => UserDto, isArray: true })\n\t@IsArray()\n\t@ValidateNested()\n\t@Type(() => UserDto)\n\tdata: UserDto[];\n}\n\nexport class RoomsData {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t/*\n\t@ApiProperty({ type: () => RoomDto, isArray: true })\n\t@IsArray()\n\t@ValidateNested()\n\t@Type(() => RoomDto)\n\tdata: RoomDto[];\n\t*/\n\t@ApiProperty({ type: String, isArray: true })\n\t@IsArray()\n\t@IsString({ each: true })\n\tdata: string[];\n}\n\nexport class SongInfosWithCount {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({ type: () => SongInfoDto, isArray: true })\n\t@IsArray()\n\t@ValidateNested()\n\t@Type(() => SongInfoDto)\n\tdata: SongInfoDto[];\n}\n\nexport class LinksWithCount {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({\n\t\ttype: \"object\",\n\t\tadditionalProperties: {\n\t\t\ttype: \"array\",\n\t\t\titems: { type: \"string\" },\n\t\t},\n\t})\n\t@IsObject()\n\tdata: Record;\n}\n\nexport class GenresWithCount {\n\t@ApiProperty()\n\t@IsNumber()\n\tcount: number;\n\n\t@ApiProperty({ type: String, isArray: true })\n\t@IsArray()\n\t@IsString({ each: true })\n\tdata: string[];\n}\n\nexport class UserFriendship {\n\t@ApiProperty()\n\t@IsBoolean()\n\tstatus: boolean;\n\n\t@ApiProperty()\n\t@IsString()\n\taccept_url: string;\n\n\t@ApiProperty()\n\t@IsString()\n\treject_url: string;\n}\n\nexport class UserDto {\n\t@ApiProperty()\n\t@IsString()\n\tprofile_name: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tuserID: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tusername: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tprofile_picture_url: string;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's followers\",\n\t\ttitle: \"FollowersAndFollowing\",\n\t\ttype: FollowersAndFollowing,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => FollowersAndFollowing)\n\tfollowers: FollowersAndFollowing;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's following\",\n\t\ttitle: \"FollowersAndFollowing\",\n\t\ttype: FollowersAndFollowing,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => FollowersAndFollowing)\n\tfollowing: FollowersAndFollowing;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's links\",\n\t\ttype: LinksWithCount,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => LinksWithCount)\n\tlinks: LinksWithCount;\n\n\t@ApiPropertyOptional()\n\t@IsString()\n\tbio: string;\n\n\t@ApiPropertyOptional({\n\t\tdescription: \"The current song the user is listening to, if applicable\",\n\t\ttype: SongInfoDto,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => SongInfoDto)\n\tcurrent_song?: SongInfoDto;\n\n\t@ApiPropertyOptional({\n\t\tdescription:\n\t\t\t\"The roomID of the room that the user is currently in, if applicable\",\n\t})\n\t@IsString()\n\t@ValidateNested()\n\tcurrent_room_id?: string;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's favorite genres\",\n\t\ttype: GenresWithCount,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => GenresWithCount)\n\tfav_genres: GenresWithCount;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's favorite songs\",\n\t\ttype: SongInfosWithCount,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => SongInfosWithCount)\n\tfav_songs: SongInfosWithCount;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's favorite rooms\",\n\t\ttype: RoomsData,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomsData)\n\tfav_rooms: RoomsData;\n\n\t@ApiProperty({\n\t\tdescription: \"The user's recent rooms\",\n\t\ttype: RoomsData,\n\t})\n\t@IsObject()\n\t@ValidateNested()\n\t@Type(() => RoomsData)\n\trecent_rooms: RoomsData;\n\n\t@ApiProperty()\n\t@IsBoolean()\n\thasSpotifyAccount: boolean;\n\n\t@ApiPropertyOptional({\n\t\tdescription:\n\t\t\t\"The relationship status between the current user and the user in question\",\n\t\ttype: String,\n\t})\n\t@Type(() => String)\n\t@IsString()\n\trelationship?:\n\t\t| \"following\"\n\t\t| \"follower\"\n\t\t| \"mutual\"\n\t\t| \"friend\"\n\t\t| \"pending\"\n\t\t| \"none\"\n\t\t| \"blocked\";\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserProfileDto.html":{"url":"classes/UserProfileDto.html","title":"class - UserProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            archive/modules/profile/dto/userprofile.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                bio\n                            \n                            \n                                    \n                                    \n                                    \n                                current_song\n                            \n                            \n                                    \n                                    \n                                    \n                                fav_genres\n                            \n                            \n                                    \n                                    \n                                    \n                                fav_rooms\n                            \n                            \n                                    \n                                    \n                                    \n                                fav_songs\n                            \n                            \n                                    \n                                    \n                                    \n                                followers\n                            \n                            \n                                    \n                                    \n                                    \n                                following\n                            \n                            \n                                    \n                                    \n                                    \n                                links\n                            \n                            \n                                    \n                                    \n                                profile_name\n                            \n                            \n                                    \n                                    \n                                profile_picture_url\n                            \n                            \n                                    \n                                    \n                                    \n                                recent_rooms\n                            \n                            \n                                    \n                                    \n                                userID\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/profile/dto/userprofile.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        current_song\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SongInfoDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsObject()@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/profile/dto/userprofile.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        fav_genres\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsObject()@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/profile/dto/userprofile.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        fav_rooms\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsObject()@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/profile/dto/userprofile.dto.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        fav_songs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsObject()@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/profile/dto/userprofile.dto.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        followers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsObject()@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/profile/dto/userprofile.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        following\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsObject()@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/profile/dto/userprofile.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        links\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsObject()@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/profile/dto/userprofile.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        profile_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/profile/dto/userprofile.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        profile_picture_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/profile/dto/userprofile.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        recent_rooms\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsObject()@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/profile/dto/userprofile.dto.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/profile/dto/userprofile.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in archive/modules/profile/dto/userprofile.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, ValidateNested, IsObject } from \"class-validator\";\nimport { RoomDto } from \"src/modules/rooms/dto/room.dto\";\nimport { SongInfoDto } from \"src/modules/rooms/dto/songinfo.dto\";\n// import { RoomDto } from \"../../../modules/rooms/dto/room.dto\";\n// import { SongInfoDto } from \"../../../modules/rooms/dto/songinfo.dto\";\n\nexport class UserProfileDto {\n\t@ApiProperty()\n\t@IsString()\n\tprofile_name: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tuserID: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tusername: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tprofile_picture_url: string;\n\n\t@ApiProperty()\n\t@IsObject()\n\t@ValidateNested()\n\tfollowers: {\n\t\tcount: number;\n\t\tdata: UserProfileDto[];\n\t};\n\n\t@ApiProperty()\n\t@IsObject()\n\t@ValidateNested()\n\tfollowing: {\n\t\tcount: number;\n\t\tdata: UserProfileDto[];\n\t};\n\n\t@ApiProperty()\n\t@IsObject()\n\t@ValidateNested()\n\tlinks: {\n\t\tcount: number;\n\t\tdata: string[];\n\t};\n\n\t@ApiProperty()\n\t@IsString()\n\tbio: string;\n\n\t@ApiProperty()\n\t@IsObject()\n\t@ValidateNested()\n\tcurrent_song: SongInfoDto;\n\n\t@ApiProperty()\n\t@IsObject()\n\t@ValidateNested()\n\tfav_genres: {\n\t\tcount: number;\n\t\tdata: string[];\n\t};\n\n\t@ApiProperty()\n\t@IsObject()\n\t@ValidateNested()\n\tfav_songs: {\n\t\tcount: number;\n\t\tdata: SongInfoDto[];\n\t};\n\n\t@ApiProperty()\n\t@IsObject()\n\t@ValidateNested()\n\tfav_rooms: {\n\t\tcount: number;\n\t\tdata: RoomDto[];\n\t};\n\n\t@ApiProperty()\n\t@IsObject()\n\t@ValidateNested()\n\trecent_rooms: {\n\t\tcount: number;\n\t\tdata: RoomDto[];\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\n\n\nDbUtilsModule\n\nDbUtilsModule\n\nUsersModule -->\n\nDbUtilsModule->UsersModule\n\n\n\n\n\nDtoGenModule\n\nDtoGenModule\n\nUsersModule -->\n\nDtoGenModule->UsersModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\n\n\nRecommendationsModule\n\nRecommendationsModule\n\nUsersModule -->\n\nRecommendationsModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            DbUtilsModule\n                        \n                        \n                            DtoGenModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            RecommendationsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { UsersController } from \"./users.controller\";\nimport { UsersService } from \"./users.service\";\nimport { PrismaModule } from \"../../../prisma/prisma.module\";\nimport { DtoGenModule } from \"../dto-gen/dto-gen.module\";\nimport { DbUtilsModule } from \"../db-utils/db-utils.module\";\nimport { AuthModule } from \"../../auth/auth.module\";\nimport { RecommendationsModule } from \"../../recommendations/recommendations.module\";\nimport { MailerModule } from \"@nestjs-modules/mailer/dist/mailer.module\";\n\n@Module({\n\timports: [\n\t\tPrismaModule,\n\t\tDtoGenModule,\n\t\tDbUtilsModule,\n\t\tAuthModule,\n\t\tRecommendationsModule,\n\t\tMailerModule.forRoot({\n\t\t\ttransport: {\n\t\t\t\thost: process.env.EMAIL_HOST,\n\t\t\t\tport: process.env.EMAIL_PORT,\n\t\t\t\tauth: {\n\t\t\t\t\tuser: process.env.EMAIL_USERNAME,\n\t\t\t\t\tpass: process.env.EMAIL_PASSWORD,\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n\t],\n\tcontrollers: [UsersController],\n\tproviders: [UsersService],\n\texports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VoteDto.html":{"url":"classes/VoteDto.html","title":"class - VoteDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VoteDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/dto/vote.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                isUpvote\n                            \n                            \n                                    \n                                    \n                                spotifyID\n                            \n                            \n                                    \n                                    \n                                userID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/vote.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isUpvote\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/vote.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        spotifyID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/vote.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/vote.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsBoolean, IsDate } from \"class-validator\";\n\nexport class VoteDto {\n\t@ApiProperty()\n\t@IsBoolean()\n\tisUpvote: boolean;\n\n\t@ApiProperty()\n\t@IsString()\n\tuserID: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tspotifyID: string;\n\n\t@ApiProperty()\n\t@IsDate()\n\tcreatedAt: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WsExceptionFilter.html":{"url":"classes/WsExceptionFilter.html","title":"class - WsExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WsExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filter/ws-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: Error, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filter/ws-exception.filter.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, ExceptionFilter } from \"@nestjs/common\";\nimport { WsException } from \"@nestjs/websockets\";\nimport { Socket } from \"socket.io\";\nimport { UserError } from \"../exceptions/user-error\";\n\n@Catch(Error, WsException, UserError) // Catch both generic errors and WebSocket-specific exceptions\nexport class WsExceptionFilter implements ExceptionFilter {\n\tcatch(exception: Error, host: ArgumentsHost) {\n\t\tconst client = host.switchToWs().getClient();\n\t\tlet message = \"Internal server error\";\n\n\t\tif (exception instanceof UserError) {\n\t\t\tmessage = exception.message;\n\t\t}\n\t\tconsole.error(exception);\n\n\t\tconsole.error(\"@@@@@@@@@@@@@@@@@\");\n\t\tclient.emit(\"error\", { message }); // Send the error message to the client\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                archive/modules/profile/dto/updateuserprofile.dto.ts\n            \n            class\n            UpdateUserProfileDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                archive/modules/profile/dto/userprofile.dto.ts\n            \n            class\n            UserProfileDto\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                archive/modules/profile/entities/userprofile.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                archive/modules/profile/profile.controller.ts\n            \n            controller\n            ProfileController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                archive/modules/profile/profile.service.ts\n            \n            injectable\n            ProfileService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                archive/modules/rooms/entities/room.entity.ts\n            \n            class\n            RoomEntity\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                archive/modules/rooms/entities/songinfo.entity.ts\n            \n            class\n            SongInfoEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                archive/modules/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                archive/modules/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                archive/modules/users/dto/updateuser.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                archive/modules/users/entities/user.entity.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                archive/spotify/models/user.ts\n            \n            class\n            SpotifyUser\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                jest_mocking/module-mocking.ts\n            \n            function\n            createAppTestingModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                jest_mocking/module-mocking.ts\n            \n            function\n            createAuthTestingModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                jest_mocking/module-mocking.ts\n            \n            function\n            createAutoModerationTestingModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                jest_mocking/module-mocking.ts\n            \n            function\n            createBullBoardTestingModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                jest_mocking/module-mocking.ts\n            \n            function\n            createDbUtilsTestingModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                jest_mocking/module-mocking.ts\n            \n            function\n            createDMUsersTestingModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                jest_mocking/module-mocking.ts\n            \n            function\n            createDtoGenTestingModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                jest_mocking/module-mocking.ts\n            \n            function\n            createGenresTestingModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                jest_mocking/module-mocking.ts\n            \n            function\n            createLiveTestingModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                jest_mocking/module-mocking.ts\n            \n            function\n            createRecommendationsTestingModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                jest_mocking/module-mocking.ts\n            \n            function\n            createRoomQueueTestingModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                jest_mocking/module-mocking.ts\n            \n            function\n            createRoomsTestingModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                jest_mocking/module-mocking.ts\n            \n            function\n            createRoomUsersTestingModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                jest_mocking/module-mocking.ts\n            \n            function\n            createS3TestingModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                jest_mocking/module-mocking.ts\n            \n            function\n            createSearchTestingModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                jest_mocking/module-mocking.ts\n            \n            function\n            createSongsTestingModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                jest_mocking/module-mocking.ts\n            \n            function\n            createSpotifyAuthTestingModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                jest_mocking/module-mocking.ts\n            \n            function\n            createSpotifyTestingModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                jest_mocking/module-mocking.ts\n            \n            function\n            createTasksTestingModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                jest_mocking/module-mocking.ts\n            \n            function\n            createUsersTestingModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                jest_mocking/module-mocking.ts\n            \n            function\n            createUsersUpdateTestingModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                jest_mocking/module-mocking.ts\n            \n            variable\n            JWT_SECRET_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                jest_mocking/module-mocking.ts\n            \n            variable\n            tmpSecret\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                jest_mocking/service-mocking.ts\n            \n            variable\n            mockAuthService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                jest_mocking/service-mocking.ts\n            \n            variable\n            mockConfigService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                jest_mocking/service-mocking.ts\n            \n            variable\n            mockDbUtilsService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                jest_mocking/service-mocking.ts\n            \n            variable\n            mockDtoGenService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                jest_mocking/service-mocking.ts\n            \n            variable\n            mockPrismaService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                jest_mocking/service-mocking.ts\n            \n            variable\n            mockRecommendationsService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                jest_mocking/service-mocking.ts\n            \n            variable\n            mockUsersService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                prisma/prisma.service.ts\n            \n            variable\n            RETRIES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.module.ts\n            \n            variable\n            JWT_SECRET_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            class\n            LoginBody\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            class\n            RefreshBody\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            class\n            RegisterBody\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/spotify/spotifyauth.controller.ts\n            \n            controller\n            SpotifyAuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/spotify/spotifyauth.service.ts\n            \n            class\n            SpotifyCallbackResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/spotify/spotifyauth.service.ts\n            \n            class\n            SpotifyTokenPair\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/spotify/spotifyauth.service.ts\n            \n            class\n            SpotifyTokenRefreshResponse\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/spotify/spotifyauth.service.ts\n            \n            class\n            SpotifyTokenResponse\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/spotify/spotifyauth.service.ts\n            \n            injectable\n            SpotifyAuthService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/bull-board/bull-board.service.ts\n            \n            injectable\n            BullBoardService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/constants.ts\n            \n            variable\n            SOCKET_EVENTS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/exceptions/internal-error.ts\n            \n            class\n            InternalError\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/exceptions/user-error.ts\n            \n            class\n            UserError\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/filter/ws-exception.filter.ts\n            \n            class\n            WsExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/utils.ts\n            \n            function\n            sleep\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/image/image.service.ts\n            \n            injectable\n            ImageService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/live/automod/automod.service.ts\n            \n            injectable\n            AutoModerationService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/live/dmusers/dmusers.service.ts\n            \n            injectable\n            DmUsersService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/live/dmusers/dmusers.service.ts\n            \n            interface\n            dmUser\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/live/dto/chatevent.dto.ts\n            \n            class\n            ChatEventDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/live/dto/emojireaction.dto.ts\n            \n            class\n            EmojiReactionDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/live/dto/emojireaction.dto.ts\n            \n            interface\n            Category\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/live/dto/emojireaction.dto.ts\n            \n            interface\n            Emoji\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/live/dto/livechatmessage.dto.ts\n            \n            class\n            LiveChatMessageDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/live/dto/playbackevent.dto.ts\n            \n            class\n            PlaybackEventDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/live/dto/queueevent.dto.ts\n            \n            class\n            QueueEventDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/live/eventqueue/eventqueue.service.ts\n            \n            injectable\n            EventQueueService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/live/eventqueue/eventqueue.service.ts\n            \n            variable\n            GLOBAL_CONCURRENCY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/live/live.gateway.ts\n            \n            class\n            LiveGateway\n            \n                0 %\n                (0/34)\n            \n        \n        \n            \n                \n                src/live/live.service.ts\n            \n            injectable\n            LiveService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/live/roomusers/roomuser.service.ts\n            \n            injectable\n            RoomUsersService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/live/roomusers/roomuser.service.ts\n            \n            interface\n            liveChatUser\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/logger/logger.service.ts\n            \n            injectable\n            MyLogger\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            module\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/db-utils/db-utils.service.ts\n            \n            injectable\n            DbUtilsService\n            \n                0 %\n                (0/32)\n            \n        \n        \n            \n                \n                src/modules/dto-gen/dto-gen.service.ts\n            \n            injectable\n            DtoGenService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/modules/genres/genres.controller.ts\n            \n            controller\n            GenresController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/genres/genres.service.ts\n            \n            injectable\n            GenresService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/rooms/dto/createroomdto.ts\n            \n            class\n            CreateRoomDto\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/modules/rooms/dto/room.dto.ts\n            \n            class\n            RoomDto\n            \n                0 %\n                (0/22)\n            \n        \n        \n            \n                \n                src/modules/rooms/dto/roomanalytics.dto.ts\n            \n            class\n            AllTimeSessionDataDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/rooms/dto/roomanalytics.dto.ts\n            \n            class\n            JoinsCount\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/rooms/dto/roomanalytics.dto.ts\n            \n            class\n            JoinsPerDay\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/rooms/dto/roomanalytics.dto.ts\n            \n            class\n            MessagesPerHour\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/rooms/dto/roomanalytics.dto.ts\n            \n            class\n            ParticipantsPerHourDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/rooms/dto/roomanalytics.dto.ts\n            \n            class\n            RoomAnalyticsContributorsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/rooms/dto/roomanalytics.dto.ts\n            \n            class\n            RoomAnalyticsDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/rooms/dto/roomanalytics.dto.ts\n            \n            class\n            RoomAnalyticsInteractionsDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/rooms/dto/roomanalytics.dto.ts\n            \n            class\n            RoomAnalyticsKeyMetricsDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/rooms/dto/roomanalytics.dto.ts\n            \n            class\n            RoomAnalyticsParticipationDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/rooms/dto/roomanalytics.dto.ts\n            \n            class\n            RoomAnalyticsQueueDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/rooms/dto/roomanalytics.dto.ts\n            \n            class\n            RoomAnalyticsSongsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/rooms/dto/roomanalytics.dto.ts\n            \n            class\n            RoomAnalyticsVotesDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/rooms/dto/roomanalytics.dto.ts\n            \n            class\n            SessionDataPerDayDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/rooms/dto/roomanalytics.dto.ts\n            \n            class\n            SessionDurationPerDayDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/rooms/dto/roomanalytics.dto.ts\n            \n            class\n            SongAnalyticsDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/rooms/dto/roomsong.dto.ts\n            \n            class\n            RoomSongDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/rooms/dto/songinfo.dto.ts\n            \n            class\n            SongInfoDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/rooms/dto/updateroomdto.ts\n            \n            class\n            UpdateRoomDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/rooms/dto/vote.dto.ts\n            \n            class\n            VoteDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/rooms/roomanalytics.service.ts\n            \n            injectable\n            RoomAnalyticsService\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/modules/rooms/roomqueue/roomqueue.service.ts\n            \n            class\n            ActiveRoom\n            \n                17 %\n                (5/28)\n            \n        \n        \n            \n                \n                src/modules/rooms/roomqueue/roomqueue.service.ts\n            \n            class\n            RoomSong\n            \n                0 %\n                (0/23)\n            \n        \n        \n            \n                \n                src/modules/rooms/roomqueue/roomqueue.service.ts\n            \n            injectable\n            RoomQueueService\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/modules/rooms/roomqueue/roomqueue.service.ts\n            \n            function\n            sortRoomSongs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/rooms/roomqueue/roomqueue.service.ts\n            \n            variable\n            QUEUE_LOCK_TIMEOUT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/rooms/rooms.controller.ts\n            \n            controller\n            RoomsController\n            \n                13 %\n                (4/30)\n            \n        \n        \n            \n                \n                src/modules/rooms/rooms.service.ts\n            \n            class\n            UserActionDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/rooms/rooms.service.ts\n            \n            injectable\n            RoomsService\n            \n                0 %\n                (0/39)\n            \n        \n        \n            \n                \n                src/modules/search/dto/searchhistorydto.ts\n            \n            class\n            SearchHistoryDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/search/search.controller.ts\n            \n            controller\n            SearchController\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/modules/search/search.service.ts\n            \n            class\n            CombinedSearchHistory\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/search/search.service.ts\n            \n            class\n            CombinedSearchResults\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/search/search.service.ts\n            \n            injectable\n            SearchService\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/modules/songs/songs.controller.ts\n            \n            controller\n            SongsController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/songs/songs.service.ts\n            \n            injectable\n            SongsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/dto/dm.dto.ts\n            \n            class\n            DirectMessageDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/users/dto/updateuser.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/dto/user.dto.ts\n            \n            class\n            FollowersAndFollowing\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/dto/user.dto.ts\n            \n            class\n            GenresWithCount\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/dto/user.dto.ts\n            \n            class\n            LinksWithCount\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/dto/user.dto.ts\n            \n            class\n            RoomsData\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/dto/user.dto.ts\n            \n            class\n            SongInfosWithCount\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/dto/user.dto.ts\n            \n            class\n            UserDto\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/modules/users/dto/user.dto.ts\n            \n            class\n            UserFriendship\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/39)\n            \n        \n        \n            \n                \n                src/modules/users/users.service.ts\n            \n            class\n            UserListeningStatsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/57)\n            \n        \n        \n            \n                \n                src/recommendations/recommendations.service.ts\n            \n            injectable\n            RecommendationsService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/retry/retry.service.ts\n            \n            injectable\n            RetryService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/retry/retry.service.ts\n            \n            variable\n            RETRIES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/s3/s3.service.ts\n            \n            injectable\n            S3Service\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/spotify/spotify.service.ts\n            \n            injectable\n            SpotifyService\n            \n                0 %\n                (0/30)\n            \n        \n        \n            \n                \n                src/spotify/spotify.service.ts\n            \n            variable\n            MAX_BYTES_PER_IMAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/spotify/spotify.service.ts\n            \n            variable\n            RETRIES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/spotify/spotify.service.ts\n            \n            variable\n            TABLE_LOCK_TIMEOUT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tasks/tasks.processor.ts\n            \n            class\n            TasksProcessor\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/tasks/tasks.service.ts\n            \n            injectable\n            TasksService\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @aws-sdk/client-cognito-identity-provider : ^3.635.0\n        \n            @aws-sdk/client-s3 : ^3.635.0\n        \n            @aws-sdk/lib-storage : ^3.635.0\n        \n            @aws-sdk/s3-request-presigner : ^3.635.0\n        \n            @bull-board/api : ^5.21.4\n        \n            @bull-board/express : ^5.21.4\n        \n            @bull-board/ui : ^5.21.4\n        \n            @common.js/p-retry : ^6.2.0\n        \n            @datastructures-js/priority-queue : ^6.3.1\n        \n            @nestjs-modules/mailer : ^2.0.2\n        \n            @nestjs/axios : ^3.0.3\n        \n            @nestjs/bull : ^10.2.0\n        \n            @nestjs/common : ^10.4.1\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.4.1\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.4.1\n        \n            @nestjs/platform-socket.io : ^10.4.1\n        \n            @nestjs/schedule : ^4.1.0\n        \n            @nestjs/swagger : ^7.4.0\n        \n            @nestjs/websockets : ^10.4.1\n        \n            @prisma/client : ^5.18.0\n        \n            @spotify/web-api-ts-sdk : ^1.2.0\n        \n            async : ^3.2.6\n        \n            aws-jwt-verify : ^4.0.1\n        \n            axios : ^1.7.4\n        \n            bcrypt : ^5.1.1\n        \n            bull : ^4.16.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            coverage-badges-cli : ^2.0.0\n        \n            date-fns : ^3.6.0\n        \n            dotenv : ^16.4.5\n        \n            express : ^4.19.2\n        \n            ioredis : ^5.4.1\n        \n            jest-mock-extended : ^3.0.7\n        \n            js-yaml : ^4.1.0\n        \n            jsonwebtoken : ^9.0.2\n        \n            ml-kmeans : ^6.0.0\n        \n            morgan : ^1.10.0\n        \n            multer : ^1.4.5-lts.1\n        \n            murlock : ^4.0.0\n        \n            p-retry : ^6.2.0\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            redis : ^4.7.0\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            sharp : ^0.33.5\n        \n            socket.io : ^4.7.5\n        \n            sqlstring : ^2.3.3\n        \n            validator : ^13.12.0\n        \n            winston : ^3.14.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/dmUser.html":{"url":"interfaces/dmUser.html","title":"interface - dmUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  dmUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/live/dmusers/dmusers.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            chatID\n                                        \n                                \n                                \n                                        \n                                            participant\n                                        \n                                \n                                \n                                        \n                                            socketIDs\n                                        \n                                \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        chatID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        chatID:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        participant\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        participant:         UserDto | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserDto | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        socketIDs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        socketIDs:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         UserDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { DbUtilsService } from \"../../modules/db-utils/db-utils.service\";\nimport { DtoGenService } from \"../../modules/dto-gen/dto-gen.service\";\nimport { UserDto } from \"../../modules/users/dto/user.dto\";\nimport { UsersService } from \"../../modules/users/users.service\";\nimport { Server } from \"socket.io\";\nimport { SOCKET_EVENTS } from \"../../common/constants\";\nimport { DirectMessageDto } from \"../../modules/users/dto/dm.dto\";\n\ninterface dmUser {\n\tuser: UserDto;\n\tparticipant: UserDto | null;\n\tchatID: string | null;\n\tsocketIDs: string[];\n}\n\n@Injectable()\nexport class DmUsersService {\n\tconstructor(\n\t\tprivate readonly dbUtils: DbUtilsService,\n\t\tprivate readonly dtogen: DtoGenService,\n\t\tprivate readonly usersService: UsersService,\n\t) {}\n\n\tprivate connectedUsers = new Map();\n\n\tasync addConnectedUser(\n\t\tsocketID: string,\n\t\tuserId: string,\n\t\tparticipantId?: string,\n\t): Promise {\n\t\tif (!(await this.dbUtils.userExists(userId))) {\n\t\t\tthrow new Error(\"User with ID \" + userId + \" does not exist\");\n\t\t}\n\n\t\tif (this.connectedUsers.has(userId)) {\n\t\t\t// add socket id to user\n\t\t\tconst u = this.connectedUsers.get(userId);\n\t\t\tif (!u) {\n\t\t\t\tthrow new Error(\"Connected user does not exist\");\n\t\t\t}\n\t\t\tu.socketIDs.push(socketID);\n\t\t\tif (participantId) {\n\t\t\t\tawait this.setChatInfo(socketID, participantId);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tconst [user]: UserDto[] = await this.dtogen.generateMultipleUserDto([\n\t\t\tuserId,\n\t\t]);\n\n\t\tthis.connectedUsers.set(userId, {\n\t\t\tuser: user,\n\t\t\tparticipant: null,\n\t\t\tchatID: null,\n\t\t\tsocketIDs: [socketID],\n\t\t});\n\t\tif (participantId) {\n\t\t\tawait this.setChatInfo(socketID, participantId);\n\t\t}\n\n\t\tconsole.log(\"Added connected user: \" + user);\n\t\tconsole.log(\"Connected users: \" + this.connectedUsers);\n\t}\n\n\tremoveConnectedUser(socketID: string) {\n\t\t// this.connectedUsers.delete(socketID);\n\t\tfor (const [key, value] of this.connectedUsers) {\n\t\t\twhile (value.socketIDs.includes(socketID)) {\n\t\t\t\tvalue.socketIDs.splice(value.socketIDs.indexOf(socketID), 1);\n\t\t\t\tif (value.socketIDs.length === 0) {\n\t\t\t\t\tthis.connectedUsers.delete(key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tgetConnectedUser(socketID: string): dmUser | null {\n\t\t// const u = this.connectedUsers.get(socketID);\n\t\t// if (!u || u === undefined) {\n\t\t// \tthrow new Error(\"Connected user does not exist\");\n\t\t// }\n\t\t// return u;\n\t\tfor (const [_, value] of this.connectedUsers) {\n\t\t\tif (value.socketIDs.includes(socketID)) {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetUserId(socketID: string): string | null {\n\t\t// const u = this.connectedUsers.get(socketID);\n\t\t// if (!u || u === undefined) {\n\t\t// \tthrow new Error(\"Connected user does not exist\");\n\t\t// }\n\t\t// const user = u.user;\n\t\t// if (!user || user === undefined) {\n\t\t// \tthrow new Error(\"Connected user does not have a user object\");\n\t\t// }\n\t\t// if (!user.userID || user.userID === undefined) {\n\t\t// \tthrow new Error(\"Connected user does not have a userID\");\n\t\t// }\n\t\t// return user.userID;\n\t\tconst u = this.getUser(socketID);\n\t\tif (u === null) {\n\t\t\tthrow new Error(\"Connected user does not exist\");\n\t\t}\n\t\treturn u.userID;\n\t}\n\n\tgetUser(socketID: string): UserDto | null {\n\t\t// const u = this.connectedUsers.get(socketID);\n\t\t// if (!u || u === undefined) {\n\t\t// \tthrow new Error(\"Connected user does not exist\");\n\t\t// }\n\t\t// const user = u.user;\n\t\t// if (!user || user === undefined) {\n\t\t// \tthrow new Error(\"Connected user does not have a user object\");\n\t\t// }\n\t\t// return user;\n\t\tconst u = this.getConnectedUser(socketID);\n\t\tif (u === null) {\n\t\t\tthrow new Error(\"Connected user does not exist\");\n\t\t}\n\t\treturn u.user;\n\t}\n\n\tgetSocketId(userId: string): string | null {\n\t\t// for (const [socketID, u] of this.connectedUsers) {\n\t\t// \tif (u.user.userID === userId) {\n\t\t// \t\treturn socketID;\n\t\t// \t}\n\t\t// }\n\t\t// return null;\n\t\tfor (const [key, value] of this.connectedUsers) {\n\t\t\tif (value.socketIDs.includes(userId)) {\n\t\t\t\treturn key;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetParticipant(socketID: string): UserDto | null {\n\t\t// const u = this.connectedUsers.get(socketID);\n\t\t// if (!u || u === undefined) {\n\t\t// \tthrow new Error(\"Connected user does not exist\");\n\t\t// }\n\t\t// const participant = u.participant;\n\t\t// if (!participant || participant === undefined) {\n\t\t// \tthrow new Error(\"Connected user does not have a participant object\");\n\t\t// }\n\t\t// return participant;\n\t\tconst u = this.getConnectedUser(socketID);\n\t\tif (u === null) {\n\t\t\tthrow new Error(\"Connected user does not exist\");\n\t\t}\n\t\tconst participant = u.participant;\n\t\tif (participant === null) {\n\t\t\tthrow new Error(\"Connected user does not have a participant object\");\n\t\t}\n\t\treturn participant;\n\t}\n\n\tgetChatID(socketID: string): string | null {\n\t\t// const u = this.connectedUsers.get(socketID);\n\t\t// if (!u || u === undefined) {\n\t\t// \tthrow new Error(\"Connected user does not exist\");\n\t\t// }\n\t\t// return u.chatID;\n\t\tconst u = this.getConnectedUser(socketID);\n\t\tif (u === null) {\n\t\t\tthrow new Error(\"Connected user does not exist\");\n\t\t}\n\t\treturn u.chatID;\n\t}\n\n\tasync setChatInfo(socketID: string, participantId: string) {\n\t\tconst u = this.getConnectedUser(socketID);\n\t\tif (!u || u === undefined) {\n\t\t\tthrow new Error(\"Connected user does not exist\");\n\t\t}\n\t\t/*\n\t\tif (!(u.participant === null)) {\n\t\t\tthrow new Error(\"Connected user already has a participant\");\n\t\t}\n\t\tif (!(u.chatID === null)) {\n\t\t\tthrow new Error(\"Connected user already has a chatID\");\n\t\t}\n\t\t\t*/\n\t\tif (!(u.participant === null) || !(u.chatID === null)) {\n\t\t\t//disconnect & reconnect\n\t\t\tthis.disconnectChat(socketID);\n\t\t}\n\n\t\tconst [participant]: UserDto[] = await this.dtogen.generateMultipleUserDto([\n\t\t\tparticipantId,\n\t\t]);\n\n\t\tconst chatIDs: string[] = await this.usersService.generateChatHash(\n\t\t\tu.user.userID,\n\t\t\tparticipantId,\n\t\t);\n\n\t\tconst values: dmUser[] = Array.from(this.connectedUsers.values());\n\t\tif (\n\t\t\tchatIDs.length !== 2 ||\n\t\t\tchatIDs[0] === undefined ||\n\t\t\tchatIDs[1] === undefined ||\n\t\t\tchatIDs[0] === chatIDs[1]\n\t\t) {\n\t\t\tthrow new Error(\"Invalid chatIDs generated\");\n\t\t}\n\n\t\tlet chatID: string = chatIDs[0];\n\t\tif (values.some((u) => u.chatID === chatIDs[1])) {\n\t\t\tconst id = values.find((u) => u.chatID === chatIDs[1]);\n\t\t\tif (!id) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"Very weird error. The chatID exists but the object does not\",\n\t\t\t\t);\n\t\t\t}\n\t\t\tchatID = chatIDs[1];\n\t\t}\n\n\t\tthis.connectedUsers.set(u.user.userID, {\n\t\t\tuser: u.user,\n\t\t\tparticipant: participant,\n\t\t\tchatID: chatID,\n\t\t\tsocketIDs: u.socketIDs,\n\t\t});\n\t}\n\n\tdisconnectChat(socketID: string) {\n\t\tconst u = this.getConnectedUser(socketID);\n\t\tif (!u || u === undefined) {\n\t\t\tthrow new Error(\"Connected user does not exist\");\n\t\t}\n\t\tthis.connectedUsers.set(u.user.userID, {\n\t\t\tuser: u.user,\n\t\t\tparticipant: null,\n\t\t\tchatID: null,\n\t\t\tsocketIDs: u.socketIDs,\n\t\t});\n\t\tconsole.log(socketID);\n\t}\n\n\tasync shareRoom(\n\t\tsocketServer: Server,\n\t\tmessages: DirectMessageDto[],\n\t): Promise {\n\t\tconst chatIDs: string[][] = await Promise.all(\n\t\t\tmessages.map(async (m) => {\n\t\t\t\treturn await this.usersService.generateChatHash(\n\t\t\t\t\tm.sender.userID,\n\t\t\t\t\tm.recipient.userID,\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t\tfor (let i = 0; i  u.chatID === chatIDs[i][0])) {\n\t\t\t\tconst id = values.find((u) => u.chatID === chatIDs[i][0]);\n\t\t\t\tif (!id) {\n\t\t\t\t\tchatID = undefined;\n\t\t\t\t}\n\t\t\t\tchatID = chatIDs[i][0];\n\t\t\t}\n\t\t\tif (!chatID && values.some((u) => u.chatID === chatIDs[i][1])) {\n\t\t\t\tconst id = values.find((u) => u.chatID === chatIDs[i][1]);\n\t\t\t\tif (!id) {\n\t\t\t\t\tchatID = undefined;\n\t\t\t\t}\n\t\t\t\tchatID = chatIDs[i][1];\n\t\t\t}\n\n\t\t\tif (chatID)\n\t\t\t\tsocketServer.to(chatID).emit(SOCKET_EVENTS.DIRECT_MESSAGE, messages[i]);\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            createAppTestingModule   (jest_mocking/.../module-mocking.ts)\n                        \n                        \n                            createAuthTestingModule   (jest_mocking/.../module-mocking.ts)\n                        \n                        \n                            createAutoModerationTestingModule   (jest_mocking/.../module-mocking.ts)\n                        \n                        \n                            createBullBoardTestingModule   (jest_mocking/.../module-mocking.ts)\n                        \n                        \n                            createDbUtilsTestingModule   (jest_mocking/.../module-mocking.ts)\n                        \n                        \n                            createDMUsersTestingModule   (jest_mocking/.../module-mocking.ts)\n                        \n                        \n                            createDtoGenTestingModule   (jest_mocking/.../module-mocking.ts)\n                        \n                        \n                            createGenresTestingModule   (jest_mocking/.../module-mocking.ts)\n                        \n                        \n                            createLiveTestingModule   (jest_mocking/.../module-mocking.ts)\n                        \n                        \n                            createRecommendationsTestingModule   (jest_mocking/.../module-mocking.ts)\n                        \n                        \n                            createRoomQueueTestingModule   (jest_mocking/.../module-mocking.ts)\n                        \n                        \n                            createRoomsTestingModule   (jest_mocking/.../module-mocking.ts)\n                        \n                        \n                            createRoomUsersTestingModule   (jest_mocking/.../module-mocking.ts)\n                        \n                        \n                            createS3TestingModule   (jest_mocking/.../module-mocking.ts)\n                        \n                        \n                            createSearchTestingModule   (jest_mocking/.../module-mocking.ts)\n                        \n                        \n                            createSongsTestingModule   (jest_mocking/.../module-mocking.ts)\n                        \n                        \n                            createSpotifyAuthTestingModule   (jest_mocking/.../module-mocking.ts)\n                        \n                        \n                            createSpotifyTestingModule   (jest_mocking/.../module-mocking.ts)\n                        \n                        \n                            createTasksTestingModule   (jest_mocking/.../module-mocking.ts)\n                        \n                        \n                            createUsersTestingModule   (jest_mocking/.../module-mocking.ts)\n                        \n                        \n                            createUsersUpdateTestingModule   (jest_mocking/.../module-mocking.ts)\n                        \n                        \n                            sleep   (src/.../utils.ts)\n                        \n                        \n                            sortRoomSongs   (src/.../roomqueue.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    jest_mocking/module-mocking.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createAppTestingModule\n                        \n                    \n                \n            \n            \n                \ncreateAppTestingModule()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createAuthTestingModule\n                        \n                    \n                \n            \n            \n                \ncreateAuthTestingModule()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createAutoModerationTestingModule\n                        \n                    \n                \n            \n            \n                \ncreateAutoModerationTestingModule()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createBullBoardTestingModule\n                        \n                    \n                \n            \n            \n                \ncreateBullBoardTestingModule()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createDbUtilsTestingModule\n                        \n                    \n                \n            \n            \n                \ncreateDbUtilsTestingModule()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createDMUsersTestingModule\n                        \n                    \n                \n            \n            \n                \ncreateDMUsersTestingModule()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createDtoGenTestingModule\n                        \n                    \n                \n            \n            \n                \ncreateDtoGenTestingModule()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createGenresTestingModule\n                        \n                    \n                \n            \n            \n                \ncreateGenresTestingModule()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createLiveTestingModule\n                        \n                    \n                \n            \n            \n                \ncreateLiveTestingModule()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createRecommendationsTestingModule\n                        \n                    \n                \n            \n            \n                \ncreateRecommendationsTestingModule()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createRoomQueueTestingModule\n                        \n                    \n                \n            \n            \n                \ncreateRoomQueueTestingModule()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createRoomsTestingModule\n                        \n                    \n                \n            \n            \n                \ncreateRoomsTestingModule()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createRoomUsersTestingModule\n                        \n                    \n                \n            \n            \n                \ncreateRoomUsersTestingModule()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createS3TestingModule\n                        \n                    \n                \n            \n            \n                \ncreateS3TestingModule()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createSearchTestingModule\n                        \n                    \n                \n            \n            \n                \ncreateSearchTestingModule()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createSongsTestingModule\n                        \n                    \n                \n            \n            \n                \ncreateSongsTestingModule()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createSpotifyAuthTestingModule\n                        \n                    \n                \n            \n            \n                \ncreateSpotifyAuthTestingModule()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createSpotifyTestingModule\n                        \n                    \n                \n            \n            \n                \ncreateSpotifyTestingModule()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createTasksTestingModule\n                        \n                    \n                \n            \n            \n                \ncreateTasksTestingModule()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createUsersTestingModule\n                        \n                    \n                \n            \n            \n                \ncreateUsersTestingModule()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createUsersUpdateTestingModule\n                        \n                    \n                \n            \n            \n                \ncreateUsersUpdateTestingModule()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    src/common/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        sleep\n                        \n                    \n                \n            \n            \n                \nsleep(ms: number)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ms\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/modules/rooms/roomqueue/roomqueue.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        sortRoomSongs\n                        \n                    \n                \n            \n            \n                \nsortRoomSongs(queue)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queue\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         RoomSong[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNest\n\n\n\nA progressive Node.js framework for building efficient and scalable server-side applications.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:cov\nWelcome to Backend\nThis is a NestJS project with LOTS of plugins to support good programming.\nNavigating the files\nFiles\n\nAPI_SCHEMA.mdContains the schema documentation for the project's API.\n\ncheck-versions.jsA script to enforce the correct & consistent version of NodeJS.\n\njest.setup.jsJest configuration and setup script for testing.\n\nnest-cli.jsonConfiguration file for the Nest CLI.\n\npackage.jsonLists project dependencies, scripts, and metadata. (for Node & NPM)\n\nREADME.mdOverview and documentation of the project.\n\ntsconfig.jsonTypeScript compiler options and configuration for the project.\n\npackage-lock.jsonRecords the exact version of each installed package to ensure consistent installs.\n\ntsconfig.build.jsonTypeScript configuration for the build process.\n\nwebpack-hmr.config.jsWebpack configuration for Hot Module Replacement (HMR).\n\n\nDirectories\n\narchiveArchived files & folders.\n\ncoverageContains code coverage reports generated by Jest.\n\ndistCompiled output files from the TypeScript source code.\n\ndocumentationAuto-generated documentation for the project.\n\njest_mockingContains mock files for Jest testing.\n\nnode_modulesDependency modules & addons installed by npm.\n\nprismaContains Prisma-related files, including schema and migration configurations.\n\nsrcSource code of the application.\n\ntestContains unit and integration tests for the application.\n\ntoolsExtra tools & scripts for development.\n\nuploadsDirectory for uploaded files.\n\n\nSource files\nFiles\n\napp.controller.spec.tsUnit tests for the AppController class.\n\napp.service.tsContains the business logic for the AppService class.\n\napp.controller.tsThe main controller handling incoming requests and returning responses.\n\napp.module.tsMain application module that imports and configures other modules and providers.\n\nmain.tsThe entry point of the NestJS application, bootstrapping the app.\n\n\nDirectories\n\nauthHandles authentication-related functionality, including login, registration, and token management.\n\nbull-configConfiguration files for Bull queue management.\n\nbull-boardProvides a UI for monitoring Bull queues.\n\nchatManages chat functionalities, including messaging and chat rooms.\n\ncommonContains shared utilities, guards, and pipes used throughout the application.\n\nconfigConfiguration files and settings for different environments.\n\nmodulesContains the core modules of the application, organizing related features and components.\n\ns3Integrations and services related to Amazon S3 for file storage.\n\nspotifyIntegration with the Spotify API for handling music-related features. (Excluding Spotify Auth)\n\ntasksScheduled tasks and background jobs for the application.\n\n\nHow things work in NestJS\nNestJS is built for an MVC architecture out of the box.\nIt merges the backend and API layers into 1 server-side app.\nControllers\nAll endpoints / accessible paths to the application are defined in controllers.\nEg. GET /user and POST /user/settings could be in UserController.ts\nServices\nControllers are best left to handle how input and output data flows through the application. Thus, the complex logic expected from the endpoints & paths are best kept in services.\nBusiness logic, such as checking if data is valid, managing complex operations on the data, database (and other external service) interactions, etc are stored in services.\nEg, getUserInfo() or getUserRooms() would be stored in UserService.ts\nModules\nGiven that controllers and services can be closely related and can also make use of other services, dependencies for them are stored in modules.\nModules in NestJS are used to organize the application into cohesive blocks of related functionality. They encapsulate controllers, providers (services), and other configuration elements, ensuring modularity and maintainability of the codebase.\nEg, UserModule.ts would link UserService and UserController together as well as manage their imports (shared or otherwise), make UserController's  endpoints to the rest of the application, allow for UserService to be able to be imported by other services/controllers, etc\nDefining a Module\nA module definition looks like this:\nExample :@Module({\n    imports: [PrismaModule],\n    controllers: [UsersController],\n    providers: [\n        UsersService,\n        PrismaService,\n        DtoGenService,\n        DbUtilsService,\n        AuthService,\n    ],\n    exports: [UsersService],\n})\nexport class UsersModule {}\nImports\nWhen a module uses another module's functionalities and dependencies, they should be imported. This establishes a hierarchical relationship where modules can depend on one another.\n\nAnything that's external to the module must have its accompanying Module imported here.\n\nControllers\nBy default, all modules are linked to the main AppModule and thus, any controllers added to the controllers list of a module makes them accessible when the server app is running.\n\nProviders\nAny services created and used within the module should be added to the providers list as that they can be injected into controllers or other services for loose coupling.\n\n\nThis is for any services & providers defined internally / within the module. No external services (eg. PrismaService) should be placed here.\n\nExports\nAny components (like services/providers) used within the module and that should be made available for use in other modules should be added to the exports array. This allows them to be included in another module's providers without being concerned about the service's module structure.\n\nCoding Standards\n(TBA)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/liveChatUser.html":{"url":"interfaces/liveChatUser.html","title":"interface - liveChatUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  liveChatUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/live/roomusers/roomuser.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            roomID\n                                        \n                                \n                                \n                                        \n                                            socketIDs\n                                        \n                                \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        roomID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roomID:     string | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | undefined\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        socketIDs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        socketIDs:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         UserDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { DbUtilsService } from \"../../modules/db-utils/db-utils.service\";\nimport { DtoGenService } from \"../../modules/dto-gen/dto-gen.service\";\nimport { UserDto } from \"../../modules/users/dto/user.dto\";\n// import { PrismaService } from \"../../../prisma/prisma.service\";\n// import * as PrismaTypes from \"@prisma/client\";\n\ninterface liveChatUser {\n\tuser: UserDto;\n\troomID: string | undefined;\n\tsocketIDs: string[];\n}\n\n@Injectable()\nexport class RoomUsersService {\n\tconstructor(\n\t\tprivate readonly dbUtils: DbUtilsService,\n\t\tprivate readonly dtogen: DtoGenService, // private readonly prisma: PrismaService,\n\t) {}\n\n\tprivate connectedUsers = new Map();\n\n\tasync addConnectedUser(\n\t\tsocketID: string,\n\t\tuserId: string,\n\t\troomID?: string,\n\t): Promise {\n\t\tif (this.connectedUsers.has(userId)) {\n\t\t\tif (!(await this.dbUtils.userExists(userId))) {\n\t\t\t\tthrow new Error(\"User with ID \" + userId + \" does not exist\");\n\t\t\t}\n\t\t\tconst u = this.connectedUsers.get(userId);\n\t\t\tif (u) {\n\t\t\t\tu.socketIDs.push(socketID);\n\t\t\t\tif (roomID && roomID !== undefined) {\n\t\t\t\t\tif (!(await this.dbUtils.roomExists(roomID))) {\n\t\t\t\t\t\tthrow new Error(\"Room with ID \" + roomID + \" does not exist\");\n\t\t\t\t\t}\n\t\t\t\t\tu.roomID = roomID;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst [user]: UserDto[] = await this.dtogen.generateMultipleUserDto([\n\t\t\t\tuserId,\n\t\t\t]);\n\n\t\t\tif (roomID && roomID !== undefined) {\n\t\t\t\tif (!(await this.dbUtils.roomExists(roomID))) {\n\t\t\t\t\tthrow new Error(\"Room with ID \" + roomID + \" does not exist\");\n\t\t\t\t}\n\t\t\t\tthis.connectedUsers.set(userId, {\n\t\t\t\t\tuser,\n\t\t\t\t\troomID,\n\t\t\t\t\tsocketIDs: [socketID],\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.connectedUsers.set(userId, {\n\t\t\t\t\tuser,\n\t\t\t\t\troomID: undefined,\n\t\t\t\t\tsocketIDs: [socketID],\n\t\t\t\t});\n\t\t\t}\n\t\t\tconsole.log(\"Added connected user: \" + user);\n\t\t\tconsole.log(\"Connected users: \" + this.connectedUsers);\n\t\t}\n\t}\n\n\tremoveConnectedUser(socketID: string) {\n\t\t// this.connectedUsers.delete(socketID);\n\t\tfor (const [key, value] of this.connectedUsers) {\n\t\t\twhile (value.socketIDs.includes(socketID)) {\n\t\t\t\tvalue.socketIDs.splice(value.socketIDs.indexOf(socketID), 1);\n\t\t\t\tif (value.socketIDs.length === 0) {\n\t\t\t\t\tthis.connectedUsers.delete(key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tgetConnectedUser(socketID: string): liveChatUser | null {\n\t\t// const u = this.connectedUsers.get(socketID);\n\t\t// if (!u || u === undefined) {\n\t\t// \treturn null;\n\t\t// }\n\t\t// return u;\n\t\tfor (const [, value] of this.connectedUsers) {\n\t\t\tif (value.socketIDs.includes(socketID)) {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetUserId(socketID: string): string | null {\n\t\t// const u = this.connectedUsers.get(socketID);\n\t\t// if (!u || u === undefined) {\n\t\t// \treturn null;\n\t\t// }\n\t\t// const user = u.user;\n\t\t// if (!user || user === undefined) {\n\t\t// \tthrow new Error(\"Connected user does not have a user object\");\n\t\t// }\n\t\t// if (!user.userID || user.userID === undefined) {\n\t\t// \tthrow new Error(\"Connected user does not have a userID\");\n\t\t// }\n\t\t// return user.userID;\n\t\tfor (const [key, value] of this.connectedUsers) {\n\t\t\tif (value.socketIDs.includes(socketID)) {\n\t\t\t\treturn key;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tasync setRoomId(socketID: string, roomID: string) {\n\t\t// const u = this.connectedUsers.get(socketID);\n\t\t// if (!u || u === undefined) {\n\t\t// \tthrow new Error(\"Connected user does not exist\");\n\t\t// }\n\t\t// if (!(await this.dbUtils.roomExists(roomID))) {\n\t\t// \tthrow new Error(\"Room with ID \" + roomID + \" does not exist\");\n\t\t// }\n\t\t// u.roomID = roomID;\n\t\tfor (const [key, value] of this.connectedUsers) {\n\t\t\tif (value.socketIDs.includes(socketID)) {\n\t\t\t\tthis.connectedUsers.set(key, { ...value, roomID });\n\t\t\t}\n\t\t}\n\t}\n\n\tasync leaveRoom(socketID: string) {\n\t\t// const u = this.connectedUsers.get(socketID);\n\t\t// if (!u || u === undefined) {\n\t\t// \tthrow new Error(\"Connected user does not exist\");\n\t\t// }\n\t\t// if (!u.roomID || u.roomID === undefined) {\n\t\t// \t//throw new Error(\"Connected user does not have a roomID\");\n\t\t// }\n\t\t// u.roomID = undefined;\n\t\tfor (const [key, value] of this.connectedUsers) {\n\t\t\tif (value.socketIDs.includes(socketID)) {\n\t\t\t\tthis.connectedUsers.set(key, { ...value, roomID: undefined });\n\t\t\t}\n\t\t}\n\t}\n\n\tgetRoomId(socketID: string): string | null {\n\t\t// const u = this.connectedUsers.get(socketID);\n\t\t// if (!u || u === undefined) {\n\t\t// \treturn null;\n\t\t// }\n\t\t// if (!u.roomID || u.roomID === undefined) {\n\t\t// \tthrow new Error(\"Connected user does not have a roomID\");\n\t\t// }\n\t\t// return u.roomID;\n\t\tfor (const [, value] of this.connectedUsers) {\n\t\t\tif (value.socketIDs.includes(socketID)) {\n\t\t\t\tif (value.roomID) {\n\t\t\t\t\treturn value.roomID;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetRoomUsers(roomID: string): UserDto[] {\n\t\tconst users: UserDto[] = [];\n\t\tthis.connectedUsers.forEach((value) => {\n\t\t\tif (value.roomID === roomID) {\n\t\t\t\tusers.push(value.user);\n\t\t\t}\n\t\t});\n\t\treturn users;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AutoModerationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BullBoardModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BullConfigModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DbUtilsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DmUsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DtoGenModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GenresModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ImageModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LiveModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MockConfigModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MockPrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProfileModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RecommendationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RetryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RoomQueueModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RoomsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RoomUsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        S3Module\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SearchModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SongsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SpotifyAuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SpotifyModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AutoModerationModule\n\n\n\ncluster_AutoModerationModule_exports\n\n\n\ncluster_AutoModerationModule_providers\n\n\n\ncluster_BullBoardModule\n\n\n\ncluster_BullBoardModule_exports\n\n\n\ncluster_BullBoardModule_providers\n\n\n\ncluster_DbUtilsModule\n\n\n\ncluster_DbUtilsModule_exports\n\n\n\ncluster_DbUtilsModule_providers\n\n\n\ncluster_DmUsersModule\n\n\n\ncluster_DmUsersModule_exports\n\n\n\ncluster_DmUsersModule_providers\n\n\n\ncluster_DtoGenModule\n\n\n\ncluster_DtoGenModule_exports\n\n\n\ncluster_DtoGenModule_providers\n\n\n\ncluster_GenresModule\n\n\n\ncluster_GenresModule_providers\n\n\n\ncluster_ImageModule\n\n\n\ncluster_ImageModule_exports\n\n\n\ncluster_ImageModule_providers\n\n\n\ncluster_LiveModule\n\n\n\ncluster_LiveModule_imports\n\n\n\ncluster_LiveModule_exports\n\n\n\ncluster_LiveModule_providers\n\n\n\ncluster_MockConfigModule\n\n\n\ncluster_MockConfigModule_exports\n\n\n\ncluster_MockPrismaModule\n\n\n\ncluster_MockPrismaModule_exports\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_exports\n\n\n\ncluster_ProfileModule_providers\n\n\n\ncluster_RecommendationsModule\n\n\n\ncluster_RecommendationsModule_exports\n\n\n\ncluster_RecommendationsModule_providers\n\n\n\ncluster_RetryModule\n\n\n\ncluster_RetryModule_exports\n\n\n\ncluster_RetryModule_providers\n\n\n\ncluster_RoomQueueModule\n\n\n\ncluster_RoomQueueModule_exports\n\n\n\ncluster_RoomQueueModule_providers\n\n\n\ncluster_RoomsModule\n\n\n\ncluster_RoomsModule_exports\n\n\n\ncluster_RoomsModule_providers\n\n\n\ncluster_RoomUsersModule\n\n\n\ncluster_RoomUsersModule_exports\n\n\n\ncluster_RoomUsersModule_providers\n\n\n\ncluster_S3Module\n\n\n\ncluster_S3Module_exports\n\n\n\ncluster_S3Module_providers\n\n\n\ncluster_SearchModule\n\n\n\ncluster_SearchModule_exports\n\n\n\ncluster_SearchModule_providers\n\n\n\ncluster_SongsModule\n\n\n\ncluster_SongsModule_exports\n\n\n\ncluster_SongsModule_providers\n\n\n\ncluster_SpotifyAuthModule\n\n\n\ncluster_SpotifyAuthModule_exports\n\n\n\ncluster_SpotifyAuthModule_providers\n\n\n\ncluster_SpotifyModule\n\n\n\ncluster_SpotifyModule_exports\n\n\n\ncluster_SpotifyModule_providers\n\n\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_exports\n\n\n\ncluster_TasksModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nRoomsModule\n\nRoomsModule\n\nRoomsModule -->\n\nAuthModule->RoomsModule\n\n\n\n\n\nSearchModule\n\nSearchModule\n\nSearchModule -->\n\nAuthModule->SearchModule\n\n\n\n\n\nSongsModule\n\nSongsModule\n\nSongsModule -->\n\nAuthModule->SongsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nBullBoardModule\n\nBullBoardModule\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nBullBoardModule->TasksModule\n\n\n\nAppModule -->\n\nBullBoardModule->AppModule\n\n\n\n\n\nBullBoardService \n\nBullBoardService \n\nBullBoardService  -->\n\nBullBoardModule->BullBoardService \n\n\n\n\n\nBullConfigModule\n\nBullConfigModule\n\nBullBoardModule -->\n\nBullConfigModule->BullBoardModule\n\n\n\nAppModule -->\n\nBullConfigModule->AppModule\n\n\n\n\n\nDbUtilsModule\n\nDbUtilsModule\n\n\n\nDtoGenModule\n\nDtoGenModule\n\nDtoGenModule -->\n\nDbUtilsModule->DtoGenModule\n\n\n\n\n\nLiveModule\n\nLiveModule\n\nLiveModule -->\n\nDbUtilsModule->LiveModule\n\n\n\nRoomsModule -->\n\nDbUtilsModule->RoomsModule\n\n\n\nSearchModule -->\n\nDbUtilsModule->SearchModule\n\n\n\nUsersModule -->\n\nDbUtilsModule->UsersModule\n\n\n\nAppModule -->\n\nDbUtilsModule->AppModule\n\n\n\n\n\nSpotifyAuthModule\n\nSpotifyAuthModule\n\nSpotifyAuthModule -->\n\nDbUtilsModule->SpotifyAuthModule\n\n\n\n\n\nDbUtilsService \n\nDbUtilsService \n\nDbUtilsService  -->\n\nDbUtilsModule->DbUtilsService \n\n\n\n\n\nDmUsersModule\n\nDmUsersModule\n\nDmUsersModule -->\n\nDbUtilsModule->DmUsersModule\n\n\n\n\n\nRoomQueueModule\n\nRoomQueueModule\n\nRoomQueueModule -->\n\nDbUtilsModule->RoomQueueModule\n\n\n\n\n\nRoomUsersModule\n\nRoomUsersModule\n\nRoomUsersModule -->\n\nDbUtilsModule->RoomUsersModule\n\n\n\nLiveModule -->\n\nDtoGenModule->LiveModule\n\n\n\nRoomsModule -->\n\nDtoGenModule->RoomsModule\n\n\n\nSearchModule -->\n\nDtoGenModule->SearchModule\n\n\n\nUsersModule -->\n\nDtoGenModule->UsersModule\n\n\n\nAppModule -->\n\nDtoGenModule->AppModule\n\n\n\nDmUsersModule -->\n\nDtoGenModule->DmUsersModule\n\n\n\n\n\nDtoGenService \n\nDtoGenService \n\nDtoGenService  -->\n\nDtoGenModule->DtoGenService \n\n\n\nRoomQueueModule -->\n\nDtoGenModule->RoomQueueModule\n\n\n\nRoomUsersModule -->\n\nDtoGenModule->RoomUsersModule\n\n\n\n\n\nGenresModule\n\nGenresModule\n\nAppModule -->\n\nGenresModule->AppModule\n\n\n\n\n\nImageModule\n\nImageModule\n\n\n\nSpotifyModule\n\nSpotifyModule\n\nSpotifyModule -->\n\nImageModule->SpotifyModule\n\n\n\nAppModule -->\n\nImageModule->AppModule\n\n\n\n\n\nImageService \n\nImageService \n\nImageService  -->\n\nImageModule->ImageService \n\n\n\nAppModule -->\n\nLiveModule->AppModule\n\n\n\n\n\nDmUsersModule \n\nDmUsersModule \n\nDmUsersModule  -->\n\nLiveModule->DmUsersModule \n\n\n\n\n\nLiveGateway \n\nLiveGateway \n\nLiveGateway  -->\n\nLiveModule->LiveGateway \n\n\n\n\n\nRoomUsersModule \n\nRoomUsersModule \n\nRoomUsersModule  -->\n\nLiveModule->RoomUsersModule \n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\nDbUtilsModule -->\n\nPrismaModule->DbUtilsModule\n\n\n\nDtoGenModule -->\n\nPrismaModule->DtoGenModule\n\n\n\nGenresModule -->\n\nPrismaModule->GenresModule\n\n\n\nRoomsModule -->\n\nPrismaModule->RoomsModule\n\n\n\nSearchModule -->\n\nPrismaModule->SearchModule\n\n\n\nSongsModule -->\n\nPrismaModule->SongsModule\n\n\n\nSpotifyModule -->\n\nPrismaModule->SpotifyModule\n\n\n\nTasksModule -->\n\nPrismaModule->TasksModule\n\n\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\nSpotifyAuthModule -->\n\nPrismaModule->SpotifyAuthModule\n\n\n\nRoomQueueModule -->\n\nPrismaModule->RoomQueueModule\n\n\n\nRoomUsersModule -->\n\nPrismaModule->RoomUsersModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nProfileModule\n\nProfileModule\n\nProfileModule -->\n\nPrismaModule->ProfileModule\n\n\n\n\n\nRecommendationsModule\n\nRecommendationsModule\n\nRoomsModule -->\n\nRecommendationsModule->RoomsModule\n\n\n\nUsersModule -->\n\nRecommendationsModule->UsersModule\n\n\n\nAppModule -->\n\nRecommendationsModule->AppModule\n\n\n\n\n\nRecommendationsService \n\nRecommendationsService \n\nRecommendationsService  -->\n\nRecommendationsModule->RecommendationsService \n\n\n\n\n\nRetryModule\n\nRetryModule\n\nPrismaModule -->\n\nRetryModule->PrismaModule\n\n\n\nSpotifyModule -->\n\nRetryModule->SpotifyModule\n\n\n\nAppModule -->\n\nRetryModule->AppModule\n\n\n\n\n\nRetryService \n\nRetryService \n\nRetryService  -->\n\nRetryModule->RetryService \n\n\n\nLiveModule -->\n\nRoomsModule->LiveModule\n\n\n\nAppModule -->\n\nRoomsModule->AppModule\n\n\n\n\n\nRoomAnalyticsService \n\nRoomAnalyticsService \n\nRoomAnalyticsService  -->\n\nRoomsModule->RoomAnalyticsService \n\n\n\n\n\nRoomsService \n\nRoomsService \n\nRoomsService  -->\n\nRoomsModule->RoomsService \n\n\n\n\n\nS3Module\n\nS3Module\n\nAppModule -->\n\nS3Module->AppModule\n\n\n\n\n\nS3Service \n\nS3Service \n\nS3Service  -->\n\nS3Module->S3Service \n\n\n\nAppModule -->\n\nSearchModule->AppModule\n\n\n\n\n\nSearchService \n\nSearchService \n\nSearchService  -->\n\nSearchModule->SearchService \n\n\n\nAppModule -->\n\nSongsModule->AppModule\n\n\n\n\n\nSongsService \n\nSongsService \n\nSongsService  -->\n\nSongsModule->SongsService \n\n\n\nRoomsModule -->\n\nSpotifyModule->RoomsModule\n\n\n\nTasksModule -->\n\nSpotifyModule->TasksModule\n\n\n\nAppModule -->\n\nSpotifyModule->AppModule\n\n\n\nRoomQueueModule -->\n\nSpotifyModule->RoomQueueModule\n\n\n\n\n\nSpotifyService \n\nSpotifyService \n\nSpotifyService  -->\n\nSpotifyModule->SpotifyService \n\n\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\nSpotifyAuthModule -->\n\nTasksModule->SpotifyAuthModule\n\n\n\nRoomQueueModule -->\n\nTasksModule->RoomQueueModule\n\n\n\n\n\nTasksService \n\nTasksService \n\nTasksService  -->\n\nTasksModule->TasksService \n\n\n\nLiveModule -->\n\nUsersModule->LiveModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\nDmUsersModule -->\n\nUsersModule->DmUsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nMyLogger\n\nMyLogger\n\nAppModule -->\n\nMyLogger->AppModule\n\n\n\nAuthModule -->\n\nSpotifyAuthModule->AuthModule\n\n\n\nRoomQueueModule -->\n\nSpotifyAuthModule->RoomQueueModule\n\n\n\n\n\nSpotifyAuthService \n\nSpotifyAuthService \n\nSpotifyAuthService  -->\n\nSpotifyAuthModule->SpotifyAuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\nProfileModule -->\n\nAuthService->ProfileModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nAutoModerationService \n\nAutoModerationService \n\n\n\nAutoModerationModule\n\nAutoModerationModule\n\nLiveModule -->\n\nAutoModerationModule->LiveModule\n\n\n\nAutoModerationService  -->\n\nAutoModerationModule->AutoModerationService \n\n\n\nDmUsersModule -->\n\nAutoModerationModule->DmUsersModule\n\n\n\nRoomUsersModule -->\n\nAutoModerationModule->RoomUsersModule\n\n\n\n\n\nAutoModerationService\n\nAutoModerationService\n\nAutoModerationModule -->\n\nAutoModerationService->AutoModerationModule\n\n\n\n\n\nBullBoardService\n\nBullBoardService\n\nBullBoardModule -->\n\nBullBoardService->BullBoardModule\n\n\n\n\n\nDbUtilsService\n\nDbUtilsService\n\nDbUtilsModule -->\n\nDbUtilsService->DbUtilsModule\n\n\n\nProfileModule -->\n\nDbUtilsService->ProfileModule\n\n\n\nLiveModule -->\n\nDmUsersModule->LiveModule\n\n\n\nRoomsModule -->\n\nDmUsersModule->RoomsModule\n\n\n\n\n\nDmUsersService \n\nDmUsersService \n\nDmUsersService  -->\n\nDmUsersModule->DmUsersService \n\n\n\n\n\nDmUsersService\n\nDmUsersService\n\nDmUsersModule -->\n\nDmUsersService->DmUsersModule\n\n\n\n\n\nDtoGenService\n\nDtoGenService\n\nDtoGenModule -->\n\nDtoGenService->DtoGenModule\n\n\n\nProfileModule -->\n\nDtoGenService->ProfileModule\n\n\n\n\n\nGenresService\n\nGenresService\n\nGenresModule -->\n\nGenresService->GenresModule\n\n\n\n\n\nImageService\n\nImageService\n\nImageModule -->\n\nImageService->ImageModule\n\n\n\nLiveModule -->\n\nRoomQueueModule->LiveModule\n\n\n\nRoomsModule -->\n\nRoomQueueModule->RoomsModule\n\n\n\n\n\nRoomQueueService \n\nRoomQueueService \n\nRoomQueueService  -->\n\nRoomQueueModule->RoomQueueService \n\n\n\nLiveModule -->\n\nRoomUsersModule->LiveModule\n\n\n\n\n\nRoomUsersService \n\nRoomUsersService \n\nRoomUsersService  -->\n\nRoomUsersModule->RoomUsersService \n\n\n\n\n\nEventQueueService\n\nEventQueueService\n\nLiveModule -->\n\nEventQueueService->LiveModule\n\n\n\n\n\nLiveService\n\nLiveService\n\nLiveModule -->\n\nLiveService->LiveModule\n\n\n\n\n\nConfigService \n\nConfigService \n\n\n\nMockConfigModule\n\nMockConfigModule\n\nConfigService  -->\n\nMockConfigModule->ConfigService \n\n\n\n\n\nMockPrismaModule\n\nMockPrismaModule\n\nPrismaService  -->\n\nMockPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\nProfileModule -->\n\nPrismaService->ProfileModule\n\n\n\n\n\nProfileService \n\nProfileService \n\nProfileService  -->\n\nProfileModule->ProfileService \n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\nRecommendationsService\n\nRecommendationsService\n\nRecommendationsModule -->\n\nRecommendationsService->RecommendationsModule\n\n\n\n\n\nRetryService\n\nRetryService\n\nRetryModule -->\n\nRetryService->RetryModule\n\n\n\n\n\nRoomQueueService\n\nRoomQueueService\n\nRoomQueueModule -->\n\nRoomQueueService->RoomQueueModule\n\n\n\n\n\nRoomAnalyticsService\n\nRoomAnalyticsService\n\nRoomsModule -->\n\nRoomAnalyticsService->RoomsModule\n\n\n\n\n\nRoomsService\n\nRoomsService\n\nRoomsModule -->\n\nRoomsService->RoomsModule\n\n\n\n\n\nRoomUsersService\n\nRoomUsersService\n\nRoomUsersModule -->\n\nRoomUsersService->RoomUsersModule\n\n\n\n\n\nS3Service\n\nS3Service\n\nS3Module -->\n\nS3Service->S3Module\n\n\n\n\n\nSearchService\n\nSearchService\n\nSearchModule -->\n\nSearchService->SearchModule\n\n\n\n\n\nSongsService\n\nSongsService\n\nSongsModule -->\n\nSongsService->SongsModule\n\n\n\n\n\nSpotifyAuthService\n\nSpotifyAuthService\n\nSpotifyAuthModule -->\n\nSpotifyAuthService->SpotifyAuthModule\n\n\n\n\n\nSpotifyService\n\nSpotifyService\n\nSpotifyModule -->\n\nSpotifyService->SpotifyModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        27 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    9 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    30 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    65 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CognitoDecodedToken   (src/.../auth.service.ts)\n                        \n                        \n                            ExplicitContentSettings   (archive/.../user.ts)\n                        \n                        \n                            ExternalUrls   (archive/.../user.ts)\n                        \n                        \n                            Followers   (archive/.../user.ts)\n                        \n                        \n                            FullyQualifiedRoom   (src/.../db-utils.service.ts)\n                        \n                        \n                            Image   (archive/.../user.ts)\n                        \n                        \n                            JWTPayload   (src/.../auth.service.ts)\n                        \n                        \n                            RetryCB   (src/.../retry.service.ts)\n                        \n                        \n                            RetryOptions   (src/.../retry.service.ts)\n                        \n                        \n                            RetryStatus   (src/.../retry.service.ts)\n                        \n                        \n                            TaskFunction   (src/.../eventqueue.service.ts)\n                        \n                        \n                            UserWithAuth   (src/.../db-utils.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.service.ts\n    \n    \n        \n            \n                \n                    \n                    CognitoDecodedToken\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JWTPayload\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    archive/spotify/models/user.ts\n    \n    \n        \n            \n                \n                    \n                    ExplicitContentSettings\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExternalUrls\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Followers\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Image\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/modules/db-utils/db-utils.service.ts\n    \n    \n        \n            \n                \n                    \n                    FullyQualifiedRoom\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UserWithAuth\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/retry/retry.service.ts\n    \n    \n        \n            \n                \n                    \n                    RetryCB\n                \n            \n            \n                \n                    Retry-status callback type.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RetryOptions\n                \n            \n            \n                \n                    Type for options passed into retryAsync function.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RetryStatus\n                \n            \n            \n                \n                    Retry-status object type, for use with RetryCB.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/live/eventqueue/eventqueue.service.ts\n    \n    \n        \n            \n                \n                    \n                    TaskFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GLOBAL_CONCURRENCY   (src/.../eventqueue.service.ts)\n                        \n                        \n                            JWT_SECRET_KEY   (jest_mocking/.../module-mocking.ts)\n                        \n                        \n                            JWT_SECRET_KEY   (src/.../auth.module.ts)\n                        \n                        \n                            MAX_BYTES_PER_IMAGE   (src/.../spotify.service.ts)\n                        \n                        \n                            mockAuthService   (jest_mocking/.../service-mocking.ts)\n                        \n                        \n                            mockConfigService   (jest_mocking/.../service-mocking.ts)\n                        \n                        \n                            mockDbUtilsService   (jest_mocking/.../service-mocking.ts)\n                        \n                        \n                            mockDtoGenService   (jest_mocking/.../service-mocking.ts)\n                        \n                        \n                            mockPrismaService   (jest_mocking/.../service-mocking.ts)\n                        \n                        \n                            mockRecommendationsService   (jest_mocking/.../service-mocking.ts)\n                        \n                        \n                            mockUsersService   (jest_mocking/.../service-mocking.ts)\n                        \n                        \n                            module   (src/.../main.ts)\n                        \n                        \n                            QUEUE_LOCK_TIMEOUT   (src/.../roomqueue.service.ts)\n                        \n                        \n                            RETRIES   (prisma/.../prisma.service.ts)\n                        \n                        \n                            RETRIES   (src/.../retry.service.ts)\n                        \n                        \n                            RETRIES   (src/.../spotify.service.ts)\n                        \n                        \n                            SOCKET_EVENTS   (src/.../constants.ts)\n                        \n                        \n                            TABLE_LOCK_TIMEOUT   (src/.../spotify.service.ts)\n                        \n                        \n                            tmpSecret   (jest_mocking/.../module-mocking.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/live/eventqueue/eventqueue.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GLOBAL_CONCURRENCY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n\n\n        \n    \n\n    jest_mocking/module-mocking.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        JWT_SECRET_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : tmpSecret\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tmpSecret\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : mockConfigService.get(\"JWT_SECRET_KEY\")\n                    \n                \n\n\n        \n    \n\n    src/auth/auth.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        JWT_SECRET_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.JWT_SECRET_KEY\n                    \n                \n\n\n        \n    \n\n    src/spotify/spotify.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MAX_BYTES_PER_IMAGE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : 256 * 1000\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RETRIES\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 3\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TABLE_LOCK_TIMEOUT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30000\n                    \n                \n\n\n        \n    \n\n    jest_mocking/service-mocking.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockAuthService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n\t// mock properties and methods as needed\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mockConfigService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n\tget: jest.fn((key: string) => {\n\t\tswitch (key) {\n\t\t\tcase \"AWS_S3_BUCKET_NAME\":\n\t\t\t\treturn \"test-bucket\";\n\t\t\tcase \"AWS_S3_REGION\":\n\t\t\t\treturn \"test-region\";\n\t\t\tcase \"AWS_S3_ENDPOINT\":\n\t\t\t\treturn \"test-endpoint\";\n\t\t\tcase \"AWS_COGNITO_CLIENT_ID\":\n\t\t\t\treturn \"test-cognito-client-id\";\n\t\t\tcase \"AWS_COGNITO_USER_POOL_ID\":\n\t\t\t\treturn \"test-cognito-user-pool-id\";\n\t\t\tcase \"AWS_ACCESS_KEY_ID\":\n\t\t\t\treturn \"test-access-key-id\";\n\t\t\tcase \"AWS_SECRET_ACCESS_KEY\":\n\t\t\t\treturn \"test-secret-access-key\";\n\t\t\tcase \"SPOTIFY_CLIENT_ID\":\n\t\t\t\treturn \"test-spotify-client-id\";\n\t\t\tcase \"SPOTIFY_CLIENT_SECRET\":\n\t\t\t\treturn \"test-spotify-client-secret\";\n\t\t\tcase \"SPOTIFY_REDIRECT_URI\":\n\t\t\t\treturn \"test-spotify-redirect-uri\";\n\t\t\tcase \"JWT_SECRET_KEY\":\n\t\t\t\treturn \"test-jwt-secret\";\n\t\t\tcase \"JWT_EXPIRATION_TIME\":\n\t\t\t\treturn \"test-jwt-expiration-time\";\n\t\t\tcase \"SALT\":\n\t\t\t\treturn \"test-salt\";\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t}),\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mockDbUtilsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n\tgetFriendRequests: jest.fn(),\n\tuserExists: jest.fn(),\n\tisFollowing: jest.fn(),\n\tgetPotentialFriends: jest.fn(),\n\tisFriendsOrPending: jest.fn(),\n\tgetRoomSongs: jest.fn(),\n\tgetUserFavoriteSongs: jest.fn(),\n\tgetUserFollowing: jest.fn(),\n\tgetUserFriends: jest.fn(),\n\tgetUserFollowers: jest.fn(),\n\tgetMutualFriends: jest.fn(),\n\t// mock properties and methods as needed\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mockDtoGenService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n\tgenerateMultipleRoomDto: jest.fn(),\n\tgenerateMultipleUserDto: jest.fn(),\n\t// mock properties and methods as needed\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mockPrismaService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n\t$queryRaw: jest.fn(),\n\t$queryRawUnsafe: jest.fn(),\n\tauthentication: {\n\t\tcreate: jest.fn(),\n\t\tcreateMany: jest.fn(),\n\t\tcreateManyAndReturn: jest.fn(),\n\t\tdelete: jest.fn(),\n\t\tdeleteMany: jest.fn(),\n\t\tfindUnique: jest.fn(),\n\t\tfindUniqueOrThrow: jest.fn(),\n\t\tfindFirst: jest.fn(),\n\t\tfindFirstOrThrow: jest.fn(),\n\t\tfindMany: jest.fn(),\n\t\tupdate: jest.fn(),\n\t\tupdateMany: jest.fn(),\n\t\tupsert: jest.fn(),\n\t},\n\tbanned: {\n\t\tcreate: jest.fn(),\n\t\tcreateMany: jest.fn(),\n\t\tcreateManyAndReturn: jest.fn(),\n\t\tdelete: jest.fn(),\n\t\tdeleteMany: jest.fn(),\n\t\tfindUnique: jest.fn(),\n\t\tfindUniqueOrThrow: jest.fn(),\n\t\tfindFirst: jest.fn(),\n\t\tfindFirstOrThrow: jest.fn(),\n\t\tfindMany: jest.fn(),\n\t\tupdate: jest.fn(),\n\t\tupdateMany: jest.fn(),\n\t\tupsert: jest.fn(),\n\t},\n\tblocked: {\n\t\tcreate: jest.fn(),\n\t\tcreateMany: jest.fn(),\n\t\tcreateManyAndReturn: jest.fn(),\n\t\tdelete: jest.fn(),\n\t\tdeleteMany: jest.fn(),\n\t\tfindUnique: jest.fn(),\n\t\tfindUniqueOrThrow: jest.fn(),\n\t\tfindFirst: jest.fn(),\n\t\tfindFirstOrThrow: jest.fn(),\n\t\tfindMany: jest.fn(),\n\t\tupdate: jest.fn(),\n\t\tupdateMany: jest.fn(),\n\t\tupsert: jest.fn(),\n\t},\n\tbookmark: {\n\t\tcreate: jest.fn(),\n\t\tcreateMany: jest.fn(),\n\t\tcreateManyAndReturn: jest.fn(),\n\t\tdelete: jest.fn(),\n\t\tdeleteMany: jest.fn(),\n\t\tfindUnique: jest.fn(),\n\t\tfindUniqueOrThrow: jest.fn(),\n\t\tfindFirst: jest.fn(),\n\t\tfindFirstOrThrow: jest.fn(),\n\t\tfindMany: jest.fn(),\n\t\tupdate: jest.fn(),\n\t\tupdateMany: jest.fn(),\n\t\tupsert: jest.fn(),\n\t},\n\tchat_reactions: {\n\t\tcreate: jest.fn(),\n\t\tcreateMany: jest.fn(),\n\t\tcreateManyAndReturn: jest.fn(),\n\t\tdelete: jest.fn(),\n\t\tdeleteMany: jest.fn(),\n\t\tfindUnique: jest.fn(),\n\t\tfindUniqueOrThrow: jest.fn(),\n\t\tfindFirst: jest.fn(),\n\t\tfindFirstOrThrow: jest.fn(),\n\t\tfindMany: jest.fn(),\n\t\tupdate: jest.fn(),\n\t\tupdateMany: jest.fn(),\n\t\tupsert: jest.fn(),\n\t},\n\tfollows: {\n\t\tcreate: jest.fn(),\n\t\tcreateMany: jest.fn(),\n\t\tcreateManyAndReturn: jest.fn(),\n\t\tdelete: jest.fn(),\n\t\tdeleteMany: jest.fn(),\n\t\tfindUnique: jest.fn(),\n\t\tfindUniqueOrThrow: jest.fn(),\n\t\tfindFirst: jest.fn(),\n\t\tfindFirstOrThrow: jest.fn(),\n\t\tfindMany: jest.fn(),\n\t\tupdate: jest.fn(),\n\t\tupdateMany: jest.fn(),\n\t\tupsert: jest.fn(),\n\t},\n\tfriends: {\n\t\tcreate: jest.fn(),\n\t\tcreateMany: jest.fn(),\n\t\tcreateManyAndReturn: jest.fn(),\n\t\tdelete: jest.fn(),\n\t\tdeleteMany: jest.fn(),\n\t\tfindUnique: jest.fn(),\n\t\tfindUniqueOrThrow: jest.fn(),\n\t\tfindFirst: jest.fn(),\n\t\tfindFirstOrThrow: jest.fn(),\n\t\tfindMany: jest.fn(),\n\t\tupdate: jest.fn(),\n\t\tupdateMany: jest.fn(),\n\t\tupsert: jest.fn(),\n\t},\n\tgenre: {\n\t\tcreate: jest.fn(),\n\t\tcreateMany: jest.fn(),\n\t\tcreateManyAndReturn: jest.fn(),\n\t\tdelete: jest.fn(),\n\t\tdeleteMany: jest.fn(),\n\t\tfindUnique: jest.fn(),\n\t\tfindUniqueOrThrow: jest.fn(),\n\t\tfindFirst: jest.fn(),\n\t\tfindFirstOrThrow: jest.fn(),\n\t\tfindMany: jest.fn(),\n\t\tupdate: jest.fn(),\n\t\tupdateMany: jest.fn(),\n\t\tupsert: jest.fn(),\n\t},\n\tmessage: {\n\t\tcreate: jest.fn(),\n\t\tcreateMany: jest.fn(),\n\t\tcreateManyAndReturn: jest.fn(),\n\t\tdelete: jest.fn(),\n\t\tdeleteMany: jest.fn(),\n\t\tfindUnique: jest.fn(),\n\t\tfindUniqueOrThrow: jest.fn(),\n\t\tfindFirst: jest.fn(),\n\t\tfindFirstOrThrow: jest.fn(),\n\t\tfindMany: jest.fn(),\n\t\tupdate: jest.fn(),\n\t\tupdateMany: jest.fn(),\n\t\tupsert: jest.fn(),\n\t},\n\tparticipate: {\n\t\tcreate: jest.fn(),\n\t\tcreateMany: jest.fn(),\n\t\tcreateManyAndReturn: jest.fn(),\n\t\tdelete: jest.fn(),\n\t\tdeleteMany: jest.fn(),\n\t\tfindUnique: jest.fn(),\n\t\tfindUniqueOrThrow: jest.fn(),\n\t\tfindFirst: jest.fn(),\n\t\tfindFirstOrThrow: jest.fn(),\n\t\tfindMany: jest.fn(),\n\t\tupdate: jest.fn(),\n\t\tupdateMany: jest.fn(),\n\t\tupsert: jest.fn(),\n\t},\n\tplaylist: {\n\t\tcreate: jest.fn(),\n\t\tcreateMany: jest.fn(),\n\t\tcreateManyAndReturn: jest.fn(),\n\t\tdelete: jest.fn(),\n\t\tdeleteMany: jest.fn(),\n\t\tfindUnique: jest.fn(),\n\t\tfindUniqueOrThrow: jest.fn(),\n\t\tfindFirst: jest.fn(),\n\t\tfindFirstOrThrow: jest.fn(),\n\t\tfindMany: jest.fn(),\n\t\tupdate: jest.fn(),\n\t\tupdateMany: jest.fn(),\n\t\tupsert: jest.fn(),\n\t},\n\tprivate_message: {\n\t\tcreate: jest.fn(),\n\t\tcreateMany: jest.fn(),\n\t\tcreateManyAndReturn: jest.fn(),\n\t\tdelete: jest.fn(),\n\t\tdeleteMany: jest.fn(),\n\t\tfindUnique: jest.fn(),\n\t\tfindUniqueOrThrow: jest.fn(),\n\t\tfindFirst: jest.fn(),\n\t\tfindFirstOrThrow: jest.fn(),\n\t\tfindMany: jest.fn(),\n\t\tupdate: jest.fn(),\n\t\tupdateMany: jest.fn(),\n\t\tupsert: jest.fn(),\n\t},\n\tprivate_room: {\n\t\tcreate: jest.fn(),\n\t\tcreateMany: jest.fn(),\n\t\tcreateManyAndReturn: jest.fn(),\n\t\tdelete: jest.fn(),\n\t\tdeleteMany: jest.fn(),\n\t\tfindUnique: jest.fn(),\n\t\tfindUniqueOrThrow: jest.fn(),\n\t\tfindFirst: jest.fn(),\n\t\tfindFirstOrThrow: jest.fn(),\n\t\tfindMany: jest.fn(),\n\t\tupdate: jest.fn(),\n\t\tupdateMany: jest.fn(),\n\t\tupsert: jest.fn(),\n\t},\n\tpublic_room: {\n\t\tcreate: jest.fn(),\n\t\tcreateMany: jest.fn(),\n\t\tcreateManyAndReturn: jest.fn(),\n\t\tdelete: jest.fn(),\n\t\tdeleteMany: jest.fn(),\n\t\tfindUnique: jest.fn(),\n\t\tfindUniqueOrThrow: jest.fn(),\n\t\tfindFirst: jest.fn(),\n\t\tfindFirstOrThrow: jest.fn(),\n\t\tfindMany: jest.fn(),\n\t\tupdate: jest.fn(),\n\t\tupdateMany: jest.fn(),\n\t\tupsert: jest.fn(),\n\t},\n\tqueue: {\n\t\tcreate: jest.fn(),\n\t\tcreateMany: jest.fn(),\n\t\tcreateManyAndReturn: jest.fn(),\n\t\tdelete: jest.fn(),\n\t\tdeleteMany: jest.fn(),\n\t\tfindUnique: jest.fn(),\n\t\tfindUniqueOrThrow: jest.fn(),\n\t\tfindFirst: jest.fn(),\n\t\tfindFirstOrThrow: jest.fn(),\n\t\tfindMany: jest.fn(),\n\t\tupdate: jest.fn(),\n\t\tupdateMany: jest.fn(),\n\t\tupsert: jest.fn(),\n\t},\n\troom: {\n\t\tcreate: jest.fn(),\n\t\tcreateMany: jest.fn(),\n\t\tcreateManyAndReturn: jest.fn(),\n\t\tdelete: jest.fn(),\n\t\tdeleteMany: jest.fn(),\n\t\tfindUnique: jest.fn(),\n\t\tfindUniqueOrThrow: jest.fn(),\n\t\tfindFirst: jest.fn(),\n\t\tfindFirstOrThrow: jest.fn(),\n\t\tfindMany: jest.fn(),\n\t\tupdate: jest.fn(),\n\t\tupdateMany: jest.fn(),\n\t\tupsert: jest.fn(),\n\t},\n\troom_message: {\n\t\tcreate: jest.fn(),\n\t\tcreateMany: jest.fn(),\n\t\tcreateManyAndReturn: jest.fn(),\n\t\tdelete: jest.fn(),\n\t\tdeleteMany: jest.fn(),\n\t\tfindUnique: jest.fn(),\n\t\tfindUniqueOrThrow: jest.fn(),\n\t\tfindFirst: jest.fn(),\n\t\tfindFirstOrThrow: jest.fn(),\n\t\tfindMany: jest.fn(),\n\t\tupdate: jest.fn(),\n\t\tupdateMany: jest.fn(),\n\t\tupsert: jest.fn(),\n\t},\n\tscheduled_room: {\n\t\tcreate: jest.fn(),\n\t\tcreateMany: jest.fn(),\n\t\tcreateManyAndReturn: jest.fn(),\n\t\tdelete: jest.fn(),\n\t\tdeleteMany: jest.fn(),\n\t\tfindUnique: jest.fn(),\n\t\tfindUniqueOrThrow: jest.fn(),\n\t\tfindFirst: jest.fn(),\n\t\tfindFirstOrThrow: jest.fn(),\n\t\tfindMany: jest.fn(),\n\t\tupdate: jest.fn(),\n\t\tupdateMany: jest.fn(),\n\t\tupsert: jest.fn(),\n\t},\n\tsearch_history: {\n\t\tcreate: jest.fn(),\n\t\tcreateMany: jest.fn(),\n\t\tcreateManyAndReturn: jest.fn(),\n\t\tdelete: jest.fn(),\n\t\tdeleteMany: jest.fn(),\n\t\tfindUnique: jest.fn(),\n\t\tfindUniqueOrThrow: jest.fn(),\n\t\tfindFirst: jest.fn(),\n\t\tfindFirstOrThrow: jest.fn(),\n\t\tfindMany: jest.fn(),\n\t\tupdate: jest.fn(),\n\t\tupdateMany: jest.fn(),\n\t\tupsert: jest.fn(),\n\t},\n\tsearch_suggestions: {\n\t\tcreate: jest.fn(),\n\t\tcreateMany: jest.fn(),\n\t\tcreateManyAndReturn: jest.fn(),\n\t\tdelete: jest.fn(),\n\t\tdeleteMany: jest.fn(),\n\t\tfindUnique: jest.fn(),\n\t\tfindUniqueOrThrow: jest.fn(),\n\t\tfindFirst: jest.fn(),\n\t\tfindFirstOrThrow: jest.fn(),\n\t\tfindMany: jest.fn(),\n\t\tupdate: jest.fn(),\n\t\tupdateMany: jest.fn(),\n\t\tupsert: jest.fn(),\n\t},\n\tsong: {\n\t\tcreate: jest.fn(),\n\t\tcreateMany: jest.fn(),\n\t\tcreateManyAndReturn: jest.fn(),\n\t\tdelete: jest.fn(),\n\t\tdeleteMany: jest.fn(),\n\t\tfindUnique: jest.fn(),\n\t\tfindUniqueOrThrow: jest.fn(),\n\t\tfindFirst: jest.fn(),\n\t\tfindFirstOrThrow: jest.fn(),\n\t\tfindMany: jest.fn(),\n\t\tupdate: jest.fn(),\n\t\tupdateMany: jest.fn(),\n\t\tupsert: jest.fn(),\n\t},\n\ttable_state: {\n\t\tcreate: jest.fn(),\n\t\tcreateMany: jest.fn(),\n\t\tcreateManyAndReturn: jest.fn(),\n\t\tdelete: jest.fn(),\n\t\tdeleteMany: jest.fn(),\n\t\tfindUnique: jest.fn(),\n\t\tfindUniqueOrThrow: jest.fn(),\n\t\tfindFirst: jest.fn(),\n\t\tfindFirstOrThrow: jest.fn(),\n\t\tfindMany: jest.fn(),\n\t\tupdate: jest.fn(),\n\t\tupdateMany: jest.fn(),\n\t\tupsert: jest.fn(),\n\t},\n\tuser_activity: {\n\t\tcreate: jest.fn(),\n\t\tcreateMany: jest.fn(),\n\t\tcreateManyAndReturn: jest.fn(),\n\t\tdelete: jest.fn(),\n\t\tdeleteMany: jest.fn(),\n\t\tfindUnique: jest.fn(),\n\t\tfindUniqueOrThrow: jest.fn(),\n\t\tfindFirst: jest.fn(),\n\t\tfindFirstOrThrow: jest.fn(),\n\t\tfindMany: jest.fn(),\n\t\tupdate: jest.fn(),\n\t\tupdateMany: jest.fn(),\n\t\tupsert: jest.fn(),\n\t},\n\tusers: {\n\t\tcreate: jest.fn(),\n\t\tcreateMany: jest.fn(),\n\t\tcreateManyAndReturn: jest.fn(),\n\t\tdelete: jest.fn(),\n\t\tdeleteMany: jest.fn(),\n\t\tfindUnique: jest.fn(),\n\t\tfindUniqueOrThrow: jest.fn(),\n\t\tfindFirst: jest.fn(),\n\t\tfindFirstOrThrow: jest.fn(),\n\t\tfindMany: jest.fn(),\n\t\tupdate: jest.fn(),\n\t\tupdateMany: jest.fn(),\n\t\tupsert: jest.fn(),\n\t},\n\tfavorite_genres: {\n\t\tcreate: jest.fn(),\n\t\tcreateMany: jest.fn(),\n\t\tcreateManyAndReturn: jest.fn(),\n\t\tdelete: jest.fn(),\n\t\tdeleteMany: jest.fn(),\n\t\tfindUnique: jest.fn(),\n\t\tfindUniqueOrThrow: jest.fn(),\n\t\tfindFirst: jest.fn(),\n\t\tfindFirstOrThrow: jest.fn(),\n\t\tfindMany: jest.fn(),\n\t\tupdate: jest.fn(),\n\t\tupdateMany: jest.fn(),\n\t\tupsert: jest.fn(),\n\t},\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mockRecommendationsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n\tgetPlaylistSimilarityScores: jest.fn(),\n\tgetTopPlaylists: jest.fn(),\n\tsetMockSongs: jest.fn(),\n\tsetPlaylists: jest.fn(),\n\t// Add other functions here if needed\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mockUsersService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n\t// mock properties and methods as needed\n\tcalculateMutualFriends: jest.fn(),\n\tcalculatePopularity: jest.fn(),\n\tcalculateActivity: jest.fn(),\n\tcalculateGenreSimilarity: jest.fn(),\n\tupdateProfile: jest.fn(),\n}\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        module\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n\n    src/modules/rooms/roomqueue/roomqueue.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        QUEUE_LOCK_TIMEOUT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 20000\n                    \n                \n\n\n        \n    \n\n    prisma/prisma.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RETRIES\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n\n\n        \n    \n\n    src/retry/retry.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RETRIES\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 5\n                    \n                \n\n\n        \n    \n\n    src/common/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SOCKET_EVENTS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n\t//shared\n\tCONNECT_USER: \"connectUser\",\n\tDISCONNECT_USER: \"disconnectUser\",\n\tJOIN_ROOM: \"joinRoom\",\n\tLEAVE_ROOM: \"leaveRoom\",\n\tERROR: \"error\",\n\tPING: \"ping\",\n\n\t//for live chat\n\tLIVE_MESSAGE: \"liveMessage\",\n\tGET_LIVE_CHAT_HISTORY: \"getLiveChatHistory\",\n\tEMOJI_REACTION: \"emojiReaction\",\n\n\t//for direct messages\n\tENTER_DM: \"enterDirectMessage\",\n\tDIRECT_MESSAGE: \"directMessage\",\n\tGET_DIRECT_MESSAGE_HISTORY: \"getDirectMessageHistory\",\n\tTYPING: \"typing\",\n\tSTOP_TYPING: \"stopTyping\",\n\tMODIFY_DM: \"modifyDirectMessage\",\n\tEXIT_DM: \"exitDirectMessage\",\n\n\t//sync after getting chat history???\n\n\t//synchronised media playback\n\tINIT_PLAY: \"initPlay\",\n\tINIT_PAUSE: \"initPause\",\n\tINIT_STOP: \"initStop\",\n\tINIT_SKIP: \"initSkip\",\n\tINIT_PREV: \"initPrev\",\n\tSEEK_MEDIA: \"seekMedia\",\n\tCURRENT_MEDIA: \"currentMedia\",\n\tMEDIA_SYNC: \"mediaSync\",\n\tREQUEST_QUEUE: \"requestQueue\",\n\tCLEAR_QUEUE: \"clearQueue\",\n\n\t//for queue & voting\n\tUPVOTE_SONG: \"upvoteSong\",\n\tDOWNVOTE_SONG: \"downvoteSong\",\n\tUNDO_SONG_VOTE: \"undoSongVote\",\n\tSWAP_SONG_VOTE: \"swapSongVote\",\n\tENQUEUE_SONG: \"enqueueSong\",\n\tDEQUEUE_SONG: \"dequeueSong\",\n\n\tSONG_ADDED: \"songAdded\",\n\tSONG_REMOVED: \"songRemoved\",\n\tVOTE_UPDATED: \"voteUpdated\",\n\tQUEUE_STATE: \"queueState\",\n\tROOM_SETTINGS_CHANGED: \"roomSettingsChanged\",\n\n\t//for server responses\n\tCONNECTED: \"connected\",\n\tDISCONNECTED: \"disconnected\",\n\tROOM_JOINED: \"roomJoined\",\n\tROOM_LEFT: \"roomLeft\",\n\tMESSAGE_SENT: \"messageSent\",\n\tMESSAGE_RECEIVED: \"messageReceived\",\n\tUSER_JOINED_ROOM: \"userJoinedRoom\",\n\tUSER_LEFT_ROOM: \"userLeftRoom\",\n\tLIVE_CHAT_HISTORY: \"liveChatHistory\",\n\n\tPLAY_MEDIA: \"playMedia\",\n\tPAUSE_MEDIA: \"pauseMedia\",\n\tSTOP_MEDIA: \"stopMedia\",\n\n\tUSER_ONLINE: \"userOnline\",\n\tUSER_OFFLINE: \"userOffline\",\n\tCHAT_MODIFIED: \"chatModified\",\n\tDM_HISTORY: \"dmHistory\",\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
