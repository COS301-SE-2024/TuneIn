var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.252,1,2.456]],["body/controllers/AppController.html",[0,2.097,1,4.112,2,2.051,3,0.305,4,0.27,5,0.27,6,4.209,7,0.671,8,1.982,9,5.748,10,1.54,11,0.022,12,4.932,13,5.748,14,4.932,15,5.524,16,0.995,17,1.262,18,0.87,19,4.932,20,1.628,21,0.4,22,0.817,23,3.75,24,4.209,25,4.112,26,3.766,27,1.101,28,0.305,29,0.176,30,3.378,31,2.179,32,3.094,33,2.051,34,1.54,35,4.932,36,0.018,37,0.018]],["title/modules/AppModule.html",[38,0.948,39,2.456]],["body/modules/AppModule.html",[1,3.974,2,2.15,3,0.241,4,0.213,5,0.213,11,0.022,21,0.441,22,0.646,23,3.828,24,3.33,28,0.241,29,0.139,36,0.015,37,0.015,38,1.533,39,5.05,40,1.622,41,1.622,42,1.836,43,1.836,44,1.622,45,2.563,46,1.836,47,3.33,48,3.33,49,3.33,50,4.144,51,4.144,52,4.144,53,2.747,54,4.144,55,4.144,56,4.144,57,2.063,58,2.307,59,2.434,60,1.836,61,1.836,62,3.901,63,2.784,64,3.901,65,3.33,66,2.26,67,2.1,68,3.901,69,3.901,70,3.901,71,3.901,72,5.172,73,2.027,74,1.724,75,3.901,76,5.172,77,1.806,78,1.529,79,3.901,80,3.33,81,3.901,82,1.724]],["title/injectables/AppService.html",[23,2.078,83,0.672]],["body/injectables/AppService.html",[3,0.33,4,0.292,5,0.292,7,0.726,8,2.079,9,5.903,11,0.022,13,4.559,15,4.559,17,1.18,18,0.942,20,1.764,21,0.33,22,0.885,23,3.649,28,0.33,29,0.191,34,1.668,36,0.019,37,0.019,83,1.18,84,2.093,85,4.559,86,5.342]],["title/controllers/AuthController.html",[0,1.252,87,2.456]],["body/controllers/AuthController.html",[0,0.892,2,1.062,3,0.158,4,0.14,5,0.14,7,0.347,8,1.265,10,1.196,11,0.022,16,1.016,17,1.026,18,0.676,20,1.265,21,0.339,22,0.423,26,2.885,27,0.57,28,0.158,29,0.091,31,1.693,32,2.404,33,2.55,34,1.196,36,0.011,37,0.011,87,2.624,88,2.18,89,1.749,90,1.749,91,1.898,92,5.111,93,5.111,94,2.554,95,3.173,96,2.554,97,3.869,98,5.476,99,3.832,100,2.554,101,3.869,102,3.869,103,3.869,104,3.435,105,2.554,106,3.869,107,3.869,108,2.554,109,1.501,110,1.501,111,1.417,112,3.832,113,1.933,114,2.554,115,3.332,116,2.554,117,2.266,118,2.629,119,3.832,120,2.554,121,3.832,122,3.15,123,1.749,124,5.354,125,2.554,126,1.436,127,2.404,128,1.803,129,1.749,130,3.481,131,4.145,132,1.749,133,2.311,134,2.18,135,1.933,136,1.001,137,2.554,138,0.892,139,1.593,140,2.554,141,3.832,142,2.885,143,3.869,144,2.554,145,2.363,146,2.311,147,2.008,148,2.554,149,2.554,150,2.554,151,2.772,152,5.963,153,3.938,154,3.332,155,2.554,156,6.134,157,2.554,158,2.554,159,2.404,160,2.554,161,2.554,162,3.096,163,3.832,164,2.18,165,3.832,166,5.111,167,3.607,168,4.599,169,3.832,170,4.599,171,2.554,172,1.283,173,2.554,174,1.749,175,2.554,176,2.554,177,2.554,178,3.832,179,3.832,180,2.554,181,2.554,182,2.554,183,2.665,184,1.602,185,5.111,186,1.925,187,3.832,188,4.599,189,2.554,190,4.599,191,1.375,192,2.554,193,1.602,194,3.741,195,3.832,196,3.832,197,2.554,198,3.832,199,2.554,200,0.944,201,2.554,202,2.18,203,2.554,204,4.599,205,2.22,206,2.554,207,2.885,208,1.283,209,0.843,210,2.554,211,1.749,212,2.476,213,2.554,214,2.554,215,2.554,216,2.554,217,2.554,218,2.554,219,2.554,220,2.554,221,2.554,222,2.554,223,2.901,224,3.832,225,2.554,226,2.554,227,2.554]],["title/modules/AuthModule.html",[38,0.948,50,2.25]],["body/modules/AuthModule.html",[2,2.155,3,0.242,4,0.214,5,0.214,11,0.022,21,0.442,22,0.649,28,0.242,29,0.14,36,0.015,37,0.015,38,1.536,40,1.627,41,1.627,42,1.842,43,1.842,44,1.627,45,2.568,46,1.842,50,4.591,53,2.749,57,2.064,58,2.31,59,2.439,60,1.842,61,1.842,63,2.791,65,4.424,66,2.268,67,2.107,73,1.534,74,1.73,77,1.367,78,1.534,80,3.341,87,3.98,126,2.064,129,2.681,133,3.323,134,3.341,193,2.456,228,3.341,229,3.341,230,3.914,231,4.148,232,4.148,233,1.748,234,3.914,235,3.914,236,5.183,237,2.456,238,3.914,239,3.341,240,3.914,241,3.914,242,1.367,243,2.681,244,2.681,245,3.914,246,2.681,247,3.914,248,3.914,249,3.914,250,2.681,251,3.914,252,3.914,253,3.914,254,3.914,255,2.963]],["title/injectables/AuthService.html",[83,0.672,126,1.12]],["body/injectables/AuthService.html",[0,0.654,3,0.116,4,0.102,5,0.102,7,0.255,8,0.994,11,0.022,16,1.026,17,1.344,18,1.075,20,1.67,21,0.353,22,0.31,27,0.418,28,0.293,29,0.135,34,1.828,36,0.009,37,0.009,66,1.085,82,1.33,83,0.564,84,0.734,91,2.122,95,1.085,109,1.982,110,1.982,111,1.871,115,1.085,117,2.266,118,2.084,126,0.94,127,2.368,128,2.502,136,0.734,138,1.051,139,2.697,142,1.174,145,2.524,146,0.941,147,1.931,151,2.839,153,2.061,162,2.863,172,2.172,174,1.282,191,1.008,193,1.174,194,3.469,200,2.11,205,1.085,207,2.368,208,1.512,209,2.045,212,3.222,233,1.143,242,0.654,246,2.061,250,3.908,256,1.174,257,1.051,258,4.025,259,4.186,260,2.857,261,4.025,262,4.433,263,2.857,264,2.857,265,3.01,266,2.278,267,3.272,268,3.01,269,1.872,270,3.829,271,2.034,272,3.01,273,1.872,274,1.872,275,2.461,276,1.872,277,1.872,278,2.278,279,2.278,280,1.872,281,2.061,282,1.872,283,2.187,284,1.872,285,2.278,286,3.244,287,1.872,288,1.872,289,2.857,290,1.872,291,1.872,292,1.872,293,2.585,294,2.961,295,1.282,296,1.417,297,1.417,298,1.282,299,1.751,300,0.692,301,1.174,302,1.085,303,1.282,304,1.417,305,1.417,306,1.417,307,1.417,308,1.417,309,1.417,310,1.417,311,1.668,312,1.417,313,1.417,314,1.417,315,1.417,316,1.417,317,3.908,318,1.417,319,2.278,320,2.278,321,2.278,322,2.278,323,2.278,324,3.829,325,1.417,326,1.417,327,3.272,328,3.272,329,1.417,330,1.417,331,1.417,332,1.085,333,1.417,334,2.278,335,1.417,336,1.417,337,1.417,338,1.417,339,2.505,340,1.417,341,1.417,342,2.278,343,1.417,344,1.417,345,1.417,346,1.417,347,2.712,348,2.032,349,2.278,350,1.417,351,1.417,352,1.174,353,1.417,354,1.417,355,2.278,356,1.417,357,2.187,358,1.417,359,1.417,360,1.282,361,2.187,362,2.278,363,1.744,364,1.282,365,0.941,366,1.417,367,1.417,368,1.417,369,1.008,370,4.433,371,2.278,372,2.278,373,2.061,374,2.278,375,2.278,376,1.417,377,1.417,378,1.417,379,1.417,380,1.417,381,2.278,382,1.282,383,1.417,384,1.417,385,1.174,386,1.417,387,1.417,388,1.282,389,1.282,390,0.827,391,0.654,392,1.282,393,1.417,394,2.229,395,1.282,396,1.282,397,1.62,398,2.061,399,2.278,400,2.278,401,1.417,402,1.417,403,1.417,404,1.417,405,1.417]],["title/classes/CreateRoomDto.html",[29,0.128,406,2.078]],["body/classes/CreateRoomDto.html",[3,0.229,4,0.203,5,0.203,7,0.504,10,2.199,11,0.022,16,1.174,17,1.31,18,1.242,21,0.309,27,0.828,28,0.229,29,0.179,33,2.351,36,0.015,37,0.015,111,2.677,172,1.863,186,3.482,257,1.746,299,2.621,406,2.896,407,1.158,408,3.164,409,3.873,410,3.873,411,3.873,412,3.548,413,3.873,414,3.873,415,3.873,416,3.873,417,3.873,418,3.873,419,3.873,420,3.136,421,3.708,422,3.507,423,4.999,424,3.708,425,6.319,426,3.708,427,3.708,428,3.708,429,3.708,430,3.708,431,4.999,432,3.708,433,3.708,434,3.708,435,3.708,436,2.326,437,3.708,438,3.661,439,5.556,440,4.827,441,6.929,442,1.996]],["title/classes/CreateUserDto.html",[29,0.128,300,1.326]],["body/classes/CreateUserDto.html",[3,0.232,4,0.205,5,0.205,7,0.511,10,2.239,11,0.022,16,1.188,17,1.271,18,1.264,21,0.312,27,0.838,28,0.232,29,0.18,36,0.015,37,0.015,200,2.105,209,1.879,257,1.761,299,2.731,300,1.864,301,4.517,407,1.173,420,3.817,438,3.677,442,2.022,443,2.843,444,4.309,445,3.298,446,5.692,447,5.692,448,5.692,449,5.692,450,5.692,451,5.692,452,5.692,453,4.309,454,5.692,455,4.309,456,3.065,457,3.756,458,3.756,459,3.756,460,3.756,461,3.756,462,3.756,463,3.756,464,3.756,465,3.756,466,3.756,467,3.756,468,3.756,469,3.756,470,3.756,471,3.756]],["title/classes/CreateUserDto-1.html",[29,0.107,300,1.109,332,1.737]],["body/classes/CreateUserDto-1.html",[3,0.286,4,0.253,5,0.253,7,0.629,10,2.158,11,0.022,16,1.145,17,1.328,18,1.219,21,0.357,27,1.033,28,0.286,29,0.165,36,0.017,37,0.017,136,1.813,200,2.326,209,2.077,257,2.016,271,2.177,299,2.699,300,2.134,407,1.444,444,4.762,445,3.645,453,4.762,455,4.762,472,3.949,473,5.622,474,4.626,475,4.626,476,4.626,477,4.626,478,4.626,479,4.626]],["title/modules/DbUtilsModule.html",[38,0.948,51,2.25]],["body/modules/DbUtilsModule.html",[3,0.293,4,0.259,5,0.259,11,0.022,21,0.411,22,0.785,28,0.293,29,0.169,36,0.017,37,0.017,38,1.681,40,1.971,41,1.971,42,2.23,43,2.23,44,1.971,45,2.81,46,2.993,51,4.556,53,2.891,57,2.277,59,2.757,60,2.23,61,2.23,63,3.154,67,2.552,77,1.656,78,1.857,233,1.838,242,1.656,243,3.246,480,4.046,481,4.74,482,4.74,483,4.046,484,4.74,485,2.094]],["title/injectables/DbUtilsService.html",[57,1.12,83,0.672]],["body/injectables/DbUtilsService.html",[3,0.15,4,0.133,5,0.133,7,0.331,8,1.219,11,0.022,16,1.025,17,1.318,18,1.091,20,1.995,21,0.276,22,0.403,28,0.15,29,0.087,30,1.665,31,1.074,34,2.075,36,0.011,37,0.011,57,1.152,77,2.204,82,2.368,83,0.692,84,0.952,91,2.296,109,2.425,110,2.425,111,2.288,117,1.559,118,2.1,136,0.952,138,0.849,145,2.458,147,2.204,151,1.972,159,2.8,167,4.382,200,2.288,233,1.317,242,0.849,243,4.321,271,2.1,275,2.578,311,1.631,332,1.408,361,1.408,363,1.408,369,3.038,390,2.67,394,1.737,397,2.403,456,3.331,486,2.074,487,3.691,488,3.691,489,3.691,490,4.463,491,3.691,492,3.691,493,3.691,494,3.691,495,1.525,496,2.431,497,2.431,498,2.431,499,1.665,500,2.431,501,2.431,502,3.691,503,2.431,504,2.431,505,4.254,506,2.431,507,3.691,508,2.431,509,2.431,510,2.431,511,3.691,512,2.431,513,3.691,514,2.431,515,2.946,516,2.074,517,4.254,518,4.254,519,4.254,520,3.15,521,3.15,522,2.794,523,4.463,524,4.463,525,3.809,526,2.794,527,2.586,528,2.586,529,4.254,530,1.665,531,2.431,532,3.809,533,4.057,534,3.691,535,3.691,536,3.691,537,2.794,538,4.463,539,2.431,540,2.431,541,4.463,542,2.431,543,2.431,544,3.773,545,3.691,546,2.431,547,2.431]],["title/modules/DtoGenModule.html",[38,0.948,52,2.25]],["body/modules/DtoGenModule.html",[3,0.284,4,0.251,5,0.251,11,0.022,21,0.418,22,0.762,28,0.284,29,0.164,36,0.017,37,0.017,38,1.658,40,1.912,41,1.912,42,2.164,43,2.164,44,1.912,45,2.772,46,2.952,52,4.576,53,2.869,57,2.155,58,2.538,59,2.706,60,2.164,61,2.164,63,3.096,67,2.476,73,1.802,74,2.032,77,1.606,78,1.802,233,1.824,242,1.606,244,3.15,485,2.032,548,3.925,549,4.599,550,3.925,551,4.599,552,4.599,553,2.311]],["title/injectables/DtoGenService.html",[58,1.252,83,0.672]],["body/injectables/DtoGenService.html",[3,0.264,4,0.084,5,0.084,7,0.21,8,0.848,11,0.022,16,0.811,17,1.269,18,0.903,20,1.615,21,0.302,22,0.255,28,0.095,29,0.055,31,1.134,33,1.599,34,1.759,36,0.008,37,0.008,57,1.201,58,0.897,73,2.085,77,0.538,78,0.604,82,1.7,83,0.481,84,0.604,91,2.052,109,1.917,110,1.917,111,1.809,117,2.146,118,2.085,136,0.604,138,0.897,139,1.067,145,2.418,146,2.318,147,2.118,151,0.681,159,3.685,167,4.151,183,1.488,184,1.611,186,2.575,200,1.706,205,0.893,209,0.848,211,1.056,233,1.017,242,0.538,244,3.644,271,1.552,275,2.208,311,0.681,348,1.382,361,1.911,363,0.893,365,3.002,369,3.264,385,2.07,390,2.162,391,1.709,394,2.583,397,0.83,409,2.635,410,2.635,411,2.635,412,2.413,413,2.635,414,2.635,415,2.635,416,2.635,417,2.635,418,2.635,419,2.635,422,3.18,445,1.488,456,2.864,485,1.458,495,0.967,499,4.208,515,2.147,525,4.175,526,1.943,527,1.488,528,3.338,529,3.938,530,1.056,532,1.316,533,2.912,554,1.316,555,2.567,556,2.567,557,3.299,558,2.567,559,2.567,560,3.847,561,3.299,562,2.259,563,1.542,564,2.567,565,1.542,566,1.968,567,2.567,568,1.542,569,2.567,570,1.542,571,1.542,572,3.299,573,1.542,574,1.542,575,2.567,576,1.542,577,1.542,578,1.542,579,4.273,580,1.542,581,1.316,582,1.316,583,0.83,584,1.056,585,1.488,586,1.542,587,1.943,588,3.299,589,3.299,590,3.299,591,1.943,592,1.943,593,4.892,594,2.497,595,1.943,596,2.894,597,1.7,598,1.943,599,1.943,600,1.943,601,1.758,602,4.361,603,1.542,604,3.299,605,2.912,606,3.235,607,3.235,608,3.235,609,3.235,610,1.542,611,1.542,612,1.542,613,1.542,614,1.542,615,1.316,616,1.542,617,1.542,618,3.299,619,2.567,620,1.542,621,2.816,622,1.316,623,1.542,624,1.542,625,1.542,626,1.542,627,1.542,628,1.542,629,1.316,630,1.316,631,2.191,632,4.614,633,2.567,634,2.497,635,2.497,636,2.567,637,2.567,638,2.567,639,1.542,640,2.567,641,2.567,642,2.567,643,2.567,644,2.567,645,2.567,646,2.567,647,2.567,648,2.567,649,2.567,650,2.567,651,2.567,652,2.191,653,5.124,654,5.124,655,2.912,656,2.567,657,2.567,658,1.542,659,1.542,660,1.542,661,3.299,662,1.167,663,1.542,664,2.567,665,1.542,666,1.542,667,1.542,668,2.816,669,1.542,670,1.542,671,1.542,672,1.542,673,1.542,674,1.542,675,2.567,676,1.542,677,1.542,678,1.542,679,1.542,680,1.542,681,1.542]],["title/injectables/JwtAuthGuard.html",[83,0.672,682,2.078]],["body/injectables/JwtAuthGuard.html",[3,0.337,4,0.298,5,0.298,11,0.021,21,0.394,22,0.904,28,0.337,29,0.195,36,0.019,37,0.019,83,1.194,84,2.137,237,3.422,682,3.694,683,4.656,684,4.656,685,3.432,686,6.376,687,5.455]],["title/injectables/JwtStrategy.html",[83,0.672,231,2.25]],["body/injectables/JwtStrategy.html",[3,0.278,4,0.246,5,0.246,7,0.612,8,1.873,11,0.022,16,0.94,18,1,20,1.486,21,0.403,22,0.746,28,0.278,29,0.161,30,3.082,34,1.405,36,0.017,37,0.017,83,1.063,84,1.763,91,2.051,109,2.223,110,2.223,111,2.097,113,3.407,117,1.572,126,2.143,128,2.669,129,3.082,138,1.572,145,2.097,151,1.989,162,2.423,207,2.823,208,2.261,209,1.486,212,2.423,231,3.558,237,2.823,317,3.082,369,2.423,394,2.669,685,3.054,688,3.841,689,4.841,690,4.841,691,3.841,692,4.5,693,5.673,694,4.5,695,3.841,696,4.5,697,3.407,698,3.841,699,6.522,700,4.5,701,4.5,702,3.841,703,4.5,704,4.5,705,4.5,706,4.5,707,4.5,708,4.5,709,4.5]],["title/injectables/LocalStrategy.html",[83,0.672,232,2.25]],["body/injectables/LocalStrategy.html",[3,0.285,4,0.252,5,0.252,7,0.628,8,1.903,11,0.022,16,0.955,17,1.294,18,1.016,20,1.524,21,0.407,22,0.765,28,0.285,29,0.165,30,3.162,34,1.442,36,0.017,37,0.017,83,1.08,84,1.809,91,2.075,109,2.259,110,2.259,111,2.131,117,1.613,118,2.463,126,2.157,129,3.162,138,1.613,145,1.707,147,1.613,151,2.04,209,1.524,232,3.616,237,2.896,275,2.259,286,4.508,293,3.948,685,3.103,689,4.92,690,4.92,691,3.941,695,3.941,697,3.495,698,3.941,702,3.941,710,3.941,711,4.617,712,5.764,713,4.617,714,3.941,715,4.617]],["title/classes/LoginBody.html",[29,0.128,95,2.078]],["body/classes/LoginBody.html",[0,0.752,3,0.133,4,0.118,5,0.118,7,0.293,10,0.672,11,0.022,16,0.685,17,1.324,18,0.38,21,0.369,22,0.357,27,0.481,28,0.313,29,0.148,34,1.906,36,0.01,37,0.01,66,1.247,82,1.485,83,0.63,91,1.774,95,1.948,115,1.247,117,2.328,118,2.2,126,0.672,127,2.595,128,2.2,136,0.843,138,0.752,139,2.334,142,1.35,145,2.572,146,1.082,147,2.029,151,2.921,153,2.302,162,2.73,172,2.349,174,1.474,191,1.159,193,1.35,194,3.83,200,2.076,205,1.247,207,2.109,208,1.689,209,2.054,212,3.349,233,0.888,242,0.752,246,2.302,250,4.089,256,1.35,257,1.174,258,3.838,259,4.068,260,1.629,261,3.838,262,4.397,263,1.629,264,1.629,267,1.629,270,3.131,271,1.582,275,2.339,278,1.629,279,1.629,281,1.474,283,1.948,285,1.629,286,2.833,289,2.545,293,2.833,294,3.201,295,1.474,296,1.629,297,1.629,298,1.474,299,1.987,300,0.796,301,1.35,302,1.247,303,1.474,304,1.629,305,1.629,306,1.629,307,1.629,308,1.629,309,1.629,310,1.629,311,1.828,312,1.629,313,1.629,314,1.629,315,1.629,316,1.629,317,4.089,318,1.629,319,2.545,320,2.545,321,2.545,322,2.545,323,2.545,324,4.068,325,1.629,326,1.629,327,3.538,328,3.538,329,1.629,330,1.629,331,1.629,332,1.247,333,1.629,334,2.545,335,1.629,336,1.629,337,1.629,338,1.629,339,2.708,340,1.629,341,1.629,342,2.545,343,1.629,344,1.629,345,1.629,346,1.629,347,2.932,348,2.227,349,2.545,350,1.629,351,1.629,352,1.35,353,1.629,354,1.629,355,2.545,356,1.629,357,2.396,358,1.629,359,1.629,360,1.474,361,2.396,362,2.545,363,1.948,364,1.474,365,1.082,366,1.629,367,1.629,368,1.629,369,1.159,370,4.621,371,2.545,372,2.545,373,2.302,374,2.545,375,2.545,376,1.629,377,1.629,378,1.629,379,1.629,380,1.629,381,2.545,382,1.474,383,1.629,384,1.629,385,1.35,386,1.629,387,1.629,388,1.474,389,1.474,390,0.951,391,0.752,392,1.474,393,1.629,394,2.386,395,1.474,396,1.474,397,1.81,398,2.302,399,2.545,400,2.545,401,1.629,402,1.629,403,1.629,404,1.629,405,1.629,407,0.672,716,2.153]],["title/modules/PrismaModule.html",[38,0.948,53,1.491]],["body/modules/PrismaModule.html",[3,0.314,4,0.277,5,0.277,11,0.021,21,0.377,22,0.84,28,0.314,29,0.181,36,0.018,37,0.018,38,1.732,40,2.109,41,2.109,42,2.387,43,2.387,44,2.109,45,2.895,46,3.083,53,2.971,59,2.873,60,2.387,61,2.387,233,1.944,717,4.329,718,4.329,719,5.072,720,5.072,721,5.072]],["title/injectables/PrismaService.html",[83,0.672,233,0.948]],["body/injectables/PrismaService.html",[3,0.31,4,0.274,5,0.274,7,0.681,8,2,11,0.022,18,1.068,20,2,21,0.375,22,0.83,28,0.31,29,0.179,36,0.018,37,0.018,83,1.135,84,1.962,91,2.326,136,1.962,147,2.116,233,1.601,685,3.262,722,4.273,723,6.515,724,7.045,725,7.045,726,5.007,727,5.007,728,5.007,729,5.007,730,5.007]],["title/controllers/ProfileController.html",[0,1.252,731,2.456]],["body/controllers/ProfileController.html",[0,0.883,2,1.051,3,0.337,4,0.138,5,0.138,7,0.344,8,1.256,10,1.856,11,0.022,16,1.135,17,1.194,18,1.01,20,1.891,21,0.367,22,0.419,25,3.131,26,3.421,27,0.565,28,0.156,29,0.09,31,1.681,32,3.19,33,2.471,34,1.856,36,0.011,37,0.011,82,1.117,89,1.732,90,1.732,91,2.23,97,1.914,101,1.914,102,2.879,103,4.128,104,1.586,106,1.914,107,1.914,109,2.245,110,2.452,111,2.118,118,2.624,122,2.605,123,3.131,126,1.187,128,2.151,130,1.914,131,3.461,132,1.732,138,0.883,139,1.581,143,3.461,145,1.406,147,1.904,154,1.465,164,4.654,183,1.465,186,2.879,191,3.084,208,1.911,209,2.211,275,2.498,283,3.8,300,1.69,348,2.738,352,1.586,357,2.204,397,1.361,515,1.911,522,2.879,544,2.879,566,1.597,587,4.629,594,4.337,682,1.465,731,2.605,732,2.158,733,3.902,734,3.246,735,3.902,736,3.902,737,3.902,738,3.131,739,2.529,740,2.529,741,3.804,742,3.804,743,3.804,744,2.529,745,2.529,746,2.529,747,2.529,748,2.529,749,2.529,750,2.529,751,2.529,752,5.729,753,4.071,754,2.529,755,2.529,756,2.529,757,2.529,758,3.246,759,3.804,760,3.804,761,2.529,762,2.158,763,2.529,764,2.529,765,3.461,766,3.461,767,2.158,768,1.914,769,4.572,770,3.461,771,3.849,772,1.914,773,2.649,774,2.158,775,2.529,776,1.914,777,1.914,778,1.465,779,2.529,780,2.158,781,3.246,782,2.158,783,2.158,784,2.158,785,2.158,786,2.158,787,2.158,788,2.158,789,2.158,790,2.158,791,1.914,792,1.914,793,2.158,794,2.158,795,3.246,796,3.849,797,4.337,798,5.729,799,2.529,800,2.529,801,3.246,802,3.804,803,2.879,804,2.529,805,2.529,806,2.529,807,2.529,808,4.572,809,2.529,810,2.529,811,3.246,812,3.246,813,2.529,814,2.529,815,2.529]],["title/modules/ProfileModule.html",[38,0.948,54,2.25]],["body/modules/ProfileModule.html",[2,2.324,3,0.272,4,0.24,5,0.24,11,0.022,21,0.434,22,0.729,28,0.272,29,0.157,36,0.016,37,0.016,38,1.624,40,1.828,41,1.828,42,2.069,43,2.069,44,1.828,45,2.716,46,2.069,53,2.837,54,4.598,57,2.13,58,2.383,59,2.631,60,2.069,61,2.069,63,3.01,67,2.368,73,1.723,74,1.943,77,1.536,78,1.723,126,2.13,233,1.803,242,1.536,485,1.943,553,2.21,731,4.209,773,3.954,774,3.753,778,2.548,816,3.753,817,4.398,818,3.753,819,4.398,820,4.398]],["title/injectables/ProfileService.html",[83,0.672,773,2.078]],["body/injectables/ProfileService.html",[3,0.175,4,0.155,5,0.155,7,0.386,8,1.368,11,0.022,16,0.811,17,1.258,18,1.088,20,1.973,21,0.369,22,0.47,28,0.175,29,0.101,31,2.162,34,2.046,36,0.012,37,0.012,57,1.926,58,1.879,73,1.112,74,1.254,77,0.992,78,1.112,82,2.528,83,0.776,84,1.112,91,1.973,109,1.918,110,1.918,111,1.81,117,2.346,118,2.242,136,1.112,138,1.447,139,2.035,145,1.81,147,2.289,151,2.795,200,2.484,211,1.944,233,1.422,242,0.992,271,2.303,275,2.108,339,2.401,347,2.6,365,1.426,485,1.254,495,1.781,505,5.398,515,2.082,517,4.884,518,4.592,519,4.884,520,3.537,521,3.537,522,3.137,537,4.073,544,4.332,553,1.426,566,2.389,733,4.177,734,4.592,735,4.592,736,4.592,737,4.177,738,3.685,758,3.537,772,2.149,773,2.401,821,2.423,822,3.352,823,2.839,824,2.839,825,2.839,826,2.839,827,2.839,828,2.839,829,2.839,830,6.45,831,2.839,832,2.839,833,2.149,834,2.423,835,2.423,836,2.423,837,2.423,838,2.423,839,2.839,840,4.144,841,4.144,842,2.839,843,4.592,844,4.144,845,4.144,846,2.839,847,3.537,848,4.144,849,2.839,850,2.839,851,2.839,852,2.149,853,2.839,854,2.839,855,2.839,856,2.839]],["title/classes/RegisterBody.html",[29,0.128,115,2.078]],["body/classes/RegisterBody.html",[0,0.738,3,0.131,4,0.115,5,0.115,7,0.287,10,1.276,11,0.022,16,0.833,17,1.328,18,0.721,21,0.367,22,0.35,27,0.472,28,0.311,29,0.146,34,1.896,36,0.01,37,0.01,66,1.224,82,1.464,83,0.621,91,1.761,95,1.224,115,1.92,117,2.32,118,2.185,126,0.66,127,2.564,128,2.178,136,0.828,138,0.738,139,2.318,142,1.326,145,2.566,146,1.062,147,2.016,151,2.911,153,2.269,162,3.002,172,2.325,174,2.799,191,1.138,193,1.326,194,3.621,200,2.062,205,1.224,207,2.079,208,1.665,209,2.106,212,3.333,233,0.876,242,0.738,246,2.269,250,4.065,256,1.326,257,1.157,258,3.805,259,4.037,260,1.6,261,3.805,262,4.37,263,1.6,264,1.6,267,1.6,270,3.094,271,1.559,275,2.326,278,1.6,279,1.6,281,1.447,283,1.92,285,1.6,286,2.799,289,2.508,293,2.799,294,3.169,295,1.447,296,1.6,297,1.6,298,1.447,299,2.135,300,0.781,301,1.326,302,1.224,303,1.447,304,1.6,305,1.6,306,1.6,307,1.6,308,1.6,309,1.6,310,1.6,311,1.806,312,1.6,313,1.6,314,1.6,315,1.6,316,1.6,317,4.065,318,1.6,319,2.508,320,2.508,321,2.508,322,2.508,323,2.508,324,4.037,325,1.6,326,1.6,327,3.503,328,3.503,329,1.6,330,1.6,331,1.6,332,1.224,333,1.6,334,2.508,335,1.6,336,1.6,337,1.6,338,1.6,339,2.681,340,1.6,341,1.6,342,2.508,343,1.6,344,1.6,345,1.6,346,1.6,347,2.903,348,2.2,349,2.508,350,1.6,351,1.6,352,1.326,353,1.6,354,1.6,355,2.508,356,1.6,357,2.368,358,1.6,359,1.6,360,1.447,361,2.368,362,2.508,363,1.92,364,1.447,365,1.062,366,1.6,367,1.6,368,1.6,369,1.138,370,4.597,371,2.508,372,2.508,373,2.269,374,2.508,375,2.508,376,1.6,377,1.6,378,1.6,379,1.6,380,1.6,381,2.508,382,1.447,383,1.6,384,1.6,385,1.326,386,1.6,387,1.6,388,1.447,389,1.447,390,0.934,391,0.738,392,1.447,393,1.6,394,2.365,395,1.447,396,1.447,397,1.784,398,2.269,399,2.508,400,2.508,401,1.6,402,1.6,403,1.6,404,1.6,405,1.6,407,0.66,857,2.113,858,2.113,859,2.113]],["title/classes/RoomDto.html",[29,0.128,391,1.252]],["body/classes/RoomDto.html",[3,0.214,4,0.189,5,0.189,7,0.47,10,2.225,11,0.022,16,1.194,17,1.314,18,1.257,21,0.363,27,0.772,28,0.214,29,0.17,33,2.268,36,0.014,37,0.014,172,1.738,186,3.435,257,1.665,299,2.646,311,2.106,390,2.41,391,1.665,407,1.08,409,3.736,410,3.736,411,3.736,412,3.422,413,3.736,414,3.736,415,3.736,416,3.736,417,3.736,418,3.736,419,3.736,420,3.869,422,3.407,436,3.422,438,3.694,439,5.442,440,4.656,442,1.862,566,2.154,583,1.862,596,3.422,597,2.725,602,4.13,635,4.13,860,2.952,861,3.458,862,3.458,863,3.458,864,4.767,865,3.458,866,6.168,867,3.458,868,3.458,869,3.458,870,3.458,871,3.458,872,3.458,873,3.458,874,3.458,875,3.458,876,3.458,877,3.458,878,3.458,879,3.458,880,4.767,881,3.458]],["title/classes/RoomEntity.html",[29,0.128,882,2.715]],["body/classes/RoomEntity.html",[3,0.218,4,0.193,5,0.193,7,0.48,10,2.231,11,0.022,16,1.204,17,1.318,18,1.26,21,0.341,27,0.789,28,0.218,29,0.126,33,2.293,36,0.014,37,0.014,172,1.775,186,3.45,257,1.689,299,2.722,311,2.137,390,2.437,407,1.103,409,3.778,410,3.778,411,3.778,412,3.46,413,3.778,414,3.778,415,3.778,416,3.778,417,3.778,418,3.778,419,3.778,422,3.876,436,3.898,566,2.17,583,1.902,596,3.46,597,2.746,602,4.175,635,4.175,882,3.661,883,3.015,884,3.532,885,3.532,886,3.532,887,3.532,888,3.532,889,3.532,890,3.532,891,3.532,892,3.532,893,3.532,894,3.532,895,3.532,896,3.532,897,3.532,898,3.532,899,3.532,900,2.674]],["title/controllers/RoomsController.html",[0,1.252,901,2.456]],["body/controllers/RoomsController.html",[0,0.691,2,0.823,3,0.242,4,0.108,5,0.108,7,0.269,8,1.039,10,1.961,11,0.022,16,1.077,17,1.325,18,1.091,20,2.146,21,0.368,22,0.328,25,2.155,26,2.8,27,0.442,28,0.122,29,0.071,31,1.39,32,2.457,33,1.855,34,1.932,36,0.009,37,0.009,82,1.39,89,1.356,90,1.356,91,1.293,97,1.498,101,1.498,102,2.382,103,1.498,104,2.457,106,1.498,107,1.498,109,2.383,110,2.461,111,2.248,117,1.099,118,2.211,122,3.335,123,3.056,126,0.982,128,0.931,130,1.498,131,3.378,132,1.356,138,0.691,139,1.308,143,2.965,147,0.691,154,1.147,183,1.823,186,2.835,191,3.038,208,1.581,275,1.233,283,3.93,300,1.448,348,2.403,352,1.242,357,3.452,388,1.356,389,4.165,390,3.117,391,2.223,392,1.356,397,1.066,406,1.147,456,2.927,516,1.689,528,2.586,566,1.368,583,1.066,594,1.498,597,2.922,605,2.965,652,2.686,655,3.378,662,1.498,682,1.147,765,1.498,766,1.498,767,1.689,768,1.498,770,2.382,771,2.965,776,1.498,777,1.498,778,1.147,780,1.689,781,2.686,782,1.689,783,1.689,784,1.689,785,1.689,786,1.689,787,1.689,788,1.689,789,1.689,790,1.689,791,1.498,792,1.498,793,1.689,794,1.689,796,4.51,797,4.684,801,1.689,803,1.498,852,2.965,900,1.498,901,2.155,902,1.689,903,3.343,904,3.343,905,2.686,906,3.343,907,3.809,908,2.686,909,3.343,910,3.343,911,2.686,912,2.686,913,3.343,914,3.343,915,1.98,916,1.98,917,1.98,918,1.98,919,1.98,920,1.98,921,1.98,922,1.98,923,1.98,924,1.98,925,1.98,926,1.98,927,1.98,928,2.686,929,3.809,930,1.689,931,1.689,932,4.156,933,2.382,934,1.98,935,1.98,936,1.98,937,1.98,938,1.98,939,1.98,940,1.98,941,1.98,942,1.98,943,1.98,944,1.98,945,1.98,946,1.98,947,1.98,948,1.98,949,1.98,950,1.98,951,1.98,952,4.038,953,1.98,954,1.98,955,1.98,956,1.98,957,1.98,958,2.269,959,1.689,960,1.98,961,1.689,962,1.689,963,1.98,964,1.98,965,1.689,966,6.188,967,1.98,968,3.917,969,1.98,970,1.689,971,3.147,972,1.98,973,1.98,974,1.98,975,1.98,976,1.98,977,1.98,978,4.463,979,4.463,980,4.463,981,1.98,982,1.98,983,1.98,984,1.98,985,1.98,986,1.98,987,1.98,988,1.98,989,1.98,990,1.98,991,1.98,992,1.98,993,1.98,994,1.98,995,1.98,996,1.98,997,1.98,998,3.917,999,3.809,1000,1.98,1001,1.98,1002,1.98,1003,1.98,1004,2.686,1005,1.98,1006,1.98,1007,1.98,1008,1.98,1009,1.98,1010,1.98,1011,1.98]],["title/modules/RoomsModule.html",[38,0.948,55,2.25]],["body/modules/RoomsModule.html",[2,2.324,3,0.272,4,0.24,5,0.24,11,0.022,21,0.434,22,0.729,28,0.272,29,0.157,36,0.016,37,0.016,38,1.624,40,1.828,41,1.828,42,2.069,43,2.069,44,1.828,45,2.716,46,2.069,53,2.837,55,4.598,57,2.13,58,2.383,59,2.631,60,2.069,61,2.069,63,3.01,67,2.368,73,1.723,74,1.943,77,1.536,78,1.723,126,2.13,233,1.803,242,1.536,485,1.943,553,2.21,778,2.548,901,4.209,958,3.954,959,3.753,1012,3.753,1013,4.398,1014,3.753,1015,4.398,1016,4.398]],["title/injectables/RoomsService.html",[83,0.672,958,2.078]],["body/injectables/RoomsService.html",[3,0.269,4,0.128,5,0.128,7,0.318,8,1.183,11,0.022,16,1.081,17,1.344,18,1.15,20,2.128,21,0.386,22,0.387,28,0.144,29,0.084,31,1.925,34,2.078,36,0.011,37,0.011,57,1.525,58,1.706,73,0.916,74,1.033,77,0.816,78,0.916,83,0.671,84,0.916,91,1.438,109,2.557,110,2.557,111,2.413,117,1.706,135,1.769,136,1.404,138,1.251,139,1.811,145,2.349,146,1.174,147,1.706,159,1.466,167,3.064,183,1.354,186,2.999,211,1.601,223,4.809,233,1.291,242,0.816,271,2.05,275,1.404,311,1.925,332,2.076,369,2.629,390,2.848,391,2.303,394,1.686,456,3.551,485,1.033,495,1.466,528,2.076,530,1.601,553,1.174,562,2.984,566,1.522,581,1.995,582,1.995,583,1.258,597,2.914,605,2.712,634,1.769,655,1.769,822,2.984,833,1.769,852,1.769,900,1.769,903,3.058,904,3.058,905,3.058,906,3.058,907,3.058,908,3.058,909,3.058,910,3.058,911,3.058,912,3.058,913,3.058,914,3.058,952,4.093,958,2.076,961,1.995,962,1.995,999,3.718,1004,1.995,1017,1.995,1018,2.337,1019,3.583,1020,2.337,1021,3.583,1022,2.337,1023,3.583,1024,2.337,1025,3.583,1026,2.337,1027,3.583,1028,2.337,1029,3.583,1030,3.583,1031,2.337,1032,3.583,1033,2.337,1034,3.583,1035,2.337,1036,3.583,1037,2.337,1038,3.583,1039,2.337,1040,3.583,1041,2.337,1042,3.583,1043,2.337,1044,4.168,1045,3.718,1046,2.337,1047,2.337,1048,2.337,1049,3.583,1050,4.884,1051,3.583,1052,2.337,1053,2.337,1054,2.337,1055,2.337,1056,2.337,1057,2.337,1058,1.995,1059,2.337,1060,5.422,1061,6.352,1062,2.337,1063,2.337,1064,3.058,1065,1.995,1066,2.337,1067,2.337]],["title/classes/SongInfoDto.html",[29,0.128,597,1.584]],["body/classes/SongInfoDto.html",[3,0.295,4,0.261,5,0.261,7,0.649,10,2.079,11,0.022,16,1.133,17,1.322,18,1.174,21,0.364,27,1.065,28,0.295,29,0.21,36,0.017,37,0.017,257,2.054,299,2.529,407,1.489,420,3.69,422,3.408,436,2.992,438,3.695,442,2.568,597,2.599,606,4.827,607,4.827,608,4.827,609,4.827,933,4.452,1068,4.071,1069,4.769,1070,4.769,1071,4.769,1072,4.769,1073,4.769,1074,4.769,1075,5.882]],["title/classes/SongInfoEntity.html",[29,0.128,1076,2.715]],["body/classes/SongInfoEntity.html",[3,0.3,4,0.265,5,0.265,7,0.659,10,2.091,11,0.022,16,1.158,17,1.327,18,1.181,21,0.3,27,1.083,28,0.3,29,0.173,36,0.017,37,0.017,172,2.437,257,2.075,299,2.619,407,1.514,422,3.88,436,3.727,606,4.863,607,4.863,608,4.863,609,4.863,1076,4.498,1077,4.139,1078,4.849,1079,4.849,1080,4.849,1081,4.849]],["title/classes/UpdateRoomDto.html",[29,0.128,952,2.25]],["body/classes/UpdateRoomDto.html",[3,0.339,4,0.3,5,0.3,11,0.021,21,0.395,27,1.224,28,0.339,29,0.196,36,0.019,37,0.019,391,1.914,407,1.711,685,3.442,952,4.011,1082,4.678,1083,6.393,1084,4.149,1085,5.481]],["title/classes/UpdateUserDto.html",[29,0.128,1086,2.25]],["body/classes/UpdateUserDto.html",[3,0.337,4,0.298,5,0.298,11,0.021,21,0.394,27,1.218,28,0.337,29,0.195,36,0.019,37,0.019,154,3.161,300,2.017,302,3.161,407,1.703,443,4.129,685,3.432,1084,4.129,1086,4,1087,4.656,1088,6.376]],["title/classes/UpdateUserProfileDto.html",[29,0.128,753,2.456]],["body/classes/UpdateUserProfileDto.html",[3,0.339,4,0.3,5,0.3,11,0.021,21,0.395,27,1.224,28,0.339,29,0.196,36,0.019,37,0.019,407,1.711,566,1.914,685,3.442,753,4.379,1084,4.149,1089,4.678,1090,6.393,1091,5.481]],["title/classes/UserDto.html",[29,0.128,585,2.078]],["body/classes/UserDto.html",[3,0.33,4,0.292,5,0.292,11,0.022,17,1.18,21,0.389,27,1.193,28,0.33,29,0.225,36,0.019,37,0.019,162,2.876,209,1.764,299,2.476,407,1.668,438,3.88,442,2.876,585,3.649,1092,4.559,1093,5.342,1094,4.559,1095,5.342]],["title/classes/UserEntity.html",[29,0.128,1096,2.715]],["body/classes/UserEntity.html",[3,0.222,4,0.197,5,0.197,7,0.489,10,2.203,11,0.022,16,1.203,17,1.313,18,1.244,21,0.37,27,0.803,28,0.222,29,0.129,36,0.014,37,0.014,200,2.059,209,1.839,257,1.711,299,2.722,311,2.917,365,3.318,391,1.945,407,1.123,445,3.227,499,4.522,515,2.798,527,3.227,566,1.945,584,2.464,591,4.216,592,4.216,595,4.216,596,3.494,597,2.642,598,4.216,599,4.216,600,4.216,601,3.814,772,2.724,1096,3.708,1097,3.071,1098,3.598,1099,3.598,1100,4.998,1101,3.598,1102,3.598,1103,3.598,1104,3.598,1105,3.598,1106,3.598,1107,3.598,1108,3.598,1109,3.598,1110,3.598,1111,3.598,1112,3.598]],["title/classes/UserProfileDto.html",[29,0.128,566,1.252]],["body/classes/UserProfileDto.html",[3,0.214,4,0.19,5,0.19,7,0.472,10,2.191,11,0.022,16,1.198,17,1.305,18,1.237,21,0.364,27,0.774,28,0.214,29,0.171,36,0.014,37,0.014,200,2.02,209,1.804,257,1.668,299,2.61,311,2.889,365,3.285,391,1.908,407,1.083,420,3.873,438,3.698,442,1.867,445,3.166,499,4.478,515,2.745,527,3.166,566,2.056,591,4.136,592,4.136,595,4.136,596,3.428,597,2.601,598,4.136,599,4.136,600,4.136,601,3.742,1094,5.77,1100,4.949,1113,2.96,1114,3.469,1115,6.661,1116,3.469,1117,3.469,1118,3.469,1119,3.469,1120,3.469,1121,3.469,1122,3.469,1123,3.469,1124,3.469,1125,3.469,1126,3.469,1127,3.469,1128,6.76,1129,3.469,1130,3.469]],["title/controllers/UsersController.html",[0,1.252,1131,2.456]],["body/controllers/UsersController.html",[0,0.666,2,0.792,3,0.236,4,0.104,5,0.104,7,0.259,8,1.008,10,1.839,11,0.022,16,1.129,17,0.716,18,1.038,20,1.944,21,0.379,22,0.316,25,3.812,26,3.492,27,0.426,28,0.118,29,0.068,31,1.93,32,3.36,33,2.227,34,2.033,36,0.009,37,0.009,57,0.953,58,1.066,73,0.747,74,0.842,77,0.666,78,0.747,82,2.707,89,1.305,90,1.305,91,2.213,104,1.915,109,2.308,110,2.552,111,2.178,117,1.066,118,1.196,122,2.091,123,3.273,124,1.627,126,0.953,128,2.619,132,1.305,133,1.919,138,0.666,139,1.816,145,2.058,146,2.195,147,1.871,154,1.769,162,1.026,184,1.196,191,2.352,194,1.196,200,0.705,208,1.919,209,1.008,212,1.026,266,2.311,275,2.472,281,1.305,283,3.885,300,1.129,302,1.104,303,1.305,339,1.104,357,1.769,391,2.274,394,1.437,395,2.091,396,1.305,406,3.103,456,2.056,485,0.842,515,1.919,527,2.213,528,3.326,553,0.958,562,1.305,566,2.173,583,1.026,584,1.305,585,3.412,587,1.443,682,1.104,738,2.616,762,1.627,765,2.311,766,2.311,768,1.443,770,4.554,771,4.213,776,1.443,777,1.443,778,1.104,795,1.627,796,2.311,797,4.458,803,1.443,811,4.571,812,4.571,822,1.305,834,1.627,835,1.627,836,1.627,837,1.627,838,1.627,928,2.606,930,3.26,931,4.571,932,5.229,933,4.637,965,4.571,970,1.627,1086,4.047,1131,2.091,1132,1.627,1133,3.26,1134,2.606,1135,2.606,1136,2.606,1137,2.606,1138,2.606,1139,2.606,1140,3.26,1141,1.906,1142,1.906,1143,1.906,1144,1.906,1145,1.906,1146,1.906,1147,5.814,1148,1.906,1149,1.906,1150,1.906,1151,1.906,1152,1.906,1153,1.906,1154,1.906,1155,1.906,1156,3.728,1157,1.906,1158,1.906,1159,1.906,1160,3.728,1161,1.906,1162,1.906,1163,1.906,1164,1.906,1165,3.26,1166,1.906,1167,1.906,1168,1.906,1169,1.906,1170,1.906,1171,1.906,1172,1.906,1173,1.906,1174,1.906,1175,1.906,1176,1.906,1177,1.627,1178,1.627,1179,1.627,1180,1.627,1181,6.016,1182,1.906,1183,1.906,1184,1.906,1185,1.906,1186,1.906,1187,1.906,1188,1.627,1189,1.906,1190,1.906,1191,1.906,1192,1.906,1193,1.906,1194,1.906,1195,1.906,1196,1.906,1197,1.906,1198,1.906,1199,1.906,1200,1.906,1201,1.906,1202,1.906,1203,1.906,1204,1.906,1205,1.906,1206,1.906,1207,1.906,1208,1.906,1209,1.906,1210,1.906,1211,1.906,1212,1.906,1213,1.906,1214,1.906,1215,1.906,1216,1.906,1217,1.906,1218,1.906,1219,1.906,1220,1.906,1221,1.906,1222,1.906,1223,1.906,1224,1.906,1225,1.906,1226,1.906,1227,1.906,1228,1.906,1229,1.906,1230,1.906,1231,1.906,1232,1.906,1233,1.906,1234,1.906]],["title/modules/UsersModule.html",[38,0.948,56,2.25]],["body/modules/UsersModule.html",[2,2.324,3,0.272,4,0.24,5,0.24,11,0.022,21,0.434,22,0.729,28,0.272,29,0.157,36,0.016,37,0.016,38,1.624,40,1.828,41,1.828,42,2.069,43,2.069,44,1.828,45,2.716,46,2.069,53,2.837,56,4.598,57,2.13,58,2.383,59,2.631,60,2.069,61,2.069,63,3.01,67,2.368,73,1.723,74,1.943,77,1.536,78,1.723,126,2.13,133,3.429,233,1.803,242,1.536,485,1.943,553,2.21,778,2.548,1131,4.209,1177,3.753,1235,4.398,1236,4.398,1237,4.398,1238,4.398,1239,4.398]],["title/injectables/UsersService.html",[83,0.672,133,1.802]],["body/injectables/UsersService.html",[3,0.088,4,0.078,5,0.078,7,0.194,8,0.794,11,0.022,16,0.968,17,1.295,18,1.062,20,1.96,21,0.347,22,0.236,28,0.088,29,0.051,31,1.378,34,1.981,36,0.007,37,0.007,57,1.143,58,1.279,73,0.559,74,0.63,77,0.498,78,0.559,83,0.451,84,0.559,91,2.095,104,0.894,109,2.289,110,2.326,111,2.16,113,4.254,117,2.155,118,1.942,133,1.208,135,1.079,136,0.942,138,0.84,139,1.522,145,2.529,146,1.567,147,2.13,151,2.623,154,1.393,167,3.87,183,0.826,184,0.894,200,2.365,202,2.661,205,0.826,209,0.471,223,1.82,233,0.968,242,0.498,266,2.772,271,1.467,275,2.289,300,1.512,302,1.393,339,0.826,347,0.894,348,3.492,360,0.977,361,2.734,363,1.807,364,0.977,365,2.054,373,0.977,382,2.8,385,1.509,390,1.807,391,1.549,394,2.428,406,2.569,412,0.894,444,4.343,445,0.826,453,1.079,455,1.079,456,2.872,473,1.217,485,0.63,495,0.894,515,1.84,526,3.095,527,1.393,528,2.872,530,0.977,533,1.82,537,1.82,553,0.716,562,2.136,566,1.089,583,0.768,584,0.977,585,3.091,601,2.8,615,1.217,621,2.052,622,1.217,629,1.217,630,1.217,631,1.217,634,2.772,662,1.82,668,3.125,738,1.647,822,2.136,843,2.052,847,1.217,929,1.217,1044,4.986,1045,2.052,1058,1.217,1060,2.052,1064,2.052,1086,3.724,1133,2.661,1134,2.052,1135,2.052,1136,2.052,1137,2.052,1138,2.052,1139,2.661,1140,2.052,1147,1.217,1156,2.052,1160,2.052,1165,2.052,1178,1.217,1179,1.217,1180,1.217,1188,3.125,1240,1.217,1241,2.405,1242,1.426,1243,2.405,1244,1.426,1245,1.426,1246,1.426,1247,1.426,1248,2.405,1249,1.426,1250,2.405,1251,1.426,1252,2.405,1253,1.426,1254,2.405,1255,1.426,1256,2.405,1257,1.426,1258,2.405,1259,1.426,1260,1.426,1261,2.405,1262,1.426,1263,2.405,1264,1.426,1265,2.405,1266,1.426,1267,2.405,1268,1.426,1269,2.405,1270,1.426,1271,1.426,1272,1.426,1273,1.426,1274,1.426,1275,1.426,1276,1.426,1277,1.426,1278,1.426,1279,1.426,1280,2.405,1281,2.405,1282,2.405,1283,2.405,1284,2.405,1285,2.405,1286,1.426,1287,2.405,1288,1.426,1289,1.426,1290,3.661,1291,3.661,1292,3.125,1293,2.405,1294,2.405,1295,2.405,1296,5.619,1297,4.718,1298,5.619,1299,3.118,1300,1.426,1301,1.426,1302,1.426,1303,1.426,1304,1.426,1305,3.661,1306,2.405,1307,1.426,1308,2.405,1309,1.426,1310,2.405,1311,1.426,1312,2.405,1313,1.426,1314,2.405,1315,1.426,1316,2.405,1317,1.426,1318,2.405,1319,1.426,1320,1.426,1321,1.426,1322,1.426,1323,1.426,1324,3.118,1325,1.426,1326,1.426,1327,1.426,1328,1.426,1329,2.405,1330,1.426,1331,3.118,1332,1.426,1333,2.405,1334,1.426,1335,3.118,1336,1.426,1337,1.426,1338,1.426,1339,2.405,1340,1.426,1341,2.405,1342,1.426,1343,1.426,1344,1.426,1345,4.089,1346,1.426,1347,1.426,1348,1.426,1349,1.426,1350,1.426,1351,1.426,1352,1.426,1353,1.426,1354,1.426,1355,1.426,1356,1.426,1357,1.426,1358,1.426,1359,1.426,1360,1.426,1361,1.426,1362,1.426,1363,1.426,1364,1.426,1365,1.426,1366,1.426,1367,1.426,1368,3.118,1369,3.118,1370,2.405,1371,1.426,1372,1.426,1373,1.426,1374,3.661,1375,4.434,1376,1.426,1377,1.426,1378,1.426,1379,1.426,1380,1.426,1381,1.426,1382,1.426,1383,1.426,1384,3.118,1385,1.426,1386,1.426,1387,1.426,1388,1.426,1389,1.426,1390,1.426]],["title/coverage.html",[1391,3.699]],["body/coverage.html",[0,2.222,1,2.589,5,0.207,6,3.226,11,0.022,16,0.626,23,2.19,29,0.257,36,0.015,37,0.015,38,0.999,44,1.572,57,1.18,58,1.32,73,1.481,77,1.32,83,1.314,85,3.226,87,2.589,88,3.226,95,2.19,115,2.19,117,1.32,126,1.18,133,1.899,159,4.666,184,2.371,231,2.371,232,2.371,233,0.999,243,2.589,244,2.589,256,3.583,300,1.873,301,2.371,391,1.32,406,2.19,408,3.226,443,3.834,472,3.226,486,3.226,554,3.226,566,1.32,585,2.19,597,1.67,682,2.19,683,3.226,684,3.226,688,3.226,710,3.226,722,3.226,731,2.589,732,3.226,753,2.589,773,2.19,791,2.861,821,3.226,860,3.226,882,2.861,883,3.226,901,2.589,902,3.226,952,2.371,958,2.19,1017,3.226,1068,3.226,1076,2.861,1077,3.226,1082,3.226,1086,2.371,1087,3.226,1089,3.226,1092,3.226,1096,2.861,1097,3.226,1113,3.226,1131,2.589,1132,3.226,1240,3.226,1391,2.861,1392,3.78,1393,3.78,1394,6.101,1395,5.711,1396,3.78,1397,5.711,1398,6.687,1399,3.834,1400,3.78,1401,3.78,1402,3.78,1403,3.78,1404,5.711,1405,5.064,1406,3.78,1407,5.711,1408,5.064,1409,3.78,1410,3.78,1411,3.78]],["title/dependencies.html",[41,1.792,1412,2.559]],["body/dependencies.html",[11,0.022,22,0.814,27,1.096,29,0.214,36,0.018,37,0.018,41,2.042,45,2.17,66,2.846,136,1.924,142,3.081,212,3.224,237,3.081,239,4.191,294,4.606,295,3.363,298,3.363,442,2.644,697,4.89,714,4.191,1413,4.911,1414,4.911,1415,4.911,1416,5.988,1417,4.911,1418,6.46,1419,4.911,1420,4.911,1421,4.911,1422,4.911,1423,4.911,1424,4.911,1425,4.911,1426,4.911,1427,5.988,1428,4.911,1429,4.911,1430,4.911,1431,4.911,1432,4.911,1433,4.911,1434,4.911,1435,4.911,1436,4.911,1437,4.911,1438,4.911]],["title/miscellaneous/functions.html",[1439,1.737,1440,3.679]],["body/miscellaneous/functions.html",[7,0.775,11,0.019,36,0.019,37,0.019,44,2.859,1399,4.312,1439,3.301,1440,4.862,1441,4.862]],["title/index.html",[7,0.408,1442,2.998,1443,2.998]],["body/index.html",[4,0.256,11,0.022,33,1.951,36,0.017,37,0.017,398,3.213,792,3.552,833,4.792,1065,4.005,1292,4.005,1391,3.552,1444,4.692,1445,4.692,1446,5.822,1447,4.692,1448,4.692,1449,4.692,1450,4.692,1451,4.692,1452,4.692,1453,6.331,1454,4.692,1455,4.692,1456,4.692,1457,4.692,1458,7.032,1459,4.692,1460,4.692,1461,4.692,1462,6.936,1463,4.692,1464,4.692,1465,5.822,1466,4.692,1467,4.692,1468,4.692,1469,4.692,1470,5.822,1471,5.822,1472,4.692,1473,4.692,1474,4.692,1475,5.822,1476,5.822,1477,4.692,1478,4.692,1479,4.692,1480,4.692,1481,4.692,1482,4.005,1483,4.692,1484,4.692,1485,4.692,1486,4.692,1487,4.692,1488,4.692,1489,4.005,1490,4.692,1491,4.692,1492,4.692,1493,4.692,1494,4.692,1495,4.692,1496,4.005]],["title/modules.html",[40,2.032]],["body/modules.html",[11,0.018,36,0.018,37,0.018,39,3.608,40,2.191,50,3.305,51,3.305,52,3.305,53,2.191,54,3.305,55,3.305,56,3.305,1482,6.193,1497,7.257,1498,7.257,1499,7.257]],["title/overview.html",[1500,4.171]],["body/overview.html",[2,1.451,11,0.022,23,3.176,36,0.014,37,0.014,38,0.922,39,4.982,40,1.451,41,1.451,42,1.642,43,1.642,44,1.451,45,1.542,46,1.642,47,2.978,48,2.978,49,2.978,50,4.526,51,4.297,52,4.375,53,2.899,54,4.456,55,4.456,56,4.456,57,2.193,58,2.436,59,2.257,60,1.642,61,1.642,84,1.367,126,1.996,133,2.966,228,2.978,229,2.978,231,3.438,232,3.438,233,1.856,407,1.089,480,2.978,483,2.978,548,2.978,550,2.978,717,2.978,718,2.978,773,3.176,816,2.978,818,2.978,958,3.176,1012,2.978,1014,2.978,1500,2.978,1501,3.49,1502,3.49,1503,3.49,1504,3.49]],["title/properties.html",[257,1.506,1412,2.559]],["body/properties.html",[11,0.021,33,2.351,36,0.019,37,0.019,257,1.975,1489,4.826,1496,4.826,1505,5.655,1506,5.655,1507,5.655]],["title/miscellaneous/typealiases.html",[1439,1.737,1508,4.311]],["body/miscellaneous/typealiases.html",[7,0.762,11,0.019,16,1.131,36,0.019,37,0.019,127,4.061,128,3.046,256,3.513,1100,4.9,1439,3.245,1509,5.6,1510,6.474]],["title/miscellaneous/variables.html",[255,3.263,1439,1.737]],["body/miscellaneous/variables.html",[7,0.773,11,0.02,16,0.942,36,0.019,37,0.019,38,1.725,255,4.302,1399,4.302,1439,3.293,1441,4.85]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"modules/DbUtilsModule.html":{},"injectables/DbUtilsService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/RoomsService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1506,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1431,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1436,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1430,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1432,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1398,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1402,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1410,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1397,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1404,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":1409,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":1407,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1395,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1394,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1396,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1408,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1405,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1406,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1403,"title":{},"body":{"coverage.html":{}}}],["0352e8b8",{"_index":1347,"title":{},"body":{"injectables/UsersService.html":{}}}],["0ab5",{"_index":837,"title":{},"body":{"injectables/ProfileService.html":{},"controllers/UsersController.html":{}}}],["1",{"_index":332,"title":{"classes/CreateUserDto-1.html":{}},"body":{"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"injectables/RoomsService.html":{}}}],["1.0.0",{"_index":1433,"title":{},"body":{"dependencies.html":{}}}],["10.0.0",{"_index":1418,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":1422,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1421,"title":{},"body":{"dependencies.html":{}}}],["11",{"_index":1503,"title":{},"body":{"overview.html":{}}}],["13d2",{"_index":1353,"title":{},"body":{"injectables/UsersService.html":{}}}],["15",{"_index":1504,"title":{},"body":{"overview.html":{}}}],["2.1637.0",{"_index":1428,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":788,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["201",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["287b447448e8",{"_index":1356,"title":{},"body":{"injectables/UsersService.html":{}}}],["2ded47e22c84",{"_index":1361,"title":{},"body":{"injectables/UsersService.html":{}}}],["2h",{"_index":251,"title":{},"body":{"modules/AuthModule.html":{}}}],["2xx",{"_index":978,"title":{},"body":{"controllers/RoomsController.html":{}}}],["3.2.2",{"_index":1419,"title":{},"body":{"dependencies.html":{}}}],["3.592.0",{"_index":1416,"title":{},"body":{"dependencies.html":{}}}],["311ce2e8",{"_index":834,"title":{},"body":{"injectables/ProfileService.html":{},"controllers/UsersController.html":{}}}],["376578dd",{"_index":1357,"title":{},"body":{"injectables/UsersService.html":{}}}],["4.0.1",{"_index":1427,"title":{},"body":{"dependencies.html":{}}}],["403",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["41cb",{"_index":1359,"title":{},"body":{"injectables/UsersService.html":{}}}],["490c",{"_index":1364,"title":{},"body":{"injectables/UsersService.html":{}}}],["497d8138",{"_index":1352,"title":{},"body":{"injectables/UsersService.html":{}}}],["49c9",{"_index":1354,"title":{},"body":{"injectables/UsersService.html":{}}}],["4dc9",{"_index":1349,"title":{},"body":{"injectables/UsersService.html":{}}}],["4xx",{"_index":980,"title":{},"body":{"controllers/RoomsController.html":{}}}],["5",{"_index":1502,"title":{},"body":{"overview.html":{}}}],["5.15.0",{"_index":1426,"title":{},"body":{"dependencies.html":{}}}],["62560ae5",{"_index":1362,"title":{},"body":{"injectables/UsersService.html":{}}}],["7.3.1",{"_index":1425,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1438,"title":{},"body":{"dependencies.html":{}}}],["70bd",{"_index":836,"title":{},"body":{"injectables/ProfileService.html":{},"controllers/UsersController.html":{}}}],["8",{"_index":1501,"title":{},"body":{"overview.html":{}}}],["8041",{"_index":835,"title":{},"body":{"injectables/ProfileService.html":{},"controllers/UsersController.html":{}}}],["808d",{"_index":1355,"title":{},"body":{"injectables/UsersService.html":{}}}],["8c75",{"_index":1365,"title":{},"body":{"injectables/UsersService.html":{}}}],["9236",{"_index":1363,"title":{},"body":{"injectables/UsersService.html":{}}}],["9ef6",{"_index":1358,"title":{},"body":{"injectables/UsersService.html":{}}}],["a379",{"_index":1350,"title":{},"body":{"injectables/UsersService.html":{}}}],["a9f6",{"_index":1360,"title":{},"body":{"injectables/UsersService.html":{}}}],["access",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["accesskeyid",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["accountfollowedid",{"_index":505,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/ProfileService.html":{}}}],["accountunfollowedid",{"_index":830,"title":{},"body":{"injectables/ProfileService.html":{}}}],["activity",{"_index":444,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/UsersService.html":{}}}],["activity[\"recent_rooms",{"_index":1370,"title":{},"body":{"injectables/UsersService.html":{}}}],["add",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"injectables/DtoGenService.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{}}}],["added",{"_index":653,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["address",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["adds",{"_index":985,"title":{},"body":{"controllers/RoomsController.html":{}}}],["addsongtoqueue",{"_index":903,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["addsongtoqueue(req",{"_index":915,"title":{},"body":{"controllers/RoomsController.html":{}}}],["addsongtoqueue(roomid",{"_index":1019,"title":{},"body":{"injectables/RoomsService.html":{}}}],["admin_no_srp_auth",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["admingetuser",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["admininitiateauth(params",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["af",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["again",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["algorithm",{"_index":1373,"title":{},"body":{"injectables/UsersService.html":{}}}],["aliases",{"_index":1509,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allrooms",{"_index":1049,"title":{},"body":{"injectables/RoomsService.html":{}}}],["amazing",{"_index":1483,"title":{},"body":{"index.html":{}}}],["api",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["apibadrequestresponse",{"_index":769,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apibearerauth",{"_index":770,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@get('followers')@apitags('users')@apioperation({summary",{"_index":1146,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@get('following')@apitags('users')@apioperation({summary",{"_index":1151,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@get('friends')@apitags('users')@apioperation({summary",{"_index":1163,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@get('new')@apioperation({summary",{"_index":927,"title":{},"body":{"controllers/RoomsController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@get('rooms')@apitags('users')@apioperation({summary",{"_index":1170,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@get('rooms/foryou')@apitags('users')@apioperation({summary",{"_index":1159,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@get('rooms/recent')@apitags('users')@apioperation({summary",{"_index":1155,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@get()@apitags('users",{"_index":1167,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@patch()@apitags('users",{"_index":1175,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@post(':username/follow')@apitags('profile')@apioperation({summary",{"_index":740,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@post(':username/unfollow')@apitags('profile')@apioperation({summary",{"_index":757,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@post('rooms')@apitags('users')@apioperation({summary",{"_index":1142,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@put()@apitags('users",{"_index":1172,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibody",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["apiokresponse",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["apiparam",{"_index":771,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{}}}],["apiproperty()@isboolean",{"_index":866,"title":{},"body":{"classes/RoomDto.html":{}}}],["apiproperty()@isboolean()@isoptional",{"_index":425,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["apiproperty()@isdate",{"_index":1072,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["apiproperty()@isdatestring",{"_index":864,"title":{},"body":{"classes/RoomDto.html":{}}}],["apiproperty()@isdatestring()@isoptional",{"_index":423,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["apiproperty()@isnumber",{"_index":873,"title":{},"body":{"classes/RoomDto.html":{}}}],["apiproperty()@isobject()@validatenested",{"_index":1115,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["apiproperty()@isstring",{"_index":420,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/RoomDto.html":{},"classes/SongInfoDto.html":{},"classes/UserProfileDto.html":{}}}],["apiproperty()@isstring()@isoptional",{"_index":431,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["apiproperty({type",{"_index":436,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{}}}],["apiresponse",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["apitags",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["apitags(\"auth",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags(\"profile",{"_index":798,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apitags(\"rooms",{"_index":966,"title":{},"body":{"controllers/RoomsController.html":{}}}],["apitags(\"users",{"_index":1181,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":1460,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":1452,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":39,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":23,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":932,"title":{},"body":{"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["artists",{"_index":607,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{}}}],["async",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["attr",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["attr.value",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["attribute.name",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["attributes",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["attrs.find((attribute",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["auth.controller",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":777,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":684,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/jwt",{"_index":776,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["auth_time",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["authcontroller",{"_index":87,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authcontrollerloginerror01",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["authcontrollerloginerror02",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticationresult",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["autherror01",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["autherror02",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["autherror03",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{}}}],["autherror04",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["authflow",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["authguard",{"_index":687,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard(\"jwt",{"_index":686,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authinfo",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["authinfo.usercognitosub",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["authinfo.username",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{}}}],["authmodule",{"_index":50,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1489,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authparameters",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["authregistererror01",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{}}}],["authresponse",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["authresponse.authenticationresult",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["authservice",{"_index":126,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"classes/RegisterBody.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"dependencies.html":{}}}],["aws.cognitoidentityserviceprovider",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["aws.cognitoidentityserviceprovider.admininitiateauthrequest",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["aws_access_key_id",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["aws_cognito_client_id",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["aws_cognito_user_pool_id",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["aws_secret_access_key",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["back",{"_index":1200,"title":{},"body":{"controllers/UsersController.html":{}}}],["backers",{"_index":1484,"title":{},"body":{"index.html":{}}}],["basic",{"_index":1183,"title":{},"body":{"controllers/UsersController.html":{}}}],["be97283ee182",{"_index":838,"title":{},"body":{"injectables/ProfileService.html":{},"controllers/UsersController.html":{}}}],["being",{"_index":521,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/ProfileService.html":{}}}],["belongs",{"_index":971,"title":{},"body":{"controllers/RoomsController.html":{}}}],["bigdaddy",{"_index":1204,"title":{},"body":{"controllers/UsersController.html":{}}}],["bio",{"_index":445,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/DtoGenService.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"injectables/UsersService.html":{}}}],["body",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["bookmark",{"_index":446,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["boolean",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateRoomDto.html":{},"injectables/DtoGenService.html":{},"controllers/ProfileController.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["boolean})@apibadrequestresponse({description",{"_index":743,"title":{},"body":{"controllers/ProfileController.html":{}}}],["bootstrap",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RoomsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["break",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{}}}],["browse",{"_index":1499,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1497,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1447,"title":{},"body":{"index.html":{}}}],["c234678dc346",{"_index":1366,"title":{},"body":{"injectables/UsersService.html":{}}}],["catch",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"injectables/UsersService.html":{}}}],["check",{"_index":612,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["class",{"_index":29,"title":{"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"modules/DbUtilsModule.html":{},"injectables/DbUtilsService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":407,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"overview.html":{}}}],["clear",{"_index":1067,"title":{},"body":{"injectables/RoomsService.html":{}}}],["clearroomqueue",{"_index":904,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["clearroomqueue(req",{"_index":918,"title":{},"body":{"controllers/RoomsController.html":{}}}],["clearroomqueue(roomid",{"_index":1021,"title":{},"body":{"injectables/RoomsService.html":{}}}],["clears",{"_index":1002,"title":{},"body":{"controllers/RoomsController.html":{}}}],["client_id",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["clientid",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["cluster_appmodule",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":228,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":230,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":229,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_dbutilsmodule",{"_index":480,"title":{},"body":{"modules/DbUtilsModule.html":{},"overview.html":{}}}],["cluster_dbutilsmodule_exports",{"_index":483,"title":{},"body":{"modules/DbUtilsModule.html":{},"overview.html":{}}}],["cluster_dbutilsmodule_imports",{"_index":482,"title":{},"body":{"modules/DbUtilsModule.html":{}}}],["cluster_dbutilsmodule_providers",{"_index":481,"title":{},"body":{"modules/DbUtilsModule.html":{}}}],["cluster_dtogenmodule",{"_index":548,"title":{},"body":{"modules/DtoGenModule.html":{},"overview.html":{}}}],["cluster_dtogenmodule_exports",{"_index":550,"title":{},"body":{"modules/DtoGenModule.html":{},"overview.html":{}}}],["cluster_dtogenmodule_imports",{"_index":549,"title":{},"body":{"modules/DtoGenModule.html":{}}}],["cluster_dtogenmodule_providers",{"_index":551,"title":{},"body":{"modules/DtoGenModule.html":{}}}],["cluster_prismamodule",{"_index":717,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":718,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":719,"title":{},"body":{"modules/PrismaModule.html":{}}}],["cluster_profilemodule",{"_index":816,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_profilemodule_imports",{"_index":817,"title":{},"body":{"modules/ProfileModule.html":{}}}],["cluster_profilemodule_providers",{"_index":818,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_roomsmodule",{"_index":1012,"title":{},"body":{"modules/RoomsModule.html":{},"overview.html":{}}}],["cluster_roomsmodule_imports",{"_index":1013,"title":{},"body":{"modules/RoomsModule.html":{}}}],["cluster_roomsmodule_providers",{"_index":1014,"title":{},"body":{"modules/RoomsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1235,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_imports",{"_index":1237,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1236,"title":{},"body":{"modules/UsersModule.html":{}}}],["cognito",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"dependencies.html":{}}}],["cognito'})@apibody({type",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["cognitoaccesstoken",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["cognitodecodedtoken",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"miscellaneous/typealiases.html":{}}}],["cognitoidentityserviceprovider",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["cognitojwtverifier",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["cognitojwtverifier.create",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["column",{"_index":675,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["configmodule",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configservice",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["configuration",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["connect",{"_index":1305,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(\"1",{"_index":1201,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(\"2",{"_index":1202,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(\"3",{"_index":1203,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(\"4",{"_index":1205,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(\"5",{"_index":1207,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(\"6",{"_index":1209,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(\"authinfo",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(\"cognitoaccesstoken",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(\"payload",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(\"req",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["console.log(\"token",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(activity",{"_index":1367,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(err",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["console.log(response",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["console.log(result",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"controllers/UsersController.html":{}}}],["console.log(updateuserdto",{"_index":1278,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(user",{"_index":1287,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(users",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(users.users",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["const",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":691,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["constructor(configservice",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(prisma",{"_index":495,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/ProfileService.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"injectables/DbUtilsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["continue",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"controllers/ProfileController.html":{},"classes/RegisterBody.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller(\"auth",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller(\"profile",{"_index":779,"title":{},"body":{"controllers/ProfileController.html":{}}}],["controller(\"rooms",{"_index":963,"title":{},"body":{"controllers/RoomsController.html":{}}}],["controller(\"users",{"_index":1182,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["count",{"_index":499,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{}}}],["cover",{"_index":608,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{}}}],["coverage",{"_index":1391,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":1186,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(createuserdto",{"_index":1243,"title":{},"body":{"injectables/UsersService.html":{}}}],["created",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createroom",{"_index":1133,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createroom(createroomdto",{"_index":1245,"title":{},"body":{"injectables/UsersService.html":{}}}],["createroom(req",{"_index":1141,"title":{},"body":{"controllers/UsersController.html":{}}}],["createroomdto",{"_index":406,"title":{"classes/CreateRoomDto.html":{}},"body":{"classes/CreateRoomDto.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createroomdto.current_song",{"_index":1318,"title":{},"body":{"injectables/UsersService.html":{}}}],["createroomdto.description",{"_index":1306,"title":{},"body":{"injectables/UsersService.html":{}}}],["createroomdto.end_date",{"_index":1341,"title":{},"body":{"injectables/UsersService.html":{}}}],["createroomdto.has_explicit_content",{"_index":1312,"title":{},"body":{"injectables/UsersService.html":{}}}],["createroomdto.has_nsfw_content",{"_index":1314,"title":{},"body":{"injectables/UsersService.html":{}}}],["createroomdto.is_private",{"_index":1328,"title":{},"body":{"injectables/UsersService.html":{}}}],["createroomdto.is_scheduled",{"_index":1343,"title":{},"body":{"injectables/UsersService.html":{}}}],["createroomdto.is_temporary",{"_index":1308,"title":{},"body":{"injectables/UsersService.html":{}}}],["createroomdto.language",{"_index":1310,"title":{},"body":{"injectables/UsersService.html":{}}}],["createroomdto.room_image",{"_index":1316,"title":{},"body":{"injectables/UsersService.html":{}}}],["createroomdto.room_name",{"_index":1301,"title":{},"body":{"injectables/UsersService.html":{}}}],["createroomdto.roomid",{"_index":1344,"title":{},"body":{"injectables/UsersService.html":{}}}],["createroomdto.start_date",{"_index":1339,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuser",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["createuser(@body",{"_index":784,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["createuser(username",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["createuserdto",{"_index":300,"title":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/LoginBody.html":{},"controllers/ProfileController.html":{},"classes/RegisterBody.html":{},"controllers/RoomsController.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.activity",{"_index":1276,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.bio",{"_index":1274,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.preferences",{"_index":1277,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.profile_picture",{"_index":1275,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.userid",{"_index":1272,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.username",{"_index":1273,"title":{},"body":{"injectables/UsersService.html":{}}}],["creating",{"_index":1324,"title":{},"body":{"injectables/UsersService.html":{}}}],["creation",{"_index":1338,"title":{},"body":{"injectables/UsersService.html":{}}}],["creator",{"_index":602,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{}}}],["credentials",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["crud",{"_index":1184,"title":{},"body":{"controllers/UsersController.html":{}}}],["current",{"_index":655,"title":{},"body":{"injectables/DtoGenService.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["current_song",{"_index":596,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{}}}],["currently",{"_index":994,"title":{},"body":{"controllers/RoomsController.html":{}}}],["data",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DtoGenService.html":{},"classes/LoginBody.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"injectables/UsersService.html":{}}}],["date",{"_index":422,"title":{},"body":{"classes/CreateRoomDto.html":{},"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{}}}],["date_created",{"_index":1047,"title":{},"body":{"injectables/RoomsService.html":{}}}],["dates",{"_index":656,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["datetime",{"_index":604,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["db",{"_index":485,"title":{},"body":{"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["dbutils",{"_index":562,"title":{},"body":{"injectables/DtoGenService.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dbutilsmodule",{"_index":51,"title":{"modules/DbUtilsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DbUtilsModule.html":{},"modules.html":{},"overview.html":{}}}],["dbutilsservice",{"_index":57,"title":{"injectables/DbUtilsService.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"injectables/DbUtilsService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["dc68b541e24f",{"_index":1351,"title":{},"body":{"injectables/UsersService.html":{}}}],["declarations",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RoomsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decodeandverifycognitojwt",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["decodeandverifycognitojwt(jwt_token",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["decoded",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["decoded.sub",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/LoginBody.html":{},"controllers/ProfileController.html":{},"classes/RegisterBody.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":581,"title":{},"body":{"injectables/DtoGenService.html":{},"injectables/RoomsService.html":{}}}],["defined",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":852,"title":{},"body":{"injectables/ProfileService.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["delete(\":id",{"_index":1196,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(\":roomid",{"_index":981,"title":{},"body":{"controllers/RoomsController.html":{}}}],["delete(\":roomid/songs",{"_index":1005,"title":{},"body":{"controllers/RoomsController.html":{}}}],["deleteroom",{"_index":905,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["deleteroom(@request",{"_index":982,"title":{},"body":{"controllers/RoomsController.html":{}}}],["deleteroom(req",{"_index":921,"title":{},"body":{"controllers/RoomsController.html":{}}}],["deleteroom(roomid",{"_index":1023,"title":{},"body":{"injectables/RoomsService.html":{}}}],["deletes",{"_index":977,"title":{},"body":{"controllers/RoomsController.html":{}}}],["dependencies",{"_index":41,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RoomsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":1048,"title":{},"body":{"injectables/RoomsService.html":{}}}],["description",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateRoomDto.html":{},"injectables/DtoGenService.html":{},"controllers/ProfileController.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["detailed",{"_index":793,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["dev",{"_index":781,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["development",{"_index":1461,"title":{},"body":{"index.html":{}}}],["disable",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["documentation",{"_index":791,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"coverage.html":{}}}],["doesn't",{"_index":536,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["dto",{"_index":553,"title":{},"body":{"modules/DtoGenModule.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["dto/create",{"_index":1271,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto/createroomdto",{"_index":960,"title":{},"body":{"controllers/RoomsController.html":{}}}],["dto/room.dto",{"_index":962,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["dto/songinfo.dto",{"_index":900,"title":{},"body":{"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["dto/update",{"_index":1178,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/updateroomdto",{"_index":961,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["dto/updateuserprofile.dto",{"_index":775,"title":{},"body":{"controllers/ProfileController.html":{}}}],["dto/user.dto",{"_index":1179,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/userprofile.dto",{"_index":772,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/UserEntity.html":{}}}],["dtogen",{"_index":822,"title":{},"body":{"injectables/ProfileService.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtogenmodule",{"_index":52,"title":{"modules/DtoGenModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DtoGenModule.html":{},"modules.html":{},"overview.html":{}}}],["dtogenservice",{"_index":58,"title":{"injectables/DtoGenService.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["dtos",{"_index":611,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["duplicate",{"_index":663,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["e",{"_index":847,"title":{},"body":{"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":1472,"title":{},"body":{"index.html":{}}}],["e987",{"_index":1348,"title":{},"body":{"injectables/UsersService.html":{}}}],["each",{"_index":782,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["edits",{"_index":801,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["efficient",{"_index":1448,"title":{},"body":{"index.html":{}}}],["eg",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["email",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{}}}],["end_date",{"_index":409,"title":{},"body":{"classes/CreateRoomDto.html":{},"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{}}}],["ensure",{"_index":252,"title":{},"body":{"modules/AuthModule.html":{}}}],["environment",{"_index":254,"title":{},"body":{"modules/AuthModule.html":{}}}],["err",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["error",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DtoGenService.html":{},"classes/LoginBody.html":{},"controllers/ProfileController.html":{},"classes/RegisterBody.html":{},"controllers/RoomsController.html":{},"injectables/UsersService.html":{}}}],["error(\"failed",{"_index":848,"title":{},"body":{"injectables/ProfileService.html":{}}}],["error(\"invalid",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["error(\"missing",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["error(\"more",{"_index":546,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["error(\"room",{"_index":534,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["error(\"something",{"_index":1321,"title":{},"body":{"injectables/UsersService.html":{}}}],["error(\"user",{"_index":843,"title":{},"body":{"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["error(\"you",{"_index":840,"title":{},"body":{"injectables/ProfileService.html":{}}}],["eslint",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["event_id",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["example",{"_index":833,"title":{},"body":{"injectables/ProfileService.html":{},"injectables/RoomsService.html":{},"index.html":{}}}],["except",{"_index":1003,"title":{},"body":{"controllers/RoomsController.html":{}}}],["exist",{"_index":537,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["existinguser",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["exists",{"_index":613,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["exp",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["expected",{"_index":1369,"title":{},"body":{"injectables/UsersService.html":{}}}],["expiration",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["expired",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{}}}],["expiresin",{"_index":250,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["export",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"modules/DbUtilsModule.html":{},"injectables/DbUtilsService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RoomsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":1424,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":685,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["extractjwt",{"_index":696,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":704,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["f",{"_index":1375,"title":{},"body":{"injectables/UsersService.html":{}}}],["false",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"injectables/RoomsService.html":{}}}],["fav_genres",{"_index":598,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{}}}],["fav_rooms",{"_index":600,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{}}}],["fav_songs",{"_index":599,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{}}}],["field",{"_index":1345,"title":{},"body":{"injectables/UsersService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"modules/DbUtilsModule.html":{},"injectables/DbUtilsService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["find",{"_index":850,"title":{},"body":{"injectables/ProfileService.html":{}}}],["findall",{"_index":1188,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone",{"_index":1241,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone(@param(\"id",{"_index":1191,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(userid",{"_index":1248,"title":{},"body":{"injectables/UsersService.html":{}}}],["fix",{"_index":670,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["follow",{"_index":544,"title":{},"body":{"injectables/DbUtilsService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["follow.follows_id",{"_index":856,"title":{},"body":{"injectables/ProfileService.html":{}}}],["follow.length",{"_index":545,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["followed",{"_index":522,"title":{},"body":{"injectables/DbUtilsService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["followee",{"_index":519,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/ProfileService.html":{}}}],["followee.user_id",{"_index":1390,"title":{},"body":{"injectables/UsersService.html":{}}}],["followees",{"_index":1388,"title":{},"body":{"injectables/UsersService.html":{}}}],["followees.map((followee",{"_index":1389,"title":{},"body":{"injectables/UsersService.html":{}}}],["follower",{"_index":517,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/ProfileService.html":{}}}],["follower.user_id",{"_index":1387,"title":{},"body":{"injectables/UsersService.html":{}}}],["followers",{"_index":527,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["followers'})@apiparam({name",{"_index":1148,"title":{},"body":{"controllers/UsersController.html":{}}}],["followers.map((follower",{"_index":1386,"title":{},"body":{"injectables/UsersService.html":{}}}],["following",{"_index":515,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["following'})@apiparam({name",{"_index":1152,"title":{},"body":{"controllers/UsersController.html":{}}}],["following.length",{"_index":617,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["follows_follows_followeetousers",{"_index":447,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["follows_follows_followertousers",{"_index":448,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["follows_id",{"_index":855,"title":{},"body":{"injectables/ProfileService.html":{}}}],["followuser",{"_index":733,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["followuser(req",{"_index":739,"title":{},"body":{"controllers/ProfileController.html":{}}}],["followuser(userid",{"_index":824,"title":{},"body":{"injectables/ProfileService.html":{}}}],["forbidden",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["foreign",{"_index":1303,"title":{},"body":{"injectables/UsersService.html":{}}}],["found",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"classes/LoginBody.html":{},"controllers/ProfileController.html":{},"classes/RegisterBody.html":{},"controllers/RoomsController.html":{}}}],["framework",{"_index":1446,"title":{},"body":{"index.html":{}}}],["friend",{"_index":1380,"title":{},"body":{"injectables/UsersService.html":{}}}],["friend.friend1",{"_index":1381,"title":{},"body":{"injectables/UsersService.html":{}}}],["friend1",{"_index":1377,"title":{},"body":{"injectables/UsersService.html":{}}}],["friend2",{"_index":1378,"title":{},"body":{"injectables/UsersService.html":{}}}],["friends",{"_index":1165,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["friends'})@apiparam({name",{"_index":1164,"title":{},"body":{"controllers/UsersController.html":{}}}],["friends_friends_friend1tousers",{"_index":449,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["friends_friends_friend2tousers",{"_index":450,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["fully_qualify",{"_index":579,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["funciton",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["function",{"_index":1400,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1440,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gen.module",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["gen.module.ts",{"_index":552,"title":{},"body":{"modules/DtoGenModule.html":{}}}],["gen.service",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DtoGenModule.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["gen.service.ts",{"_index":554,"title":{},"body":{"injectables/DtoGenService.html":{},"coverage.html":{}}}],["gen.service.ts:173",{"_index":565,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["gen.service.ts:218",{"_index":571,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["gen.service.ts:242",{"_index":574,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["gen.service.ts:300",{"_index":576,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["gen.service.ts:354",{"_index":568,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["gen.service.ts:420",{"_index":577,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["gen.service.ts:87",{"_index":563,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["gen.service.ts:93",{"_index":580,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["gen/dto",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["generate",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{},"injectables/DtoGenService.html":{},"injectables/ProfileService.html":{},"injectables/RoomsService.html":{}}}],["generatebriefuserprofiledto",{"_index":555,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generatebriefuserprofiledto(user",{"_index":564,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generatejwt",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatejwt(payload",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["generatemultipleroomdto",{"_index":556,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generatemultipleroomdto(room_ids",{"_index":567,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generatemultipleuserprofiledto",{"_index":557,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generatemultipleuserprofiledto(user_ids",{"_index":570,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generateroomdto",{"_index":558,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generateroomdto(roomid",{"_index":573,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generateroomdtofromroom",{"_index":559,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generateroomdtofromroom(room",{"_index":575,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generateuserdto",{"_index":560,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generateuserprofiledto",{"_index":561,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generateuserprofiledto(userid",{"_index":578,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["generating",{"_index":1297,"title":{},"body":{"injectables/UsersService.html":{}}}],["get(\":id",{"_index":1190,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(\":roomid",{"_index":969,"title":{},"body":{"controllers/RoomsController.html":{}}}],["get(\":roomid/songs",{"_index":1000,"title":{},"body":{"controllers/RoomsController.html":{}}}],["get(\":roomid/songs/current",{"_index":1010,"title":{},"body":{"controllers/RoomsController.html":{}}}],["get(\":roomid/users",{"_index":996,"title":{},"body":{"controllers/RoomsController.html":{}}}],["get(\":username",{"_index":807,"title":{},"body":{"controllers/ProfileController.html":{}}}],["get(\"followers",{"_index":1229,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(\"following",{"_index":1232,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(\"friends",{"_index":1226,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(\"new",{"_index":964,"title":{},"body":{"controllers/RoomsController.html":{}}}],["get(\"rooms",{"_index":1214,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(\"rooms/foryou",{"_index":1223,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(\"rooms/recent",{"_index":1220,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id",{"_index":785,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["get()@apioperation({summary",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["getcurrentsong",{"_index":906,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["getcurrentsong(req",{"_index":924,"title":{},"body":{"controllers/RoomsController.html":{}}}],["getcurrentsong(roomid",{"_index":1025,"title":{},"body":{"injectables/RoomsService.html":{}}}],["getfollowers",{"_index":1134,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getfollowers(@request",{"_index":1230,"title":{},"body":{"controllers/UsersController.html":{}}}],["getfollowers(req",{"_index":1145,"title":{},"body":{"controllers/UsersController.html":{}}}],["getfollowers(userid",{"_index":1250,"title":{},"body":{"injectables/UsersService.html":{}}}],["getfollowing",{"_index":1135,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getfollowing(@request",{"_index":1233,"title":{},"body":{"controllers/UsersController.html":{}}}],["getfollowing(req",{"_index":1150,"title":{},"body":{"controllers/UsersController.html":{}}}],["getfollowing(userid",{"_index":1252,"title":{},"body":{"injectables/UsersService.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getnewrooms",{"_index":907,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["getnewrooms(limit",{"_index":1027,"title":{},"body":{"injectables/RoomsService.html":{}}}],["getprofile",{"_index":734,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["getprofile(@request",{"_index":799,"title":{},"body":{"controllers/ProfileController.html":{}}}],["getprofile(req",{"_index":745,"title":{},"body":{"controllers/ProfileController.html":{}}}],["getprofilebyusername",{"_index":735,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["getprofilebyusername(req",{"_index":748,"title":{},"body":{"controllers/ProfileController.html":{}}}],["getrandomrooms",{"_index":487,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["getrandomrooms(count",{"_index":497,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["getrecentrooms",{"_index":1136,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getrecentrooms(@request",{"_index":1221,"title":{},"body":{"controllers/UsersController.html":{}}}],["getrecentrooms(req",{"_index":1154,"title":{},"body":{"controllers/UsersController.html":{}}}],["getrecentrooms(userid",{"_index":1254,"title":{},"body":{"injectables/UsersService.html":{}}}],["getrecommendedrooms",{"_index":1137,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getrecommendedrooms(@request",{"_index":1224,"title":{},"body":{"controllers/UsersController.html":{}}}],["getrecommendedrooms(req",{"_index":1158,"title":{},"body":{"controllers/UsersController.html":{}}}],["getrecommendedrooms(userid",{"_index":1256,"title":{},"body":{"injectables/UsersService.html":{}}}],["getroominfo",{"_index":908,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["getroominfo(@request",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"controllers/RoomsController.html":{}}}],["getroominfo(req",{"_index":936,"title":{},"body":{"controllers/RoomsController.html":{}}}],["getroominfo(roomid",{"_index":1030,"title":{},"body":{"injectables/RoomsService.html":{}}}],["getroomqueue",{"_index":909,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["getroomqueue(req",{"_index":939,"title":{},"body":{"controllers/RoomsController.html":{}}}],["getroomqueue(roomid",{"_index":1032,"title":{},"body":{"injectables/RoomsService.html":{}}}],["getroomusers",{"_index":910,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["getroomusers(req",{"_index":942,"title":{},"body":{"controllers/RoomsController.html":{}}}],["getroomusers(roomid",{"_index":1034,"title":{},"body":{"injectables/RoomsService.html":{}}}],["gets",{"_index":795,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["getting",{"_index":1442,"title":{"index.html":{}},"body":{}}],["getuser(@param('id",{"_index":789,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["getuserfollowers",{"_index":488,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["getuserfollowers(userid",{"_index":500,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["getuserfollowing",{"_index":489,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["getuserfollowing(userid",{"_index":502,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["getuserfriends",{"_index":1138,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserfriends(@request",{"_index":1227,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserfriends(req",{"_index":1162,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserfriends(userid",{"_index":1258,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserinfo",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserinfo(@request",{"_index":1199,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserinfo(jwt_token",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["getuserinfo(req",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"controllers/UsersController.html":{}}}],["getuserrooms",{"_index":1139,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserrooms(@request",{"_index":1215,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserrooms(req",{"_index":1169,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserrooms(userid",{"_index":1261,"title":{},"body":{"injectables/UsersService.html":{}}}],["given",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProfileController.html":{}}}],["goes",{"_index":1291,"title":{},"body":{"injectables/UsersService.html":{}}}],["grow",{"_index":1479,"title":{},"body":{"index.html":{}}}],["has_explicit_content",{"_index":410,"title":{},"body":{"classes/CreateRoomDto.html":{},"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{}}}],["has_nsfw_content",{"_index":411,"title":{},"body":{"classes/CreateRoomDto.html":{},"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{}}}],["hello",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["here",{"_index":1292,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["httpexception",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["httpexception(\"successfully",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://nestjs.com",{"_index":1493,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpstatus.created",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpstatus.unauthorized",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["iat",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["id",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginBody.html":{},"controllers/ProfileController.html":{},"classes/RegisterBody.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["identifier",{"_index":1392,"title":{},"body":{"coverage.html":{}}}],["identity",{"_index":1414,"title":{},"body":{"dependencies.html":{}}}],["ids",{"_index":526,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/UsersService.html":{}}}],["ids.push(friend.friend1",{"_index":1383,"title":{},"body":{"injectables/UsersService.html":{}}}],["ids.push(friend.friend2",{"_index":1382,"title":{},"body":{"injectables/UsersService.html":{}}}],["ignoreexpiration",{"_index":705,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implement",{"_index":1060,"title":{},"body":{"injectables/RoomsService.html":{},"injectables/UsersService.html":{}}}],["implementation",{"_index":1290,"title":{},"body":{"injectables/UsersService.html":{}}}],["implements",{"_index":728,"title":{},"body":{"injectables/PrismaService.html":{}}}],["import",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"modules/DbUtilsModule.html":{},"injectables/DbUtilsService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imported",{"_index":253,"title":{},"body":{"modules/AuthModule.html":{}}}],["imports",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"modules/ProfileModule.html":{},"modules/RoomsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"modules/DbUtilsModule.html":{},"injectables/DbUtilsService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":589,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["informative",{"_index":794,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["injectable",{"_index":83,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/ProfileService.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"injectables/PrismaService.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":84,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/ProfileService.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["input",{"_index":796,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["installation",{"_index":1457,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1459,"title":{},"body":{"index.html":{}}}],["int",{"_index":593,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["invalid",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["is_private",{"_index":412,"title":{},"body":{"classes/CreateRoomDto.html":{},"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"injectables/UsersService.html":{}}}],["is_scheduled",{"_index":413,"title":{},"body":{"classes/CreateRoomDto.html":{},"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{}}}],["is_temporary",{"_index":414,"title":{},"body":{"classes/CreateRoomDto.html":{},"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{}}}],["isarray",{"_index":933,"title":{},"body":{"controllers/RoomsController.html":{},"classes/SongInfoDto.html":{},"controllers/UsersController.html":{}}}],["isboolean",{"_index":439,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/RoomDto.html":{}}}],["isdate",{"_index":1075,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["isdatestring",{"_index":440,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/RoomDto.html":{}}}],["isfollowing",{"_index":490,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["isfollowing(userid",{"_index":504,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["isglobal",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":1093,"title":{},"body":{"classes/UserDto.html":{}}}],["isnumber",{"_index":880,"title":{},"body":{"classes/RoomDto.html":{}}}],["isobject",{"_index":1128,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["isoptional",{"_index":441,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["isroomprivate",{"_index":491,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["isroomprivate(roomid",{"_index":507,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["isroompublic",{"_index":492,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["isroompublic(roomid",{"_index":509,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["iss",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["isstring",{"_index":438,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/RoomDto.html":{},"classes/SongInfoDto.html":{},"classes/UserDto.html":{},"classes/UserProfileDto.html":{}}}],["join",{"_index":1065,"title":{},"body":{"injectables/RoomsService.html":{},"index.html":{}}}],["joinroom",{"_index":911,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["joinroom(@request",{"_index":987,"title":{},"body":{"controllers/RoomsController.html":{}}}],["joinroom(req",{"_index":945,"title":{},"body":{"controllers/RoomsController.html":{}}}],["joinroom(roomid",{"_index":1036,"title":{},"body":{"injectables/RoomsService.html":{}}}],["json",{"_index":590,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["jsonwebtoken",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["jti",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["jwt",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["jwt.sign(payload",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["jwt.strategy",{"_index":241,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt.verify(jwt_token",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["jwt_secret_key",{"_index":701,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwt_token",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["jwtauthguard",{"_index":682,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":703,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":238,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":245,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginBody.html":{},"controllers/ProfileController.html":{},"classes/RegisterBody.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{},"miscellaneous/typealiases.html":{}}}],["jwtsecret",{"_index":699,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtstrategy",{"_index":231,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1490,"title":{},"body":{"index.html":{}}}],["key",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"injectables/UsersService.html":{}}}],["language",{"_index":415,"title":{},"body":{"classes/CreateRoomDto.html":{},"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{}}}],["later",{"_index":654,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["leader",{"_index":520,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/ProfileService.html":{}}}],["leave",{"_index":1066,"title":{},"body":{"injectables/RoomsService.html":{}}}],["leaveroom",{"_index":912,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["leaveroom(@request",{"_index":991,"title":{},"body":{"controllers/RoomsController.html":{}}}],["leaveroom(req",{"_index":948,"title":{},"body":{"controllers/RoomsController.html":{}}}],["leaveroom(roomid",{"_index":1038,"title":{},"body":{"injectables/RoomsService.html":{}}}],["legend",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RoomsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":1496,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1476,"title":{},"body":{"index.html":{}}}],["limit",{"_index":1029,"title":{},"body":{"injectables/RoomsService.html":{}}}],["line",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["links",{"_index":595,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{}}}],["listing",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["listusers",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["listusers(params",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["literal",{"_index":1100,"title":{},"body":{"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"miscellaneous/typealiases.html":{}}}],["local",{"_index":714,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":240,"title":{},"body":{"modules/AuthModule.html":{}}}],["localstrategy",{"_index":232,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["logic",{"_index":1061,"title":{},"body":{"injectables/RoomsService.html":{}}}],["login",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@body",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logininfo",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginbody",{"_index":95,"title":{"classes/LoginBody.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"coverage.html":{}}}],["loginbody})@apiresponse({status",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["logininfo",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["logininfo.token",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["match",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["matches",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["matching",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"modules/DbUtilsModule.html":{},"injectables/DbUtilsService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":451,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["metadata",{"_index":1435,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["miscellaneous",{"_index":1439,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["mit",{"_index":1475,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1465,"title":{},"body":{"index.html":{}}}],["modelled",{"_index":1346,"title":{},"body":{"injectables/UsersService.html":{}}}],["module",{"_index":38,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RoomsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RoomsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":40,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RoomsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/db",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/dto",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/profile/profile.module",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/rooms/rooms.module",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/users/users.module",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":792,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"index.html":{}}}],["myśliwiec",{"_index":1491,"title":{},"body":{"index.html":{}}}],["name",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":1325,"title":{},"body":{"injectables/UsersService.html":{}}}],["nest",{"_index":1453,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1495,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["nestjs/common",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DbUtilsModule.html":{},"injectables/DbUtilsService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1420,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":239,"title":{},"body":{"modules/AuthModule.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":237,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1423,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/LoginBody.html":{},"controllers/ProfileController.html":{},"classes/RegisterBody.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newly",{"_index":928,"title":{},"body":{"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["newroom",{"_index":1299,"title":{},"body":{"injectables/UsersService.html":{}}}],["newroom.current_song",{"_index":1319,"title":{},"body":{"injectables/UsersService.html":{}}}],["newroom.description",{"_index":1307,"title":{},"body":{"injectables/UsersService.html":{}}}],["newroom.end_date",{"_index":1342,"title":{},"body":{"injectables/UsersService.html":{}}}],["newroom.explicit",{"_index":1313,"title":{},"body":{"injectables/UsersService.html":{}}}],["newroom.is_temporary",{"_index":1309,"title":{},"body":{"injectables/UsersService.html":{}}}],["newroom.language",{"_index":1311,"title":{},"body":{"injectables/UsersService.html":{}}}],["newroom.nsfw",{"_index":1315,"title":{},"body":{"injectables/UsersService.html":{}}}],["newroom.playlist_photo",{"_index":1317,"title":{},"body":{"injectables/UsersService.html":{}}}],["newroom.start_date",{"_index":1340,"title":{},"body":{"injectables/UsersService.html":{}}}],["next",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"controllers/ProfileController.html":{},"classes/RegisterBody.html":{},"controllers/RoomsController.html":{}}}],["node.js",{"_index":1445,"title":{},"body":{"index.html":{}}}],["none",{"_index":965,"title":{},"body":{"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["none'})@apiokresponse({description",{"_index":931,"title":{},"body":{"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["note",{"_index":780,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["npm",{"_index":1458,"title":{},"body":{"index.html":{}}}],["null",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{}}}],["number",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"injectables/RoomsService.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{}}}],["object",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DtoGenService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"injectables/UsersService.html":{}}}],["occurred",{"_index":1296,"title":{},"body":{"injectables/UsersService.html":{}}}],["one",{"_index":547,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["onmoduledestroy",{"_index":724,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":725,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":1477,"title":{},"body":{"index.html":{}}}],["operations",{"_index":1185,"title":{},"body":{"controllers/UsersController.html":{}}}],["optional",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateRoomDto.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["orderby",{"_index":1046,"title":{},"body":{"injectables/RoomsService.html":{}}}],["origin_jti",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["out",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RoomsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["output",{"_index":802,"title":{},"body":{"controllers/ProfileController.html":{}}}],["overview",{"_index":1500,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1412,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":767,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["param(\"roomid",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"controllers/RoomsController.html":{}}}],["param(\"username",{"_index":808,"title":{},"body":{"controllers/ProfileController.html":{}}}],["parameters",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["params",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["parsing",{"_index":1368,"title":{},"body":{"injectables/UsersService.html":{}}}],["partial",{"_index":972,"title":{},"body":{"controllers/RoomsController.html":{}}}],["partialtype",{"_index":1084,"title":{},"body":{"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["partialtype(createuserdto",{"_index":1088,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(roomdto",{"_index":1083,"title":{},"body":{"classes/UpdateRoomDto.html":{}}}],["partialtype(userprofiledto",{"_index":1090,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["participant",{"_index":652,"title":{},"body":{"injectables/DtoGenService.html":{},"controllers/RoomsController.html":{}}}],["participant_count",{"_index":635,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{}}}],["participate",{"_index":452,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["partipicant_count",{"_index":603,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["passed",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["passport",{"_index":697,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":236,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":698,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":689,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["patch",{"_index":766,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["patch(\":id",{"_index":1193,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(\":roomid",{"_index":973,"title":{},"body":{"controllers/RoomsController.html":{}}}],["patchprofile",{"_index":736,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["patchprofile(req",{"_index":751,"title":{},"body":{"controllers/ProfileController.html":{}}}],["paths",{"_index":783,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["payload",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["payload.email",{"_index":708,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.id",{"_index":707,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":709,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["people",{"_index":516,"title":{},"body":{"injectables/DbUtilsService.html":{},"controllers/RoomsController.html":{}}}],["person",{"_index":518,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/ProfileService.html":{}}}],["playing",{"_index":1004,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["please",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"index.html":{}}}],["post",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["post(\":roomid/join",{"_index":986,"title":{},"body":{"controllers/RoomsController.html":{}}}],["post(\":roomid/leave",{"_index":990,"title":{},"body":{"controllers/RoomsController.html":{}}}],["post(\":roomid/songs",{"_index":1007,"title":{},"body":{"controllers/RoomsController.html":{}}}],["post(\":username/follow",{"_index":810,"title":{},"body":{"controllers/ProfileController.html":{}}}],["post(\":username/unfollow",{"_index":814,"title":{},"body":{"controllers/ProfileController.html":{}}}],["post(\"login",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"register",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"rooms",{"_index":1217,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('login')@apitags('auth')@apioperation({summary",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register')@apitags('auth')@apioperation({summary",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["pr",{"_index":1050,"title":{},"body":{"injectables/RoomsService.html":{}}}],["pr.room_id",{"_index":1055,"title":{},"body":{"injectables/RoomsService.html":{}}}],["preferences",{"_index":453,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/UsersService.html":{}}}],["prefix",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["prettier/prettier",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["previously",{"_index":995,"title":{},"body":{"controllers/RoomsController.html":{}}}],["prisma",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto-1.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"classes/LoginBody.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{}}}],["prisma.follows",{"_index":523,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["prisma.jsonvalue",{"_index":473,"title":{},"body":{"classes/CreateUserDto-1.html":{},"injectables/UsersService.html":{}}}],["prisma.private_room",{"_index":542,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["prisma.private_roomcreateinput",{"_index":1330,"title":{},"body":{"injectables/UsersService.html":{}}}],["prisma.public_room",{"_index":539,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["prisma.public_roomcreateinput",{"_index":1334,"title":{},"body":{"injectables/UsersService.html":{}}}],["prisma.room",{"_index":529,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{}}}],["prisma.roomcreateinput",{"_index":1300,"title":{},"body":{"injectables/UsersService.html":{}}}],["prisma.service",{"_index":721,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma.users",{"_index":525,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{}}}],["prisma.userscreateinput",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"injectables/UsersService.html":{}}}],["prisma.usersupdateinput",{"_index":1279,"title":{},"body":{"injectables/UsersService.html":{}}}],["prisma/client",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto-1.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"classes/LoginBody.html":{},"injectables/PrismaService.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["prisma/prisma.module",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"modules/ProfileModule.html":{},"modules/RoomsModule.html":{},"modules/UsersModule.html":{}}}],["prisma/prisma.module.ts",{"_index":720,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/prisma.service",{"_index":242,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DbUtilsModule.html":{},"injectables/DbUtilsService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"classes/LoginBody.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["prisma/prisma.service.ts",{"_index":722,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["prisma/prisma.service.ts:13",{"_index":726,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prisma/prisma.service.ts:9",{"_index":727,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaclient",{"_index":723,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":53,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RoomsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":233,"title":{"injectables/PrismaService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DbUtilsModule.html":{},"injectables/DbUtilsService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"classes/LoginBody.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["prismatypes",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{}}}],["prismatypes.friends",{"_index":1379,"title":{},"body":{"injectables/UsersService.html":{}}}],["prismatypes.public_room",{"_index":1051,"title":{},"body":{"injectables/RoomsService.html":{}}}],["prismatypes.room",{"_index":1045,"title":{},"body":{"injectables/RoomsService.html":{},"injectables/UsersService.html":{}}}],["prismatypes.users",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UsersService.html":{}}}],["private",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DtoGenService.html":{},"classes/LoginBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["private_message",{"_index":454,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["private_room",{"_index":1326,"title":{},"body":{"injectables/UsersService.html":{}}}],["privateroom",{"_index":541,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["privroom",{"_index":1329,"title":{},"body":{"injectables/UsersService.html":{}}}],["privroomresult",{"_index":1331,"title":{},"body":{"injectables/UsersService.html":{}}}],["probably",{"_index":535,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["process.env.jwt_secret",{"_index":247,"title":{},"body":{"modules/AuthModule.html":{}}}],["process.env.jwt_secret_key",{"_index":700,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["production",{"_index":1467,"title":{},"body":{"index.html":{}}}],["profile",{"_index":587,"title":{},"body":{"injectables/DtoGenService.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["profile.controller",{"_index":820,"title":{},"body":{"modules/ProfileModule.html":{}}}],["profile.service",{"_index":774,"title":{},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{}}}],["profile/dto/userprofile.dto",{"_index":583,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["profile/{username",{"_index":806,"title":{},"body":{"controllers/ProfileController.html":{}}}],["profile_name",{"_index":591,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{}}}],["profile_picture",{"_index":455,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/UsersService.html":{}}}],["profile_picture_url",{"_index":592,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{}}}],["profilecontroller",{"_index":731,"title":{"controllers/ProfileController.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"coverage.html":{}}}],["profiledto",{"_index":594,"title":{},"body":{"injectables/DtoGenService.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["profilemodule",{"_index":54,"title":{"modules/ProfileModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProfileModule.html":{},"modules.html":{},"overview.html":{}}}],["profileservice",{"_index":773,"title":{"injectables/ProfileService.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"overview.html":{}}}],["progressive",{"_index":1444,"title":{},"body":{"index.html":{}}}],["project",{"_index":1478,"title":{},"body":{"index.html":{}}}],["promise",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":257,"title":{"properties.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"properties.html":{}}}],["provider",{"_index":1415,"title":{},"body":{"dependencies.html":{}}}],["providers",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RoomsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["public",{"_index":929,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/UsersService.html":{}}}],["publicroom",{"_index":538,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["publicrooms",{"_index":1053,"title":{},"body":{"injectables/RoomsService.html":{}}}],["publicrooms.find((pr",{"_index":1054,"title":{},"body":{"injectables/RoomsService.html":{}}}],["publicrooms.splice(limit",{"_index":1057,"title":{},"body":{"injectables/RoomsService.html":{}}}],["pubroom",{"_index":1333,"title":{},"body":{"injectables/UsersService.html":{}}}],["pubroomresult",{"_index":1335,"title":{},"body":{"injectables/UsersService.html":{}}}],["put",{"_index":765,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["put(\":roomid",{"_index":975,"title":{},"body":{"controllers/RoomsController.html":{}}}],["put/patch",{"_index":970,"title":{},"body":{"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["queue",{"_index":999,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["r",{"_index":1044,"title":{},"body":{"injectables/RoomsService.html":{},"injectables/UsersService.html":{}}}],["r.description",{"_index":673,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["r.explicit",{"_index":677,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["r.is_temporary",{"_index":674,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["r.name",{"_index":672,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["r.nsfw",{"_index":678,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["r.playlist_photo",{"_index":679,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["r.room_creator",{"_index":661,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["r.room_id",{"_index":618,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["r.room_language",{"_index":676,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["r.tags",{"_index":680,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["read",{"_index":1486,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["received",{"_index":1298,"title":{},"body":{"injectables/UsersService.html":{}}}],["recent",{"_index":1156,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["recent_rooms",{"_index":601,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"injectables/UsersService.html":{}}}],["recentrooms",{"_index":621,"title":{},"body":{"injectables/DtoGenService.html":{},"injectables/UsersService.html":{}}}],["recentrooms.length",{"_index":624,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["recentrooms.map((r",{"_index":625,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["recommendation",{"_index":1372,"title":{},"body":{"injectables/UsersService.html":{}}}],["recommended",{"_index":1160,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["recommends",{"_index":1374,"title":{},"body":{"injectables/UsersService.html":{}}}],["record",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["reflect",{"_index":1434,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["region",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["register",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(@body",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(registerinfo",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["registerbody",{"_index":115,"title":{"classes/RegisterBody.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"coverage.html":{}}}],["registerbody})@apiresponse({status",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["registerinfo",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["registerinfo.email",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["registerinfo.usercognitosub",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["registerinfo.username",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["relation",{"_index":1304,"title":{},"body":{"injectables/UsersService.html":{}}}],["relationship",{"_index":851,"title":{},"body":{"injectables/ProfileService.html":{}}}],["remove",{"_index":662,"title":{},"body":{"injectables/DtoGenService.html":{},"controllers/RoomsController.html":{},"injectables/UsersService.html":{}}}],["remove(@param(\"id",{"_index":1197,"title":{},"body":{"controllers/UsersController.html":{}}}],["remove(userid",{"_index":1263,"title":{},"body":{"injectables/UsersService.html":{}}}],["repository",{"_index":1456,"title":{},"body":{"index.html":{}}}],["representing",{"_index":588,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["req",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"controllers/ProfileController.html":{},"classes/RegisterBody.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["req.user",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"controllers/UsersController.html":{}}}],["req.user.email",{"_index":1210,"title":{},"body":{"controllers/UsersController.html":{}}}],["req.user.sub",{"_index":1206,"title":{},"body":{"controllers/UsersController.html":{}}}],["req.user.username",{"_index":1208,"title":{},"body":{"controllers/UsersController.html":{}}}],["request",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"controllers/ProfileController.html":{},"classes/RegisterBody.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["required",{"_index":787,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["reset",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RoomsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"controllers/ProfileController.html":{},"classes/RegisterBody.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["responsepromise",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["result",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["result.creator",{"_index":651,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["result.end_date",{"_index":648,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["result.fav_rooms.data",{"_index":620,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["result.following.count",{"_index":616,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["result.id",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["result.is_scheduled",{"_index":645,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["result.push(room",{"_index":681,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["result.push(roomdto",{"_index":1059,"title":{},"body":{"injectables/RoomsService.html":{}}}],["result.recent_rooms.count",{"_index":623,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["result.recent_rooms.data",{"_index":626,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["result.start_date",{"_index":646,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["results",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"modules/DbUtilsModule.html":{},"injectables/DbUtilsService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":786,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["return",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["room",{"_index":456,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["room'})@apiparam({name",{"_index":1143,"title":{},"body":{"controllers/UsersController.html":{}}}],["room.description",{"_index":637,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["room.dto",{"_index":1085,"title":{},"body":{"classes/UpdateRoomDto.html":{}}}],["room.explicit",{"_index":641,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["room.is_temporary",{"_index":638,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["room.name",{"_index":636,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["room.nsfw",{"_index":642,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["room.playlist_photo",{"_index":643,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["room.room_id",{"_index":634,"title":{},"body":{"injectables/DtoGenService.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{}}}],["room.room_language",{"_index":640,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["room.tags",{"_index":644,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["room_creator",{"_index":1293,"title":{},"body":{"injectables/UsersService.html":{}}}],["room_id",{"_index":533,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/UsersService.html":{}}}],["room_ids",{"_index":569,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["room_image",{"_index":416,"title":{},"body":{"classes/CreateRoomDto.html":{},"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{}}}],["room_name",{"_index":417,"title":{},"body":{"classes/CreateRoomDto.html":{},"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{}}}],["roomdto",{"_index":391,"title":{"classes/RoomDto.html":{}},"body":{"injectables/AuthService.html":{},"injectables/DtoGenService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"classes/RoomDto.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"classes/UpdateRoomDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["roomentity",{"_index":882,"title":{"classes/RoomEntity.html":{}},"body":{"classes/RoomEntity.html":{},"coverage.html":{}}}],["roomexists",{"_index":493,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["roomexists(roomid",{"_index":511,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["roomid",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{}}}],["rooms",{"_index":528,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rooms'})@apiparam({name",{"_index":930,"title":{},"body":{"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["rooms.controller",{"_index":1016,"title":{},"body":{"modules/RoomsModule.html":{}}}],["rooms.length",{"_index":531,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["rooms.map((r",{"_index":660,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["rooms.map((room",{"_index":1294,"title":{},"body":{"injectables/UsersService.html":{}}}],["rooms.push(room",{"_index":1056,"title":{},"body":{"injectables/RoomsService.html":{}}}],["rooms.service",{"_index":959,"title":{},"body":{"controllers/RoomsController.html":{},"modules/RoomsModule.html":{}}}],["rooms/dto/createroomdto",{"_index":1180,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rooms/dto/room.dto",{"_index":584,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rooms/dto/songinfo.dto",{"_index":1112,"title":{},"body":{"classes/UserEntity.html":{}}}],["rooms/{roomid",{"_index":968,"title":{},"body":{"controllers/RoomsController.html":{}}}],["rooms/{roomid}/join",{"_index":984,"title":{},"body":{"controllers/RoomsController.html":{}}}],["rooms/{roomid}/leave",{"_index":989,"title":{},"body":{"controllers/RoomsController.html":{}}}],["rooms/{roomid}/songs",{"_index":998,"title":{},"body":{"controllers/RoomsController.html":{}}}],["rooms/{roomid}/songs/current",{"_index":1009,"title":{},"body":{"controllers/RoomsController.html":{}}}],["rooms/{roomid}/users",{"_index":993,"title":{},"body":{"controllers/RoomsController.html":{}}}],["roomscontroller",{"_index":901,"title":{"controllers/RoomsController.html":{}},"body":{"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"coverage.html":{}}}],["roomsmodule",{"_index":55,"title":{"modules/RoomsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RoomsModule.html":{},"modules.html":{},"overview.html":{}}}],["roomsservice",{"_index":958,"title":{"injectables/RoomsService.html":{}},"body":{"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"coverage.html":{},"overview.html":{}}}],["run",{"_index":1462,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1437,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":1449,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":1337,"title":{},"body":{"injectables/UsersService.html":{}}}],["scheduledroom",{"_index":632,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["scheduledroom.end_date",{"_index":649,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["scheduledroom.start_date",{"_index":647,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["scope",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["sdk",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"dependencies.html":{}}}],["sdk/client",{"_index":1413,"title":{},"body":{"dependencies.html":{}}}],["sdk/credential",{"_index":1417,"title":{},"body":{"dependencies.html":{}}}],["secret",{"_index":246,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["secretaccesskey",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["secretkey",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["secretorkey",{"_index":706,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["server",{"_index":1450,"title":{},"body":{"index.html":{}}}],["service",{"_index":610,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["set",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["set(userids",{"_index":665,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["side",{"_index":1451,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":249,"title":{},"body":{"modules/AuthModule.html":{}}}],["song",{"_index":605,"title":{},"body":{"injectables/DtoGenService.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["songinfo.dto",{"_index":881,"title":{},"body":{"classes/RoomDto.html":{}}}],["songinfodto",{"_index":597,"title":{"classes/SongInfoDto.html":{}},"body":{"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"classes/SongInfoDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"coverage.html":{}}}],["songinfoentity",{"_index":1076,"title":{"classes/SongInfoEntity.html":{}},"body":{"classes/SongInfoEntity.html":{},"coverage.html":{}}}],["songs",{"_index":657,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["soon",{"_index":671,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"modules/DbUtilsModule.html":{},"injectables/DbUtilsService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["south",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["sponsors",{"_index":1481,"title":{},"body":{"index.html":{}}}],["src/.../auth.service.ts",{"_index":1510,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":1441,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:15",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":85,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":86,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:160",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:36",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":234,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":778,"title":{},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["src/auth/auth.service.ts",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/auth.service.ts:137",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:153",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:179",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:230",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:247",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:34",{"_index":859,"title":{},"body":{"classes/RegisterBody.html":{}}}],["src/auth/auth.service.ts:37",{"_index":858,"title":{},"body":{"classes/RegisterBody.html":{}}}],["src/auth/auth.service.ts:40",{"_index":857,"title":{},"body":{"classes/RegisterBody.html":{}}}],["src/auth/auth.service.ts:45",{"_index":716,"title":{},"body":{"classes/LoginBody.html":{}}}],["src/auth/auth.service.ts:50",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:51",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:52",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:53",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:54",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:97",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/jwt",{"_index":683,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":688,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:21",{"_index":694,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:7",{"_index":692,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/local.strategy.ts",{"_index":710,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts:12",{"_index":713,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/local.strategy.ts:7",{"_index":711,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/main.ts",{"_index":1399,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/modules/db",{"_index":243,"title":{},"body":{"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"injectables/DbUtilsService.html":{},"coverage.html":{}}}],["src/modules/dto",{"_index":244,"title":{},"body":{"modules/AuthModule.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"coverage.html":{}}}],["src/modules/profile/dto/updateuserprofile.dto.ts",{"_index":1089,"title":{},"body":{"classes/UpdateUserProfileDto.html":{},"coverage.html":{}}}],["src/modules/profile/dto/userprofile.dto.ts",{"_index":1113,"title":{},"body":{"classes/UserProfileDto.html":{},"coverage.html":{}}}],["src/modules/profile/dto/userprofile.dto.ts:13",{"_index":1126,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/modules/profile/dto/userprofile.dto.ts:17",{"_index":1127,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/modules/profile/dto/userprofile.dto.ts:21",{"_index":1124,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/modules/profile/dto/userprofile.dto.ts:26",{"_index":1120,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/modules/profile/dto/userprofile.dto.ts:34",{"_index":1121,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/modules/profile/dto/userprofile.dto.ts:42",{"_index":1122,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/modules/profile/dto/userprofile.dto.ts:49",{"_index":1114,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/modules/profile/dto/userprofile.dto.ts:54",{"_index":1116,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/modules/profile/dto/userprofile.dto.ts:59",{"_index":1117,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/modules/profile/dto/userprofile.dto.ts:67",{"_index":1119,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/modules/profile/dto/userprofile.dto.ts:75",{"_index":1118,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/modules/profile/dto/userprofile.dto.ts:83",{"_index":1125,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/modules/profile/dto/userprofile.dto.ts:9",{"_index":1123,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/modules/profile/entities/userprofile.entity.ts",{"_index":1097,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["src/modules/profile/entities/userprofile.entity.ts:11",{"_index":1110,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/profile/entities/userprofile.entity.ts:14",{"_index":1111,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/profile/entities/userprofile.entity.ts:17",{"_index":1108,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/profile/entities/userprofile.entity.ts:20",{"_index":1104,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/profile/entities/userprofile.entity.ts:26",{"_index":1105,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/profile/entities/userprofile.entity.ts:32",{"_index":1106,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/profile/entities/userprofile.entity.ts:38",{"_index":1098,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/profile/entities/userprofile.entity.ts:41",{"_index":1099,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/profile/entities/userprofile.entity.ts:44",{"_index":1101,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/profile/entities/userprofile.entity.ts:50",{"_index":1103,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/profile/entities/userprofile.entity.ts:56",{"_index":1102,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/profile/entities/userprofile.entity.ts:62",{"_index":1109,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/profile/entities/userprofile.entity.ts:8",{"_index":1107,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/modules/profile/profile.controller.ts",{"_index":732,"title":{},"body":{"controllers/ProfileController.html":{},"coverage.html":{}}}],["src/modules/profile/profile.controller.ts:102",{"_index":750,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/profile/profile.controller.ts:123",{"_index":744,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/profile/profile.controller.ts:145",{"_index":761,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/profile/profile.controller.ts:57",{"_index":747,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/profile/profile.controller.ts:70",{"_index":764,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/profile/profile.controller.ts:86",{"_index":755,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/profile/profile.module.ts",{"_index":819,"title":{},"body":{"modules/ProfileModule.html":{}}}],["src/modules/profile/profile.service.ts",{"_index":821,"title":{},"body":{"injectables/ProfileService.html":{},"coverage.html":{}}}],["src/modules/profile/profile.service.ts:16",{"_index":826,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:28",{"_index":832,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:32",{"_index":828,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:36",{"_index":827,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:44",{"_index":825,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:81",{"_index":831,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:9",{"_index":823,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/rooms/dto/createroomdto.ts",{"_index":408,"title":{},"body":{"classes/CreateRoomDto.html":{},"coverage.html":{}}}],["src/modules/rooms/dto/createroomdto.ts:11",{"_index":421,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["src/modules/rooms/dto/createroomdto.ts:16",{"_index":430,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["src/modules/rooms/dto/createroomdto.ts:21",{"_index":428,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["src/modules/rooms/dto/createroomdto.ts:26",{"_index":429,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["src/modules/rooms/dto/createroomdto.ts:31",{"_index":435,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["src/modules/rooms/dto/createroomdto.ts:36",{"_index":424,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["src/modules/rooms/dto/createroomdto.ts:41",{"_index":432,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["src/modules/rooms/dto/createroomdto.ts:46",{"_index":426,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["src/modules/rooms/dto/createroomdto.ts:51",{"_index":427,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["src/modules/rooms/dto/createroomdto.ts:56",{"_index":433,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["src/modules/rooms/dto/createroomdto.ts:59",{"_index":437,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["src/modules/rooms/dto/createroomdto.ts:7",{"_index":434,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["src/modules/rooms/dto/room.dto",{"_index":1129,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts",{"_index":860,"title":{},"body":{"classes/RoomDto.html":{},"coverage.html":{}}}],["src/modules/rooms/dto/room.dto.ts:12",{"_index":877,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:16",{"_index":874,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:20",{"_index":876,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:24",{"_index":863,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:28",{"_index":871,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:32",{"_index":869,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:36",{"_index":870,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:40",{"_index":878,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:44",{"_index":865,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:48",{"_index":872,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:52",{"_index":867,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:56",{"_index":868,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:60",{"_index":875,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:63",{"_index":862,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:66",{"_index":879,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/room.dto.ts:8",{"_index":861,"title":{},"body":{"classes/RoomDto.html":{}}}],["src/modules/rooms/dto/songinfo.dto",{"_index":1130,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/modules/rooms/dto/songinfo.dto.ts",{"_index":1068,"title":{},"body":{"classes/SongInfoDto.html":{},"coverage.html":{}}}],["src/modules/rooms/dto/songinfo.dto.ts:11",{"_index":1070,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["src/modules/rooms/dto/songinfo.dto.ts:15",{"_index":1071,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["src/modules/rooms/dto/songinfo.dto.ts:19",{"_index":1073,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["src/modules/rooms/dto/songinfo.dto.ts:7",{"_index":1074,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["src/modules/rooms/dto/updateroomdto.ts",{"_index":1082,"title":{},"body":{"classes/UpdateRoomDto.html":{},"coverage.html":{}}}],["src/modules/rooms/entities/room.entity.ts",{"_index":883,"title":{},"body":{"classes/RoomEntity.html":{},"coverage.html":{}}}],["src/modules/rooms/entities/room.entity.ts:10",{"_index":897,"title":{},"body":{"classes/RoomEntity.html":{}}}],["src/modules/rooms/entities/room.entity.ts:13",{"_index":894,"title":{},"body":{"classes/RoomEntity.html":{}}}],["src/modules/rooms/entities/room.entity.ts:16",{"_index":896,"title":{},"body":{"classes/RoomEntity.html":{}}}],["src/modules/rooms/entities/room.entity.ts:19",{"_index":886,"title":{},"body":{"classes/RoomEntity.html":{}}}],["src/modules/rooms/entities/room.entity.ts:22",{"_index":892,"title":{},"body":{"classes/RoomEntity.html":{}}}],["src/modules/rooms/entities/room.entity.ts:25",{"_index":890,"title":{},"body":{"classes/RoomEntity.html":{}}}],["src/modules/rooms/entities/room.entity.ts:28",{"_index":891,"title":{},"body":{"classes/RoomEntity.html":{}}}],["src/modules/rooms/entities/room.entity.ts:31",{"_index":898,"title":{},"body":{"classes/RoomEntity.html":{}}}],["src/modules/rooms/entities/room.entity.ts:34",{"_index":887,"title":{},"body":{"classes/RoomEntity.html":{}}}],["src/modules/rooms/entities/room.entity.ts:37",{"_index":893,"title":{},"body":{"classes/RoomEntity.html":{}}}],["src/modules/rooms/entities/room.entity.ts:40",{"_index":888,"title":{},"body":{"classes/RoomEntity.html":{}}}],["src/modules/rooms/entities/room.entity.ts:43",{"_index":889,"title":{},"body":{"classes/RoomEntity.html":{}}}],["src/modules/rooms/entities/room.entity.ts:46",{"_index":895,"title":{},"body":{"classes/RoomEntity.html":{}}}],["src/modules/rooms/entities/room.entity.ts:49",{"_index":885,"title":{},"body":{"classes/RoomEntity.html":{}}}],["src/modules/rooms/entities/room.entity.ts:52",{"_index":899,"title":{},"body":{"classes/RoomEntity.html":{}}}],["src/modules/rooms/entities/room.entity.ts:7",{"_index":884,"title":{},"body":{"classes/RoomEntity.html":{}}}],["src/modules/rooms/entities/songinfo.entity.ts",{"_index":1077,"title":{},"body":{"classes/SongInfoEntity.html":{},"coverage.html":{}}}],["src/modules/rooms/entities/songinfo.entity.ts:11",{"_index":1079,"title":{},"body":{"classes/SongInfoEntity.html":{}}}],["src/modules/rooms/entities/songinfo.entity.ts:14",{"_index":1080,"title":{},"body":{"classes/SongInfoEntity.html":{}}}],["src/modules/rooms/entities/songinfo.entity.ts:5",{"_index":1081,"title":{},"body":{"classes/SongInfoEntity.html":{}}}],["src/modules/rooms/entities/songinfo.entity.ts:8",{"_index":1078,"title":{},"body":{"classes/SongInfoEntity.html":{}}}],["src/modules/rooms/rooms.controller.ts",{"_index":902,"title":{},"body":{"controllers/RoomsController.html":{},"coverage.html":{}}}],["src/modules/rooms/rooms.controller.ts:108",{"_index":954,"title":{},"body":{"controllers/RoomsController.html":{}}}],["src/modules/rooms/rooms.controller.ts:125",{"_index":923,"title":{},"body":{"controllers/RoomsController.html":{}}}],["src/modules/rooms/rooms.controller.ts:138",{"_index":947,"title":{},"body":{"controllers/RoomsController.html":{}}}],["src/modules/rooms/rooms.controller.ts:151",{"_index":950,"title":{},"body":{"controllers/RoomsController.html":{}}}],["src/modules/rooms/rooms.controller.ts:164",{"_index":944,"title":{},"body":{"controllers/RoomsController.html":{}}}],["src/modules/rooms/rooms.controller.ts:180",{"_index":941,"title":{},"body":{"controllers/RoomsController.html":{}}}],["src/modules/rooms/rooms.controller.ts:196",{"_index":920,"title":{},"body":{"controllers/RoomsController.html":{}}}],["src/modules/rooms/rooms.controller.ts:212",{"_index":917,"title":{},"body":{"controllers/RoomsController.html":{}}}],["src/modules/rooms/rooms.controller.ts:229",{"_index":926,"title":{},"body":{"controllers/RoomsController.html":{}}}],["src/modules/rooms/rooms.controller.ts:71",{"_index":935,"title":{},"body":{"controllers/RoomsController.html":{}}}],["src/modules/rooms/rooms.controller.ts:84",{"_index":938,"title":{},"body":{"controllers/RoomsController.html":{}}}],["src/modules/rooms/rooms.controller.ts:97",{"_index":957,"title":{},"body":{"controllers/RoomsController.html":{}}}],["src/modules/rooms/rooms.module.ts",{"_index":1015,"title":{},"body":{"modules/RoomsModule.html":{}}}],["src/modules/rooms/rooms.service.ts",{"_index":1017,"title":{},"body":{"injectables/RoomsService.html":{},"coverage.html":{}}}],["src/modules/rooms/rooms.service.ts:102",{"_index":1033,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/rooms/rooms.service.ts:107",{"_index":1022,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/rooms/rooms.service.ts:112",{"_index":1020,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/rooms/rooms.service.ts:117",{"_index":1026,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/rooms/rooms.service.ts:13",{"_index":1018,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/rooms/rooms.service.ts:20",{"_index":1028,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/rooms/rooms.service.ts:59",{"_index":1031,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/rooms/rooms.service.ts:72",{"_index":1043,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/rooms/rooms.service.ts:77",{"_index":1041,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/rooms/rooms.service.ts:82",{"_index":1024,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/rooms/rooms.service.ts:87",{"_index":1037,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/rooms/rooms.service.ts:92",{"_index":1039,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/rooms/rooms.service.ts:97",{"_index":1035,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/users/dto/create",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"coverage.html":{}}}],["src/modules/users/dto/update",{"_index":1087,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/user.dto.ts",{"_index":1092,"title":{},"body":{"classes/UserDto.html":{},"coverage.html":{}}}],["src/modules/users/entities/user.entity.ts",{"_index":472,"title":{},"body":{"classes/CreateUserDto-1.html":{},"coverage.html":{}}}],["src/modules/users/entities/user.entity.ts:12",{"_index":475,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["src/modules/users/entities/user.entity.ts:15",{"_index":477,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["src/modules/users/entities/user.entity.ts:18",{"_index":474,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["src/modules/users/entities/user.entity.ts:21",{"_index":476,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["src/modules/users/entities/user.entity.ts:6",{"_index":478,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["src/modules/users/entities/user.entity.ts:9",{"_index":479,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["src/modules/users/users.controller.ts",{"_index":1132,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/modules/users/users.controller.ts:109",{"_index":1176,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:120",{"_index":1173,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:138",{"_index":1171,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:153",{"_index":1144,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:172",{"_index":1157,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:188",{"_index":1161,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:204",{"_index":1166,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:220",{"_index":1149,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:236",{"_index":1153,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:80",{"_index":1168,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.module.ts",{"_index":1238,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/modules/users/users.service",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["src/modules/users/users.service.ts",{"_index":1240,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/modules/users/users.service.ts:109",{"_index":1246,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:15",{"_index":1242,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:207",{"_index":1255,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:22",{"_index":1244,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:266",{"_index":1257,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:285",{"_index":1259,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:305",{"_index":1251,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:321",{"_index":1253,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:34",{"_index":1247,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:38",{"_index":1249,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:44",{"_index":1266,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:60",{"_index":1264,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:66",{"_index":1260,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:71",{"_index":1270,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:76",{"_index":1268,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:81",{"_index":1262,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":1463,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1466,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1468,"title":{},"body":{"index.html":{}}}],["start_date",{"_index":418,"title":{},"body":{"classes/CreateRoomDto.html":{},"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{}}}],["start_time",{"_index":609,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{}}}],["started",{"_index":1443,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1455,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1393,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["stay",{"_index":1487,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":695,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["string})@apiresponse({status",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["sub",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"controllers/UsersController.html":{}}}],["success",{"_index":979,"title":{},"body":{"controllers/RoomsController.html":{}}}],["successful",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["successfully",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["such",{"_index":790,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{}}}],["summary",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":702,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":1482,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1498,"title":{},"body":{"modules.html":{}}}],["table",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"injectables/DtoGenService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1411,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":419,"title":{},"body":{"classes/CreateRoomDto.html":{},"injectables/DtoGenService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{}}}],["tba",{"_index":1095,"title":{},"body":{"classes/UserDto.html":{}}}],["tbale",{"_index":1327,"title":{},"body":{"injectables/UsersService.html":{}}}],["test",{"_index":1471,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1474,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1473,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1470,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1480,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":729,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":730,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.accesskeyid",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["this.appservice.gethello",{"_index":35,"title":{},"body":{"controllers/AppController.html":{}}}],["this.auth.getuserinfo(req",{"_index":812,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["this.authservice.createuser",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.decodeandverifycognitojwt(cognitoaccesstoken",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.generatejwt(payload",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.listusers",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(username",{"_index":715,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.clientid",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["this.cognitoidentityserviceprovider",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["this.configservice.get",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["this.configservice.get(\"aws_access_key_id",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["this.configservice.get(\"aws_cognito_client_id",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["this.configservice.get(\"jwt_expiration_time",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["this.configservice.get(\"jwt_secret_key",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["this.dbutils.getrandomrooms(5",{"_index":622,"title":{},"body":{"injectables/DtoGenService.html":{},"injectables/UsersService.html":{}}}],["this.dbutils.getuserfollowers(userid",{"_index":1385,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.dbutils.getuserfollowing(userid",{"_index":615,"title":{},"body":{"injectables/DtoGenService.html":{},"injectables/UsersService.html":{}}}],["this.dbutils.isroomprivate(room.room_id",{"_index":658,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["this.dbutils.isroomprivate(roomid",{"_index":639,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["this.dbutilsservice.isfollowing(userid",{"_index":845,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.dbutilsservice.userexists(accountfollowedid",{"_index":842,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.dbutilsservice.userexists(accountunfollowedid",{"_index":849,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.dbutilsservice.userexists(userid",{"_index":844,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.dtogen.generatemultipleroomdto(ids",{"_index":1295,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.dtogen.generatemultipleroomdto(recentrooms",{"_index":1371,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.dtogen.generatemultipleuserprofiledto(ids",{"_index":1384,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.dtogen.generateroomdto(roomid",{"_index":1063,"title":{},"body":{"injectables/RoomsService.html":{}}}],["this.dtogen.generateroomdtofromroom(room",{"_index":1058,"title":{},"body":{"injectables/RoomsService.html":{},"injectables/UsersService.html":{}}}],["this.dtogen.generateuserprofiledto(userid",{"_index":839,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.generatebriefuserprofiledto(user",{"_index":614,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["this.generatemultipleroomdto(ids",{"_index":619,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["this.generateuserprofiledto(room.room_creator",{"_index":650,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["this.prisma.follows.create",{"_index":846,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.prisma.follows.delete",{"_index":854,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.prisma.follows.findfirst",{"_index":853,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.prisma.follows.findmany",{"_index":524,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["this.prisma.friends.findmany",{"_index":1376,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.private_room.create",{"_index":1332,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.private_room.findunique",{"_index":543,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["this.prisma.public_room.create",{"_index":1336,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.public_room.findmany",{"_index":1052,"title":{},"body":{"injectables/RoomsService.html":{}}}],["this.prisma.public_room.findunique",{"_index":540,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["this.prisma.room.create",{"_index":1320,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.room.findmany",{"_index":530,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{}}}],["this.prisma.room.findunique",{"_index":532,"title":{},"body":{"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{}}}],["this.prisma.scheduled_room.findunique",{"_index":633,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["this.prisma.users.create",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"injectables/UsersService.html":{}}}],["this.prisma.users.delete",{"_index":1289,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.users.findmany",{"_index":631,"title":{},"body":{"injectables/DtoGenService.html":{},"injectables/UsersService.html":{}}}],["this.prisma.users.findunique",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"injectables/UsersService.html":{}}}],["this.prisma.users.update",{"_index":1288,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.profileservice.followuser(userinfo.id",{"_index":813,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.getprofile",{"_index":800,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.getprofilebyusername",{"_index":809,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.patchprofile",{"_index":805,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.unfollowuser(userinfo.id",{"_index":815,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.updateprofile",{"_index":804,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.roomsservice.addsongtoqueue(roomid",{"_index":1008,"title":{},"body":{"controllers/RoomsController.html":{}}}],["this.roomsservice.clearroomqueue(roomid",{"_index":1006,"title":{},"body":{"controllers/RoomsController.html":{}}}],["this.roomsservice.deleteroom(roomid",{"_index":983,"title":{},"body":{"controllers/RoomsController.html":{}}}],["this.roomsservice.getcurrentsong(roomid",{"_index":1011,"title":{},"body":{"controllers/RoomsController.html":{}}}],["this.roomsservice.getnewrooms",{"_index":967,"title":{},"body":{"controllers/RoomsController.html":{}}}],["this.roomsservice.getroominfo(roomid",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"controllers/RoomsController.html":{}}}],["this.roomsservice.getroomqueue(roomid",{"_index":1001,"title":{},"body":{"controllers/RoomsController.html":{}}}],["this.roomsservice.getroomusers(roomid",{"_index":997,"title":{},"body":{"controllers/RoomsController.html":{}}}],["this.roomsservice.joinroom(roomid",{"_index":988,"title":{},"body":{"controllers/RoomsController.html":{}}}],["this.roomsservice.leaveroom(roomid",{"_index":992,"title":{},"body":{"controllers/RoomsController.html":{}}}],["this.roomsservice.updateroom(roomid",{"_index":976,"title":{},"body":{"controllers/RoomsController.html":{}}}],["this.roomsservice.updateroominfo(roomid",{"_index":974,"title":{},"body":{"controllers/RoomsController.html":{}}}],["this.secretaccesskey",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["this.userpoolid",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["this.usersservice.create(createuserdto",{"_index":1187,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.createroom(createroomdto",{"_index":1218,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":1189,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(id",{"_index":1192,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(userid",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.usersservice.getfollowers(userinfo.id",{"_index":1231,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getfollowing(userinfo.id",{"_index":1234,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getrecentrooms(userinfo.id",{"_index":1222,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getrecommendedrooms(userinfo.id",{"_index":1225,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserfriends(userinfo.id",{"_index":1228,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserinfo",{"_index":1211,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserrooms(userinfo.id",{"_index":1216,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(id",{"_index":1198,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(id",{"_index":1195,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updateprofile(updateuserdto",{"_index":1213,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updateuserprofile(updateuserdto",{"_index":1212,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["title",{"_index":606,"title":{},"body":{"injectables/DtoGenService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{}}}],["todo",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{}}}],["token",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"controllers/UsersController.html":{}}}],["token_use",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["tokenuse",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["touch",{"_index":1488,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":1429,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"classes/LoginBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["true})@apitags('rooms",{"_index":934,"title":{},"body":{"controllers/RoomsController.html":{}}}],["try",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["twitter",{"_index":1494,"title":{},"body":{"index.html":{}}}],["type",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"classes/SongInfoDto.html":{},"classes/SongInfoEntity.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1508,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"injectables/UsersService.html":{}}}],["typescript",{"_index":1454,"title":{},"body":{"index.html":{}}}],["u",{"_index":668,"title":{},"body":{"injectables/DtoGenService.html":{},"injectables/UsersService.html":{}}}],["u.userid",{"_index":667,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["unauthorizedexception",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["unauthorizedexception(\"error",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["unauthorizedexception(\"invalid",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["undefined",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateRoomDto.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"classes/SongInfoEntity.html":{}}}],["undefined})@isarray",{"_index":1069,"title":{},"body":{"classes/SongInfoDto.html":{}}}],["unfollow",{"_index":758,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["unfollowed",{"_index":759,"title":{},"body":{"controllers/ProfileController.html":{}}}],["unfollowing",{"_index":760,"title":{},"body":{"controllers/ProfileController.html":{}}}],["unfollowuser",{"_index":737,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["unfollowuser(req",{"_index":756,"title":{},"body":{"controllers/ProfileController.html":{}}}],["unfollowuser(userid",{"_index":829,"title":{},"body":{"injectables/ProfileService.html":{}}}],["uniqueuserids",{"_index":664,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["unit",{"_index":1469,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":1507,"title":{},"body":{"properties.html":{}}}],["untitled",{"_index":1302,"title":{},"body":{"injectables/UsersService.html":{}}}],["update",{"_index":1064,"title":{},"body":{"injectables/RoomsService.html":{},"injectables/UsersService.html":{}}}],["update(@param(\"id",{"_index":1194,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(userid",{"_index":1265,"title":{},"body":{"injectables/UsersService.html":{}}}],["updated",{"_index":803,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["updateprofile",{"_index":738,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateprofile(req",{"_index":762,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["updateprofile(updateuserdto",{"_index":1267,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateprofiledto",{"_index":752,"title":{},"body":{"controllers/ProfileController.html":{}}}],["updateroom",{"_index":913,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["updateroom(req",{"_index":951,"title":{},"body":{"controllers/RoomsController.html":{}}}],["updateroom(roomid",{"_index":1040,"title":{},"body":{"injectables/RoomsService.html":{}}}],["updateroomdto",{"_index":952,"title":{"classes/UpdateRoomDto.html":{}},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"classes/UpdateRoomDto.html":{},"coverage.html":{}}}],["updateroominfo",{"_index":914,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["updateroominfo(req",{"_index":955,"title":{},"body":{"controllers/RoomsController.html":{}}}],["updateroominfo(roomid",{"_index":1042,"title":{},"body":{"injectables/RoomsService.html":{}}}],["updateuserdto",{"_index":1086,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserdto.activity",{"_index":1283,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto.bio",{"_index":1281,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto.preferences",{"_index":1285,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto.profile_picture",{"_index":1282,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto.username",{"_index":1280,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserprofile",{"_index":1140,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuserprofile(req",{"_index":1174,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserprofile(updateuserdto",{"_index":1269,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserprofiledto",{"_index":753,"title":{"classes/UpdateUserProfileDto.html":{}},"body":{"controllers/ProfileController.html":{},"classes/UpdateUserProfileDto.html":{},"coverage.html":{}}}],["useguards",{"_index":768,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":797,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@apitags('profile",{"_index":746,"title":{},"body":{"controllers/ProfileController.html":{}}}],["useguards(jwtauthguard)@delete(':roomid')@apitags('rooms",{"_index":922,"title":{},"body":{"controllers/RoomsController.html":{}}}],["useguards(jwtauthguard)@delete(':roomid/songs')@apitags('rooms",{"_index":919,"title":{},"body":{"controllers/RoomsController.html":{}}}],["useguards(jwtauthguard)@get(':roomid')@apitags('rooms",{"_index":937,"title":{},"body":{"controllers/RoomsController.html":{}}}],["useguards(jwtauthguard)@get(':roomid/songs')@apitags('rooms",{"_index":940,"title":{},"body":{"controllers/RoomsController.html":{}}}],["useguards(jwtauthguard)@get(':roomid/songs/current')@apitags('rooms",{"_index":925,"title":{},"body":{"controllers/RoomsController.html":{}}}],["useguards(jwtauthguard)@get(':roomid/users')@apitags('rooms",{"_index":943,"title":{},"body":{"controllers/RoomsController.html":{}}}],["useguards(jwtauthguard)@get(':username')@apitags('profile",{"_index":749,"title":{},"body":{"controllers/ProfileController.html":{}}}],["useguards(jwtauthguard)@patch(':roomid')@apitags('rooms",{"_index":956,"title":{},"body":{"controllers/RoomsController.html":{}}}],["useguards(jwtauthguard)@patch()@apitags('profile",{"_index":754,"title":{},"body":{"controllers/ProfileController.html":{}}}],["useguards(jwtauthguard)@post(':roomid/join')@apitags('rooms",{"_index":946,"title":{},"body":{"controllers/RoomsController.html":{}}}],["useguards(jwtauthguard)@post(':roomid/leave')@apitags('rooms",{"_index":949,"title":{},"body":{"controllers/RoomsController.html":{}}}],["useguards(jwtauthguard)@post(':roomid/songs')@apitags('rooms",{"_index":916,"title":{},"body":{"controllers/RoomsController.html":{}}}],["useguards(jwtauthguard)@put(':roomid')@apitags('rooms",{"_index":953,"title":{},"body":{"controllers/RoomsController.html":{}}}],["useguards(jwtauthguard)@put()@apitags('profile",{"_index":763,"title":{},"body":{"controllers/ProfileController.html":{}}}],["user",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"controllers/RoomsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user's",{"_index":1147,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user'})@apiparam({name",{"_index":741,"title":{},"body":{"controllers/ProfileController.html":{}}}],["user.activity",{"_index":1284,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.bio",{"_index":630,"title":{},"body":{"injectables/DtoGenService.html":{},"injectables/UsersService.html":{}}}],["user.dto",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":443,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":471,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:15",{"_index":458,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":468,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":457,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:25",{"_index":466,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:28",{"_index":459,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:31",{"_index":460,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:34",{"_index":461,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:37",{"_index":462,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:40",{"_index":463,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:43",{"_index":464,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:46",{"_index":465,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:49",{"_index":467,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:52",{"_index":469,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:7",{"_index":470,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.full_name",{"_index":627,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["user.preferences",{"_index":1286,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.profile_picture",{"_index":629,"title":{},"body":{"injectables/DtoGenService.html":{},"injectables/UsersService.html":{}}}],["user.user_id",{"_index":628,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["user.userattributes",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["user.username",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DtoGenService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"injectables/UsersService.html":{}}}],["user_id",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"injectables/UsersService.html":{}}}],["user_ids",{"_index":572,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["usercognitosub",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["userdto",{"_index":585,"title":{"classes/UserDto.html":{}},"body":{"injectables/DtoGenService.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["useremail",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["userentity",{"_index":1096,"title":{"classes/UserEntity.html":{}},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["userexists",{"_index":494,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["userexists(userid",{"_index":513,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["userid",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/DbUtilsService.html":{},"injectables/DtoGenService.html":{},"classes/LoginBody.html":{},"injectables/ProfileService.html":{},"classes/RegisterBody.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["userids",{"_index":659,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["userinfo",{"_index":811,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["userinfo.id",{"_index":1219,"title":{},"body":{"controllers/UsersController.html":{}}}],["usermatch",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["username",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/DtoGenService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginBody.html":{},"controllers/ProfileController.html":{},"classes/RegisterBody.html":{},"classes/UserDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["username'})@apiokresponse({description",{"_index":742,"title":{},"body":{"controllers/ProfileController.html":{}}}],["userpool",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["userpoolid",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["userprofile.dto",{"_index":1091,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["userprofiledto",{"_index":566,"title":{"classes/UserProfileDto.html":{}},"body":{"injectables/DtoGenService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RoomDto.html":{},"classes/RoomEntity.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userprofiles",{"_index":666,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["users",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DtoGenService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":1239,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1177,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users.users",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["users.users.length",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["users.users[i",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["users.users[i].username",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["users/dto/user.dto",{"_index":586,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["userscontroller",{"_index":1131,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":56,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":133,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usersub",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["using",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["utils.module",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["utils.module.ts",{"_index":484,"title":{},"body":{"modules/DbUtilsModule.html":{}}}],["utils.service",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["utils.service.ts",{"_index":486,"title":{},"body":{"injectables/DbUtilsService.html":{},"coverage.html":{}}}],["utils.service.ts:108",{"_index":510,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["utils.service.ts:128",{"_index":508,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["utils.service.ts:14",{"_index":503,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["utils.service.ts:148",{"_index":514,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["utils.service.ts:158",{"_index":512,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["utils.service.ts:172",{"_index":506,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["utils.service.ts:53",{"_index":501,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["utils.service.ts:6",{"_index":496,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["utils.service.ts:87",{"_index":498,"title":{},"body":{"injectables/DbUtilsService.html":{}}}],["utils/db",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"injectables/DbUtilsService.html":{},"modules/DtoGenModule.html":{},"injectables/DtoGenService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["validate",{"_index":690,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":693,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":712,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validatenested",{"_index":1094,"title":{},"body":{"classes/UserDto.html":{},"classes/UserProfileDto.html":{}}}],["validateuser",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["validator",{"_index":442,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/RoomDto.html":{},"classes/SongInfoDto.html":{},"classes/UserDto.html":{},"classes/UserProfileDto.html":{},"dependencies.html":{}}}],["value",{"_index":582,"title":{},"body":{"injectables/DtoGenService.html":{},"injectables/RoomsService.html":{}}}],["variable",{"_index":1401,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":255,"title":{"miscellaneous/variables.html":{}},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["verifier",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["verifier.verify(jwt_token",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["verify",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"dependencies.html":{}}}],["version",{"_index":1505,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":1464,"title":{},"body":{"index.html":{}}}],["website",{"_index":1492,"title":{},"body":{"index.html":{}}}],["weird",{"_index":669,"title":{},"body":{"injectables/DtoGenService.html":{}}}],["went",{"_index":1322,"title":{},"body":{"injectables/UsersService.html":{}}}],["world",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["world!'})@apiokresponse({description",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["wrong",{"_index":1323,"title":{},"body":{"injectables/UsersService.html":{}}}],["xxxx",{"_index":1062,"title":{},"body":{"injectables/RoomsService.html":{}}}],["you'd",{"_index":1485,"title":{},"body":{"index.html":{}}}],["your_jwt_secret",{"_index":248,"title":{},"body":{"modules/AuthModule.html":{}}}],["yourself",{"_index":841,"title":{},"body":{"injectables/ProfileService.html":{}}}],["zoom",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbUtilsModule.html":{},"modules/DtoGenModule.html":{},"modules/PrismaModule.html":{},"modules/ProfileModule.html":{},"modules/RoomsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Hello World!'})@ApiOkResponse({description: 'Hello World!', type: String})\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport { AppService } from \"./app.service\";\nimport { ApiOkResponse, ApiOperation } from \"@nestjs/swagger\";\n\n@Controller()\nexport class AppController {\n\tconstructor(private readonly appService: AppService) {}\n\n\t@Get()\n\t@ApiOperation({ summary: \"Hello World!\" })\n\t@ApiOkResponse({\n\t\tdescription: \"Hello World!\",\n\t\ttype: String,\n\t})\n\tgetHello(): string {\n\t\treturn this.appService.getHello();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDbUtilsModule\n\nDbUtilsModule\n\nAppModule -->\n\nDbUtilsModule->AppModule\n\n\n\n\n\nDtoGenModule\n\nDtoGenModule\n\nAppModule -->\n\nDtoGenModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nRoomsModule\n\nRoomsModule\n\nAppModule -->\n\nRoomsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nDbUtilsService\n\nDbUtilsService\n\nAppModule -->\n\nDbUtilsService->AppModule\n\n\n\n\n\nDtoGenService\n\nDtoGenService\n\nAppModule -->\n\nDtoGenService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            DbUtilsService\n                        \n                        \n                            DtoGenService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            DbUtilsModule\n                        \n                        \n                            DtoGenModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            ProfileModule\n                        \n                        \n                            RoomsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { AppController } from \"./app.controller\";\nimport { AppService } from \"./app.service\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { PrismaModule } from \"./../prisma/prisma.module\";\nimport { UsersModule } from \"./modules/users/users.module\";\nimport { AuthModule } from \"./auth/auth.module\";\nimport { RoomsModule } from \"./modules/rooms/rooms.module\";\nimport { ProfileModule } from \"./modules/profile/profile.module\";\nimport { DtoGenService } from \"./modules/dto-gen/dto-gen.service\";\nimport { DtoGenModule } from \"./modules/dto-gen/dto-gen.module\";\nimport { DbUtilsService } from \"./modules/db-utils/db-utils.service\";\nimport { DbUtilsModule } from \"./modules/db-utils/db-utils.module\";\n\n@Module({\n\timports: [\n\t\tConfigModule.forRoot({ isGlobal: true }),\n\t\tPrismaModule,\n\t\tUsersModule,\n\t\tAuthModule,\n\t\tRoomsModule,\n\t\tProfileModule,\n\t\tDtoGenModule,\n\t\tDbUtilsModule,\n\t],\n\tcontrollers: [AppController],\n\tproviders: [AppService, DtoGenService, DbUtilsService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\n@Injectable()\nexport class AppService {\n\tgetHello(): string {\n\t\treturn \"Hello World!\";\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginInfo: LoginBody)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@ApiTags('auth')@ApiOperation({summary: 'Login in the API using Cognito'})@ApiBody({type: LoginBody})@ApiResponse({status: 201, description: 'The record has been successfully created.', type: String})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginInfo\n                                            \n                                                            LoginBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerInfo: RegisterBody)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@ApiTags('auth')@ApiOperation({summary: 'Register a new user in the API using Cognito'})@ApiBody({type: RegisterBody})@ApiResponse({status: 201, description: 'The record has been successfully created.', type: RegisterBody})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:160\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerInfo\n                                            \n                                                            RegisterBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n\tController,\n\tPost,\n\tBody,\n\tHttpException,\n\tHttpStatus,\n} from \"@nestjs/common\";\nimport {\n\tAuthService,\n\tCognitoDecodedToken,\n\tJWTPayload,\n\tRegisterBody,\n\tLoginBody,\n} from \"./auth.service\";\nimport { ApiBody, ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { UsersService } from \"src/modules/users/users.service\";\nimport * as PrismaTypes from \"@prisma/client\";\n\n@Controller(\"auth\")\nexport class AuthController {\n\tconstructor(\n\t\tprivate readonly authService: AuthService,\n\t\tprivate readonly usersService: UsersService,\n\t) {}\n\n\t@Post(\"login\")\n\t@ApiTags(\"auth\")\n\t@ApiOperation({ summary: \"Login in the API using Cognito\" })\n\t@ApiBody({ type: LoginBody })\n\t@ApiResponse({\n\t\tstatus: 201,\n\t\tdescription: \"The record has been successfully created.\",\n\t\ttype: String,\n\t})\n\t@ApiResponse({ status: 403, description: \"Forbidden.\" })\n\tasync login(@Body() loginInfo: LoginBody) {\n\t\t/*\n\t\tconst users = await this.authService.listUsers();\n\t\tconsole.log(users);\n\t\tconsole.log(users.Users);\n\t\tif (!users) {\n\t\t\tthrow new HttpException(\n\t\t\t\t\"Invalid credentials. Could not create user. AuthError01\",\n\t\t\t\tHttpStatus.UNAUTHORIZED,\n\t\t\t);\n\t\t}\n\n\t\tif (!users.Users || users.Users.length === 0) {\n\t\t\tthrow new HttpException(\n\t\t\t\t\"Invalid credentials. Could not create user. AuthError02\",\n\t\t\t\tHttpStatus.UNAUTHORIZED,\n\t\t\t);\n\t\t}\n\n\t\t//match the email address given with the email in the UserPool\n\t\tlet userMatch = null;\n\t\tlet userEmail = \"\";\n\t\tfor (let i = 0; i  attribute.Name === \"email\")) {\n\t\t\t\tconst attr = attrs.find((attribute) => attribute.Name === \"email\");\n\t\t\t\tif (!attr || attr === undefined) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t//if the userCognitoSub matches the UserSub in the UserPool\n\t\t\t\tif (users.Users[i].Username === authInfo.userCognitoSub && attr.Value) {\n\t\t\t\t\tuserMatch = users.Users[i];\n\t\t\t\t\tuserEmail = attr.Value;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (userMatch === null || !userMatch) {\n\t\t\tthrow new HttpException(\n\t\t\t\t\"Invalid credentials. Could not create user. AuthError03\",\n\t\t\t\tHttpStatus.UNAUTHORIZED,\n\t\t\t);\n\t\t}\n\n\t\t// add users to table\n\t\tconst successful: boolean = await this.authService.createUser(\n\t\t\tauthInfo.username,\n\t\t\tuserEmail,\n\t\t\tauthInfo.userCognitoSub,\n\t\t);\n\n\t\tif (!successful) {\n\t\t\tthrow new HttpException(\n\t\t\t\t\"Invalid credentials. Could not create user. AuthError04\",\n\t\t\t\tHttpStatus.UNAUTHORIZED,\n\t\t\t);\n\t\t}\n\t\t*/\n\t\tif (!loginInfo.token || loginInfo.token === null) {\n\t\t\tthrow new HttpException(\n\t\t\t\t\"Invalid request. Missing Cognito access token. AuthControllerLoginError01\",\n\t\t\t\tHttpStatus.UNAUTHORIZED,\n\t\t\t);\n\t\t}\n\t\tconst cognitoAccessToken: string = loginInfo.token;\n\t\tconsole.log(\"cognitoAccessToken\", cognitoAccessToken);\n\t\tconst authInfo: CognitoDecodedToken =\n\t\t\tawait this.authService.decodeAndVerifyCognitoJWT(cognitoAccessToken);\n\t\tconst userID: string = authInfo.username;\n\t\tconsole.log(\"authInfo\", authInfo);\n\n\t\tconst user: PrismaTypes.users | null =\n\t\t\tawait this.usersService.findOne(userID);\n\t\tif (!user || user === null) {\n\t\t\tthrow new HttpException(\n\t\t\t\t\"Invalid credentials. Could not create user. AuthControllerLoginError01\",\n\t\t\t\tHttpStatus.UNAUTHORIZED,\n\t\t\t);\n\t\t}\n\t\tif (!user.email || user.email === null) {\n\t\t\tthrow new HttpException(\n\t\t\t\t\"User (\" +\n\t\t\t\t\tuser.username +\n\t\t\t\t\t\") does not have an email address. AuthControllerLoginError02\",\n\t\t\t\tHttpStatus.UNAUTHORIZED,\n\t\t\t);\n\t\t}\n\n\t\tconst payload: JWTPayload = {\n\t\t\tid: authInfo.username,\n\t\t\tusername: user.username,\n\t\t\temail: user.email,\n\t\t};\n\n\t\tconsole.log(\"payload\", payload);\n\t\t//generate JWT token using payload\n\t\tconst token: string = await this.authService.generateJWT(payload);\n\t\tconsole.log(\"token\", token);\n\n\t\t//return the JWT as a string\n\t\treturn { token: token };\n\t}\n\n\t@Post(\"register\")\n\t@ApiTags(\"auth\")\n\t@ApiOperation({ summary: \"Register a new user in the API using Cognito\" })\n\t@ApiBody({ type: RegisterBody })\n\t@ApiResponse({\n\t\tstatus: 201,\n\t\tdescription: \"The record has been successfully created.\",\n\t\ttype: RegisterBody,\n\t})\n\t@ApiResponse({ status: 403, description: \"Forbidden.\" })\n\tasync register(@Body() registerInfo: RegisterBody) {\n\t\tconst successful: boolean = await this.authService.createUser(\n\t\t\tregisterInfo.username,\n\t\t\tregisterInfo.email,\n\t\t\tregisterInfo.userCognitoSub,\n\t\t);\n\n\t\tif (!successful) {\n\t\t\tthrow new HttpException(\n\t\t\t\t\"Invalid credentials. Could not create user. AuthRegisterError01\",\n\t\t\t\tHttpStatus.UNAUTHORIZED,\n\t\t\t);\n\t\t}\n\n\t\tthrow new HttpException(\"Successfully created user.\", HttpStatus.CREATED);\n\t}\n\n\t//TODO: Add a POST method to refresh an expired JWT token\n\t//TODO: Add a POST method to logout a user\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nDbUtilsService\n\nDbUtilsService\n\nAuthModule -->\n\nDbUtilsService->AuthModule\n\n\n\n\n\nDtoGenService\n\nDtoGenService\n\nAuthModule -->\n\nDtoGenService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAuthModule -->\n\nPrismaService->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            DbUtilsService\n                        \n                        \n                            DtoGenService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            PrismaService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { AuthService } from \"./auth.service\";\nimport { AuthController } from \"./auth.controller\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { JwtModule } from \"@nestjs/jwt\";\nimport { LocalStrategy } from \"./local.strategy\";\nimport { JwtStrategy } from \"./jwt.strategy\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { PrismaService } from \"../../prisma/prisma.service\";\nimport { PrismaModule } from \"../../prisma/prisma.module\";\nimport { UsersService } from \"src/modules/users/users.service\";\nimport { DbUtilsService } from \"src/modules/db-utils/db-utils.service\";\nimport { DtoGenService } from \"src/modules/dto-gen/dto-gen.service\";\n\n@Module({\n\timports: [\n\t\tPassportModule,\n\t\tJwtModule.register({\n\t\t\tsecret: process.env.JWT_SECRET || \"your_jwt_secret\",\n\t\t\tsignOptions: { expiresIn: \"2h\" },\n\t\t}),\n\t\tConfigModule.forRoot(), // Ensure ConfigModule is imported to access environment variables\n\t\tPrismaModule,\n\t],\n\tproviders: [\n\t\tAuthService,\n\t\tLocalStrategy,\n\t\tJwtStrategy,\n\t\tPrismaService,\n\t\tDtoGenService,\n\t\tDbUtilsService,\n\t\tUsersService,\n\t],\n\tcontrollers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                accessKeyId\n                            \n                            \n                                    Private\n                                clientId\n                            \n                            \n                                    Private\n                                cognitoIdentityServiceProvider\n                            \n                            \n                                    Private\n                                secretAccessKey\n                            \n                            \n                                    Private\n                                userPoolId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                decodeAndVerifyCognitoJWT\n                            \n                            \n                                    Async\n                                generateJWT\n                            \n                            \n                                getUserInfo\n                            \n                            \n                                    Async\n                                listUsers\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:54\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(username: string, email: string, userID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:153\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        decodeAndVerifyCognitoJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    decodeAndVerifyCognitoJWT(jwt_token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:247\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                jwt_token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateJWT(payload: JWTPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:179\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserInfo\n                        \n                    \n                \n            \n            \n                \ngetUserInfo(req: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:230\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         JWTPayload\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        listUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    listUsers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:137\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(username: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        accessKeyId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        clientId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cognitoIdentityServiceProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :     AWS.CognitoIdentityServiceProvider\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        secretAccessKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        userPoolId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:53\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport * as AWS from \"aws-sdk\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { PrismaService } from \"../../prisma/prisma.service\";\nimport { Prisma } from \"@prisma/client\";\nimport * as jwt from \"jsonwebtoken\";\nimport { CognitoJwtVerifier } from \"aws-jwt-verify\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n//import { CreateUserDto } from \"src/modules/users/dto/create-user.dto\";\n\nexport type CognitoDecodedToken = {\n\tsub: string;\n\tiss: string;\n\tclient_id: string;\n\torigin_jti: string;\n\tevent_id?: string;\n\ttoken_use: string;\n\tscope?: string;\n\tauth_time: number;\n\texp: number;\n\tiat: number;\n\tjti: string;\n\tusername: string;\n};\n\nexport type JWTPayload = {\n\tid: string;\n\temail: string;\n\tusername: string;\n};\n\nexport class RegisterBody {\n\t@ApiProperty()\n\tusername: string;\n\n\t@ApiProperty()\n\tuserCognitoSub: string;\n\n\t@ApiProperty()\n\temail: string;\n}\n\nexport class LoginBody {\n\t@ApiProperty()\n\ttoken: string;\n}\n\n@Injectable()\nexport class AuthService {\n\tprivate cognitoIdentityServiceProvider: AWS.CognitoIdentityServiceProvider;\n\tprivate accessKeyId: string;\n\tprivate secretAccessKey: string;\n\tprivate userPoolId: string;\n\tprivate clientId: string;\n\n\tconstructor(\n\t\tprivate configService: ConfigService,\n\t\tprivate prisma: PrismaService,\n\t) {\n\t\t// Set the AWS credentials\n\t\tconst accessKeyId = this.configService.get(\"AWS_ACCESS_KEY_ID\");\n\t\tif (!accessKeyId) {\n\t\t\tthrow new Error(\"Missing AWS_ACCESS_KEY_ID\");\n\t\t}\n\t\tthis.accessKeyId = accessKeyId;\n\n\t\tconst secretAccessKey = this.configService.get(\n\t\t\t\"AWS_SECRET_ACCESS_KEY\",\n\t\t);\n\t\tif (!secretAccessKey) {\n\t\t\tthrow new Error(\"Missing AWS_SECRET_ACCESS_KEY\");\n\t\t}\n\t\tthis.secretAccessKey = secretAccessKey;\n\n\t\tconst userPoolId = this.configService.get(\n\t\t\t\"AWS_COGNITO_USER_POOL_ID\",\n\t\t);\n\t\tif (!userPoolId) {\n\t\t\tthrow new Error(\"Missing AWS_COGNITO_USER_POOL_ID\");\n\t\t}\n\t\tthis.userPoolId = userPoolId;\n\n\t\tconst clientId = this.configService.get(\"AWS_COGNITO_CLIENT_ID\");\n\t\tif (!clientId) {\n\t\t\tthrow new Error(\"Missing AWS_COGNITO_CLIENT_ID\");\n\t\t}\n\t\tthis.clientId = clientId;\n\n\t\tthis.cognitoIdentityServiceProvider =\n\t\t\tnew AWS.CognitoIdentityServiceProvider({\n\t\t\t\tregion: \"af-south-1\",\n\t\t\t\taccessKeyId: this.accessKeyId,\n\t\t\t\tsecretAccessKey: this.secretAccessKey,\n\t\t\t});\n\t}\n\n\tasync validateUser(username: string, password: string): Promise {\n\t\tif (!this.userPoolId || !this.clientId) {\n\t\t\tthrow new Error(\"Missing Cognito configuration\");\n\t\t}\n\n\t\tconst params: AWS.CognitoIdentityServiceProvider.AdminInitiateAuthRequest =\n\t\t\t{\n\t\t\t\tAuthFlow: \"ADMIN_NO_SRP_AUTH\",\n\t\t\t\tClientId: this.clientId,\n\t\t\t\tUserPoolId: this.userPoolId,\n\t\t\t\tAuthParameters: {\n\t\t\t\t\tUSERNAME: username,\n\t\t\t\t\tPASSWORD: password,\n\t\t\t\t},\n\t\t\t};\n\n\t\ttry {\n\t\t\tconst authResponse = await this.cognitoIdentityServiceProvider\n\t\t\t\t.adminInitiateAuth(params)\n\t\t\t\t.promise();\n\t\t\tif (authResponse.AuthenticationResult) {\n\t\t\t\tconst user = await this.cognitoIdentityServiceProvider\n\t\t\t\t\t.adminGetUser({\n\t\t\t\t\t\tUserPoolId: this.userPoolId,\n\t\t\t\t\t\tUsername: username,\n\t\t\t\t\t})\n\t\t\t\t\t.promise();\n\n\t\t\t\treturn {\n\t\t\t\t\tusername: user.Username,\n\t\t\t\t\tattributes: user.UserAttributes,\n\t\t\t\t\tauthenticationResult: authResponse.AuthenticationResult,\n\t\t\t\t};\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthrow new UnauthorizedException(\"Invalid credentials\");\n\t\t}\n\t}\n\n\t// eslint-disable-next-line prettier/prettier\n  \tasync listUsers(): Promise {\n\t\tconst params = {\n\t\t\tUserPoolId: this.userPoolId,\n\t\t};\n\n\t\ttry {\n\t\t\tconst responsePromise = await this.cognitoIdentityServiceProvider\n\t\t\t\t.listUsers(params)\n\t\t\t\t.promise();\n\t\t\tconst response = await responsePromise;\n\t\t\treturn response;\n\t\t} catch (error) {\n\t\t\tthrow new UnauthorizedException(\"Error listing users\");\n\t\t}\n\t}\n\n\tasync createUser(\n\t\tusername: string,\n\t\temail: string,\n\t\tuserID: string,\n\t): Promise {\n\t\tconst user: Prisma.usersCreateInput = {\n\t\t\tusername: username,\n\t\t\temail: email,\n\t\t\tuser_id: userID,\n\t\t};\n\t\tconst existingUser = await this.prisma.users.findUnique({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\t\tif (existingUser) {\n\t\t\treturn true;\n\t\t}\n\t\ttry {\n\t\t\tconst response = await this.prisma.users.create({ data: user });\n\t\t\tconsole.log(response);\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tasync generateJWT(payload: JWTPayload): Promise {\n\t\tconst secretKey = this.configService.get(\"JWT_SECRET_KEY\");\n\t\tconst expiresIn = this.configService.get(\"JWT_EXPIRATION_TIME\");\n\n\t\tif (!secretKey || secretKey === undefined || secretKey === \"\") {\n\t\t\tthrow new Error(\"Missing JWT secret key\");\n\t\t}\n\n\t\tif (!expiresIn || expiresIn === undefined || expiresIn === \"\") {\n\t\t\tthrow new Error(\"Missing JWT expiration time\");\n\t\t}\n\n\t\tconst token = jwt.sign(payload, secretKey, { expiresIn });\n\t\treturn token;\n\t}\n\n\t/*\n\tasync getUserInfo(jwt_token: string): Promise {\n\t\tconst secretKey = this.configService.get(\"JWT_SECRET_KEY\");\n\t\tconst expiresIn = this.configService.get(\"JWT_EXPIRATION_TIME\");\n\n\t\tif (!secretKey || secretKey === undefined || secretKey === \"\") {\n\t\t\tthrow new Error(\"Missing JWT secret key\");\n\t\t}\n\n\t\tif (!expiresIn || expiresIn === undefined || expiresIn === \"\") {\n\t\t\tthrow new Error(\"Missing JWT expiration time\");\n\t\t}\n\n\t\tconst decoded = jwt.verify(jwt_token, secretKey);\n\t\tconst userID = decoded.sub;\n\t\tif (!userID) {\n\t\t\tthrow new Error(\"Invalid JWT token\");\n\t\t}\n\t\tif (typeof userID !== \"string\") {\n\t\t\tthrow new Error(\"Invalid JWT token\");\n\t\t}\n\n\t\tconst user = await this.prisma.users.findUnique({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\t\treturn user;\n\t}\n\t*/\n\n\t// this funciton will be passed a Request object from the NestJS controller eg:\n\t/*\n\tgetRoomInfo(@Request() req: any, @Param(\"roomID\") roomID: string): RoomDto {\n\t\treturn this.roomsService.getRoomInfo(roomID);\n\t}\n\t*/\n\tgetUserInfo(req: any): JWTPayload {\n\t\tconsole.log(\"req\", req);\n\t\tconst result = req.user as JWTPayload;\n\t\tconsole.log(result);\n\t\tif (!result) {\n\t\t\tthrow new UnauthorizedException(\n\t\t\t\t\"No user found in JWT token. Please log in again\",\n\t\t\t);\n\t\t}\n\t\tif (!result.id) {\n\t\t\tthrow new UnauthorizedException(\n\t\t\t\t\"No user ID found in JWT token. Please log in again\",\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync decodeAndVerifyCognitoJWT(\n\t\tjwt_token: string,\n\t): Promise {\n\t\tconst verifier = CognitoJwtVerifier.create({\n\t\t\tuserPoolId: this.userPoolId,\n\t\t\ttokenUse: \"access\",\n\t\t\tclientId: this.clientId,\n\t\t});\n\n\t\ttry {\n\t\t\tconst payload = await verifier.verify(jwt_token);\n\t\t\tconst result: CognitoDecodedToken = payload as CognitoDecodedToken;\n\t\t\treturn result;\n\t\t} catch (error) {\n\t\t\tthrow new UnauthorizedException(\"Invalid JWT token\");\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRoomDto.html":{"url":"classes/CreateRoomDto.html","title":"class - CreateRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/dto/createroomdto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                end_date\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                has_explicit_content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                has_nsfw_content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                is_private\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                is_scheduled\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                is_temporary\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                language\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                room_image\n                            \n                            \n                                    \n                                    \n                                room_name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                start_date\n                            \n                            \n                                    \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/createroomdto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        end_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDateString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/createroomdto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        has_explicit_content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/createroomdto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        has_nsfw_content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/createroomdto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        is_private\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/createroomdto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        is_scheduled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/createroomdto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        is_temporary\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/createroomdto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/createroomdto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        room_image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/createroomdto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        room_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/createroomdto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDateString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/createroomdto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/createroomdto.ts:59\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsBoolean, IsDateString, IsOptional } from \"class-validator\";\n\nexport class CreateRoomDto {\n\t@ApiProperty()\n\t@IsString()\n\troom_name: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tdescription: string;\n\n\t@ApiProperty()\n\t@IsBoolean()\n\t@IsOptional()\n\tis_temporary?: boolean;\n\n\t@ApiProperty()\n\t@IsBoolean()\n\t@IsOptional()\n\tis_private?: boolean;\n\n\t@ApiProperty()\n\t@IsBoolean()\n\t@IsOptional()\n\tis_scheduled?: boolean;\n\n\t@ApiProperty()\n\t@IsDateString()\n\t@IsOptional()\n\tstart_date?: Date;\n\n\t@ApiProperty()\n\t@IsDateString()\n\t@IsOptional()\n\tend_date?: Date;\n\n\t@ApiProperty()\n\t@IsString()\n\t@IsOptional()\n\tlanguage?: string;\n\n\t@ApiProperty()\n\t@IsBoolean()\n\t@IsOptional()\n\thas_explicit_content?: boolean;\n\n\t@ApiProperty()\n\t@IsBoolean()\n\t@IsOptional()\n\thas_nsfw_content?: boolean;\n\n\t@ApiProperty()\n\t@IsString()\n\t@IsOptional()\n\troom_image?: string;\n\n\t@ApiProperty({ type: [String] })\n\ttags: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                activity\n                            \n                            \n                                    \n                                    \n                                bio\n                            \n                            \n                                    \n                                bookmark\n                            \n                            \n                                    \n                                follows_follows_followeeTousers\n                            \n                            \n                                    \n                                follows_follows_followerTousers\n                            \n                            \n                                    \n                                friends_friends_friend1Tousers\n                            \n                            \n                                    \n                                friends_friends_friend2Tousers\n                            \n                            \n                                    \n                                message\n                            \n                            \n                                    \n                                participate\n                            \n                            \n                                    \n                                preferences\n                            \n                            \n                                    \n                                private_message\n                            \n                            \n                                    \n                                    \n                                profile_picture\n                            \n                            \n                                    \n                                room\n                            \n                            \n                                    \n                                    \n                                userID\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        activity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        bookmark\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        follows_follows_followeeTousers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        follows_follows_followerTousers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        friends_friends_friend1Tousers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        friends_friends_friend2Tousers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        participate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        preferences\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        private_message\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        profile_picture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        room\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString } from \"class-validator\";\n\nexport class CreateUserDto {\n\t@ApiProperty()\n\t@IsString()\n\tuserID: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tusername: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tbio: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tprofile_picture: string;\n\n\t@ApiProperty()\n\tactivity: any;\n\n\t@ApiProperty()\n\tpreferences: any;\n\n\t@ApiProperty()\n\tbookmark: any[];\n\n\t@ApiProperty()\n\tfollows_follows_followeeTousers: any[];\n\n\t@ApiProperty()\n\tfollows_follows_followerTousers: any[];\n\n\t@ApiProperty()\n\tfriends_friends_friend1Tousers: any[];\n\n\t@ApiProperty()\n\tfriends_friends_friend2Tousers: any[];\n\n\t@ApiProperty()\n\tmessage: any[];\n\n\t@ApiProperty()\n\tparticipate: any[];\n\n\t@ApiProperty()\n\tprivate_message: any[];\n\n\t@ApiProperty()\n\troom: any[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto-1.html":{"url":"classes/CreateUserDto-1.html","title":"class - CreateUserDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/entities/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                activity\n                            \n                            \n                                    \n                                bio\n                            \n                            \n                                    \n                                preferences\n                            \n                            \n                                    \n                                profile_picture\n                            \n                            \n                                    \n                                userID\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        activity\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Prisma.JsonValue\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        preferences\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Prisma.JsonValue\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        profile_picture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma } from \"@prisma/client\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n\nexport class CreateUserDto {\n\t@ApiProperty()\n\tuserID: string;\n\n\t@ApiProperty()\n\tusername: string;\n\n\t@ApiProperty()\n\tbio: string;\n\n\t@ApiProperty()\n\tprofile_picture: string;\n\n\t@ApiProperty()\n\tactivity: Prisma.JsonValue;\n\n\t@ApiProperty()\n\tpreferences: Prisma.JsonValue;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DbUtilsModule.html":{"url":"modules/DbUtilsModule.html","title":"module - DbUtilsModule","body":"\n                   \n\n\n\n\n    Modules\n    DbUtilsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DbUtilsModule\n\n\n\ncluster_DbUtilsModule_providers\n\n\n\ncluster_DbUtilsModule_imports\n\n\n\ncluster_DbUtilsModule_exports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nDbUtilsModule\n\nDbUtilsModule\n\nDbUtilsModule -->\n\nPrismaModule->DbUtilsModule\n\n\n\n\n\nDbUtilsService \n\nDbUtilsService \n\nDbUtilsService  -->\n\nDbUtilsModule->DbUtilsService \n\n\n\n\n\nDbUtilsService\n\nDbUtilsService\n\nDbUtilsModule -->\n\nDbUtilsService->DbUtilsModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nDbUtilsModule -->\n\nPrismaService->DbUtilsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/db-utils/db-utils.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DbUtilsService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DbUtilsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\nimport { PrismaModule } from \"../../../prisma/prisma.module\";\nimport { DbUtilsService } from \"./db-utils.service\";\n\n@Module({\n\timports: [PrismaModule],\n\tproviders: [PrismaService, DbUtilsService],\n\texports: [DbUtilsService],\n})\nexport class DbUtilsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DbUtilsService.html":{"url":"injectables/DbUtilsService.html","title":"injectable - DbUtilsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DbUtilsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/db-utils/db-utils.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getRandomRooms\n                            \n                            \n                                    Async\n                                getUserFollowers\n                            \n                            \n                                    Async\n                                getUserFollowing\n                            \n                            \n                                    Async\n                                isFollowing\n                            \n                            \n                                    Async\n                                isRoomPrivate\n                            \n                            \n                                    Async\n                                isRoomPublic\n                            \n                            \n                                    Async\n                                roomExists\n                            \n                            \n                                    Async\n                                userExists\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/db-utils/db-utils.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRandomRooms\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRandomRooms(count: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/db-utils/db-utils.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                count\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserFollowers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserFollowers(userID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/db-utils/db-utils.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserFollowing\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserFollowing(userID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/db-utils/db-utils.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isFollowing\n                        \n                    \n                \n            \n            \n                \n                        \n                    isFollowing(userID: string, accountFollowedId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/db-utils/db-utils.service.ts:172\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                accountFollowedId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isRoomPrivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    isRoomPrivate(roomID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/db-utils/db-utils.service.ts:128\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isRoomPublic\n                        \n                    \n                \n            \n            \n                \n                        \n                    isRoomPublic(roomID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/db-utils/db-utils.service.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        roomExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    roomExists(roomID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/db-utils/db-utils.service.ts:158\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        userExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    userExists(userID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/db-utils/db-utils.service.ts:148\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\nimport * as Prisma from \"@prisma/client\";\n\n@Injectable()\nexport class DbUtilsService {\n\tconstructor(private readonly prisma: PrismaService) {}\n\n\t//get user following (people the user is following)\n\t/*\n\t\tfollower: the person who does the following\n\t\tfollowee (leader): the person being followed\n\t*/\n\tasync getUserFollowing(userID: string): Promise {\n\t\tconst following: Prisma.follows[] | null =\n\t\t\tawait this.prisma.follows.findMany({\n\t\t\t\twhere: { follower: userID },\n\t\t\t});\n\n\t\tif (!following || following === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst result: Prisma.users[] = [];\n\t\tconst ids: string[] = [];\n\t\tfor (let i = 0; i  {\n\t\tconst followers: Prisma.follows[] | null =\n\t\t\tawait this.prisma.follows.findMany({\n\t\t\t\twhere: { followee: userID },\n\t\t\t});\n\n\t\tif (!followers || followers === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst result: Prisma.users[] = [];\n\t\tconst ids: string[] = [];\n\t\tfor (let i = 0; i  {\n\t\tconst rooms: Prisma.room[] | null = await this.prisma.room.findMany();\n\n\t\tif (!rooms || rooms === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (rooms.length  {\n\t\tconst room: Prisma.room | null = await this.prisma.room.findUnique({\n\t\t\twhere: { room_id: roomID },\n\t\t});\n\t\tif (!room || room === null) {\n\t\t\tthrow new Error(\"Room not found. Probably doesn't exist.\");\n\t\t}\n\n\t\tconst publicRoom: Prisma.public_room | null =\n\t\t\tawait this.prisma.public_room.findUnique({\n\t\t\t\twhere: { room_id: roomID },\n\t\t\t});\n\n\t\tif (!publicRoom || publicRoom === null) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasync isRoomPrivate(roomID: string): Promise {\n\t\tconst room: Prisma.room | null = await this.prisma.room.findUnique({\n\t\t\twhere: { room_id: roomID },\n\t\t});\n\t\tif (!room || room === null) {\n\t\t\tthrow new Error(\"Room not found. Probably doesn't exist.\");\n\t\t}\n\n\t\tconst privateRoom: Prisma.private_room | null =\n\t\t\tawait this.prisma.private_room.findUnique({\n\t\t\t\twhere: { room_id: roomID },\n\t\t\t});\n\n\t\tif (!privateRoom || privateRoom === null) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasync userExists(userID: string): Promise {\n\t\tconst user: Prisma.users | null = await this.prisma.users.findUnique({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\t\tif (!user || user === null) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tasync roomExists(roomID: string): Promise {\n\t\tconst room: Prisma.room | null = await this.prisma.room.findUnique({\n\t\t\twhere: { room_id: roomID },\n\t\t});\n\t\tif (!room || room === null) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/*\n\tfollower: the person who does the following\n\tfollowee (leader): the person being followed\n\t*/\n\tasync isFollowing(\n\t\tuserID: string,\n\t\taccountFollowedId: string,\n\t): Promise {\n\t\tconst follow: Prisma.follows[] = await this.prisma.follows.findMany({\n\t\t\twhere: {\n\t\t\t\tfollower: userID,\n\t\t\t\tfollowee: accountFollowedId,\n\t\t\t},\n\t\t});\n\t\tif (!follow || follow === null) {\n\t\t\treturn false;\n\t\t}\n\t\tif (follow.length === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tif (follow.length > 1) {\n\t\t\tthrow new Error(\"More than one follow found.\");\n\t\t}\n\t\treturn true;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DtoGenModule.html":{"url":"modules/DtoGenModule.html","title":"module - DtoGenModule","body":"\n                   \n\n\n\n\n    Modules\n    DtoGenModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DtoGenModule\n\n\n\ncluster_DtoGenModule_imports\n\n\n\ncluster_DtoGenModule_exports\n\n\n\ncluster_DtoGenModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nDtoGenModule\n\nDtoGenModule\n\nDtoGenModule -->\n\nPrismaModule->DtoGenModule\n\n\n\n\n\nDtoGenService \n\nDtoGenService \n\nDtoGenService  -->\n\nDtoGenModule->DtoGenService \n\n\n\n\n\nDbUtilsService\n\nDbUtilsService\n\nDtoGenModule -->\n\nDbUtilsService->DtoGenModule\n\n\n\n\n\nDtoGenService\n\nDtoGenService\n\nDtoGenModule -->\n\nDtoGenService->DtoGenModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nDtoGenModule -->\n\nPrismaService->DtoGenModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/dto-gen/dto-gen.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DbUtilsService\n                        \n                        \n                            DtoGenService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DtoGenService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\nimport { PrismaModule } from \"../../../prisma/prisma.module\";\nimport { DtoGenService } from \"./dto-gen.service\";\nimport { DbUtilsService } from \"../db-utils/db-utils.service\";\n\n@Module({\n\timports: [PrismaModule],\n\tproviders: [PrismaService, DtoGenService, DbUtilsService],\n\texports: [DtoGenService],\n})\nexport class DtoGenModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DtoGenService.html":{"url":"injectables/DtoGenService.html","title":"injectable - DtoGenService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DtoGenService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/dto-gen/dto-gen.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generateBriefUserProfileDto\n                            \n                            \n                                    Async\n                                generateMultipleRoomDto\n                            \n                            \n                                    Async\n                                generateMultipleUserProfileDto\n                            \n                            \n                                    Async\n                                generateRoomDto\n                            \n                            \n                                    Async\n                                generateRoomDtoFromRoom\n                            \n                            \n                                    Async\n                                generateUserDto\n                            \n                            \n                                    Async\n                                generateUserProfileDto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, dbUtils: DbUtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/dto-gen/dto-gen.service.ts:87\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dbUtils\n                                                  \n                                                        \n                                                                        DbUtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateBriefUserProfileDto\n                        \n                    \n                \n            \n            \n                \ngenerateBriefUserProfileDto(user: Prisma.users)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/dto-gen/dto-gen.service.ts:173\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                        Prisma.users\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserProfileDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateMultipleRoomDto\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateMultipleRoomDto(room_ids: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/dto-gen/dto-gen.service.ts:354\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                room_ids\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateMultipleUserProfileDto\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateMultipleUserProfileDto(user_ids: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/dto-gen/dto-gen.service.ts:218\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_ids\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateRoomDto\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateRoomDto(roomID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/dto-gen/dto-gen.service.ts:242\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateRoomDtoFromRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateRoomDtoFromRoom(room: Prisma.room)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/dto-gen/dto-gen.service.ts:300\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                room\n                                            \n                                                        Prisma.room\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateUserDto\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateUserDto()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/dto-gen/dto-gen.service.ts:420\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateUserProfileDto\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateUserProfileDto(userID: string, fully_qualify: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/dto-gen/dto-gen.service.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                fully_qualify\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { UserProfileDto } from \"../profile/dto/userprofile.dto\";\nimport { RoomDto } from \"../rooms/dto/room.dto\";\nimport { UserDto } from \"../users/dto/user.dto\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\nimport * as Prisma from \"@prisma/client\";\nimport { DbUtilsService } from \"../db-utils/db-utils.service\";\n\n/*\n## UserProfileDto (User Profile Info)\nA object representing User Profile information.\n```json\n{\n\tprofile_name : string,\n\tuserID : string,\n\tusername : string,\n\tprofile_picture_url : string,\n\tfollowers: {\n\t\tcount: int,\n\t\tdata: [ProfileDto]\n\t},\n\tfollowing: {\n\t\tcount: int,\n\t\tdata: [ProfileDto]\n\t},\n\tlinks: {\n\t\tcount: int,\n\t\tdata: [string]\n\t},\n\tbio : string,\n\tcurrent_song: SongInfoDto,\n\tfav_genres: {\n\t\tcount: int,\n\t\tdata: [string]\n\t},\n\tfav_songs: {\n\t\tcount: int,\n\t\tdata: [SongInfoDto]\n\t},\n\tfav_rooms: {\n\t\tcount: int,\n\t\tdata: [RoomDto]\n\t},\n\trecent_rooms: {\n\t\tcount: int,\n\t\tdata: [RoomDto]\n\t}\n}\n```\n\n## RoomDto (Room Info)\nA object representing Room information.\n```json\n{\n\tcreator: ProfileDto,\n\troomID: string,\n\tpartipicant_count: number,\n\troom_name: string,\n\tdescription: string,\n\tis_temporary: boolean,\n\tis_private: boolean,\n\tis_scheduled: boolean,\n\tstart_date: DateTime,\n\tend_date: DateTime,\n\tlanguage: string,\n\thas_explicit_content: boolean,\n\thas_nsfw_content: boolean,\n\troom_image: string,\n\tcurrent_song: SongInfoDto,\n\ttags: [string]\n}\n```\n\n## SongInfoDto (Song Info)\nA object representing Song information.\n```json\n{\n\ttitle: string,\n\tartists: [string],\n\tcover: string,\n\tstart_time: DateTime\n}\n```\n*/\n// A service that will generate DTOs\n@Injectable()\nexport class DtoGenService {\n\tconstructor(\n\t\tprivate readonly prisma: PrismaService,\n\t\tprivate readonly dbUtils: DbUtilsService,\n\t) {}\n\n\tasync generateUserProfileDto(\n\t\tuserID: string,\n\t\tfully_qualify: boolean = true,\n\t): Promise {\n\t\t//check if userID exists\n\t\tconst user: Prisma.users | null = await this.prisma.users.findUnique({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\n\t\tif (!user || user === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t//get user info\n\t\tconst result: UserProfileDto = this.generateBriefUserProfileDto(user);\n\n\t\tconst following: Prisma.users[] | null =\n\t\t\tawait this.dbUtils.getUserFollowing(userID);\n\t\tif (following && following !== null) {\n\t\t\tresult.following.count = following.length;\n\t\t\tif (fully_qualify) {\n\t\t\t\tfor (let i = 0; i  r.room_id);\n\t\t\t\tconst rooms = await this.generateMultipleRoomDto(ids);\n\t\t\t\tif (rooms && rooms !== null) {\n\t\t\t\t\tresult.fav_rooms.data = rooms;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (fully_qualify) {\n\t\t\tconst recentRooms: Prisma.room[] | null =\n\t\t\t\tawait this.dbUtils.getRandomRooms(5);\n\t\t\tif (recentRooms && recentRooms !== null) {\n\t\t\t\tresult.recent_rooms.count = recentRooms.length;\n\t\t\t\tconst ids: string[] = recentRooms.map((r) => r.room_id);\n\t\t\t\tconst rooms = await this.generateMultipleRoomDto(ids);\n\t\t\t\tif (rooms && rooms !== null) {\n\t\t\t\t\tresult.recent_rooms.data = rooms;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tgenerateBriefUserProfileDto(user: Prisma.users): UserProfileDto {\n\t\tconst result: UserProfileDto = {\n\t\t\tprofile_name: user.full_name || \"\",\n\t\t\tuserID: user.user_id,\n\t\t\tusername: user.username,\n\t\t\tprofile_picture_url: user.profile_picture || \"\",\n\t\t\tfollowers: {\n\t\t\t\tcount: 0,\n\t\t\t\tdata: [],\n\t\t\t},\n\t\t\tfollowing: {\n\t\t\t\tcount: 0,\n\t\t\t\tdata: [],\n\t\t\t},\n\t\t\tlinks: {\n\t\t\t\tcount: 0,\n\t\t\t\tdata: [],\n\t\t\t},\n\t\t\tbio: user.bio || \"\",\n\t\t\tcurrent_song: {\n\t\t\t\ttitle: \"\",\n\t\t\t\tartists: [],\n\t\t\t\tcover: \"\",\n\t\t\t\tstart_time: new Date(),\n\t\t\t},\n\t\t\tfav_genres: {\n\t\t\t\tcount: 0,\n\t\t\t\tdata: [],\n\t\t\t},\n\t\t\tfav_songs: {\n\t\t\t\tcount: 0,\n\t\t\t\tdata: [],\n\t\t\t},\n\t\t\tfav_rooms: {\n\t\t\t\tcount: 0,\n\t\t\t\tdata: [],\n\t\t\t},\n\t\t\trecent_rooms: {\n\t\t\t\tcount: 0,\n\t\t\t\tdata: [],\n\t\t\t},\n\t\t};\n\t\treturn result;\n\t}\n\n\tasync generateMultipleUserProfileDto(\n\t\tuser_ids: string[],\n\t): Promise {\n\t\tconst users: Prisma.users[] | null = await this.prisma.users.findMany({\n\t\t\twhere: { user_id: { in: user_ids } },\n\t\t});\n\n\t\tif (!users || users === null) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst result: UserProfileDto[] = [];\n\t\tfor (let i = 0; i  {\n\t\tconst room: Prisma.room | null = await this.prisma.room.findUnique({\n\t\t\twhere: { room_id: roomID },\n\t\t});\n\n\t\tif (!room || room === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst scheduledRoom = await this.prisma.scheduled_room.findUnique({\n\t\t\twhere: { room_id: roomID },\n\t\t});\n\n\t\tconst result: RoomDto = {\n\t\t\tcreator: new UserProfileDto(),\n\t\t\troomID: room.room_id,\n\t\t\tparticipant_count: 0,\n\t\t\troom_name: room.name,\n\t\t\tdescription: room.description || \"\",\n\t\t\tis_temporary: room.is_temporary || false,\n\t\t\tis_private: await this.dbUtils.isRoomPrivate(roomID),\n\t\t\tis_scheduled: false,\n\t\t\tstart_date: new Date(),\n\t\t\tend_date: new Date(),\n\t\t\tlanguage: room.room_language || \"\",\n\t\t\thas_explicit_content: room.explicit || false,\n\t\t\thas_nsfw_content: room.nsfw || false,\n\t\t\troom_image: room.playlist_photo || \"\",\n\t\t\tcurrent_song: {\n\t\t\t\ttitle: \"\",\n\t\t\t\tartists: [],\n\t\t\t\tcover: \"\",\n\t\t\t\tstart_time: new Date(),\n\t\t\t},\n\t\t\ttags: room.tags || [],\n\t\t};\n\n\t\tif (scheduledRoom && scheduledRoom !== null) {\n\t\t\tresult.is_scheduled = true;\n\t\t\t/*\n\t\t\tresult.start_date = scheduledRoom.start_date;\n\t\t\tresult.end_date = scheduledRoom.end_date;\n\t\t\t*/\n\t\t}\n\n\t\tconst creator = await this.generateUserProfileDto(room.room_creator, false);\n\t\tif (creator && creator !== null) {\n\t\t\tresult.creator = creator;\n\t\t}\n\n\t\t//participant count will be added later\n\t\t//current song will be added later\n\t\t//dates will be added later\n\t\t//current songs will be added later\n\n\t\treturn result;\n\t}\n\n\tasync generateRoomDtoFromRoom(room: Prisma.room): Promise {\n\t\tif (!room || room === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst scheduledRoom = await this.prisma.scheduled_room.findUnique({\n\t\t\twhere: { room_id: room.room_id },\n\t\t});\n\n\t\tconst result: RoomDto = {\n\t\t\tcreator: new UserProfileDto(),\n\t\t\troomID: room.room_id,\n\t\t\tparticipant_count: 0,\n\t\t\troom_name: room.name,\n\t\t\tdescription: room.description || \"\",\n\t\t\tis_temporary: room.is_temporary || false,\n\t\t\tis_private: await this.dbUtils.isRoomPrivate(room.room_id),\n\t\t\tis_scheduled: false,\n\t\t\tstart_date: new Date(),\n\t\t\tend_date: new Date(),\n\t\t\tlanguage: room.room_language || \"\",\n\t\t\thas_explicit_content: room.explicit || false,\n\t\t\thas_nsfw_content: room.nsfw || false,\n\t\t\troom_image: room.playlist_photo || \"\",\n\t\t\tcurrent_song: {\n\t\t\t\ttitle: \"\",\n\t\t\t\tartists: [],\n\t\t\t\tcover: \"\",\n\t\t\t\tstart_time: new Date(),\n\t\t\t},\n\t\t\ttags: room.tags || [],\n\t\t};\n\n\t\tconst creator = await this.generateUserProfileDto(room.room_creator, false);\n\t\tif (creator && creator !== null) {\n\t\t\tresult.creator = creator;\n\t\t}\n\n\t\tif (scheduledRoom && scheduledRoom !== null) {\n\t\t\tresult.is_scheduled = true;\n\t\t\t/*\n\t\t\tresult.start_date = scheduledRoom.start_date;\n\t\t\tresult.end_date = scheduledRoom.end_date;\n\t\t\t*/\n\t\t}\n\n\t\t//participant count will be added later\n\t\t//current song will be added later\n\t\t//dates will be added later\n\t\t//current songs will be added later\n\n\t\treturn result;\n\t}\n\n\tasync generateMultipleRoomDto(room_ids: string[]): Promise {\n\t\tconst rooms: Prisma.room[] | null = await this.prisma.room.findMany({\n\t\t\twhere: { room_id: { in: room_ids } },\n\t\t});\n\n\t\tif (!rooms || rooms === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst userIds: string[] = rooms.map((r) => r.room_creator);\n\t\t//remove duplicate user ids\n\t\tconst uniqueUserIds: string[] = [...new Set(userIds)];\n\t\tconst users: Prisma.users[] | null = await this.prisma.users.findMany({\n\t\t\twhere: { user_id: { in: uniqueUserIds } },\n\t\t});\n\n\t\tconst userProfiles: UserProfileDto[] = [];\n\t\tfor (let i = 0; i  u.userID === r.room_creator);\n\t\t\t\tif (!u || u === null) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\"Weird error. Got users from Rooms table but user (\" +\n\t\t\t\t\t\t\tr.room_creator +\n\t\t\t\t\t\t\t\") not found in Users table\",\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tconst room: RoomDto = {\n\t\t\t\t\tcreator: u || new UserProfileDto(),\n\t\t\t\t\troomID: r.room_id,\n\t\t\t\t\tparticipant_count: 0, //to fix soon\n\t\t\t\t\troom_name: r.name,\n\t\t\t\t\tdescription: r.description || \"\",\n\t\t\t\t\tis_temporary: r.is_temporary || false,\n\t\t\t\t\tis_private: false, //db must add column\n\t\t\t\t\tis_scheduled: false, //db must add column\n\t\t\t\t\tstart_date: new Date(),\n\t\t\t\t\tend_date: new Date(),\n\t\t\t\t\tlanguage: r.room_language || \"\",\n\t\t\t\t\thas_explicit_content: r.explicit || false,\n\t\t\t\t\thas_nsfw_content: r.nsfw || false,\n\t\t\t\t\troom_image: r.playlist_photo || \"\",\n\t\t\t\t\tcurrent_song: {\n\t\t\t\t\t\ttitle: \"\",\n\t\t\t\t\t\tartists: [],\n\t\t\t\t\t\tcover: \"\",\n\t\t\t\t\t\tstart_time: new Date(),\n\t\t\t\t\t},\n\t\t\t\t\ttags: r.tags || [],\n\t\t\t\t};\n\t\t\t\tresult.push(room);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync generateUserDto(): Promise {\n\t\treturn new UserDto();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard(\"jwt\")\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard(\"jwt\") {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy, ExtractJwt } from \"passport-jwt\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { Injectable } from \"@nestjs/common\";\nimport { AuthService, JWTPayload } from \"./auth.service\";\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n\tconstructor(private authService: AuthService) {\n\t\tconst jwtSecret = process.env.JWT_SECRET_KEY;\n\t\tif (!jwtSecret || jwtSecret === \"\") {\n\t\t\tthrow new Error(\"Missing JWT_SECRET_KEY\");\n\t\t}\n\n\t\tsuper({\n\t\t\tjwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n\t\t\tignoreExpiration: false,\n\t\t\tsecretOrKey: jwtSecret,\n\t\t});\n\t}\n\n\tasync validate(payload: any) {\n\t\tconst result: JWTPayload = {\n\t\t\tid: payload.id,\n\t\t\temail: payload.email,\n\t\t\tusername: payload.username,\n\t\t};\n\t\treturn result;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(username: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/local.strategy.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from \"passport-local\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { AuthService } from \"./auth.service\";\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n\tconstructor(private authService: AuthService) {\n\t\tsuper();\n\t}\n\n\tasync validate(username: string, password: string): Promise {\n\t\tconst user = await this.authService.validateUser(username, password);\n\t\tif (!user) {\n\t\t\tthrow new UnauthorizedException();\n\t\t}\n\t\treturn user;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginBody.html":{"url":"classes/LoginBody.html","title":"class - LoginBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:45\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport * as AWS from \"aws-sdk\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { PrismaService } from \"../../prisma/prisma.service\";\nimport { Prisma } from \"@prisma/client\";\nimport * as jwt from \"jsonwebtoken\";\nimport { CognitoJwtVerifier } from \"aws-jwt-verify\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n//import { CreateUserDto } from \"src/modules/users/dto/create-user.dto\";\n\nexport type CognitoDecodedToken = {\n\tsub: string;\n\tiss: string;\n\tclient_id: string;\n\torigin_jti: string;\n\tevent_id?: string;\n\ttoken_use: string;\n\tscope?: string;\n\tauth_time: number;\n\texp: number;\n\tiat: number;\n\tjti: string;\n\tusername: string;\n};\n\nexport type JWTPayload = {\n\tid: string;\n\temail: string;\n\tusername: string;\n};\n\nexport class RegisterBody {\n\t@ApiProperty()\n\tusername: string;\n\n\t@ApiProperty()\n\tuserCognitoSub: string;\n\n\t@ApiProperty()\n\temail: string;\n}\n\nexport class LoginBody {\n\t@ApiProperty()\n\ttoken: string;\n}\n\n@Injectable()\nexport class AuthService {\n\tprivate cognitoIdentityServiceProvider: AWS.CognitoIdentityServiceProvider;\n\tprivate accessKeyId: string;\n\tprivate secretAccessKey: string;\n\tprivate userPoolId: string;\n\tprivate clientId: string;\n\n\tconstructor(\n\t\tprivate configService: ConfigService,\n\t\tprivate prisma: PrismaService,\n\t) {\n\t\t// Set the AWS credentials\n\t\tconst accessKeyId = this.configService.get(\"AWS_ACCESS_KEY_ID\");\n\t\tif (!accessKeyId) {\n\t\t\tthrow new Error(\"Missing AWS_ACCESS_KEY_ID\");\n\t\t}\n\t\tthis.accessKeyId = accessKeyId;\n\n\t\tconst secretAccessKey = this.configService.get(\n\t\t\t\"AWS_SECRET_ACCESS_KEY\",\n\t\t);\n\t\tif (!secretAccessKey) {\n\t\t\tthrow new Error(\"Missing AWS_SECRET_ACCESS_KEY\");\n\t\t}\n\t\tthis.secretAccessKey = secretAccessKey;\n\n\t\tconst userPoolId = this.configService.get(\n\t\t\t\"AWS_COGNITO_USER_POOL_ID\",\n\t\t);\n\t\tif (!userPoolId) {\n\t\t\tthrow new Error(\"Missing AWS_COGNITO_USER_POOL_ID\");\n\t\t}\n\t\tthis.userPoolId = userPoolId;\n\n\t\tconst clientId = this.configService.get(\"AWS_COGNITO_CLIENT_ID\");\n\t\tif (!clientId) {\n\t\t\tthrow new Error(\"Missing AWS_COGNITO_CLIENT_ID\");\n\t\t}\n\t\tthis.clientId = clientId;\n\n\t\tthis.cognitoIdentityServiceProvider =\n\t\t\tnew AWS.CognitoIdentityServiceProvider({\n\t\t\t\tregion: \"af-south-1\",\n\t\t\t\taccessKeyId: this.accessKeyId,\n\t\t\t\tsecretAccessKey: this.secretAccessKey,\n\t\t\t});\n\t}\n\n\tasync validateUser(username: string, password: string): Promise {\n\t\tif (!this.userPoolId || !this.clientId) {\n\t\t\tthrow new Error(\"Missing Cognito configuration\");\n\t\t}\n\n\t\tconst params: AWS.CognitoIdentityServiceProvider.AdminInitiateAuthRequest =\n\t\t\t{\n\t\t\t\tAuthFlow: \"ADMIN_NO_SRP_AUTH\",\n\t\t\t\tClientId: this.clientId,\n\t\t\t\tUserPoolId: this.userPoolId,\n\t\t\t\tAuthParameters: {\n\t\t\t\t\tUSERNAME: username,\n\t\t\t\t\tPASSWORD: password,\n\t\t\t\t},\n\t\t\t};\n\n\t\ttry {\n\t\t\tconst authResponse = await this.cognitoIdentityServiceProvider\n\t\t\t\t.adminInitiateAuth(params)\n\t\t\t\t.promise();\n\t\t\tif (authResponse.AuthenticationResult) {\n\t\t\t\tconst user = await this.cognitoIdentityServiceProvider\n\t\t\t\t\t.adminGetUser({\n\t\t\t\t\t\tUserPoolId: this.userPoolId,\n\t\t\t\t\t\tUsername: username,\n\t\t\t\t\t})\n\t\t\t\t\t.promise();\n\n\t\t\t\treturn {\n\t\t\t\t\tusername: user.Username,\n\t\t\t\t\tattributes: user.UserAttributes,\n\t\t\t\t\tauthenticationResult: authResponse.AuthenticationResult,\n\t\t\t\t};\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthrow new UnauthorizedException(\"Invalid credentials\");\n\t\t}\n\t}\n\n\t// eslint-disable-next-line prettier/prettier\n  \tasync listUsers(): Promise {\n\t\tconst params = {\n\t\t\tUserPoolId: this.userPoolId,\n\t\t};\n\n\t\ttry {\n\t\t\tconst responsePromise = await this.cognitoIdentityServiceProvider\n\t\t\t\t.listUsers(params)\n\t\t\t\t.promise();\n\t\t\tconst response = await responsePromise;\n\t\t\treturn response;\n\t\t} catch (error) {\n\t\t\tthrow new UnauthorizedException(\"Error listing users\");\n\t\t}\n\t}\n\n\tasync createUser(\n\t\tusername: string,\n\t\temail: string,\n\t\tuserID: string,\n\t): Promise {\n\t\tconst user: Prisma.usersCreateInput = {\n\t\t\tusername: username,\n\t\t\temail: email,\n\t\t\tuser_id: userID,\n\t\t};\n\t\tconst existingUser = await this.prisma.users.findUnique({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\t\tif (existingUser) {\n\t\t\treturn true;\n\t\t}\n\t\ttry {\n\t\t\tconst response = await this.prisma.users.create({ data: user });\n\t\t\tconsole.log(response);\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tasync generateJWT(payload: JWTPayload): Promise {\n\t\tconst secretKey = this.configService.get(\"JWT_SECRET_KEY\");\n\t\tconst expiresIn = this.configService.get(\"JWT_EXPIRATION_TIME\");\n\n\t\tif (!secretKey || secretKey === undefined || secretKey === \"\") {\n\t\t\tthrow new Error(\"Missing JWT secret key\");\n\t\t}\n\n\t\tif (!expiresIn || expiresIn === undefined || expiresIn === \"\") {\n\t\t\tthrow new Error(\"Missing JWT expiration time\");\n\t\t}\n\n\t\tconst token = jwt.sign(payload, secretKey, { expiresIn });\n\t\treturn token;\n\t}\n\n\t/*\n\tasync getUserInfo(jwt_token: string): Promise {\n\t\tconst secretKey = this.configService.get(\"JWT_SECRET_KEY\");\n\t\tconst expiresIn = this.configService.get(\"JWT_EXPIRATION_TIME\");\n\n\t\tif (!secretKey || secretKey === undefined || secretKey === \"\") {\n\t\t\tthrow new Error(\"Missing JWT secret key\");\n\t\t}\n\n\t\tif (!expiresIn || expiresIn === undefined || expiresIn === \"\") {\n\t\t\tthrow new Error(\"Missing JWT expiration time\");\n\t\t}\n\n\t\tconst decoded = jwt.verify(jwt_token, secretKey);\n\t\tconst userID = decoded.sub;\n\t\tif (!userID) {\n\t\t\tthrow new Error(\"Invalid JWT token\");\n\t\t}\n\t\tif (typeof userID !== \"string\") {\n\t\t\tthrow new Error(\"Invalid JWT token\");\n\t\t}\n\n\t\tconst user = await this.prisma.users.findUnique({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\t\treturn user;\n\t}\n\t*/\n\n\t// this funciton will be passed a Request object from the NestJS controller eg:\n\t/*\n\tgetRoomInfo(@Request() req: any, @Param(\"roomID\") roomID: string): RoomDto {\n\t\treturn this.roomsService.getRoomInfo(roomID);\n\t}\n\t*/\n\tgetUserInfo(req: any): JWTPayload {\n\t\tconsole.log(\"req\", req);\n\t\tconst result = req.user as JWTPayload;\n\t\tconsole.log(result);\n\t\tif (!result) {\n\t\t\tthrow new UnauthorizedException(\n\t\t\t\t\"No user found in JWT token. Please log in again\",\n\t\t\t);\n\t\t}\n\t\tif (!result.id) {\n\t\t\tthrow new UnauthorizedException(\n\t\t\t\t\"No user ID found in JWT token. Please log in again\",\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync decodeAndVerifyCognitoJWT(\n\t\tjwt_token: string,\n\t): Promise {\n\t\tconst verifier = CognitoJwtVerifier.create({\n\t\t\tuserPoolId: this.userPoolId,\n\t\t\ttokenUse: \"access\",\n\t\t\tclientId: this.clientId,\n\t\t});\n\n\t\ttry {\n\t\t\tconst payload = await verifier.verify(jwt_token);\n\t\t\tconst result: CognitoDecodedToken = payload as CognitoDecodedToken;\n\t\t\treturn result;\n\t\t} catch (error) {\n\t\t\tthrow new UnauthorizedException(\"Invalid JWT token\");\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PrismaService } from \"./prisma.service\";\n\n@Module({\n\tproviders: [PrismaService],\n\texports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in prisma/prisma.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in prisma/prisma.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit, OnModuleDestroy } from \"@nestjs/common\";\nimport { PrismaClient } from \"@prisma/client\";\n\n@Injectable()\nexport class PrismaService\n\textends PrismaClient\n\timplements OnModuleInit, OnModuleDestroy\n{\n\tasync onModuleInit() {\n\t\tawait this.$connect();\n\t}\n\n\tasync onModuleDestroy() {\n\t\tawait this.$disconnect();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProfileController.html":{"url":"controllers/ProfileController.html","title":"controller - ProfileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProfileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/profile.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                profile\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                followUser\n                            \n                            \n                                    \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getProfileByUsername\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                patchProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                unfollowUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        followUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    followUser(req: any, username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Post(':username/follow')@ApiTags('profile')@ApiOperation({summary: 'Follow the given user'})@ApiParam({name: 'username'})@ApiOkResponse({description: 'Successfully followed the user.', type: Boolean})@ApiBadRequestResponse({description: 'Error following the user.', type: Boolean})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/profile/profile.controller.ts:123\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@ApiTags('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/profile/profile.controller.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserProfileDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getProfileByUsername\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfileByUsername(req: any, username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get(':username')@ApiTags('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/profile/profile.controller.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        patchProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchProfile(req: any, updateProfileDto: UpdateUserProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch()@ApiTags('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/profile/profile.controller.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateProfileDto\n                                            \n                                                            UpdateUserProfileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        unfollowUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    unfollowUser(req: any, username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Post(':username/unfollow')@ApiTags('profile')@ApiOperation({summary: 'Unfollow the given user'})@ApiParam({name: 'username'})@ApiOkResponse({description: 'Successfully unfollowed the user.', type: Boolean})@ApiBadRequestResponse({description: 'Error unfollowing the user.', type: Boolean})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/profile/profile.controller.ts:145\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(req: any, updateProfileDto: UpdateUserProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Put()@ApiTags('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/profile/profile.controller.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateProfileDto\n                                            \n                                                            UpdateUserProfileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n\tController,\n\tGet,\n\tPost,\n\tPut,\n\tPatch,\n\tBody,\n\tParam,\n\tUseGuards,\n\tRequest,\n} from \"@nestjs/common\";\nimport { ApiBadRequestResponse, ApiBearerAuth, ApiOkResponse, ApiOperation, ApiParam, ApiTags } from \"@nestjs/swagger\";\nimport { UserProfileDto } from \"./dto/userprofile.dto\";\nimport { ProfileService } from \"./profile.service\";\nimport { UpdateUserProfileDto } from \"./dto/updateuserprofile.dto\";\nimport { JwtAuthGuard } from \"./../../auth/jwt-auth.guard\";\nimport { AuthService, JWTPayload } from \"src/auth/auth.service\";\n\n@Controller(\"profile\")\nexport class ProfileController {\n\tconstructor(\n\t\tprivate readonly profileService: ProfileService,\n\t\tprivate readonly auth: AuthService,\n\t) {}\n\n\t//NOTE TO DEV:\n\t/*\n    add decorators to each of these paths like:\n    @Post()\n    @ApiOperation({ summary: 'Create user' })\n    @ApiBody({ type: CreateUserDto })\n    @ApiResponse({ status: 201, description: 'The record has been successfully created.', type: User })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    createUser(@Body() createUserDto: CreateUserDto) {\n      //...\n    }\n\n    @Get(':id')\n    @ApiOperation({ summary: 'Retrieve user' })\n    @ApiParam({ name: 'id', required: true })\n    @ApiResponse({ status: 200, description: 'The found record', type: User })\n    getUser(@Param('id') id: string) {\n      //...\n    }\n\n    such that the API documentation is more detailed and informative for the next dev.\n  */\n\n\t/*\n    GET /profile\n    gets profile info\n    no input\n    response: return ProfileDto\n    */\n\t@UseGuards(JwtAuthGuard)\n\t@ApiTags(\"profile\")\n\tgetProfile(@Request() req: any): UserProfileDto {\n\t\treturn this.profileService.getProfile();\n\t}\n\n\t/*\n    PUT /profile\n    edits profile info\n    input: ProfileDto\n    output: updated ProfileDto\n    */\n\t@UseGuards(JwtAuthGuard)\n\t@Put()\n\t@ApiTags(\"profile\")\n\tasync updateProfile(\n\t\t@Request() req: any,\n\t\t@Body() updateProfileDto: UpdateUserProfileDto,\n\t): Promise {\n\t\treturn await this.profileService.updateProfile();\n\t}\n\n\t/*\n    PATCH /profile\n    edits profile info\n    input: ProfileDto\n    output: updated ProfileDto\n    */\n\t@UseGuards(JwtAuthGuard)\n\t@Patch()\n\t@ApiTags(\"profile\")\n\tasync patchProfile(\n\t\t@Request() req: any,\n\t\t@Body() updateProfileDto: UpdateUserProfileDto,\n\t): Promise {\n\t\treturn await this.profileService.patchProfile();\n\t}\n\n\t/*\n    GET /profile/{username}\n    gets profile info for given username\n    no input\n    response: ProfileDto\n    */\n\t@UseGuards(JwtAuthGuard)\n\t@Get(\":username\")\n\t@ApiTags(\"profile\")\n\tasync getProfileByUsername(\n\t\t@Request() req: any,\n\t\t@Param(\"username\") username: string,\n\t): Promise {\n\t\treturn await this.profileService.getProfileByUsername();\n\t}\n\n\t@ApiBearerAuth()\n\t@UseGuards(JwtAuthGuard)\n\t@Post(\":username/follow\")\n\t@ApiTags(\"profile\")\n\t@ApiOperation({ summary: \"Follow the given user\" })\n\t@ApiParam({ name: \"username\" })\n\t@ApiOkResponse({\n\t\tdescription: \"Successfully followed the user.\",\n\t\ttype: Boolean,\n\t})\n\t@ApiBadRequestResponse({\n\t\tdescription: \"Error following the user.\",\n\t\ttype: Boolean,\n\t})\n\tasync followUser(\n\t\t@Request() req: any,\n\t\t@Param(\"username\") username: string,\n\t): Promise {\n\t\tconst userInfo: JWTPayload = this.auth.getUserInfo(req);\n\t\treturn await this.profileService.followUser(userInfo.id, username);\n\t}\n\n\t@ApiBearerAuth()\n\t@UseGuards(JwtAuthGuard)\n\t@Post(\":username/unfollow\")\n\t@ApiTags(\"profile\")\n\t@ApiOperation({ summary: \"Unfollow the given user\" })\n\t@ApiParam({ name: \"username\" })\n\t@ApiOkResponse({\n\t\tdescription: \"Successfully unfollowed the user.\",\n\t\ttype: Boolean,\n\t})\n\t@ApiBadRequestResponse({\n\t\tdescription: \"Error unfollowing the user.\",\n\t\ttype: Boolean,\n\t})\n\tasync unfollowUser(\n\t\t@Request() req: any,\n\t\t@Param(\"username\") username: string,\n\t): Promise {\n\t\tconst userInfo: JWTPayload = this.auth.getUserInfo(req);\n\t\treturn await this.profileService.unfollowUser(userInfo.id, username);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProfileModule.html":{"url":"modules/ProfileModule.html","title":"module - ProfileModule","body":"\n                   \n\n\n\n\n    Modules\n    ProfileModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_imports\n\n\n\ncluster_ProfileModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nProfileModule\n\nProfileModule\n\nProfileModule -->\n\nPrismaModule->ProfileModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nProfileModule -->\n\nAuthService->ProfileModule\n\n\n\n\n\nDbUtilsService\n\nDbUtilsService\n\nProfileModule -->\n\nDbUtilsService->ProfileModule\n\n\n\n\n\nDtoGenService\n\nDtoGenService\n\nProfileModule -->\n\nDtoGenService->ProfileModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nProfileModule -->\n\nPrismaService->ProfileModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/profile/profile.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            DbUtilsService\n                        \n                        \n                            DtoGenService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            ProfileService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProfileController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ProfileController } from \"./profile.controller\";\nimport { ProfileService } from \"./profile.service\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\nimport { PrismaModule } from \"../../../prisma/prisma.module\";\nimport { DtoGenService } from \"../dto-gen/dto-gen.service\";\nimport { DbUtilsService } from \"../db-utils/db-utils.service\";\nimport { AuthService } from \"src/auth/auth.service\";\n\n@Module({\n\tcontrollers: [ProfileController],\n\tproviders: [ProfileService, PrismaService, DtoGenService, DbUtilsService, AuthService],\n\timports: [PrismaModule],\n})\nexport class ProfileModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfileService.html":{"url":"injectables/ProfileService.html","title":"injectable - ProfileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProfileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/profile.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                followUser\n                            \n                            \n                                getProfile\n                            \n                            \n                                getProfileByUsername\n                            \n                            \n                                patchProfile\n                            \n                            \n                                    Async\n                                unfollowUser\n                            \n                            \n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, dtogen: DtoGenService, dbUtilsService: DbUtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/profile/profile.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dtogen\n                                                  \n                                                        \n                                                                        DtoGenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dbUtilsService\n                                                  \n                                                        \n                                                                        DbUtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        followUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    followUser(userId: string, accountFollowedId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/profile/profile.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                accountFollowedId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProfile\n                        \n                    \n                \n            \n            \n                \ngetProfile()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/profile/profile.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         UserProfileDto\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProfileByUsername\n                        \n                    \n                \n            \n            \n                \ngetProfileByUsername()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/profile/profile.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         UserProfileDto\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        patchProfile\n                        \n                    \n                \n            \n            \n                \npatchProfile()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/profile/profile.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         UserProfileDto\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        unfollowUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    unfollowUser(userId: string, accountUnfollowedId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/profile/profile.service.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                accountUnfollowedId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateProfile\n                        \n                    \n                \n            \n            \n                \nupdateProfile()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/profile/profile.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         UserProfileDto\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { UserProfileDto } from \"./dto/userprofile.dto\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\nimport { DtoGenService } from \"../dto-gen/dto-gen.service\";\nimport { DbUtilsService } from \"../db-utils/db-utils.service\";\nimport * as Prisma from \"@prisma/client\";\n\n@Injectable()\nexport class ProfileService {\n\tconstructor(\n\t\tprivate readonly prisma: PrismaService,\n\t\tprivate readonly dtogen: DtoGenService,\n\t\tprivate readonly dbUtilsService: DbUtilsService,\n\t) {}\n\n\tgetProfile(): UserProfileDto {\n\t\t// an an example to generate a UserProfileDto\n\t\t/*\n\t\tconst userID = \"311ce2e8-8041-70bd-0ab5-be97283ee182\"\n\t\tconst user = await this.dtogen.generateUserProfileDto(userID);\n\t\tif (user) {\n\t\t\treturn user;\n\t\t}\n\t\t*/\n\t\treturn new UserProfileDto();\n\t}\n\n\tupdateProfile(): UserProfileDto {\n\t\treturn new UserProfileDto();\n\t}\n\n\tpatchProfile(): UserProfileDto {\n\t\treturn new UserProfileDto();\n\t}\n\n\tgetProfileByUsername(): UserProfileDto {\n\t\treturn new UserProfileDto();\n\t}\n\n\t/*\n\tfollower: the person who does the following\n\tfollowee (leader): the person being followed\n\t*/\n\tasync followUser(\n\t\tuserId: string,\n\t\taccountFollowedId: string,\n\t): Promise {\n\t\tif (userId === accountFollowedId) {\n\t\t\tthrow new Error(\"You cannot follow yourself\");\n\t\t}\n\n\t\tif (!(await this.dbUtilsService.userExists(accountFollowedId))) {\n\t\t\tthrow new Error(\"User (\" + accountFollowedId + \") does not exist\");\n\t\t}\n\n\t\tif (!(await this.dbUtilsService.userExists(userId))) {\n\t\t\tthrow new Error(\"User (\" + userId + \") does not exist\");\n\t\t}\n\n\t\tif (await this.dbUtilsService.isFollowing(userId, accountFollowedId)) {\n\t\t\treturn true;\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.prisma.follows.create({\n\t\t\t\tdata: {\n\t\t\t\t\tfollower: userId,\n\t\t\t\t\tfollowee: accountFollowedId,\n\t\t\t\t},\n\t\t\t});\n\t\t\treturn true;\n\t\t} catch (e) {\n\t\t\tthrow new Error(\"Failed to follow user (\" + accountFollowedId + \")\");\n\t\t}\n\t}\n\n\t/*\n\tfollower: the person who does the following\n\tfollowee (leader): the person being followed\n\t*/\n\tasync unfollowUser(\n\t\tuserId: string,\n\t\taccountUnfollowedId: string,\n\t): Promise {\n\t\tif (userId === accountUnfollowedId) {\n\t\t\tthrow new Error(\"You cannot unfollow yourself\");\n\t\t}\n\n\t\tif (!(await this.dbUtilsService.userExists(accountUnfollowedId))) {\n\t\t\tthrow new Error(\"User (\" + accountUnfollowedId + \") does not exist\");\n\t\t}\n\n\t\tif (!(await this.dbUtilsService.userExists(userId))) {\n\t\t\tthrow new Error(\"User (\" + userId + \") does not exist\");\n\t\t}\n\n\t\tif (!(await this.dbUtilsService.isFollowing(userId, accountUnfollowedId))) {\n\t\t\treturn true;\n\t\t}\n\n\t\ttry {\n\t\t\t//find the follow relationship and delete it\n\t\t\tconst follow = await this.prisma.follows.findFirst({\n\t\t\t\twhere: {\n\t\t\t\t\tfollower: userId,\n\t\t\t\t\tfollowee: accountUnfollowedId,\n\t\t\t\t},\n\t\t\t});\n\t\t\tif (!follow) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tawait this.prisma.follows.delete({\n\t\t\t\twhere: {\n\t\t\t\t\tfollows_id: follow.follows_id,\n\t\t\t\t\tfollower: userId,\n\t\t\t\t\tfollowee: accountUnfollowedId,\n\t\t\t\t},\n\t\t\t});\n\t\t\treturn true;\n\t\t} catch (e) {\n\t\t\tthrow new Error(\"Failed to unfollow user (\" + accountUnfollowedId + \")\");\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterBody.html":{"url":"classes/RegisterBody.html","title":"class - RegisterBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                userCognitoSub\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userCognitoSub\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport * as AWS from \"aws-sdk\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { PrismaService } from \"../../prisma/prisma.service\";\nimport { Prisma } from \"@prisma/client\";\nimport * as jwt from \"jsonwebtoken\";\nimport { CognitoJwtVerifier } from \"aws-jwt-verify\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n//import { CreateUserDto } from \"src/modules/users/dto/create-user.dto\";\n\nexport type CognitoDecodedToken = {\n\tsub: string;\n\tiss: string;\n\tclient_id: string;\n\torigin_jti: string;\n\tevent_id?: string;\n\ttoken_use: string;\n\tscope?: string;\n\tauth_time: number;\n\texp: number;\n\tiat: number;\n\tjti: string;\n\tusername: string;\n};\n\nexport type JWTPayload = {\n\tid: string;\n\temail: string;\n\tusername: string;\n};\n\nexport class RegisterBody {\n\t@ApiProperty()\n\tusername: string;\n\n\t@ApiProperty()\n\tuserCognitoSub: string;\n\n\t@ApiProperty()\n\temail: string;\n}\n\nexport class LoginBody {\n\t@ApiProperty()\n\ttoken: string;\n}\n\n@Injectable()\nexport class AuthService {\n\tprivate cognitoIdentityServiceProvider: AWS.CognitoIdentityServiceProvider;\n\tprivate accessKeyId: string;\n\tprivate secretAccessKey: string;\n\tprivate userPoolId: string;\n\tprivate clientId: string;\n\n\tconstructor(\n\t\tprivate configService: ConfigService,\n\t\tprivate prisma: PrismaService,\n\t) {\n\t\t// Set the AWS credentials\n\t\tconst accessKeyId = this.configService.get(\"AWS_ACCESS_KEY_ID\");\n\t\tif (!accessKeyId) {\n\t\t\tthrow new Error(\"Missing AWS_ACCESS_KEY_ID\");\n\t\t}\n\t\tthis.accessKeyId = accessKeyId;\n\n\t\tconst secretAccessKey = this.configService.get(\n\t\t\t\"AWS_SECRET_ACCESS_KEY\",\n\t\t);\n\t\tif (!secretAccessKey) {\n\t\t\tthrow new Error(\"Missing AWS_SECRET_ACCESS_KEY\");\n\t\t}\n\t\tthis.secretAccessKey = secretAccessKey;\n\n\t\tconst userPoolId = this.configService.get(\n\t\t\t\"AWS_COGNITO_USER_POOL_ID\",\n\t\t);\n\t\tif (!userPoolId) {\n\t\t\tthrow new Error(\"Missing AWS_COGNITO_USER_POOL_ID\");\n\t\t}\n\t\tthis.userPoolId = userPoolId;\n\n\t\tconst clientId = this.configService.get(\"AWS_COGNITO_CLIENT_ID\");\n\t\tif (!clientId) {\n\t\t\tthrow new Error(\"Missing AWS_COGNITO_CLIENT_ID\");\n\t\t}\n\t\tthis.clientId = clientId;\n\n\t\tthis.cognitoIdentityServiceProvider =\n\t\t\tnew AWS.CognitoIdentityServiceProvider({\n\t\t\t\tregion: \"af-south-1\",\n\t\t\t\taccessKeyId: this.accessKeyId,\n\t\t\t\tsecretAccessKey: this.secretAccessKey,\n\t\t\t});\n\t}\n\n\tasync validateUser(username: string, password: string): Promise {\n\t\tif (!this.userPoolId || !this.clientId) {\n\t\t\tthrow new Error(\"Missing Cognito configuration\");\n\t\t}\n\n\t\tconst params: AWS.CognitoIdentityServiceProvider.AdminInitiateAuthRequest =\n\t\t\t{\n\t\t\t\tAuthFlow: \"ADMIN_NO_SRP_AUTH\",\n\t\t\t\tClientId: this.clientId,\n\t\t\t\tUserPoolId: this.userPoolId,\n\t\t\t\tAuthParameters: {\n\t\t\t\t\tUSERNAME: username,\n\t\t\t\t\tPASSWORD: password,\n\t\t\t\t},\n\t\t\t};\n\n\t\ttry {\n\t\t\tconst authResponse = await this.cognitoIdentityServiceProvider\n\t\t\t\t.adminInitiateAuth(params)\n\t\t\t\t.promise();\n\t\t\tif (authResponse.AuthenticationResult) {\n\t\t\t\tconst user = await this.cognitoIdentityServiceProvider\n\t\t\t\t\t.adminGetUser({\n\t\t\t\t\t\tUserPoolId: this.userPoolId,\n\t\t\t\t\t\tUsername: username,\n\t\t\t\t\t})\n\t\t\t\t\t.promise();\n\n\t\t\t\treturn {\n\t\t\t\t\tusername: user.Username,\n\t\t\t\t\tattributes: user.UserAttributes,\n\t\t\t\t\tauthenticationResult: authResponse.AuthenticationResult,\n\t\t\t\t};\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthrow new UnauthorizedException(\"Invalid credentials\");\n\t\t}\n\t}\n\n\t// eslint-disable-next-line prettier/prettier\n  \tasync listUsers(): Promise {\n\t\tconst params = {\n\t\t\tUserPoolId: this.userPoolId,\n\t\t};\n\n\t\ttry {\n\t\t\tconst responsePromise = await this.cognitoIdentityServiceProvider\n\t\t\t\t.listUsers(params)\n\t\t\t\t.promise();\n\t\t\tconst response = await responsePromise;\n\t\t\treturn response;\n\t\t} catch (error) {\n\t\t\tthrow new UnauthorizedException(\"Error listing users\");\n\t\t}\n\t}\n\n\tasync createUser(\n\t\tusername: string,\n\t\temail: string,\n\t\tuserID: string,\n\t): Promise {\n\t\tconst user: Prisma.usersCreateInput = {\n\t\t\tusername: username,\n\t\t\temail: email,\n\t\t\tuser_id: userID,\n\t\t};\n\t\tconst existingUser = await this.prisma.users.findUnique({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\t\tif (existingUser) {\n\t\t\treturn true;\n\t\t}\n\t\ttry {\n\t\t\tconst response = await this.prisma.users.create({ data: user });\n\t\t\tconsole.log(response);\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tasync generateJWT(payload: JWTPayload): Promise {\n\t\tconst secretKey = this.configService.get(\"JWT_SECRET_KEY\");\n\t\tconst expiresIn = this.configService.get(\"JWT_EXPIRATION_TIME\");\n\n\t\tif (!secretKey || secretKey === undefined || secretKey === \"\") {\n\t\t\tthrow new Error(\"Missing JWT secret key\");\n\t\t}\n\n\t\tif (!expiresIn || expiresIn === undefined || expiresIn === \"\") {\n\t\t\tthrow new Error(\"Missing JWT expiration time\");\n\t\t}\n\n\t\tconst token = jwt.sign(payload, secretKey, { expiresIn });\n\t\treturn token;\n\t}\n\n\t/*\n\tasync getUserInfo(jwt_token: string): Promise {\n\t\tconst secretKey = this.configService.get(\"JWT_SECRET_KEY\");\n\t\tconst expiresIn = this.configService.get(\"JWT_EXPIRATION_TIME\");\n\n\t\tif (!secretKey || secretKey === undefined || secretKey === \"\") {\n\t\t\tthrow new Error(\"Missing JWT secret key\");\n\t\t}\n\n\t\tif (!expiresIn || expiresIn === undefined || expiresIn === \"\") {\n\t\t\tthrow new Error(\"Missing JWT expiration time\");\n\t\t}\n\n\t\tconst decoded = jwt.verify(jwt_token, secretKey);\n\t\tconst userID = decoded.sub;\n\t\tif (!userID) {\n\t\t\tthrow new Error(\"Invalid JWT token\");\n\t\t}\n\t\tif (typeof userID !== \"string\") {\n\t\t\tthrow new Error(\"Invalid JWT token\");\n\t\t}\n\n\t\tconst user = await this.prisma.users.findUnique({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\t\treturn user;\n\t}\n\t*/\n\n\t// this funciton will be passed a Request object from the NestJS controller eg:\n\t/*\n\tgetRoomInfo(@Request() req: any, @Param(\"roomID\") roomID: string): RoomDto {\n\t\treturn this.roomsService.getRoomInfo(roomID);\n\t}\n\t*/\n\tgetUserInfo(req: any): JWTPayload {\n\t\tconsole.log(\"req\", req);\n\t\tconst result = req.user as JWTPayload;\n\t\tconsole.log(result);\n\t\tif (!result) {\n\t\t\tthrow new UnauthorizedException(\n\t\t\t\t\"No user found in JWT token. Please log in again\",\n\t\t\t);\n\t\t}\n\t\tif (!result.id) {\n\t\t\tthrow new UnauthorizedException(\n\t\t\t\t\"No user ID found in JWT token. Please log in again\",\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync decodeAndVerifyCognitoJWT(\n\t\tjwt_token: string,\n\t): Promise {\n\t\tconst verifier = CognitoJwtVerifier.create({\n\t\t\tuserPoolId: this.userPoolId,\n\t\t\ttokenUse: \"access\",\n\t\t\tclientId: this.clientId,\n\t\t});\n\n\t\ttry {\n\t\t\tconst payload = await verifier.verify(jwt_token);\n\t\t\tconst result: CognitoDecodedToken = payload as CognitoDecodedToken;\n\t\t\treturn result;\n\t\t} catch (error) {\n\t\t\tthrow new UnauthorizedException(\"Invalid JWT token\");\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoomDto.html":{"url":"classes/RoomDto.html","title":"class - RoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/dto/room.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                creator\n                            \n                            \n                                    \n                                current_song\n                            \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                end_date\n                            \n                            \n                                    \n                                    \n                                has_explicit_content\n                            \n                            \n                                    \n                                    \n                                has_nsfw_content\n                            \n                            \n                                    \n                                    \n                                is_private\n                            \n                            \n                                    \n                                    \n                                is_scheduled\n                            \n                            \n                                    \n                                    \n                                is_temporary\n                            \n                            \n                                    \n                                    \n                                language\n                            \n                            \n                                    \n                                    \n                                participant_count\n                            \n                            \n                                    \n                                    \n                                room_image\n                            \n                            \n                                    \n                                    \n                                room_name\n                            \n                            \n                                    \n                                    \n                                roomID\n                            \n                            \n                                    \n                                    \n                                start_date\n                            \n                            \n                                    \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserProfileDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: UserProfileDto})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        current_song\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SongInfoDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: SongInfoDto})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        end_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        has_explicit_content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        has_nsfw_content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        is_private\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        is_scheduled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        is_temporary\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        participant_count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        room_image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        room_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        roomID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/room.dto.ts:66\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsBoolean, IsNumber, IsDateString } from \"class-validator\";\nimport { UserProfileDto } from \"../../profile/dto/userprofile.dto\";\nimport { SongInfoDto } from \"./songinfo.dto\";\n\nexport class RoomDto {\n\t@ApiProperty({ type: UserProfileDto })\n\tcreator: UserProfileDto;\n\n\t@ApiProperty()\n\t@IsString()\n\troomID: string;\n\n\t@ApiProperty()\n\t@IsNumber()\n\tparticipant_count: number;\n\n\t@ApiProperty()\n\t@IsString()\n\troom_name: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tdescription: string;\n\n\t@ApiProperty()\n\t@IsBoolean()\n\tis_temporary: boolean;\n\n\t@ApiProperty()\n\t@IsBoolean()\n\tis_private: boolean;\n\n\t@ApiProperty()\n\t@IsBoolean()\n\tis_scheduled: boolean;\n\n\t@ApiProperty()\n\t@IsDateString()\n\tstart_date: Date;\n\n\t@ApiProperty()\n\t@IsDateString()\n\tend_date: Date;\n\n\t@ApiProperty()\n\t@IsString()\n\tlanguage: string;\n\n\t@ApiProperty()\n\t@IsBoolean()\n\thas_explicit_content: boolean;\n\n\t@ApiProperty()\n\t@IsBoolean()\n\thas_nsfw_content: boolean;\n\n\t@ApiProperty()\n\t@IsString()\n\troom_image: string;\n\n\t@ApiProperty({ type: SongInfoDto })\n\tcurrent_song: SongInfoDto;\n\n\t@ApiProperty({ type: [String] })\n\ttags: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoomEntity.html":{"url":"classes/RoomEntity.html","title":"class - RoomEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoomEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/entities/room.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                creator\n                            \n                            \n                                    \n                                current_song\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                end_date\n                            \n                            \n                                    \n                                has_explicit_content\n                            \n                            \n                                    \n                                has_nsfw_content\n                            \n                            \n                                    \n                                is_private\n                            \n                            \n                                    \n                                is_scheduled\n                            \n                            \n                                    \n                                is_temporary\n                            \n                            \n                                    \n                                language\n                            \n                            \n                                    \n                                participant_count\n                            \n                            \n                                    \n                                room_image\n                            \n                            \n                                    \n                                room_name\n                            \n                            \n                                    \n                                roomID\n                            \n                            \n                                    \n                                start_date\n                            \n                            \n                                    \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserProfileDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: UserProfileDto})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/room.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        current_song\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SongInfoDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: SongInfoDto})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/room.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/room.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        end_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Date})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/room.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        has_explicit_content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/room.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        has_nsfw_content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/room.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        is_private\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/room.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        is_scheduled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/room.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        is_temporary\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/room.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/room.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        participant_count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/room.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        room_image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/room.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        room_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/room.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        roomID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/room.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Date})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/room.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/room.entity.ts:52\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { UserProfileDto } from \"../../profile/dto/userprofile.dto\";\nimport { SongInfoDto } from \"../dto/songinfo.dto\";\n\nexport class RoomEntity {\n\t@ApiProperty({ type: UserProfileDto })\n\tcreator: UserProfileDto;\n\n\t@ApiProperty()\n\troomID: string;\n\n\t@ApiProperty()\n\tparticipant_count: number;\n\n\t@ApiProperty()\n\troom_name: string;\n\n\t@ApiProperty()\n\tdescription: string;\n\n\t@ApiProperty()\n\tis_temporary: boolean;\n\n\t@ApiProperty()\n\tis_private: boolean;\n\n\t@ApiProperty()\n\tis_scheduled: boolean;\n\n\t@ApiProperty({ type: Date })\n\tstart_date: Date;\n\n\t@ApiProperty({ type: Date })\n\tend_date: Date;\n\n\t@ApiProperty()\n\tlanguage: string;\n\n\t@ApiProperty()\n\thas_explicit_content: boolean;\n\n\t@ApiProperty()\n\thas_nsfw_content: boolean;\n\n\t@ApiProperty()\n\troom_image: string;\n\n\t@ApiProperty({ type: SongInfoDto })\n\tcurrent_song: SongInfoDto;\n\n\t@ApiProperty({ type: [String] })\n\ttags: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RoomsController.html":{"url":"controllers/RoomsController.html","title":"controller - RoomsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RoomsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/rooms.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                rooms\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                addSongToQueue\n                            \n                            \n                                    \n                                    \n                                    \n                                clearRoomQueue\n                            \n                            \n                                    \n                                    \n                                    \n                                deleteRoom\n                            \n                            \n                                    \n                                    \n                                    \n                                getCurrentSong\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getNewRooms\n                            \n                            \n                                    \n                                    \n                                    \n                                getRoomInfo\n                            \n                            \n                                    \n                                    \n                                    \n                                getRoomQueue\n                            \n                            \n                                    \n                                    \n                                    \n                                getRoomUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                joinRoom\n                            \n                            \n                                    \n                                    \n                                    \n                                leaveRoom\n                            \n                            \n                                    \n                                    \n                                    \n                                updateRoom\n                            \n                            \n                                    \n                                    \n                                    \n                                updateRoomInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        addSongToQueue\n                        \n                    \n                \n            \n            \n                \n                        \n                    addSongToQueue(req: any, roomID: string, songInfoDto: SongInfoDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post(':roomID/songs')@ApiTags('rooms')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.controller.ts:212\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                songInfoDto\n                                            \n                                                            SongInfoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         SongInfoDto[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        clearRoomQueue\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearRoomQueue(req: any, roomID: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete(':roomID/songs')@ApiTags('rooms')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.controller.ts:196\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        deleteRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteRoom(req: any, roomID: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete(':roomID')@ApiTags('rooms')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.controller.ts:125\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getCurrentSong\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCurrentSong(req: any, roomID: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get(':roomID/songs/current')@ApiTags('rooms')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.controller.ts:229\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         SongInfoDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getNewRooms\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNewRooms()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get('new')@ApiOperation({summary: 'Get newly created public rooms'})@ApiParam({name: 'none'})@ApiOkResponse({description: 'The new public rooms as an array of RoomDto.', type: RoomDto, isArray: true})@ApiTags('rooms')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.controller.ts:71\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getRoomInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRoomInfo(req: any, roomID: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get(':roomID')@ApiTags('rooms')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.controller.ts:84\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         RoomDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getRoomQueue\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRoomQueue(req: any, roomID: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get(':roomID/songs')@ApiTags('rooms')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.controller.ts:180\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         SongInfoDto[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getRoomUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRoomUsers(req: any, roomID: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get(':roomID/users')@ApiTags('rooms')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.controller.ts:164\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserProfileDto[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        joinRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    joinRoom(req: any, roomID: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post(':roomID/join')@ApiTags('rooms')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.controller.ts:138\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        leaveRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    leaveRoom(req: any, roomID: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post(':roomID/leave')@ApiTags('rooms')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.controller.ts:151\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        updateRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateRoom(req: any, roomID: string, updateRoomDto: UpdateRoomDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Put(':roomID')@ApiTags('rooms')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.controller.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateRoomDto\n                                            \n                                                            UpdateRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         RoomDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        updateRoomInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateRoomInfo(req: any, roomID: string, updateRoomDto: UpdateRoomDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch(':roomID')@ApiTags('rooms')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.controller.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateRoomDto\n                                            \n                                                            UpdateRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         RoomDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n\tBody,\n\tController,\n\tDelete,\n\tGet,\n\tParam,\n\tPatch,\n\tPost,\n\tPut,\n\tUseGuards,\n\tRequest,\n} from \"@nestjs/common\";\nimport {\n\tApiBearerAuth,\n\tApiOkResponse,\n\tApiOperation,\n\tApiParam,\n\tApiResponse,\n\tApiTags,\n} from \"@nestjs/swagger\";\nimport { SongInfoDto } from \"./dto/songinfo.dto\";\nimport { RoomsService } from \"./rooms.service\";\nimport { CreateRoomDto } from \"./dto/createroomdto\";\nimport { UpdateRoomDto } from \"./dto/updateroomdto\";\nimport { RoomDto } from \"./dto/room.dto\";\nimport { UserProfileDto } from \"../profile/dto/userprofile.dto\";\nimport { JwtAuthGuard } from \"./../../auth/jwt-auth.guard\";\nimport { AuthService, JWTPayload } from \"src/auth/auth.service\";\n\n@Controller(\"rooms\")\nexport class RoomsController {\n\tconstructor(\n\t\tprivate readonly roomsService: RoomsService,\n\t\tprivate readonly auth: AuthService,\n\t) {}\n\n\t//NOTE TO DEV:\n\t/*\n    add decorators to each of these paths like:\n    @Post()\n    @ApiOperation({ summary: 'Create user' })\n    @ApiBody({ type: CreateUserDto })\n    @ApiResponse({ status: 201, description: 'The record has been successfully created.', type: User })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    createUser(@Body() createUserDto: CreateUserDto) {\n      //...\n    }\n\n    @Get(':id')\n    @ApiOperation({ summary: 'Retrieve user' })\n    @ApiParam({ name: 'id', required: true })\n    @ApiResponse({ status: 200, description: 'The found record', type: User })\n    getUser(@Param('id') id: string) {\n      //...\n    }\n\n    such that the API documentation is more detailed and informative for the next dev.\n  */\n\n\t@ApiBearerAuth()\n\t@UseGuards(JwtAuthGuard)\n\t@Get(\"new\")\n\t@ApiOperation({ summary: \"Get newly created public rooms\" })\n\t@ApiParam({ name: \"none\" })\n\t@ApiOkResponse({\n\t\tdescription: \"The new public rooms as an array of RoomDto.\",\n\t\ttype: RoomDto,\n\t\tisArray: true,\n\t})\n\t@ApiTags(\"rooms\")\n\tasync getNewRooms(): Promise {\n\t\treturn await this.roomsService.getNewRooms();\n\t}\n\n\t/*\n    GET /rooms/{roomID}\n    returns info about a room\n    no input\n    response: RoomDto\n    */\n\t@UseGuards(JwtAuthGuard)\n\t@Get(\":roomID\")\n\t@ApiTags(\"rooms\")\n\tgetRoomInfo(@Request() req: any, @Param(\"roomID\") roomID: string): RoomDto {\n\t\treturn this.roomsService.getRoomInfo(roomID);\n\t}\n\n\t/*\n    PUT/PATCH /rooms/{roomID}\n    edits room info (only if it belongs to the user)\n    input: partial RoomDto\n    response: updated RoomDto\n    */\n\t@UseGuards(JwtAuthGuard)\n\t@Patch(\":roomID\")\n\t@ApiTags(\"rooms\")\n\tupdateRoomInfo(\n\t\t@Request() req: any,\n\t\t@Param(\"roomID\") roomID: string,\n\t\t@Body() updateRoomDto: UpdateRoomDto,\n\t): RoomDto {\n\t\treturn this.roomsService.updateRoomInfo(roomID, updateRoomDto);\n\t}\n\n\t@UseGuards(JwtAuthGuard)\n\t@Put(\":roomID\")\n\t@ApiTags(\"rooms\")\n\tupdateRoom(\n\t\t@Request() req: any,\n\t\t@Param(\"roomID\") roomID: string,\n\t\t@Body() updateRoomDto: UpdateRoomDto,\n\t): RoomDto {\n\t\treturn this.roomsService.updateRoom(roomID, updateRoomDto);\n\t}\n\n\t/*\n    DELETE /rooms/{roomID}\n    deletes the room (only if it belongs to the user)\n    no input\n    response: (2xx for success, 4xx for error)\n    */\n\t@UseGuards(JwtAuthGuard)\n\t@Delete(\":roomID\")\n\t@ApiTags(\"rooms\")\n\tdeleteRoom(@Request() req: any, @Param(\"roomID\") roomID: string): boolean {\n\t\treturn this.roomsService.deleteRoom(roomID);\n\t}\n\n\t/*\n    POST /rooms/{roomID}/join\n    adds current user as a participant to the room\n    no input\n    response: (2xx for success, 4xx for error)\n    */\n\t@UseGuards(JwtAuthGuard)\n\t@Post(\":roomID/join\")\n\t@ApiTags(\"rooms\")\n\tjoinRoom(@Request() req: any, @Param(\"roomID\") roomID: string): boolean {\n\t\treturn this.roomsService.joinRoom(roomID);\n\t}\n\n\t/*\n    POST /rooms/{roomID}/leave\n    remove current user as a participant to the room\n    no input\n    response: (2xx for success, 4xx for error)\n    */\n\t@UseGuards(JwtAuthGuard)\n\t@Post(\":roomID/leave\")\n\t@ApiTags(\"rooms\")\n\tleaveRoom(@Request() req: any, @Param(\"roomID\") roomID: string): boolean {\n\t\treturn this.roomsService.leaveRoom(roomID);\n\t}\n\n\t/*\n    GET /rooms/{roomID}/users\n    returns people currently (and previously in room)\n    no input\n    response: array of ProfileDto\n    */\n\t@UseGuards(JwtAuthGuard)\n\t@Get(\":roomID/users\")\n\t@ApiTags(\"rooms\")\n\tgetRoomUsers(\n\t\t@Request() req: any,\n\t\t@Param(\"roomID\") roomID: string,\n\t): UserProfileDto[] {\n\t\treturn this.roomsService.getRoomUsers(roomID);\n\t}\n\n\t/*\n    GET /rooms/{roomID}/songs\n    returns the queue\n    no input\n    response: array of SongInfoDto\n    */\n\t@UseGuards(JwtAuthGuard)\n\t@Get(\":roomID/songs\")\n\t@ApiTags(\"rooms\")\n\tgetRoomQueue(\n\t\t@Request() req: any,\n\t\t@Param(\"roomID\") roomID: string,\n\t): SongInfoDto[] {\n\t\treturn this.roomsService.getRoomQueue(roomID);\n\t}\n\n\t/*\n    DELETE /rooms/{roomID}/songs\n    clears the queue (except for current song, if playing)\n    no input\n    response: (2xx for success, 4xx for error)\n    */\n\t@UseGuards(JwtAuthGuard)\n\t@Delete(\":roomID/songs\")\n\t@ApiTags(\"rooms\")\n\tclearRoomQueue(\n\t\t@Request() req: any,\n\t\t@Param(\"roomID\") roomID: string,\n\t): boolean {\n\t\treturn this.roomsService.clearRoomQueue(roomID);\n\t}\n\n\t/*\n    POST /rooms/{roomID}/songs\n    add a song to queue\n    input: SongInfoDto\n    response: array of SongInfoDto (room queue)\n    */\n\t@UseGuards(JwtAuthGuard)\n\t@Post(\":roomID/songs\")\n\t@ApiTags(\"rooms\")\n\taddSongToQueue(\n\t\t@Request() req: any,\n\t\t@Param(\"roomID\") roomID: string,\n\t\t@Body() songInfoDto: SongInfoDto,\n\t): SongInfoDto[] {\n\t\treturn this.roomsService.addSongToQueue(roomID, songInfoDto);\n\t}\n\n\t/*\n    GET /rooms/{roomID}/songs/current\n    returns the current playing song\n    no input\n    response: SongInfoDto\n    */\n\t@UseGuards(JwtAuthGuard)\n\t@Get(\":roomID/songs/current\")\n\t@ApiTags(\"rooms\")\n\tgetCurrentSong(\n\t\t@Request() req: any,\n\t\t@Param(\"roomID\") roomID: string,\n\t): SongInfoDto {\n\t\treturn this.roomsService.getCurrentSong(roomID);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RoomsModule.html":{"url":"modules/RoomsModule.html","title":"module - RoomsModule","body":"\n                   \n\n\n\n\n    Modules\n    RoomsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RoomsModule\n\n\n\ncluster_RoomsModule_imports\n\n\n\ncluster_RoomsModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nRoomsModule\n\nRoomsModule\n\nRoomsModule -->\n\nPrismaModule->RoomsModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nRoomsModule -->\n\nAuthService->RoomsModule\n\n\n\n\n\nDbUtilsService\n\nDbUtilsService\n\nRoomsModule -->\n\nDbUtilsService->RoomsModule\n\n\n\n\n\nDtoGenService\n\nDtoGenService\n\nRoomsModule -->\n\nDtoGenService->RoomsModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nRoomsModule -->\n\nPrismaService->RoomsModule\n\n\n\n\n\nRoomsService\n\nRoomsService\n\nRoomsModule -->\n\nRoomsService->RoomsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/rooms/rooms.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            DbUtilsService\n                        \n                        \n                            DtoGenService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            RoomsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RoomsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { RoomsController } from \"./rooms.controller\";\nimport { RoomsService } from \"./rooms.service\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\nimport { PrismaModule } from \"../../../prisma/prisma.module\";\nimport { DtoGenService } from \"../dto-gen/dto-gen.service\";\nimport { DbUtilsService } from \"../db-utils/db-utils.service\";\nimport { AuthService } from \"src/auth/auth.service\";\n\n@Module({\n\tcontrollers: [RoomsController],\n\tproviders: [RoomsService, PrismaService, DtoGenService, DbUtilsService, AuthService],\n\timports: [PrismaModule],\n})\nexport class RoomsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RoomsService.html":{"url":"injectables/RoomsService.html","title":"injectable - RoomsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RoomsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/rooms.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addSongToQueue\n                            \n                            \n                                clearRoomQueue\n                            \n                            \n                                deleteRoom\n                            \n                            \n                                getCurrentSong\n                            \n                            \n                                    Async\n                                getNewRooms\n                            \n                            \n                                getRoomInfo\n                            \n                            \n                                getRoomQueue\n                            \n                            \n                                getRoomUsers\n                            \n                            \n                                joinRoom\n                            \n                            \n                                leaveRoom\n                            \n                            \n                                updateRoom\n                            \n                            \n                                updateRoomInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, dtogen: DtoGenService, dbUtils: DbUtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/rooms/rooms.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dtogen\n                                                  \n                                                        \n                                                                        DtoGenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dbUtils\n                                                  \n                                                        \n                                                                        DbUtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addSongToQueue\n                        \n                    \n                \n            \n            \n                \naddSongToQueue(roomID: string, songInfoDto: SongInfoDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.service.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                songInfoDto\n                                            \n                                                            SongInfoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         SongInfoDto[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearRoomQueue\n                        \n                    \n                \n            \n            \n                \nclearRoomQueue(roomID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.service.ts:107\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteRoom\n                        \n                    \n                \n            \n            \n                \ndeleteRoom(roomID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.service.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCurrentSong\n                        \n                    \n                \n            \n            \n                \ngetCurrentSong(roomID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.service.ts:117\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         SongInfoDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getNewRooms\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNewRooms(limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    -1\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRoomInfo\n                        \n                    \n                \n            \n            \n                \ngetRoomInfo(roomID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         RoomDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRoomQueue\n                        \n                    \n                \n            \n            \n                \ngetRoomQueue(roomID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.service.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         SongInfoDto[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRoomUsers\n                        \n                    \n                \n            \n            \n                \ngetRoomUsers(roomID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.service.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserProfileDto[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        joinRoom\n                        \n                    \n                \n            \n            \n                \njoinRoom(roomID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        leaveRoom\n                        \n                    \n                \n            \n            \n                \nleaveRoom(roomID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.service.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateRoom\n                        \n                    \n                \n            \n            \n                \nupdateRoom(roomID: string, updateRoomDto: UpdateRoomDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.service.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateRoomDto\n                                            \n                                                            UpdateRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         RoomDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateRoomInfo\n                        \n                    \n                \n            \n            \n                \nupdateRoomInfo(roomID: string, updateRoomDto: UpdateRoomDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roomID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateRoomDto\n                                            \n                                                            UpdateRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         RoomDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { RoomDto } from \"./dto/room.dto\";\nimport { UpdateRoomDto } from \"./dto/updateroomdto\";\nimport { SongInfoDto } from \"./dto/songinfo.dto\";\nimport { UserProfileDto } from \"../profile/dto/userprofile.dto\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\nimport * as PrismaTypes from \"@prisma/client\";\nimport { Prisma } from \"@prisma/client\";\nimport { DtoGenService } from \"../dto-gen/dto-gen.service\";\nimport { DbUtilsService } from \"../db-utils/db-utils.service\";\n\n@Injectable()\nexport class RoomsService {\n\tconstructor(\n\t\tprivate readonly prisma: PrismaService,\n\t\tprivate readonly dtogen: DtoGenService,\n\t\tprivate readonly dbUtils: DbUtilsService,\n\t) {}\n\n\tasync getNewRooms(limit: number = -1): Promise {\n\t\tconst r: PrismaTypes.room[] | null = await this.prisma.room.findMany({\n\t\t\torderBy: {\n\t\t\t\tdate_created: \"desc\",\n\t\t\t},\n\t\t});\n\t\tif (!r || r === null) {\n\t\t\treturn [];\n\t\t}\n\t\tconst allRooms: PrismaTypes.room[] = r;\n\n\t\tconst pr: PrismaTypes.public_room[] | null =\n\t\t\tawait this.prisma.public_room.findMany();\n\t\tif (!pr || pr === null) {\n\t\t\treturn [];\n\t\t}\n\t\tconst publicRooms: PrismaTypes.public_room[] = pr;\n\n\t\tconst rooms: PrismaTypes.room[] = [];\n\t\tfor (const room of allRooms) {\n\t\t\tif (publicRooms.find((pr) => pr.room_id === room.room_id)) {\n\t\t\t\trooms.push(room);\n\t\t\t}\n\t\t}\n\n\t\tif (limit > 0) {\n\t\t\tpublicRooms.splice(limit);\n\t\t}\n\n\t\tconst result: RoomDto[] = [];\n\t\tfor (const room of rooms) {\n\t\t\tconst roomDto = await this.dtogen.generateRoomDtoFromRoom(room);\n\t\t\tif (roomDto) {\n\t\t\t\tresult.push(roomDto);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tgetRoomInfo(roomID: string): RoomDto {\n\t\t// TODO: Implement logic to get room info\n\t\t// an an example to generate a RoomDto\n\t\t/*\n\t\tconst roomID = \"xxxx\"\n\t\tconst room = await this.dtogen.generateRoomDto(roomID);\n\t\tif (room) {\n\t\t\treturn room;\n\t\t}\n\t\t*/\n\t\treturn new RoomDto();\n\t}\n\n\tupdateRoomInfo(roomID: string, updateRoomDto: UpdateRoomDto): RoomDto {\n\t\t// TODO: Implement logic to update room info\n\t\treturn new RoomDto();\n\t}\n\n\tupdateRoom(roomID: string, updateRoomDto: UpdateRoomDto): RoomDto {\n\t\t// TODO: Implement logic to update room\n\t\treturn new RoomDto();\n\t}\n\n\tdeleteRoom(roomID: string): boolean {\n\t\t// TODO: Implement logic to delete room\n\t\treturn false;\n\t}\n\n\tjoinRoom(roomID: string): boolean {\n\t\t// TODO: Implement logic to join room\n\t\treturn false;\n\t}\n\n\tleaveRoom(roomID: string): boolean {\n\t\t// TODO: Implement logic to leave room\n\t\treturn false;\n\t}\n\n\tgetRoomUsers(roomID: string): UserProfileDto[] {\n\t\t// TODO: Implement logic to get room users\n\t\treturn [];\n\t}\n\n\tgetRoomQueue(roomID: string): SongInfoDto[] {\n\t\t// TODO: Implement logic to get room queue\n\t\treturn [];\n\t}\n\n\tclearRoomQueue(roomID: string): boolean {\n\t\t// TODO: Implement logic to clear room queue\n\t\treturn false;\n\t}\n\n\taddSongToQueue(roomID: string, songInfoDto: SongInfoDto): SongInfoDto[] {\n\t\t// TODO: Implement logic to add song to queue\n\t\treturn [];\n\t}\n\n\tgetCurrentSong(roomID: string): SongInfoDto {\n\t\t// TODO: Implement logic to get current playing song\n\t\treturn new SongInfoDto();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SongInfoDto.html":{"url":"classes/SongInfoDto.html","title":"class - SongInfoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SongInfoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/dto/songinfo.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                artists\n                            \n                            \n                                    \n                                    \n                                cover\n                            \n                            \n                                    \n                                    \n                                start_time\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        artists\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/songinfo.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/songinfo.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        start_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/songinfo.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dto/songinfo.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsArray, IsDate } from \"class-validator\";\n\nexport class SongInfoDto {\n\t@ApiProperty()\n\t@IsString()\n\ttitle: string;\n\n\t@ApiProperty({ type: [String] })\n\t@IsArray()\n\tartists: string[];\n\n\t@ApiProperty()\n\t@IsString()\n\tcover: string;\n\n\t@ApiProperty()\n\t@IsDate()\n\tstart_time: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SongInfoEntity.html":{"url":"classes/SongInfoEntity.html","title":"class - SongInfoEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SongInfoEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/entities/songinfo.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                artists\n                            \n                            \n                                    \n                                cover\n                            \n                            \n                                    \n                                start_time\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        artists\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/songinfo.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/songinfo.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        start_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Date})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/songinfo.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/entities/songinfo.entity.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\n\nexport class SongInfoEntity {\n\t@ApiProperty()\n\ttitle: string;\n\n\t@ApiProperty({ type: [String] })\n\tartists: string[];\n\n\t@ApiProperty()\n\tcover: string;\n\n\t@ApiProperty({ type: Date })\n\tstart_time: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRoomDto.html":{"url":"classes/UpdateRoomDto.html","title":"class - UpdateRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/dto/updateroomdto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(RoomDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/swagger\";\nimport { RoomDto } from \"./room.dto\";\n\nexport class UpdateRoomDto extends PartialType(RoomDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/swagger\";\nimport { CreateUserDto } from \"./create-user.dto\";\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserProfileDto.html":{"url":"classes/UpdateUserProfileDto.html","title":"class - UpdateUserProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/dto/updateuserprofile.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(UserProfileDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/swagger\";\nimport { UserProfileDto } from \"./userprofile.dto\";\n\nexport class UpdateUserProfileDto extends PartialType(UserProfileDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsInt, ValidateNested } from \"class-validator\";\n\nexport class UserDto {\n    //TBA\n    /*\n\t@ApiProperty()\n    @IsString()\n    username: string;\n\n    @ApiProperty()\n    @IsString()\n    email: string;\n\n    */\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/entities/userprofile.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                bio\n                            \n                            \n                                    \n                                current_song\n                            \n                            \n                                    \n                                fav_genres\n                            \n                            \n                                    \n                                fav_rooms\n                            \n                            \n                                    \n                                fav_songs\n                            \n                            \n                                    \n                                followers\n                            \n                            \n                                    \n                                following\n                            \n                            \n                                    \n                                links\n                            \n                            \n                                    \n                                profile_name\n                            \n                            \n                                    \n                                profile_picture_url\n                            \n                            \n                                    \n                                recent_rooms\n                            \n                            \n                                    \n                                userID\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/entities/userprofile.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        current_song\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SongInfoDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/entities/userprofile.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fav_genres\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/entities/userprofile.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fav_rooms\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/entities/userprofile.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fav_songs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/entities/userprofile.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        followers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/entities/userprofile.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        following\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/entities/userprofile.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        links\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/entities/userprofile.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        profile_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/entities/userprofile.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        profile_picture_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/entities/userprofile.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        recent_rooms\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/entities/userprofile.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/entities/userprofile.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/entities/userprofile.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { UserProfileDto } from \"../dto/userprofile.dto\";\nimport { RoomDto } from \"../../rooms/dto/room.dto\";\nimport { SongInfoDto } from \"../../rooms/dto/songinfo.dto\";\n\nexport class UserEntity {\n\t@ApiProperty()\n\tprofile_name: string;\n\n\t@ApiProperty()\n\tuserID: string;\n\n\t@ApiProperty()\n\tusername: string;\n\n\t@ApiProperty()\n\tprofile_picture_url: string;\n\n\t@ApiProperty()\n\tfollowers: {\n\t\tcount: number;\n\t\tdata: UserProfileDto[];\n\t};\n\n\t@ApiProperty()\n\tfollowing: {\n\t\tcount: number;\n\t\tdata: UserProfileDto[];\n\t};\n\n\t@ApiProperty()\n\tlinks: {\n\t\tcount: number;\n\t\tdata: string[];\n\t};\n\n\t@ApiProperty()\n\tbio: string;\n\n\t@ApiProperty()\n\tcurrent_song: SongInfoDto;\n\n\t@ApiProperty()\n\tfav_genres: {\n\t\tcount: number;\n\t\tdata: string[];\n\t};\n\n\t@ApiProperty()\n\tfav_songs: {\n\t\tcount: number;\n\t\tdata: SongInfoDto[];\n\t};\n\n\t@ApiProperty()\n\tfav_rooms: {\n\t\tcount: number;\n\t\tdata: RoomDto[];\n\t};\n\n\t@ApiProperty()\n\trecent_rooms: {\n\t\tcount: number;\n\t\tdata: RoomDto[];\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserProfileDto.html":{"url":"classes/UserProfileDto.html","title":"class - UserProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/dto/userprofile.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                bio\n                            \n                            \n                                    \n                                    \n                                    \n                                current_song\n                            \n                            \n                                    \n                                    \n                                    \n                                fav_genres\n                            \n                            \n                                    \n                                    \n                                    \n                                fav_rooms\n                            \n                            \n                                    \n                                    \n                                    \n                                fav_songs\n                            \n                            \n                                    \n                                    \n                                    \n                                followers\n                            \n                            \n                                    \n                                    \n                                    \n                                following\n                            \n                            \n                                    \n                                    \n                                    \n                                links\n                            \n                            \n                                    \n                                    \n                                profile_name\n                            \n                            \n                                    \n                                    \n                                profile_picture_url\n                            \n                            \n                                    \n                                    \n                                    \n                                recent_rooms\n                            \n                            \n                                    \n                                    \n                                userID\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/dto/userprofile.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        current_song\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SongInfoDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsObject()@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/dto/userprofile.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        fav_genres\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsObject()@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/dto/userprofile.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        fav_rooms\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsObject()@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/dto/userprofile.dto.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        fav_songs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsObject()@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/dto/userprofile.dto.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        followers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsObject()@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/dto/userprofile.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        following\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsObject()@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/dto/userprofile.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        links\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsObject()@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/dto/userprofile.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        profile_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/dto/userprofile.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        profile_picture_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/dto/userprofile.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        recent_rooms\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsObject()@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/dto/userprofile.dto.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/dto/userprofile.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/profile/dto/userprofile.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, ValidateNested, IsObject } from \"class-validator\";\nimport { RoomDto } from \"src/modules/rooms/dto/room.dto\";\nimport { SongInfoDto } from \"src/modules/rooms/dto/songinfo.dto\";\n\nexport class UserProfileDto {\n\t@ApiProperty()\n\t@IsString()\n\tprofile_name: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tuserID: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tusername: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tprofile_picture_url: string;\n\n\t@ApiProperty()\n\t@IsObject()\n\t@ValidateNested()\n\tfollowers: {\n\t\tcount: number;\n\t\tdata: UserProfileDto[];\n\t};\n\n\t@ApiProperty()\n\t@IsObject()\n\t@ValidateNested()\n\tfollowing: {\n\t\tcount: number;\n\t\tdata: UserProfileDto[];\n\t};\n\n\t@ApiProperty()\n\t@IsObject()\n\t@ValidateNested()\n\tlinks: {\n\t\tcount: number;\n\t\tdata: string[];\n\t};\n\n\t@ApiProperty()\n\t@IsString()\n\tbio: string;\n\n\t@ApiProperty()\n\t@IsObject()\n\t@ValidateNested()\n\tcurrent_song: SongInfoDto;\n\n\t@ApiProperty()\n\t@IsObject()\n\t@ValidateNested()\n\tfav_genres: {\n\t\tcount: number;\n\t\tdata: string[];\n\t};\n\n\t@ApiProperty()\n\t@IsObject()\n\t@ValidateNested()\n\tfav_songs: {\n\t\tcount: number;\n\t\tdata: SongInfoDto[];\n\t};\n\n\t@ApiProperty()\n\t@IsObject()\n\t@ValidateNested()\n\tfav_rooms: {\n\t\tcount: number;\n\t\tdata: RoomDto[];\n\t};\n\n\t@ApiProperty()\n\t@IsObject()\n\t@ValidateNested()\n\trecent_rooms: {\n\t\tcount: number;\n\t\tdata: RoomDto[];\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                createRoom\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getFollowers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getFollowing\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getRecentRooms\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getRecommendedRooms\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getUserFriends\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                getUserInfo\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getUserRooms\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                updateProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                updateUserProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        createRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRoom(req: any, createRoomDto: CreateRoomDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Post('rooms')@ApiTags('users')@ApiOperation({summary: 'Create a new room'})@ApiParam({name: 'none'})@ApiOkResponse({description: 'The newly created room as a RoomDto.', type: RoomDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:153\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createRoomDto\n                                            \n                                                            CreateRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getFollowers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFollowers(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get('followers')@ApiTags('users')@ApiOperation({summary: 'Get a user's followers'})@ApiParam({name: 'none'})@ApiOkResponse({description: 'The user's followers as an array of UserProfileDto.', type: UserProfileDto, isArray: true})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:220\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getFollowing\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFollowing(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get('following')@ApiTags('users')@ApiOperation({summary: 'Get a user's following'})@ApiParam({name: 'none'})@ApiOkResponse({description: 'The user's following as an array of UserProfileDto.', type: UserProfileDto, isArray: true})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:236\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getRecentRooms\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRecentRooms(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get('rooms/recent')@ApiTags('users')@ApiOperation({summary: 'Get a user's recent rooms'})@ApiParam({name: 'none'})@ApiOkResponse({description: 'The user's recent rooms as an array of RoomDto.', type: RoomDto, isArray: true})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:172\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getRecommendedRooms\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRecommendedRooms(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get('rooms/foryou')@ApiTags('users')@ApiOperation({summary: 'Get a user's recommended rooms'})@ApiParam({name: 'none'})@ApiOkResponse({description: 'The user's recommended rooms as an array of RoomDto.', type: RoomDto, isArray: true})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:188\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getUserFriends\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserFriends(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get('friends')@ApiTags('users')@ApiOperation({summary: 'Get a user's friends'})@ApiParam({name: 'none'})@ApiOkResponse({description: 'The user's friends as an array of UserProfileDto.', type: UserProfileDto, isArray: true})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:204\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        getUserInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserInfo(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get()@ApiTags('users')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getUserRooms\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRooms(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get('rooms')@ApiTags('users')@ApiOperation({summary: 'Get a user's rooms'})@ApiParam({name: 'none'})@ApiOkResponse({description: 'The user's rooms as an array of RoomDto.', type: RoomDto, isArray: true})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:138\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(req: any, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Put()@ApiTags('users')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:120\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        updateUserProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserProfile(req: any, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Patch()@ApiTags('users')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n\tController,\n\tGet,\n\tPost,\n\tBody,\n\tPatch,\n\tPut,\n\tUseGuards,\n\tRequest,\n\tHttpException,\n} from \"@nestjs/common\";\nimport { UsersService } from \"./users.service\";\nimport { UpdateUserDto } from \"./dto/update-user.dto\";\nimport {\n\tApiBearerAuth,\n\tApiOkResponse,\n\tApiOperation,\n\tApiParam,\n\tApiTags,\n} from \"@nestjs/swagger\";\nimport { UserDto } from \"./dto/user.dto\";\nimport { RoomDto } from \"../rooms/dto/room.dto\";\nimport { CreateRoomDto } from \"../rooms/dto/createroomdto\";\nimport { UserProfileDto } from \"../profile/dto/userprofile.dto\";\nimport { JwtAuthGuard } from \"./../../auth/jwt-auth.guard\";\nimport { DbUtilsService } from \"../db-utils/db-utils.service\";\nimport { DtoGenService } from \"../dto-gen/dto-gen.service\";\nimport { AuthService, JWTPayload } from \"src/auth/auth.service\";\n\n@ApiTags(\"users\")\n@Controller(\"users\")\nexport class UsersController {\n\tconstructor(\n\t\tprivate readonly usersService: UsersService,\n\t\tprivate readonly dbUtils: DbUtilsService,\n\t\tprivate readonly dtogen: DtoGenService,\n\t\tprivate readonly auth: AuthService,\n\t) {}\n\n\t//basic CRUD operations on the users table\n\t/*\n\t@Post()\n\tcreate(@Body() createUserDto: CreateUserDto) {\n\t\treturn this.usersService.create(createUserDto);\n\t}\n\n\t@Get()\n\tfindAll() {\n\t\treturn this.usersService.findAll();\n\t}\n\n\t@Get(\":id\")\n\tfindOne(@Param(\"id\") id: string) {\n\t\treturn this.usersService.findOne(id);\n\t}\n\n\t@Patch(\":id\")\n\tupdate(@Param(\"id\") id: string, @Body() updateUserDto: UpdateUserDto) {\n\t\tconst result = this.usersService.update(id, updateUserDto);\n\t\tconsole.log(result);\n\t\treturn result;\n\t}\n\n\t@Delete(\":id\")\n\tremove(@Param(\"id\") id: string) {\n\t\treturn this.usersService.remove(id);\n\t}\n  */\n\n\t/*\n    GET /users\n    gets user info\n    no input\n    response: return UserDto\n  */\n\t@ApiBearerAuth()\n\t@UseGuards(JwtAuthGuard)\n\t@Get()\n\t@ApiTags(\"users\")\n\tgetUserInfo(@Request() req: any): UserDto {\n\t\t//try to get sub, username & email back from JWT token\n\t\tconsole.log(\"1\");\n\t\tconsole.log(\"2\", req);\n\t\tconsole.log(\"3\", req.user);\n\t\t//req.user\n\t\t/*\n\t\t{\n\t\t\tuserId: '311ce2e8-8041-70bd-0ab5-be97283ee182',\n\t\t\tusername: 'bigdaddy'\n\t\t}\n\t\t*/\n\t\tconsole.log(\"4\", req.user.sub);\n\t\tconsole.log(\"5\", req.user.username);\n\t\tconsole.log(\"6\", req.user.email);\n\n\t\treturn this.usersService.getUserInfo();\n\t}\n\n\t/*\n    PUT/PATCH /users\n    user profile info\n    input: UserDto\n    response: return updated UserDto\n  */\n\t@ApiBearerAuth()\n\t@UseGuards(JwtAuthGuard)\n\t@Patch()\n\t@ApiTags(\"users\")\n\tupdateUserProfile(\n\t\t@Request() req: any,\n\t\t@Body() updateUserDto: UpdateUserDto,\n\t): UserDto {\n\t\treturn this.usersService.updateUserProfile(updateUserDto);\n\t}\n\n\t@ApiBearerAuth()\n\t@UseGuards(JwtAuthGuard)\n\t@Put()\n\t@ApiTags(\"users\")\n\tupdateProfile(\n\t\t@Request() req: any,\n\t\t@Body() updateUserDto: UpdateUserDto,\n\t): UserDto {\n\t\treturn this.usersService.updateProfile(updateUserDto);\n\t}\n\n\t@ApiBearerAuth()\n\t@UseGuards(JwtAuthGuard)\n\t@Get(\"rooms\")\n\t@ApiTags(\"users\")\n\t@ApiOperation({ summary: \"Get a user's rooms\" })\n\t@ApiParam({ name: \"none\" })\n\t@ApiOkResponse({\n\t\tdescription: \"The user's rooms as an array of RoomDto.\",\n\t\ttype: RoomDto,\n\t\tisArray: true,\n\t})\n\tasync getUserRooms(@Request() req: any): Promise {\n\t\tconst userInfo: JWTPayload = this.auth.getUserInfo(req);\n\t\treturn await this.usersService.getUserRooms(userInfo.id);\n\t}\n\n\t@ApiBearerAuth()\n\t@UseGuards(JwtAuthGuard)\n\t@Post(\"rooms\")\n\t@ApiTags(\"users\")\n\t@ApiOperation({ summary: \"Create a new room\" })\n\t@ApiParam({ name: \"none\" })\n\t@ApiOkResponse({\n\t\tdescription: \"The newly created room as a RoomDto.\",\n\t\ttype: RoomDto,\n\t})\n\tasync createRoom(\n\t\t@Request() req: any,\n\t\t@Body() createRoomDto: CreateRoomDto,\n\t): Promise {\n\t\tconst userInfo: JWTPayload = this.auth.getUserInfo(req);\n\t\treturn await this.usersService.createRoom(createRoomDto, userInfo.id);\n\t}\n\n\t@ApiBearerAuth()\n\t@UseGuards(JwtAuthGuard)\n\t@Get(\"rooms/recent\")\n\t@ApiTags(\"users\")\n\t@ApiOperation({ summary: \"Get a user's recent rooms\" })\n\t@ApiParam({ name: \"none\" })\n\t@ApiOkResponse({\n\t\tdescription: \"The user's recent rooms as an array of RoomDto.\",\n\t\ttype: RoomDto,\n\t\tisArray: true,\n\t})\n\tasync getRecentRooms(@Request() req: any): Promise {\n\t\tconst userInfo: JWTPayload = this.auth.getUserInfo(req);\n\t\treturn await this.usersService.getRecentRooms(userInfo.id);\n\t}\n\n\t@ApiBearerAuth()\n\t@UseGuards(JwtAuthGuard)\n\t@Get(\"rooms/foryou\")\n\t@ApiTags(\"users\")\n\t@ApiOperation({ summary: \"Get a user's recommended rooms\" })\n\t@ApiParam({ name: \"none\" })\n\t@ApiOkResponse({\n\t\tdescription: \"The user's recommended rooms as an array of RoomDto.\",\n\t\ttype: RoomDto,\n\t\tisArray: true,\n\t})\n\tasync getRecommendedRooms(@Request() req: any): Promise {\n\t\tconst userInfo: JWTPayload = this.auth.getUserInfo(req);\n\t\treturn await this.usersService.getRecommendedRooms(userInfo.id);\n\t}\n\n\t@ApiBearerAuth()\n\t@UseGuards(JwtAuthGuard)\n\t@Get(\"friends\")\n\t@ApiTags(\"users\")\n\t@ApiOperation({ summary: \"Get a user's friends\" })\n\t@ApiParam({ name: \"none\" })\n\t@ApiOkResponse({\n\t\tdescription: \"The user's friends as an array of UserProfileDto.\",\n\t\ttype: UserProfileDto,\n\t\tisArray: true,\n\t})\n\tasync getUserFriends(@Request() req: any): Promise {\n\t\tconst userInfo: JWTPayload = this.auth.getUserInfo(req);\n\t\treturn await this.usersService.getUserFriends(userInfo.id);\n\t}\n\n\t@ApiBearerAuth()\n\t@UseGuards(JwtAuthGuard)\n\t@Get(\"followers\")\n\t@ApiTags(\"users\")\n\t@ApiOperation({ summary: \"Get a user's followers\" })\n\t@ApiParam({ name: \"none\" })\n\t@ApiOkResponse({\n\t\tdescription: \"The user's followers as an array of UserProfileDto.\",\n\t\ttype: UserProfileDto,\n\t\tisArray: true,\n\t})\n\tasync getFollowers(@Request() req: any): Promise {\n\t\tconst userInfo: JWTPayload = this.auth.getUserInfo(req);\n\t\treturn await this.usersService.getFollowers(userInfo.id);\n\t}\n\n\t@ApiBearerAuth()\n\t@UseGuards(JwtAuthGuard)\n\t@Get(\"following\")\n\t@ApiTags(\"users\")\n\t@ApiOperation({ summary: \"Get a user's following\" })\n\t@ApiParam({ name: \"none\" })\n\t@ApiOkResponse({\n\t\tdescription: \"The user's following as an array of UserProfileDto.\",\n\t\ttype: UserProfileDto,\n\t\tisArray: true,\n\t})\n\tasync getFollowing(@Request() req: any): Promise {\n\t\tconst userInfo: JWTPayload = this.auth.getUserInfo(req);\n\t\treturn await this.usersService.getFollowing(userInfo.id);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nUsersModule -->\n\nAuthService->UsersModule\n\n\n\n\n\nDbUtilsService\n\nDbUtilsService\n\nUsersModule -->\n\nDbUtilsService->UsersModule\n\n\n\n\n\nDtoGenService\n\nDtoGenService\n\nUsersModule -->\n\nDtoGenService->UsersModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nUsersModule -->\n\nPrismaService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            DbUtilsService\n                        \n                        \n                            DtoGenService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { UsersController } from \"./users.controller\";\nimport { UsersService } from \"./users.service\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\nimport { PrismaModule } from \"../../../prisma/prisma.module\";\nimport { DtoGenService } from \"../dto-gen/dto-gen.service\";\nimport { DbUtilsService } from \"../db-utils/db-utils.service\";\nimport { AuthService } from \"src/auth/auth.service\";\n\n@Module({\n\timports: [PrismaModule],\n\tcontrollers: [UsersController],\n\tproviders: [UsersService, PrismaService, DtoGenService, DbUtilsService, AuthService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                createRoom\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                getFollowers\n                            \n                            \n                                    Async\n                                getFollowing\n                            \n                            \n                                    Async\n                                getRecentRooms\n                            \n                            \n                                    Async\n                                getRecommendedRooms\n                            \n                            \n                                    Async\n                                getUserFriends\n                            \n                            \n                                getUserInfo\n                            \n                            \n                                    Async\n                                getUserRooms\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                            \n                                updateProfile\n                            \n                            \n                                updateUserProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, dbUtils: DbUtilsService, dtogen: DtoGenService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/users.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dbUtils\n                                                  \n                                                        \n                                                                        DbUtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dtogen\n                                                  \n                                                        \n                                                                        DtoGenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRoom(createRoomDto: CreateRoomDto, userID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createRoomDto\n                                            \n                                                            CreateRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(userID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getFollowers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFollowers(userID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:305\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getFollowing\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFollowing(userID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:321\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRecentRooms\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRecentRooms(userID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:207\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRecommendedRooms\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRecommendedRooms(userID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:266\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserFriends\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserFriends(userID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:285\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserInfo\n                        \n                    \n                \n            \n            \n                \ngetUserInfo()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         UserDto\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserRooms\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRooms(userID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(userID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(userID: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateProfile\n                        \n                    \n                \n            \n            \n                \nupdateProfile(updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateUserProfile\n                        \n                    \n                \n            \n            \n                \nupdateUserProfile(updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         UserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\nimport * as PrismaTypes from \"@prisma/client\";\nimport { Prisma } from \"@prisma/client\";\nimport { CreateUserDto } from \"./dto/create-user.dto\";\nimport { UpdateUserDto } from \"./dto/update-user.dto\";\nimport { UserDto } from \"./dto/user.dto\";\nimport { CreateRoomDto } from \"../rooms/dto/createroomdto\";\nimport { UserProfileDto } from \"../profile/dto/userprofile.dto\";\nimport { RoomDto } from \"../rooms/dto/room.dto\";\nimport { DbUtilsService } from \"../db-utils/db-utils.service\";\nimport { DtoGenService } from \"../dto-gen/dto-gen.service\";\n\n@Injectable()\nexport class UsersService {\n\tconstructor(\n\t\tprivate readonly prisma: PrismaService,\n\t\tprivate readonly dbUtils: DbUtilsService,\n\t\tprivate readonly dtogen: DtoGenService,\n\t) {}\n\n\tcreate(createUserDto: CreateUserDto) {\n\t\tconst user: Prisma.usersCreateInput = {\n\t\t\tuser_id: createUserDto.userID,\n\t\t\tusername: createUserDto.username,\n\t\t\tbio: createUserDto.bio,\n\t\t\tprofile_picture: createUserDto.profile_picture,\n\t\t\tactivity: createUserDto.activity,\n\t\t\tpreferences: createUserDto.preferences,\n\t\t};\n\t\treturn this.prisma.users.create({ data: user });\n\t}\n\n\tfindAll() {\n\t\treturn this.prisma.users.findMany();\n\t}\n\n\tfindOne(userID: string) {\n\t\treturn this.prisma.users.findUnique({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\t}\n\n\tupdate(userID: string, updateUserDto: UpdateUserDto) {\n\t\tconsole.log(updateUserDto);\n\t\tconst user: Prisma.usersUpdateInput = {};\n\t\tif (updateUserDto.username) user.username = updateUserDto.username;\n\t\tif (updateUserDto.bio) user.bio = updateUserDto.bio;\n\t\tif (updateUserDto.profile_picture)\n\t\t\tuser.profile_picture = updateUserDto.profile_picture;\n\t\tif (updateUserDto.activity) user.activity = updateUserDto.activity;\n\t\tif (updateUserDto.preferences) user.preferences = updateUserDto.preferences;\n\t\tconsole.log(user);\n\t\treturn this.prisma.users.update({\n\t\t\twhere: { user_id: userID },\n\t\t\tdata: user,\n\t\t});\n\t}\n\n\tremove(userID: string) {\n\t\treturn this.prisma.users.delete({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\t}\n\n\tgetUserInfo(): UserDto {\n\t\t// implementation goes here\n\t\treturn new UserDto();\n\t}\n\n\tupdateUserProfile(updateUserDto: UpdateUserDto): UserDto {\n\t\t// implementation goes here\n\t\treturn new UserDto();\n\t}\n\n\tupdateProfile(updateUserDto: UpdateUserDto): UserDto {\n\t\t// implementation goes here\n\t\treturn new UserDto();\n\t}\n\n\tasync getUserRooms(userID: string): Promise {\n\t\t// implementation goes here\n\t\tconst user = await this.prisma.users.findUnique({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\n\t\tif (!user) {\n\t\t\tthrow new Error(\"User does not exist\");\n\t\t}\n\n\t\tconst rooms = await this.prisma.room.findMany({\n\t\t\twhere: { room_creator: userID },\n\t\t});\n\n\t\tif (!rooms) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst ids: string[] = rooms.map((room) => room.room_id);\n\t\tconst r = await this.dtogen.generateMultipleRoomDto(ids);\n\t\tif (!r || r === null) {\n\t\t\tthrow new Error(\n\t\t\t\t\"An unknown error occurred while generating RoomDto for user rooms (getUserRooms). Received null.\",\n\t\t\t);\n\t\t}\n\t\treturn r;\n\t}\n\n\tasync createRoom(\n\t\tcreateRoomDto: CreateRoomDto,\n\t\tuserID: string,\n\t): Promise {\n\t\tconst newRoom: Prisma.roomCreateInput = {\n\t\t\tname: createRoomDto.room_name || \"Untitled Room\",\n\n\t\t\t//foreign key relation for 'room_creator'\n\t\t\tusers: {\n\t\t\t\tconnect: {\n\t\t\t\t\tuser_id: userID,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tif (createRoomDto.description)\n\t\t\tnewRoom.description = createRoomDto.description;\n\t\tif (createRoomDto.is_temporary)\n\t\t\tnewRoom.is_temporary = createRoomDto.is_temporary;\n\n\t\t/*\n\t\tif (createRoomDto.language) newRoom.language = createRoomDto.language;\n\t\t*/\n\t\tif (createRoomDto.has_explicit_content)\n\t\t\tnewRoom.explicit = createRoomDto.has_explicit_content;\n\t\tif (createRoomDto.has_nsfw_content)\n\t\t\tnewRoom.nsfw = createRoomDto.has_nsfw_content;\n\t\tif (createRoomDto.room_image)\n\t\t\tnewRoom.playlist_photo = createRoomDto.room_image;\n\n\t\t/*\n\t\tif (createRoomDto.current_song)\n\t\t\tnewRoom.current_song = createRoomDto.current_song;\n\t\t*/\n\n\t\tconst room: PrismaTypes.room | null = await this.prisma.room.create({\n\t\t\tdata: newRoom,\n\t\t});\n\t\tif (!room) {\n\t\t\tthrow new Error(\"Something went wrong while creating the room\");\n\t\t}\n\n\t\t//for is_private, we will need to add the roomID to the private_room tbale\n\t\tif (createRoomDto.is_private) {\n\t\t\tconst privRoom: Prisma.private_roomCreateInput = {\n\t\t\t\troom: {\n\t\t\t\t\tconnect: {\n\t\t\t\t\t\troom_id: room.room_id,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst privRoomResult = await this.prisma.private_room.create({\n\t\t\t\tdata: privRoom,\n\t\t\t});\n\t\t\tif (!privRoomResult || privRoomResult === null) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"An unknown error occurred while creating private room. Received null.\",\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tconst pubRoom: Prisma.public_roomCreateInput = {\n\t\t\t\troom: {\n\t\t\t\t\tconnect: {\n\t\t\t\t\t\troom_id: room.room_id,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst pubRoomResult = await this.prisma.public_room.create({\n\t\t\t\tdata: pubRoom,\n\t\t\t});\n\t\t\tif (!pubRoomResult || pubRoomResult === null) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"An unknown error occurred while creating public room. Received null.\",\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t//TODO: implement scheduled room creation\n\t\t/*\n\t\tif (createRoomDto.start_date) newRoom.start_date = createRoomDto.start_date;\n\t\tif (createRoomDto.end_date) newRoom.end_date = createRoomDto.end_date;\t\t\n\t\tif (createRoomDto.is_scheduled) {\n\t\t\tnewRoom.\n\t\t\t\tconnect: {\n\t\t\t\t\troomID: createRoomDto.roomID,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\t\t*/\n\n\t\tconst result = await this.dtogen.generateRoomDtoFromRoom(room);\n\t\tif (!result) {\n\t\t\tthrow new Error(\n\t\t\t\t\"An unknown error occurred while generating RoomDto for created room. Received null.\",\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync getRecentRooms(userID: string): Promise {\n\t\t/*\n\t\tactivity field in users table is modelled as:\n\t\t\"{\"recent_rooms\": [\"0352e8b8-e987-4dc9-a379-dc68b541e24f\", \"497d8138-13d2-49c9-808d-287b447448e8\", \"376578dd-9ef6-41cb-a9f6-2ded47e22c84\", \"62560ae5-9236-490c-8c75-c234678dc346\"]}\"\n\t\t*/\n\t\t// get the recent rooms from the user's activity field\n\t\tconst u = await this.prisma.users.findUnique({\n\t\t\twhere: { user_id: userID },\n\t\t});\n\n\t\tif (!u || u === null) {\n\t\t\tthrow new Error(\"User does not exist\");\n\t\t}\n\n\t\tconst user: PrismaTypes.users = u;\n\t\tconst activity: Prisma.JsonValue = user.activity;\n\t\tconsole.log(user);\n\t\tconsole.log(activity);\n\t\tif (!activity || activity === null) {\n\t\t\treturn [];\n\t\t}\n\n\t\tif (typeof activity !== \"object\") {\n\t\t\tthrow new Error(\n\t\t\t\t\"An unknown error occurred while parsing the 'activity' field in 'users'. Expected object, received \" +\n\t\t\t\t\ttypeof activity,\n\t\t\t);\n\t\t}\n\n\t\t//if (!\"recent_rooms\" in activity) {\n\t\tif (!(\"recent_rooms\" in activity)) {\n\t\t\treturn [];\n\t\t}\n\n\t\ttry {\n\t\t\tconst recentRooms: string[] = activity[\"recent_rooms\"] as string[];\n\t\t\tfor (const roomID of recentRooms) {\n\t\t\t\tif (typeof roomID !== \"string\") {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\"An unknown error occurred while parsing the 'recent_rooms' field in 'activity'. Expected string[], received \" +\n\t\t\t\t\t\t\ttypeof roomID,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst r = await this.dtogen.generateMultipleRoomDto(recentRooms);\n\t\t\tif (!r || r === null) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"An unknown error occurred while generating RoomDto for recent rooms. Received null.\",\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn r;\n\t\t} catch (e) {\n\t\t\tthrow new Error(\n\t\t\t\t\"An unknown error occurred while parsing the 'recent_rooms' field in 'activity'. Expected string[], received \" +\n\t\t\t\t\ttypeof activity[\"recent_rooms\"],\n\t\t\t);\n\t\t}\n\t}\n\n\tasync getRecommendedRooms(userID: string): Promise {\n\t\t//TODO: implement recommendation algorithm\n\t\tconst r = await this.dbUtils.getRandomRooms(5);\n\t\tif (!r || r === null) {\n\t\t\tthrow new Error(\n\t\t\t\t\"An unknown error occurred while generating RoomDto for recommended rooms. Received null.\",\n\t\t\t);\n\t\t}\n\t\tconst rooms: PrismaTypes.room[] = r;\n\t\tconst ids: string[] = rooms.map((room) => room.room_id);\n\t\tconst recommends = await this.dtogen.generateMultipleRoomDto(ids);\n\t\tif (!recommends || recommends === null) {\n\t\t\tthrow new Error(\n\t\t\t\t\"An unknown error occurred while generating RoomDto for recommended rooms. Received null.\",\n\t\t\t);\n\t\t}\n\t\treturn recommends;\n\t}\n\n\tasync getUserFriends(userID: string): Promise {\n\t\tconst f = await this.prisma.friends.findMany({\n\t\t\twhere: { OR: [{ friend1: userID }, { friend2: userID }] },\n\t\t});\n\t\tif (!f) {\n\t\t\treturn [];\n\t\t}\n\t\tconst friends: PrismaTypes.friends[] = f;\n\t\tconst ids: string[] = [];\n\t\tfor (const friend of friends) {\n\t\t\tif (friend.friend1 === userID) {\n\t\t\t\tids.push(friend.friend2);\n\t\t\t} else {\n\t\t\t\tids.push(friend.friend1);\n\t\t\t}\n\t\t}\n\t\tconst r = await this.dtogen.generateMultipleUserProfileDto(ids);\n\t\treturn r;\n\t}\n\n\tasync getFollowers(userID: string): Promise {\n\t\tconst f = await this.dbUtils.getUserFollowers(userID);\n\t\tif (!f) {\n\t\t\treturn [];\n\t\t}\n\t\tconst followers: PrismaTypes.users[] = f;\n\t\tconst ids: string[] = followers.map((follower) => follower.user_id);\n\t\tconst result = await this.dtogen.generateMultipleUserProfileDto(ids);\n\t\tif (!result) {\n\t\t\tthrow new Error(\n\t\t\t\t\"An unknown error occurred while generating UserProfileDto for followers. Received null.\",\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync getFollowing(userID: string): Promise {\n\t\tconst following = await this.dbUtils.getUserFollowing(userID);\n\t\tif (!following) {\n\t\t\treturn [];\n\t\t}\n\t\tconst followees: PrismaTypes.users[] = following;\n\t\tconst ids: string[] = followees.map((followee) => followee.user_id);\n\t\tconst result = await this.dtogen.generateMultipleUserProfileDto(ids);\n\t\tif (!result) {\n\t\t\tthrow new Error(\n\t\t\t\t\"An unknown error occurred while generating UserProfileDto for following. Received null.\",\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            class\n            LoginBody\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            class\n            RegisterBody\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            module\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/db-utils/db-utils.service.ts\n            \n            injectable\n            DbUtilsService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/dto-gen/dto-gen.service.ts\n            \n            injectable\n            DtoGenService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/profile/dto/updateuserprofile.dto.ts\n            \n            class\n            UpdateUserProfileDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/profile/dto/userprofile.dto.ts\n            \n            class\n            UserProfileDto\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/modules/profile/entities/userprofile.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/modules/profile/profile.controller.ts\n            \n            controller\n            ProfileController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/profile/profile.service.ts\n            \n            injectable\n            ProfileService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/rooms/dto/createroomdto.ts\n            \n            class\n            CreateRoomDto\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/modules/rooms/dto/room.dto.ts\n            \n            class\n            RoomDto\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/modules/rooms/dto/songinfo.dto.ts\n            \n            class\n            SongInfoDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/rooms/dto/updateroomdto.ts\n            \n            class\n            UpdateRoomDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/rooms/entities/room.entity.ts\n            \n            class\n            RoomEntity\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/modules/rooms/entities/songinfo.entity.ts\n            \n            class\n            SongInfoEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/rooms/rooms.controller.ts\n            \n            controller\n            RoomsController\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/modules/rooms/rooms.service.ts\n            \n            injectable\n            RoomsService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/modules/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/modules/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/dto/user.dto.ts\n            \n            class\n            UserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/entities/user.entity.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/modules/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/17)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @aws-sdk/client-cognito-identity-provider : ^3.592.0\n        \n            @aws-sdk/credential-providers : ^3.592.0\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.1\n        \n            @prisma/client : ^5.15.0\n        \n            aws-jwt-verify : ^4.0.1\n        \n            aws-sdk : ^2.1637.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DbUtilsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DtoGenModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProfileModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RoomsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_DbUtilsModule\n\n\n\ncluster_DbUtilsModule_exports\n\n\n\ncluster_DtoGenModule\n\n\n\ncluster_DtoGenModule_exports\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_providers\n\n\n\ncluster_RoomsModule\n\n\n\ncluster_RoomsModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDbUtilsModule\n\nDbUtilsModule\n\nAppModule -->\n\nDbUtilsModule->AppModule\n\n\n\n\n\nDbUtilsService \n\nDbUtilsService \n\nDbUtilsService  -->\n\nDbUtilsModule->DbUtilsService \n\n\n\n\n\nDtoGenModule\n\nDtoGenModule\n\nAppModule -->\n\nDtoGenModule->AppModule\n\n\n\n\n\nDtoGenService \n\nDtoGenService \n\nDtoGenService  -->\n\nDtoGenModule->DtoGenService \n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\nDbUtilsModule -->\n\nPrismaModule->DbUtilsModule\n\n\n\nDtoGenModule -->\n\nPrismaModule->DtoGenModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nProfileModule -->\n\nPrismaModule->ProfileModule\n\n\n\n\n\nRoomsModule\n\nRoomsModule\n\nRoomsModule -->\n\nPrismaModule->RoomsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\nAppModule -->\n\nRoomsModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nDbUtilsService\n\nDbUtilsService\n\nAuthModule -->\n\nDbUtilsService->AuthModule\n\n\n\nDbUtilsModule -->\n\nDbUtilsService->DbUtilsModule\n\n\n\nDtoGenModule -->\n\nDbUtilsService->DtoGenModule\n\n\n\nProfileModule -->\n\nDbUtilsService->ProfileModule\n\n\n\nRoomsModule -->\n\nDbUtilsService->RoomsModule\n\n\n\nUsersModule -->\n\nDbUtilsService->UsersModule\n\n\n\nAppModule -->\n\nDbUtilsService->AppModule\n\n\n\n\n\nDtoGenService\n\nDtoGenService\n\nAuthModule -->\n\nDtoGenService->AuthModule\n\n\n\nDtoGenModule -->\n\nDtoGenService->DtoGenModule\n\n\n\nProfileModule -->\n\nDtoGenService->ProfileModule\n\n\n\nRoomsModule -->\n\nDtoGenService->RoomsModule\n\n\n\nUsersModule -->\n\nDtoGenService->UsersModule\n\n\n\nAppModule -->\n\nDtoGenService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\nProfileModule -->\n\nAuthService->ProfileModule\n\n\n\nRoomsModule -->\n\nAuthService->RoomsModule\n\n\n\nUsersModule -->\n\nAuthService->UsersModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAuthModule -->\n\nPrismaService->AuthModule\n\n\n\nDbUtilsModule -->\n\nPrismaService->DbUtilsModule\n\n\n\nDtoGenModule -->\n\nPrismaService->DtoGenModule\n\n\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\nProfileModule -->\n\nPrismaService->ProfileModule\n\n\n\nRoomsModule -->\n\nPrismaService->RoomsModule\n\n\n\nUsersModule -->\n\nPrismaService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\nRoomsService\n\nRoomsService\n\nRoomsModule -->\n\nRoomsService->RoomsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    15 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CognitoDecodedToken   (src/.../auth.service.ts)\n                        \n                        \n                            JWTPayload   (src/.../auth.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.service.ts\n    \n    \n        \n            \n                \n                    \n                    CognitoDecodedToken\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JWTPayload\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            module   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        module\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
