// tasks.processor.ts
import { Processor, Process } from "@nestjs/bull";
import { Job } from "bull";
import { SpotifyTokenPair } from "../auth/spotify/spotifyauth.service";
import { SpotifyService } from "../spotify/spotify.service";
import { Prisma } from "@prisma/client";
// import * as PrismaTypes from "@prisma/client";
import * as Spotify from "@spotify/web-api-ts-sdk";
import { PrismaService } from "../../prisma/prisma.service";

@Processor("task-queue")
export class TasksProcessor {
	constructor(
		private readonly spotifyService: SpotifyService,
		private readonly prisma: PrismaService,
	) {}

	@Process("process-task")
	async handleTask(job: Job) {
		console.log("Processing task:", job.data);
		// Your background task processing logic here
	}

	@Process("import-library")
	async importUserLibrary(job: Job) {
		console.log("Importing user library:", job.data);
		const tk: SpotifyTokenPair = job.data.token;
		const userID: string = job.data.user_id;

		if (new Date().getTime() > tk.epoch_expiry) {
			throw new Error("Token has expired");
		}

		//const playlists = await this.spotifyService.getUserPlaylists(tk);
		const likedSongs = await this.spotifyService.getAllLikedSongs(tk);

		const dbLikedSongs: Prisma.songCreateInput[] = [];
		const existingSongs: Spotify.SavedTrack[] = [];
		for (const track of likedSongs) {
			// const audioFeatures: Spotify.AudioFeatures =
			// 	await this.spotifyService.getAudioFeatures(tk.tokens, track.track.id);
			const song: Prisma.songCreateInput = {
				name: track.track.name,
				duration: track.track.duration_ms,
				artists: track.track.artists.map((artist) => artist.name),
				genre:
					track.track.album.genres && track.track.album.genres.length > 0
						? track.track.album.genres[0]
						: "Unknown",
				// audio_features: JSON.stringify(audioFeatures),
				audio_features: {},
				spotify_id: track.track.id,
			};

			const search = await this.prisma.song.findFirst({
				where: {
					spotify_id: song.spotify_id,
				},
			});

			if (search) {
				existingSongs.push(track);
			} else {
				dbLikedSongs.push(song);
			}
		}

		const ids: string[] = [];
		// for (const track of existingSongs) {
		// 	const song: PrismaTypes.song | null = await this.spotifyService.findSavedSongInDB(track);
		// 	if (song) {
		// 		dbLikedSongs.push(song);
		// 	}
		// }

		const newSongs = await this.prisma.song.createManyAndReturn({
			data: dbLikedSongs,
			skipDuplicates: true,
		});

		ids.push(...newSongs.map((song) => song.song_id));

		const likedSongsPlaylist: Prisma.playlistCreateInput = {
			name: "Liked Songs (generated by TuneIn)",
			users: {
				connect: { user_id: userID },
			},
			playlist: ids,
		};

		await this.prisma.playlist.create({
			data: likedSongsPlaylist,
		});
	}
}
