openapi: 3.0.0
paths:
  /:
    get:
      operationId: getHello
      summary: Hello World!
      parameters: []
      responses:
        '200':
          description: Hello World!
          content:
            application/json:
              schema:
                type: string
  /upload:
    post:
      operationId: uploadFile
      summary: Upload a file to our AWS S3 storage bucket
      description: >-
        This operation uploads a file to AWS S3 (the TuneIn bucket) and returns
        the URL of the uploaded file.
      externalDocs:
        description: More about file uploads via HTTP POST requests
        url: >-
          https://www.postman.com/postman/postman-answers/collection/t38ia1u/upload-a-file-via-post-request
      parameters: []
      requestBody:
        required: true
        description: A file to upload to our AWS S3 storage bucket
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: The URL of the uploaded file
          content:
            application/json:
              schema:
                type: string
      security:
        - bearer: []
        - bearer: []
  /users:
    get:
      operationId: getProfile
      summary: Get current user's profile info
      description: Get the profile info of the currently authenticated user.
      parameters: []
      responses:
        '200':
          description: Successfully returned user profile info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
      tags:
        - users
      security:
        - bearer: []
        - bearer: []
    put:
      operationId: putProfile
      summary: Update user's profile info
      description: Update the profile info of the currently authenticated user.
      parameters: []
      requestBody:
        required: true
        description: The updated user profile info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: Returns the updated user profile info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Bad request. The request body may be malformed.
      tags:
        - users
      security:
        - bearer: []
        - bearer: []
    patch:
      operationId: patchProfile
      summary: Update user's profile info
      description: Update the profile info of the currently authenticated user.
      parameters: []
      requestBody:
        required: true
        description: The updated user profile info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: Returns the updated user profile info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Bad request. The request body may be malformed.
      tags:
        - users
      security:
        - bearer: []
        - bearer: []
  /users/dms:
    get:
      operationId: getDMs
      summary: Get the last DMs sent to or received from another user
      description: Get all of the last DMs either sent to or received from another user
      parameters: []
      responses:
        '200':
          description: The last DMs as an array of DirectMessageDto.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DirectMessageDto'
      tags:
        - users
      security:
        - bearer: []
        - bearer: []
  /users/stats:
    get:
      operationId: getListeningStats
      summary: Get a user's listening stats
      description: >-
        Get the listening stats of the authenticated user, including total time
        listened, and average listening time per day, most played songs, genres,
        and artists.
      parameters: []
      responses:
        '200':
          description: The user's listening stats as a UserListeningStatsDto.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListeningStatsDto'
      tags:
        - users
      security:
        - bearer: []
        - bearer: []
  /users/rooms:
    get:
      operationId: getUserRooms
      summary: Get the user's rooms
      description: Get all of the rooms that the user created.
      parameters: []
      responses:
        '200':
          description: The user's rooms as an array of RoomDto.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomDto'
      tags:
        - users
      security:
        - bearer: []
        - bearer: []
    post:
      operationId: createRoom
      summary: Create a new room
      description: Create a new room with the given information.
      parameters: []
      requestBody:
        required: true
        description: The room to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoomDto'
      responses:
        '200':
          description: The newly created room as a RoomDto.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomDto'
      tags:
        - users
      security:
        - bearer: []
        - bearer: []
  /users/rooms/recent:
    get:
      operationId: getRecentRooms
      summary: Get a user's recent rooms
      description: Get the user's most recently visited rooms.
      parameters: []
      responses:
        '200':
          description: The user's recent rooms as an array of RoomDto.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomDto'
        '400':
          description: Invalid request parameters or missing required headers.
      tags:
        - users
      security:
        - bearer: []
        - bearer: []
  /users/rooms/foryou:
    get:
      operationId: getRecommendedRooms
      summary: Get a user's recommended rooms
      description: Get the rooms that are recommended for the user.
      parameters: []
      responses:
        '200':
          description: The user's recommended rooms as an array of RoomDto.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomDto'
      tags:
        - users
      security:
        - bearer: []
        - bearer: []
  /users/rooms/friends:
    get:
      operationId: UsersController_getRoomsFromFriends
      summary: Get rooms from friends
      parameters: []
      responses:
        '200':
          description: Rooms from friends retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomDto'
        '400':
          description: Error getting rooms from friends.
      tags:
        - users
        - users
      security:
        - bearer: []
  /users/rooms/following:
    get:
      operationId: UsersController_getRoomsFromFollowing
      summary: Get rooms from people you follow
      parameters: []
      responses:
        '200':
          description: Rooms from people you follow retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomDto'
        '400':
          description: Error getting rooms from people you follow.
      tags:
        - users
        - users
      security:
        - bearer: []
  /users/rooms/current:
    get:
      operationId: getCurrentRoom
      summary: Get a user's current room
      description: Get the room that the user is currently in.
      parameters: []
      responses:
        '200':
          description: The user's current room as a RoomDto.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomDto'
      tags:
        - users
      security:
        - bearer: []
        - bearer: []
  /users/foryou:
    get:
      operationId: UsersController_getRecommendedUsers
      summary: Get recommended users
      parameters: []
      responses:
        '200':
          description: Recommended users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
        '401':
          description: Unauthorized
      tags:
        - users
        - users
      security:
        - bearer: []
        - bearer: []
  /users/friends:
    get:
      operationId: getUserFriends
      summary: Get a user's friends
      parameters: []
      responses:
        '200':
          description: The user's friends as an array of UserDto.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
      tags:
        - users
      security:
        - bearer: []
        - bearer: []
  /users/friends/requests:
    get:
      operationId: getFriendRequests
      summary: Get a user's friend requests
      parameters: []
      responses:
        '200':
          description: The user's friend requests as an array of UserDto.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
      tags:
        - users
      security:
        - bearer: []
        - bearer: []
  /users/friends/pending:
    get:
      operationId: getPendingRequests
      summary: Get a user's sent friend requests
      parameters: []
      responses:
        '200':
          description: The user's sent friend requests as an array of UserDto.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
        '400':
          description: Error getting pending friend requests.
      tags:
        - users
        - users
      security:
        - bearer: []
  /users/friends/potential:
    get:
      operationId: UsersController_getPotentialFriends
      summary: Get potential friends for the user
      parameters: []
      responses:
        '200':
          description: The user's potential friends as an array of UserDto.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
        '400':
          description: Error getting potential friends.
      tags:
        - users
        - users
      security:
        - bearer: []
  /users/followers:
    get:
      operationId: getFollowers
      summary: Get a user's followers
      description: Get all of the users that follow the authenticated user.
      parameters: []
      responses:
        '200':
          description: The user's followers as an array of UserDto.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
      tags:
        - users
      security:
        - bearer: []
        - bearer: []
  /users/following:
    get:
      operationId: getFollowing
      summary: Get a user's following
      description: Get all of the users that the authenticated user follows.
      parameters: []
      responses:
        '200':
          description: The user's following as an array of UserDto.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
      tags:
        - users
      security:
        - bearer: []
        - bearer: []
  /users/blocked:
    get:
      operationId: getBlocked
      summary: Get blocked users
      description: Get all of the users that the authenticated user has blocked.
      parameters: []
      responses:
        '200':
          description: The user's following as an array of UserDto.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
      tags:
        - users
      security:
        - bearer: []
        - bearer: []
  /users/bookmarks:
    get:
      operationId: getBookmarks
      summary: Get the authorized user's bookmarks
      description: Get all of the rooms that the user has bookmarked.
      parameters: []
      responses:
        '200':
          description: The user's bookmarks as an array of RoomDto.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomDto'
      tags:
        - users
      security:
        - bearer: []
        - bearer: []
  /users/{username}:
    head:
      operationId: isUsernameTaken
      summary: Check if a username is taken
      description: Check if the given username is already taken.
      parameters:
        - name: username
          required: true
          in: path
          description: The username of the user to check.
          example: johndoe
          allowEmptyValue: false
          schema:
            type: string
      responses:
        '200':
          description: >-
            The username is taken and a GET request can be made to get the
            user's profile.
        '404':
          description: The username is not taken and can be used.
      tags:
        - users
      security:
        - bearer: []
        - bearer: []
    get:
      operationId: getProfileByUsername
      summary: Get user profile info by username
      description: Get the profile info of the user with the given username.
      parameters:
        - name: username
          required: true
          in: path
          description: The username of the user to fetch profile info for.
          example: johndoe
          allowEmptyValue: false
          schema:
            type: string
      responses:
        '200':
          description: Returns the user profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
      tags:
        - users
      security:
        - bearer: []
        - bearer: []
  /users/{username}/follow:
    post:
      operationId: followUser
      summary: Follow the given user
      description: Follow the user with the given username.
      parameters:
        - name: username
          required: true
          in: path
          description: The username of the user to follow.
          example: johndoe
          allowEmptyValue: false
          schema:
            type: string
      responses:
        '200':
          description: Successfully followed the user.
        '400':
          description: Error following the user.
      tags:
        - users
      security:
        - bearer: []
        - bearer: []
  /users/{username}/unfollow:
    post:
      operationId: unfollowUser
      summary: Unfollow the given user
      description: Unfollow the user with the given username.
      parameters:
        - name: username
          required: true
          in: path
          description: The username of the user to unfollow.
          example: johndoe
          allowEmptyValue: false
          schema:
            type: string
      responses:
        '200':
          description: Successfully unfollowed the user.
        '400':
          description: Error unfollowing the user.
      tags:
        - users
      security:
        - bearer: []
        - bearer: []
  /users/{username}/befriend:
    post:
      operationId: befriendUser
      summary: Send a friend request to the given user
      description: Send a friend request to the user with the given username.
      parameters:
        - name: username
          required: true
          in: path
          description: The username of the user to send a friend request to.
          example: johndoe
          allowEmptyValue: false
          schema:
            type: string
      responses:
        '200':
          description: Successfully sent friend request.
        '400':
          description: Error sending friend request.
      tags:
        - users
      security:
        - bearer: []
        - bearer: []
  /users/{username}/unfriend:
    post:
      operationId: unfriendUser
      summary: End friendship with the given user
      description: End friendship with the user with the given username.
      parameters:
        - name: username
          required: true
          in: path
          description: The username of the user to end friendship with.
          example: johndoe
          allowEmptyValue: false
          schema:
            type: string
      responses:
        '200':
          description: Successfully ended friendship.
        '400':
          description: Error ending friendship.
      tags:
        - users
      security:
        - bearer: []
        - bearer: []
  /users/{username}/accept:
    post:
      operationId: acceptFriendRequest
      summary: Accept a friend request from the given user
      description: Accept a friend request from the user with the given username.
      parameters:
        - name: username
          required: true
          in: path
          description: >-
            Our new friend. The username of the user to accept a friend request
            from.
          example: johndoe
          allowEmptyValue: false
          schema:
            type: string
      responses:
        '200':
          description: Successfully accepted friend request.
        '400':
          description: Error accepting friend request.
      tags:
        - users
      security:
        - bearer: []
        - bearer: []
  /users/{username}/reject:
    post:
      operationId: rejectFriendRequest
      summary: Reject a friend request from the given user
      description: Reject a friend request from the user with the given username.
      parameters:
        - name: username
          required: true
          in: path
          description: The username of the user whose friend request we are rejecting.
          example: johndoe
          allowEmptyValue: false
          schema:
            type: string
      responses:
        '200':
          description: Successfully rejected friend request.
        '400':
          description: Error rejecting friend request.
      tags:
        - users
      security:
        - bearer: []
        - bearer: []
  /users/{username}/cancel:
    post:
      operationId: cancelFriendRequest
      summary: Cancel a friend request to the given user
      parameters:
        - name: username
          required: true
          in: path
          description: The username of the user to cancel the friend request to.
          schema:
            type: string
      responses:
        '200':
          description: Successfully cancelled friend request.
        '400':
          description: Error cancelling friend request.
      tags:
        - users
        - users
      security:
        - bearer: []
  /users/{username}/bookmarks:
    get:
      operationId: getBookmarksByUsername
      summary: Get the authorized user's bookmarks
      description: Get all of the rooms that the user has bookmarked.
      parameters:
        - name: username
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: The user's bookmarks as an array of RoomDto.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomDto'
        '400':
          description: Username does not exist or is invalid.
      tags:
        - users
  /users/{username}/rooms/recent:
    get:
      operationId: getRecentRoomsByUsername
      summary: Get a user's recent rooms
      description: Get the user's most recently visited rooms.
      parameters:
        - name: username
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: The user's recent rooms as an array of RoomDto.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomDto'
        '400':
          description: Username does not exist or is invalid.
      tags:
        - users
      security:
        - bearer: []
        - bearer: []
  /users/{username}/dms:
    get:
      operationId: getDMsByUsername
      summary: Get the authorized user's direct messages with the given user
      description: Get all of the direct messages between the two users.
      parameters:
        - name: username
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: The user's direct messages as an array of DirectMessageDto.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DirectMessageDto'
        '400':
          description: Username does not exist or is invalid.
      tags:
        - users
      security:
        - bearer: []
        - bearer: []
  /users/{username}/rooms/current:
    get:
      operationId: UsersController_getCurrentRoomByUserId
      summary: Get a user's current room based on username
      parameters:
        - name: username
          required: true
          in: path
          description: The username of user's current room to search for.
          schema:
            type: string
      responses:
        '200':
          description: User's current room retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomDto'
        '400':
          description: Username does not exist or is invalid.
        '401':
          description: Unauthorized
      tags:
        - users
        - rooms
      security:
        - bearer: []
  /users/{username}/block:
    post:
      operationId: blockUser
      summary: Block a given user
      description: Block the user with the given username.
      parameters:
        - name: username
          required: true
          in: path
          description: The username of the user to block.
          example: johndoe
          allowEmptyValue: false
          schema:
            type: string
      responses:
        '200':
          description: Successfully blocked the user.
        '400':
          description: Error blocking the user.
      tags:
        - users
      security:
        - bearer: []
        - bearer: []
  /users/{username}/unblock:
    post:
      operationId: unblockUser
      summary: Unblock a given user
      description: Unblock the user with the given username.
      parameters:
        - name: username
          required: true
          in: path
          description: The username of the user to unblock.
          example: johndoe
          allowEmptyValue: false
          schema:
            type: string
      responses:
        '200':
          description: Successfully unblocked the user.
        '400':
          description: Error unblocking the user.
      tags:
        - users
      security:
        - bearer: []
        - bearer: []
  /users/{username}/report:
    post:
      operationId: reportUser
      summary: Report a given user
      description: Report the user with the given username.
      parameters:
        - name: username
          required: true
          in: path
          description: The username of the user to report.
          example: johndoe
          allowEmptyValue: false
          schema:
            type: string
      responses:
        '200':
          description: Successfully reported the user.
        '400':
          description: Error reporting the user.
      tags:
        - users
      security:
        - bearer: []
        - bearer: []
  /auth/login:
    post:
      operationId: login
      summary: Authenticate a user using a Cognito JWT token
      description: >-
        This method will authenticate a user using a Cognito JWT token. The
        token is decoded and verified, and a new JWT token is generated and
        returned. See https://jwt.io/ for more information on JWT tokens.
      parameters: []
      requestBody:
        required: true
        description: Cognito JWT token
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginBody'
            examples:
              token:
                value: (see https://jwt.io/)
      responses:
        '200':
          description: User successfully logged in. JWT token returned.
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden.
      tags:
        - auth
  /auth/register:
    post:
      operationId: register
      summary: Register a new user in the API using Cognito
      description: >-
        This method will register a new user in the API using Cognito. The
        user's Cognito username, email, and Cognito sub ID are required. The
        user will be created in the our database and will be able to
        authenticate using the Cognito JWT token.
      parameters: []
      requestBody:
        required: true
        description: User's Cognito information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterBody'
            examples:
              register:
                value:
                  username: cognito-username
                  email: john@example.com
                  userCognitoSub: cognito-sub-id
      responses:
        '200':
          description: User successfully registered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterBody'
        '400':
          description: Bad request.
      tags:
        - auth
  /auth/refresh:
    post:
      operationId: refresh
      summary: Refresh an expired (or almost expired) JWT token
      description: >-
        This method will refresh an expired (or almost expired) JWT token. The
        expired token is sent in the request body, and a new JWT token is
        generated and returned. The new token will have a new expiration date.
      parameters: []
      requestBody:
        required: true
        description: The expired JWT token
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshBody'
            examples:
              register:
                value:
                  username: cognito-username
                  email: john@example.com
                  userCognitoSub: cognito-sub-id
      responses:
        '200':
          description: JWT token successfully refreshed.
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad request.
        '401':
          description: Unauthorized.
      tags:
        - auth
  /auth/spotify/callback:
    get:
      operationId: spotifyCallback
      summary: Callback for Spotify Auth
      description: >-
        Handles the Spotify auth callback, creates an account for the user (if
        necessary), authenticates the user, and returns a JWT token
      parameters:
        - name: code
          required: true
          in: query
          description: The authorization code returned by Spotify after user consent
          example: NApCCg..BkWtQ
          allowEmptyValue: false
          schema:
            type: string
        - name: state
          required: true
          in: query
          description: A unique state value to prevent CSRF attacks
          example: 34fFs29kd09
          allowEmptyValue: false
          schema:
            type: string
      responses:
        '201':
          description: The record has been successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpotifyCallbackResponse'
        '403':
          description: Forbidden.
      tags:
        - auth
  /auth/spotify/tokens:
    get:
      operationId: getSpotifyTokens
      summary: Get Spotify Auth Tokens
      description: Returns the user's Spotify Auth Tokens
      parameters: []
      responses:
        '200':
          description: The user's Spotify Auth Tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpotifyTokenPair'
        '404':
          description: User not found
      security:
        - bearer: []
        - bearer: []
      tags:
        - auth
  /auth/spotify/refresh:
    get:
      operationId: refreshSpotifyTokens
      summary: Manually Refresh Spotify Auth Tokens
      description: >-
        This method will manually refresh the user's Spotify Auth Tokens and
        return the new tokens
      parameters: []
      responses:
        '200':
          description: The user's new Spotify Auth Tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpotifyTokenResponse'
        '404':
          description: User not found
      security:
        - bearer: []
        - bearer: []
      tags:
        - auth
  /rooms:
    get:
      operationId: getRooms
      summary: Get multiple rooms
      description: Returns the rooms as an array of RoomDto.
      parameters:
        - name: q
          required: true
          in: query
          description: An array of room IDs to get info for.
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: An array of RoomDto representing the rooms.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomDto'
        '400':
          description: No rooms given
        '404':
          description: No rooms found
      security:
        - bearer: []
        - bearer: []
      tags:
        - rooms
  /rooms/new:
    get:
      operationId: getNewRooms
      summary: Get newly created public rooms
      description: Returns the new public rooms as an array of RoomDto.
      parameters: []
      responses:
        '200':
          description: The new public rooms as an array of RoomDto.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomDto'
      tags:
        - rooms
  /rooms/{roomID}:
    get:
      operationId: getRoomInfo
      summary: Get room info
      description: Returns the room info as a RoomDto.
      parameters:
        - name: roomID
          required: true
          in: path
          description: The ID of the room to get info for.
          example: 123e4567-e89b-12d3-a456-426614174000
          allowEmptyValue: false
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: The room info as a RoomDto.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomDto'
        '400':
          description: Room not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomDto'
      security:
        - bearer: []
        - bearer: []
      tags:
        - rooms
    patch:
      operationId: updateRoomInfo
      summary: Update room info
      parameters:
        - name: roomID
          required: true
          in: path
          description: The ID of the room to update.
          example: 123e4567-e89b-12d3-a456-426614174000
          allowEmptyValue: false
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        description: The updated room info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoomDto'
      responses:
        '200':
          description: Room info updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomDto'
        '404':
          description: Room not found.
      security:
        - bearer: []
        - bearer: []
      tags:
        - rooms
    put:
      operationId: putRoomInfo
      summary: Update room info
      parameters:
        - name: roomID
          required: true
          in: path
          description: The ID of the room to update.
          example: 123e4567-e89b-12d3-a456-426614174000
          allowEmptyValue: false
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        description: The updated room info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoomDto'
      responses:
        '200':
          description: Room info updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomDto'
      security:
        - bearer: []
        - bearer: []
      tags:
        - rooms
    delete:
      operationId: deleteRoom
      summary: Delete a room
      parameters:
        - name: roomID
          required: true
          in: path
          description: The ID of the room to delete.
          example: 123e4567-e89b-12d3-a456-426614174000
          allowEmptyValue: false
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: Room deleted successfully.
        '400':
          description: User is not the creator of the room.
      security:
        - bearer: []
        - bearer: []
      tags:
        - rooms
  /rooms/{roomID}/join:
    post:
      operationId: joinRoom
      summary: Join a room
      description: Adds the current user as a participant to the room.
      parameters:
        - name: roomID
          required: true
          in: path
          description: The ID of the room to join.
          example: 123e4567-e89b-12d3-a456-426614174000
          allowEmptyValue: false
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: User joined room successfully.
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: User already in room.
          content:
            application/json:
              schema:
                type: boolean
      security:
        - bearer: []
        - bearer: []
      tags:
        - rooms
  /rooms/{roomID}/leave:
    post:
      operationId: leaveRoom
      summary: Leave a room
      description: Removes the current user as a participant to the room.
      parameters:
        - name: roomID
          required: true
          in: path
          description: The ID of the room to leave.
          example: 123e4567-e89b-12d3-a456-426614174000
          allowEmptyValue: false
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: User left room successfully.
        '400':
          description: User not in room.
          content:
            application/json:
              schema:
                type: boolean
      security:
        - bearer: []
        - bearer: []
      tags:
        - rooms
  /rooms/{roomID}/users:
    get:
      operationId: getRoomUsers
      summary: Get users in a room
      description: Returns the users in the room as an array of UserDto.
      parameters:
        - name: roomID
          required: true
          in: path
          description: The ID of the room to get users for.
          example: 123e4567-e89b-12d3-a456-426614174000
          allowEmptyValue: false
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: The users in the room as an array of UserDto.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
      tags:
        - rooms
  /rooms/{roomID}/songs:
    get:
      operationId: getRoomQueue
      summary: Get the queue of a room
      description: Returns the queue of the room as an array of RoomSongDto.
      parameters:
        - name: roomID
          required: true
          in: path
          description: The ID of the room to get the queue for.
          example: 123e4567-e89b-12d3-a456-426614174000
          allowEmptyValue: false
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: The queue of the room as an array of RoomSongDto.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomSongDto'
        '401':
          description: Unauthorized
        '404':
          description: Room not found
      tags:
        - rooms
  /rooms/{roomID}/songs/current:
    get:
      operationId: getCurrentSong
      summary: Get the current song of a room
      description: Get the song currently playing in the room.
      parameters:
        - name: roomID
          required: true
          in: path
          description: The ID of the room to get the current song for.
          example: 123e4567-e89b-12d3-a456-426614174000
          allowEmptyValue: false
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: The current song of the room as a RoomSongDto.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomSongDto'
        '401':
          description: Unauthorized
        '404':
          description: Room not found
      tags:
        - rooms
  /rooms/{roomID}/share:
    post:
      operationId: shareRoom
      summary: Share a room
      description: Shares the room with the given users.
      parameters:
        - name: roomID
          required: true
          in: path
          description: The ID of the room to share.
          example: 123e4567-e89b-12d3-a456-426614174000
          allowEmptyValue: false
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        description: The user IDs of the user to share the room with.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                format: uuid
                example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        '200':
          description: Room shared successfully
        '400':
          description: No users to share with
        '401':
          description: Unauthorized
        '404':
          description: Room not found
      tags:
        - rooms
  /rooms/{roomID}/chat/history:
    get:
      operationId: getLiveChatHistory
      summary: Get the chat history of a room
      description: Returns the chat history of the room as an array of LiveChatMessageDto.
      parameters:
        - name: roomID
          required: true
          in: path
          description: The ID of the room to get the chat history for.
          example: 123e4567-e89b-12d3-a456-426614174000
          allowEmptyValue: false
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: The chat history as an array of LiveChatMessageDto.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LiveChatMessageDto'
      security:
        - bearer: []
        - bearer: []
      tags:
        - rooms
  /rooms/{roomID}/bookmark:
    post:
      operationId: bookmarkRoom
      summary: Bookmark a room
      description: Adds the room to the user's bookmarks.
      parameters:
        - name: roomID
          required: true
          in: path
          description: The ID of the room to bookmark.
          example: 123e4567-e89b-12d3-a456-426614174000
          allowEmptyValue: false
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: Room bookmarked successfully
        '401':
          description: Unauthorized
        '404':
          description: Room not found
      security:
        - bearer: []
        - bearer: []
      tags:
        - rooms
  /rooms/{roomID}/unbookmark:
    post:
      operationId: unbookmarkRoom
      summary: Unbookmark a room
      description: Removes the room from the user's bookmarks.
      parameters:
        - name: roomID
          required: true
          in: path
          description: The ID of the room to unbookmark.
          example: 123e4567-e89b-12d3-a456-426614174000
          allowEmptyValue: false
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: Room unbookmarked successfully
        '401':
          description: Unauthorized
        '404':
          description: Room not found
      security:
        - bearer: []
        - bearer: []
      tags:
        - rooms
  /rooms/{roomID}/analytics/participation:
    get:
      operationId: getRoomParticipationAnalytics
      summary: Get room participation analytics
      description: >-
        Returns the participation analytics of the room as a
        RoomAnalyticsParticipationDto.
      parameters:
        - name: roomID
          required: true
          in: path
          description: The ID of the room to get participation analytics for.
          example: 123e4567-e89b-12d3-a456-426614174000
          allowEmptyValue: false
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: >-
            The participation analytics of the room as a
            RoomAnalyticsParticipationDto.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomAnalyticsParticipationDto'
        '401':
          description: Unauthorized
      security:
        - bearer: []
        - bearer: []
      tags:
        - room analytics
  /rooms/{roomID}/analytics/interactions:
    get:
      operationId: getRoomInteractionAnalytics
      summary: Get room interaction analytics
      description: >-
        Returns the interaction analytics of the room as a
        RoomAnalyticsInteractionsDto.
      parameters:
        - name: roomID
          required: true
          in: path
          description: The ID of the room to get interaction analytics for.
          example: 123e4567-e89b-12d3-a456-426614174000
          allowEmptyValue: false
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: >-
            The interaction analytics of the room as a
            RoomAnalyticsInteractionsDto.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomAnalyticsInteractionsDto'
        '401':
          description: Unauthorized
      security:
        - bearer: []
        - bearer: []
      tags:
        - room analytics
  /rooms/analytics/{period}/keymetrics:
    get:
      operationId: getKeyMetrics
      summary: Get key metrics for user's rooms
      description: >-
        Returns the key metrics for the user's rooms as a
        RoomAnalyticsKeyMetricsDto.
      parameters:
        - name: period
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: >-
            The key metrics for the user's rooms as a
            RoomAnalyticsKeyMetricsDto.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomAnalyticsKeyMetricsDto'
        '401':
          description: Unauthorized
      security:
        - bearer: []
        - bearer: []
      tags:
        - room analytics
  /rooms/{roomID}/kicked:
    get:
      operationId: getKickedUsers
      summary: Get list of kicked users
      description: >-
        Returns an array of UserDto representing users who were been kicked from
        the room.
      parameters:
        - name: roomID
          required: true
          in: path
          description: The ID of the room to get the kicked users for.
          example: 123e4567-e89b-12d3-a456-426614174000
          allowEmptyValue: false
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: An array of UserDto representing the kicked users in the room.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
      tags:
        - room management
    post:
      operationId: kickUser
      summary: Kick someone out of a room
      description: Kicks a user out of the room.
      parameters:
        - name: roomID
          required: true
          in: path
          description: The ID of the room to kick the user from.
          example: 123e4567-e89b-12d3-a456-426614174000
          allowEmptyValue: false
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        description: The user ID of the user to be kicked.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserActionDto'
      responses:
        '200':
          description: User kicked successfully
        '400':
          description: Bad request
      security:
        - bearer: []
        - bearer: []
      tags:
        - room management
    delete:
      operationId: undoKick
      summary: Undo participant kick
      description: Undoes the kick of a participant in the room.
      parameters:
        - name: roomID
          required: true
          in: path
          description: The ID of the room to undo the kick in.
          example: 123e4567-e89b-12d3-a456-426614174000
          allowEmptyValue: false
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        description: The user ID of the user to undo the kick for.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserActionDto'
      responses:
        '200':
          description: Kick undone successfully
        '400':
          description: Bad request
      tags:
        - room management
  /rooms/{roomID}/banned:
    get:
      operationId: getBannedUsers
      summary: Get list of banned users
      description: Returns an array of UserDto representing the banned users in the room.
      parameters:
        - name: roomID
          required: true
          in: path
          description: The ID of the room to get the banned users for.
          example: 123e4567-e89b-12d3-a456-426614174000
          allowEmptyValue: false
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: An array of UserDto representing the banned users in the room.
      tags:
        - room management
    post:
      operationId: banUser
      summary: Perma ban someone from a room
      description: Permanently bans a user from the room.
      parameters:
        - name: roomID
          required: true
          in: path
          description: The ID of the room to ban the user from.
          example: 123e4567-e89b-12d3-a456-426614174000
          allowEmptyValue: false
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        description: The user ID of the user to be banned.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserActionDto'
      responses:
        '200':
          description: User banned successfully
        '400':
          description: Bad request
      tags:
        - room management
    delete:
      operationId: undoBan
      summary: Undo participant ban
      description: Undoes the ban of a participant in the room.
      parameters:
        - name: roomID
          required: true
          in: path
          description: The ID of the room to undo the ban in.
          example: 123e4567-e89b-12d3-a456-426614174000
          allowEmptyValue: false
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        description: The user ID of the user to undo the ban for.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserActionDto'
      responses:
        '200':
          description: Ban undone successfully
        '400':
          description: Bad request
      tags:
        - room management
  /rooms/{roomID}/schedule:
    get:
      operationId: getCalendarFile
      summary: Get scheduled room
      description: Returns the scheduled room as a .ics file.
      parameters:
        - name: roomID
          required: true
          in: path
          description: The ID of the room to get the schedule for.
          example: 123e4567-e89b-12d3-a456-426614174000
          allowEmptyValue: false
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: The scheduled room as a .ics file.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
            text/calendar:
              schema:
                type: string
                format: binary
        '404':
          description: Room not found
      tags:
        - rooms
  /rooms/{roomID}/save:
    post:
      operationId: saveRoom
      summary: Save room as a playlist
      parameters:
        - name: roomID
          required: true
          in: path
          description: The ID of the room to save as a playlist.
          example: 123e4567-e89b-12d3-a456-426614174000
          allowEmptyValue: false
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: Playlist saved successfully
        '400':
          description: Bad request
        '404':
          description: Room not found
      security:
        - bearer: []
        - bearer: []
      tags:
        - rooms
  /rooms/{roomID}/unsave:
    post:
      operationId: unsaveRoom
      summary: Unsave room as a playlist
      parameters:
        - name: roomID
          required: true
          in: path
          description: The ID of the room to remove from the user's playlists.
          example: 123e4567-e89b-12d3-a456-426614174000
          allowEmptyValue: false
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: Playlist removed successfully
        '400':
          description: Bad request
        '404':
          description: Room not found
      security:
        - bearer: []
        - bearer: []
      tags:
        - rooms
  /rooms/{roomID}/split:
    get:
      operationId: checkRoomSplit
      summary: Evaluate if a room can be split
      parameters:
        - name: roomID
          required: true
          in: path
          description: The ID of the room to evaluate.
          example: 123e4567-e89b-12d3-a456-426614174000
          allowEmptyValue: false
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: >-
            An array of the possible genres (if possible) or an empty array if
            not possible.
      tags:
        - rooms
    post:
      operationId: splitRoom
      summary: Returns a RoomDto with info about its split children
      parameters:
        - name: roomID
          required: true
          in: path
          description: The ID of the room to get the split children for.
          example: 123e4567-e89b-12d3-a456-426614174000
          allowEmptyValue: false
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: The RoomDto.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomDto'
      tags:
        - rooms
  /search:
    get:
      operationId: search
      summary: Search for rooms and users
      description: Search for rooms and users by room name, creator name or username.
      parameters:
        - name: q
          required: true
          in: query
          description: A room name / username
          example:
            room_name:
              value: Chill Room
            username:
              value: johndoe123
          allowEmptyValue: false
          schema:
            type: string
        - name: creator
          required: false
          in: query
          description: A room creator's profile name or username
          examples:
            profile_name:
              value: John Doe
            username:
              value: johndoe123
          schema:
            type: string
      responses:
        '200':
          description: Search results as an array of mixed UserDto and RoomDto.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CombinedSearchResults'
        '400':
          description: Invalid query parameters
      tags:
        - search
      security:
        - bearer: []
        - bearer: []
  /search/rooms:
    get:
      operationId: searchRooms
      summary: Search for rooms
      description: Search for rooms by room name or creator name / username.
      parameters:
        - name: q
          required: true
          in: query
          description: A room name
          example: Chill Room
          allowEmptyValue: false
          schema:
            type: string
        - name: creator
          required: false
          in: query
          description: A room creator's profile name / username
          examples:
            profile_name:
              value: John Doe
            username:
              value: johndoe123
          allowEmptyValue: false
          schema:
            type: string
      responses:
        '200':
          description: Search results as an array of RoomDto.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomDto'
        '400':
          description: Invalid query parameters
      tags:
        - search
      security:
        - bearer: []
        - bearer: []
  /search/history:
    get:
      operationId: searchHistory
      summary: Get search history (including objects discovered from search)
      parameters: []
      responses:
        '200':
          description: Search history as an array of strings or RoomDto, or UserDto.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CombinedSearchHistory'
      tags:
        - search
      security:
        - bearer: []
        - bearer: []
    delete:
      operationId: clearSearchHistory
      summary: Clear search history
      description: Clear search history for the user.
      parameters: []
      responses:
        '200':
          description: Search history cleared
      tags:
        - search
      security:
        - bearer: []
        - bearer: []
  /search/rooms/advanced:
    get:
      operationId: advancedSearchRooms
      summary: Advanced search for rooms
      description: Advanced search for rooms by various parameters.
      parameters:
        - name: q
          required: true
          in: query
          description: A room name
          example: Chill Room
          allowEmptyValue: false
          schema:
            type: string
        - name: creator_username
          required: false
          in: query
          description: A room creator's username
          example: johndoe123
          allowEmptyValue: false
          schema:
            type: string
        - name: creator_name
          required: false
          in: query
          description: A room creator's profile name
          example: John Doe
          allowEmptyValue: false
          schema:
            type: string
        - name: participant_count
          required: false
          in: query
          description: Minimum number of participants
          example: 5
          allowEmptyValue: false
          schema:
            type: number
        - name: description
          required: false
          in: query
          description: A string to find in the room description
          example: chill
          allowEmptyValue: false
          schema:
            type: string
        - name: is_temp
          required: false
          in: query
          description: Is the room temporary?
          schema:
            type: boolean
        - name: is_priv
          required: false
          in: query
          description: Is the room private?
          schema:
            type: boolean
        - name: is_scheduled
          required: false
          in: query
          description: Is the room scheduled?
          schema:
            type: boolean
        - name: start_date
          required: false
          in: query
          description: Only if scheduled, the start date
          schema:
            type: string
        - name: end_date
          required: false
          in: query
          description: Only if scheduled, the end date
          schema:
            type: string
        - name: lang
          required: false
          in: query
          description: The room language (as a ISO 639-1 code)
          schema:
            type: string
        - name: explicit
          required: false
          in: query
          description: Is the room explicit?
          schema:
            type: boolean
        - name: nsfw
          required: false
          in: query
          description: Is the room NSFW?
          schema:
            type: boolean
        - name: tags
          required: false
          in: query
          description: A comma separated list of tags to compare
          schema:
            type: string
      responses:
        '200':
          description: Search results as an array of RoomDto.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomDto'
        '400':
          description: Invalid query parameters
      tags:
        - search
  /search/rooms/history:
    get:
      operationId: searchRoomsHistory
      summary: Get recently searched rooms
      description: Get recently searched rooms by the user.
      parameters: []
      responses:
        '200':
          description: Recently searched rooms as an array of SearchHistoryDto.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchHistoryDto'
        '400':
          description: Invalid query parameters
      tags:
        - search
      security:
        - bearer: []
        - bearer: []
    delete:
      operationId: clearRoomsHistory
      summary: Clear room search history
      description: Clear room search history for the user.
      parameters: []
      responses:
        '200':
          description: Room search history cleared
      tags:
        - search
      security:
        - bearer: []
        - bearer: []
  /search/rooms/suggestions:
    get:
      operationId: searchRoomsSuggestion
      summary: Get recommended room search terms.
      description: Get recommended room search terms.
      parameters:
        - name: q
          required: true
          in: query
          description: A room name
          example: Chill Room
          allowEmptyValue: false
          schema:
            type: string
      responses:
        '200':
          description: room search suggestions as an array of SearchHistoryDto.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchHistoryDto'
        '400':
          description: Invalid query parameters
      tags:
        - search
  /search/users:
    get:
      operationId: searchUsers
      summary: Search for users
      description: Search for users by username or profile name.
      parameters:
        - name: q
          required: true
          in: query
          description: A username or profile name
          examples:
            username:
              value: johndoe123
            profile_name:
              value: John Doe
          allowEmptyValue: false
          schema:
            type: string
      responses:
        '200':
          description: Search results as an array of UserDto.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
        '400':
          description: Invalid query parameters
      tags:
        - search
      security:
        - bearer: []
        - bearer: []
  /search/users/advanced:
    get:
      operationId: advancedSearchUsers
      summary: Advanced search for users
      description: Advanced search for users by various parameters.
      parameters:
        - name: q
          required: true
          in: query
          description: A username or profile name
          examples:
            username:
              value: johndoe123
            profile_name:
              value: John Doe
          allowEmptyValue: false
          schema:
            type: string
        - name: creator_username
          required: false
          in: query
          description: A user's username
          example: johndoe123
          allowEmptyValue: false
          schema:
            type: string
        - name: creator_name
          required: false
          in: query
          description: A user's profile name
          example: John Doe
          allowEmptyValue: false
          schema:
            type: string
        - name: following
          required: false
          in: query
          description: Minimum number of following
          example: 10
          allowEmptyValue: false
          schema:
            type: number
        - name: followers
          required: false
          in: query
          description: Minimum number of followers
          example: 10
          allowEmptyValue: false
          schema:
            type: number
      responses:
        '200':
          description: Search results as an array of UserDto.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
        '400':
          description: Invalid query parameters
      tags:
        - search
  /search/users/history:
    get:
      operationId: searchUsersHistory
      summary: Get recently searched users
      description: Get recently searched users by the user.
      parameters: []
      responses:
        '200':
          description: Recently searched users as an array of SearchHistoryDto.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchHistoryDto'
        '400':
          description: Invalid query parameters
      tags:
        - search
      security:
        - bearer: []
        - bearer: []
    delete:
      operationId: clearUsersHistory
      summary: Clear user search history
      description: Clear user search history for the user.
      parameters: []
      responses:
        '200':
          description: User search history cleared
      tags:
        - search
      security:
        - bearer: []
        - bearer: []
  /search/users/suggestions:
    get:
      operationId: searchUsersSuggestion
      summary: Get recommended user search terms.
      description: Get recommended user search terms.
      parameters:
        - name: q
          required: true
          in: query
          description: A user name
          example: John
          allowEmptyValue: false
          schema:
            type: string
      responses:
        '200':
          description: user search suggestions as an array of SearchHistoryDto.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchHistoryDto'
        '400':
          description: Invalid query parameters
      tags:
        - search
  /genres:
    get:
      operationId: GenresController_getAllGenres
      summary: Get all genres
      description: Returns a list of all genres
      parameters: []
      responses:
        '200':
          description: List of all genres
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Something went wrong while fetching genres
          content:
            application/json:
              schema:
                type: string
      tags:
        - genres
info:
  title: TuneIn API
  description: >-
    The API for the TuneIn application, handling all the backend logic and
    making it available to the frontend.
  version: '1.0'
  contact: {}
tags: []
servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://tunein.co.za:3000
    description: Production server
components:
  securitySchemes:
    bearer:
      scheme: Bearer
      bearerFormat: Bearer
      description: 'Please enter token in following format: Bearer <JWT>'
      name: Authorization
      type: http
      in: Header
  schemas:
    LinksWithCount:
      type: object
      properties:
        count:
          type: number
        data:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
      required:
        - count
        - data
    SongInfoDto:
      type: object
      properties:
        songID:
          type: string
        title:
          type: string
        artists:
          description: The artists that performed the song
          type: array
          items:
            type: string
        cover:
          type: string
        duration:
          type: number
        spotify_id:
          type: string
        start_time:
          format: date-time
          type: string
          description: The time the song started playing
          nullable: true
      required:
        - title
        - artists
        - duration
        - spotify_id
    GenresWithCount:
      type: object
      properties:
        count:
          type: number
        data:
          type: array
          items:
            type: string
      required:
        - count
        - data
    SongInfosWithCount:
      type: object
      properties:
        count:
          type: number
        data:
          type: array
          items:
            $ref: '#/components/schemas/SongInfoDto'
      required:
        - count
        - data
    RoomsData:
      type: object
      properties:
        count:
          type: number
        data:
          type: array
          items:
            type: string
      required:
        - count
        - data
    UserDto:
      type: object
      properties:
        profile_name:
          type: string
        userID:
          type: string
        username:
          type: string
        profile_picture_url:
          type: string
        followers:
          description: The user's followers
          title: FollowersAndFollowing
          allOf:
            - $ref: '#/components/schemas/FollowersAndFollowing'
        following:
          description: The user's following
          title: FollowersAndFollowing
          allOf:
            - $ref: '#/components/schemas/FollowersAndFollowing'
        links:
          description: The user's links
          allOf:
            - $ref: '#/components/schemas/LinksWithCount'
        bio:
          type: string
        current_song:
          description: The current song the user is listening to, if applicable
          allOf:
            - $ref: '#/components/schemas/SongInfoDto'
        current_room_id:
          type: string
          description: The roomID of the room that the user is currently in, if applicable
        fav_genres:
          description: The user's favorite genres
          allOf:
            - $ref: '#/components/schemas/GenresWithCount'
        fav_songs:
          description: The user's favorite songs
          allOf:
            - $ref: '#/components/schemas/SongInfosWithCount'
        fav_rooms:
          description: The user's favorite rooms
          allOf:
            - $ref: '#/components/schemas/RoomsData'
        recent_rooms:
          description: The user's recent rooms
          allOf:
            - $ref: '#/components/schemas/RoomsData'
        hasSpotifyAccount:
          type: boolean
        relationship:
          type: string
          description: >-
            The relationship status between the current user and the user in
            question
      required:
        - profile_name
        - userID
        - username
        - profile_picture_url
        - followers
        - following
        - links
        - fav_genres
        - fav_songs
        - fav_rooms
        - recent_rooms
        - hasSpotifyAccount
    FollowersAndFollowing:
      type: object
      properties:
        count:
          type: number
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
      required:
        - count
        - data
    UpdateUserDto:
      type: object
      properties:
        profile_name:
          type: string
        userID:
          type: string
        username:
          type: string
        profile_picture_url:
          type: string
        followers:
          description: The user's followers
          title: FollowersAndFollowing
          allOf:
            - $ref: '#/components/schemas/FollowersAndFollowing'
        following:
          description: The user's following
          title: FollowersAndFollowing
          allOf:
            - $ref: '#/components/schemas/FollowersAndFollowing'
        links:
          description: The user's links
          allOf:
            - $ref: '#/components/schemas/LinksWithCount'
        bio:
          type: string
        current_song:
          description: The current song the user is listening to, if applicable
          allOf:
            - $ref: '#/components/schemas/SongInfoDto'
        current_room_id:
          type: string
          description: The roomID of the room that the user is currently in, if applicable
        fav_genres:
          description: The user's favorite genres
          allOf:
            - $ref: '#/components/schemas/GenresWithCount'
        fav_songs:
          description: The user's favorite songs
          allOf:
            - $ref: '#/components/schemas/SongInfosWithCount'
        fav_rooms:
          description: The user's favorite rooms
          allOf:
            - $ref: '#/components/schemas/RoomsData'
        recent_rooms:
          description: The user's recent rooms
          allOf:
            - $ref: '#/components/schemas/RoomsData'
        hasSpotifyAccount:
          type: boolean
        relationship:
          type: string
          description: >-
            The relationship status between the current user and the user in
            question
    DirectMessageDto:
      type: object
      properties:
        index:
          type: number
        messageBody:
          type: string
        sender:
          description: The sender of the message
          allOf:
            - $ref: '#/components/schemas/UserDto'
        recipient:
          description: The recipient of the message
          allOf:
            - $ref: '#/components/schemas/UserDto'
        dateSent:
          format: date-time
          type: string
        dateRead:
          format: date-time
          type: string
        isRead:
          type: boolean
        pID:
          type: string
        bodyIsRoomID:
          type: boolean
      required:
        - index
        - messageBody
        - sender
        - recipient
        - dateSent
        - dateRead
        - isRead
        - pID
        - bodyIsRoomID
    UserListeningStatsDto:
      type: object
      properties:
        totalListenedSongs:
          type: number
          description: The total number of songs listened to by the user
          example: 100
      required:
        - totalListenedSongs
    RoomSongDto:
      type: object
      properties:
        spotifyID:
          type: string
        userID:
          type: string
        score:
          type: number
        index:
          type: number
        startTime:
          type: number
        insertTime:
          type: number
        pauseTime:
          type: number
        playlistIndex:
          type: number
      required:
        - spotifyID
        - userID
        - score
        - index
        - insertTime
        - playlistIndex
    RoomDto:
      type: object
      properties:
        creator:
          $ref: '#/components/schemas/UserDto'
        roomID:
          type: string
        spotifyPlaylistID:
          type: string
        participant_count:
          type: number
        room_name:
          type: string
        description:
          type: string
        is_temporary:
          type: boolean
        is_private:
          type: boolean
        is_scheduled:
          type: boolean
        start_date:
          format: date-time
          type: string
        end_date:
          format: date-time
          type: string
        language:
          type: string
        has_explicit_content:
          type: boolean
        has_nsfw_content:
          type: boolean
        room_image:
          type: string
        current_song:
          description: The current song playing in the room
          allOf:
            - $ref: '#/components/schemas/RoomSongDto'
        tags:
          description: The tags that describe the room
          type: array
          items:
            type: string
        parentRoomID:
          type: string
          description: >-
            The parent of this room, if this room was created by splitting
            another
        childrenRoomIDs:
          description: Rooms created by splitting this room.
          type: array
          items:
            type: string
      required:
        - creator
        - roomID
        - spotifyPlaylistID
        - participant_count
        - room_name
        - description
        - is_temporary
        - is_private
        - is_scheduled
        - language
        - has_explicit_content
        - has_nsfw_content
        - room_image
        - tags
        - childrenRoomIDs
    CreateRoomDto:
      type: object
      properties:
        room_name:
          type: string
        description:
          type: string
        is_temporary:
          type: boolean
        is_private:
          type: boolean
        is_scheduled:
          type: boolean
        start_date:
          format: date-time
          type: string
        end_date:
          format: date-time
          type: string
        language:
          type: string
        has_explicit_content:
          type: boolean
        has_nsfw_content:
          type: boolean
        room_image:
          type: string
        tags:
          description: The tags that describe the room
          type: array
          items:
            type: string
      required:
        - room_name
        - description
        - tags
    LoginBody:
      type: object
      properties:
        token:
          type: string
          description: The Cognito JWT token
      required:
        - token
    RegisterBody:
      type: object
      properties:
        username:
          type: string
          description: The user's username
        userCognitoSub:
          type: string
          description: The user's Cognito sub/ID
        email:
          type: string
          description: The user's email address
      required:
        - username
        - userCognitoSub
        - email
    RefreshBody:
      type: object
      properties:
        refreshToken:
          type: string
          description: The JWT token to be refreshed
      required:
        - refreshToken
    SpotifyTokenResponse:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
        scope:
          type: string
        expires_in:
          type: number
        refresh_token:
          type: string
      required:
        - access_token
        - token_type
        - scope
        - expires_in
        - refresh_token
    SpotifyTokenPair:
      type: object
      properties:
        tokens:
          $ref: '#/components/schemas/SpotifyTokenResponse'
        epoch_expiry:
          type: number
      required:
        - tokens
        - epoch_expiry
    SpotifyCallbackResponse:
      type: object
      properties:
        token:
          type: string
        spotifyTokens:
          $ref: '#/components/schemas/SpotifyTokenPair'
      required:
        - token
        - spotifyTokens
    UpdateRoomDto:
      type: object
      properties:
        room_name:
          type: string
        description:
          type: string
        is_temporary:
          type: boolean
        is_private:
          type: boolean
        is_scheduled:
          type: boolean
        start_date:
          format: date-time
          type: string
        end_date:
          format: date-time
          type: string
        language:
          type: string
        has_explicit_content:
          type: boolean
        has_nsfw_content:
          type: boolean
        room_image:
          type: string
        tags:
          description: The tags that describe the room
          type: array
          items:
            type: string
    LiveChatMessageDto:
      type: object
      properties:
        messageID:
          type: string
        messageBody:
          type: string
        sender:
          $ref: '#/components/schemas/UserDto'
        roomID:
          type: string
        dateCreated:
          format: date-time
          type: string
      required:
        - messageID
        - messageBody
        - sender
        - roomID
    ParticipantsPerHourDto:
      type: object
      properties:
        count:
          type: number
          description: The number of participants in the room at the given hour
        instance:
          format: date-time
          type: string
          description: The specific hour for participant count
      required:
        - count
        - instance
    RoomAnalyticsParticipationDto:
      type: object
      properties:
        joins:
          type: object
          title: Joins
          description: >-
            Join statistics, including total and unique joins per day and
            all-time
          properties:
            per_day:
              title: JoinsPerDay
              type: object
            all_time:
              title: JoinsAllTime
              type: object
              properties:
                total_joins:
                  type: number
                unique_joins:
                  type: number
        participants_per_hour:
          description: Participants per hour data
          type: array
          items:
            $ref: '#/components/schemas/ParticipantsPerHourDto'
        session_data:
          type: object
          title: SessionData
          description: >-
            Session data including average, minimum, and maximum duration
            all-time and per day
          properties:
            all_time:
              type: object
              title: AllTimeSessionDataDto
            per_day:
              type: array
              items:
                type: object
                title: SessionDurationPerDayDto
        return_visits:
          type: object
          title: ReturnVisits
          description: Expected return visits and probability of return
          properties:
            expected_return_count:
              type: number
            probability_of_return:
              type: number
        room_previews:
          type: number
          description: Number of previews of the room, i.e. without joining
      required:
        - joins
        - participants_per_hour
        - session_data
        - return_visits
        - room_previews
    RoomAnalyticsInteractionsDto:
      type: object
      properties:
        messages:
          type: object
          title: Messages
          description: Total messages sent and messages sent per hour
          properties:
            total:
              type: number
            per_hour:
              type: array
              items:
                title: MessagesPerHour
                type: object
        reactions_sent:
          type: number
          description: Total number of reactions sent in the room
        bookmarked_count:
          type: number
          description: Number of times the room was bookmarked
      required:
        - messages
        - reactions_sent
        - bookmarked_count
    RoomAnalyticsKeyMetricsDto:
      type: object
      properties:
        unique_visitors:
          type: object
          title: UniqueVisitors
          description: Unique visitors to the user's rooms
          properties:
            count:
              type: number
            percentage_change:
              type: number
        returning_visitors:
          type: object
          title: ReturningVisitors
          description: Returning visitors to the user's rooms
          properties:
            count:
              type: number
            percentage_change:
              type: number
        average_session_duration:
          type: object
          title: AverageSessionDuration
          description: Average session duration in the user's rooms
          properties:
            duration:
              type: number
            percentage_change:
              type: number
      required:
        - unique_visitors
        - returning_visitors
        - average_session_duration
    UserActionDto:
      type: object
      properties:
        userID:
          type: string
          description: The user ID of the user that the action was performed on
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
      required:
        - userID
    CombinedSearchResults:
      type: object
      properties:
        rooms:
          description: List of rooms
          type: array
          items:
            $ref: '#/components/schemas/RoomDto'
        users:
          description: List of users
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
      required:
        - rooms
        - users
    CombinedSearchHistory:
      type: object
      properties:
        results:
          description: Mixed list of rooms, users, or strings
          items:
            type: object
          type: array
      required:
        - results
    SearchHistoryDto:
      type: object
      properties:
        search_term:
          type: string
        search_time:
          format: date-time
          type: string
        url:
          type: string
      required:
        - search_term
        - search_time
        - url
